<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Node.Js Websocket Proxy on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/categories/node.js-websocket-proxy/index.xml</link>
    <description>Recent content in Node.Js Websocket Proxy on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/categories/node.js-websocket-proxy/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>node-http-proxyでバーチャルホストで振り分けつつhttp/https-&gt;websocketリバースプロキシの実験</title>
      <link>https://hnakamur.github.io/blog/2012/06/27/node-http-proxydebatiyaruhosutodezhen-rifen-ketutuhttp-slash-https-websocketribasupurokisifalseshi-yan/</link>
      <pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/06/27/node-http-proxydebatiyaruhosutodezhen-rifen-ketutuhttp-slash-https-websocketribasupurokisifalseshi-yan/</guid>
      <description>

&lt;p&gt;以下の2つのページを参考に、node-http-proxyでバーチャルホストで振り分けつつ
http/httpsからwebsocketにリバースプロキシする実験をしてみました。
環境はCentOS 6.2です。ソースは&lt;a href=&#34;https://github.com/hnakamur/node-http-proxy-websocket-sample&#34;&gt;hnakamur/node-http-proxy-websocket-sample&lt;/a&gt;にあります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/replication/20111108/1320762287&#34;&gt;５分くらいで出来るnode.js(0.6) + socket.io(0.8x)のサンプルプログラム - 大人になったら肺呼吸&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/nodejitsu/node-http-proxy&#34;&gt;nodejitsu/node-http-proxy&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;
                              +---------------+
                       +------+ VHost1App/app |
                       |      | port 3000     |
 +--------------+      |      +---------------+
-+ proxy-vhost  +------+
 | port 80, 443 |      |      +---------------+
 +--------------+      +------+ VHost2App/app |
                              | port 3001     |
                              +---------------+
&lt;/pre&gt;

&lt;p&gt;上記の構成で、
vhost1.example.comというホスト名でアクセスしたらVHost1/app、
vhost2.example.comというホスト名でアクセスしたらVHost2/app
にリバースプロキシするようにします。
*.example.comというワイルドカードの自己証明書でproxy-vhostにてSSLを処理します。&lt;/p&gt;

&lt;h2 id=&#34;実行手順&#34;&gt;実行手順&lt;/h2&gt;

&lt;h3 id=&#34;自己証明書とパスフレーズ無しの秘密鍵を生成&#34;&gt;自己証明書とパスフレーズ無しの秘密鍵を生成。&lt;/h3&gt;

&lt;p&gt;以下、ドメインexample.comの部分は適宜変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;openssl req -new -newkey rsa:2048 -x509 -nodes -days 365 -set_serial 0 \
  -subj &#39;/C=JP/ST=Kanagawa/L=Yokohama City/CN=*.example.com&#39; \
  -out /etc/pki/tls/certs/wildcard.example.com.crt \
  -keyout /etc/pki/tls/private/wildcard.example.com.key
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;nodeモジュールインストール&#34;&gt;nodeモジュールインストール&lt;/h3&gt;

&lt;p&gt;私の環境では/usr/local/node-v0.6.19にnode.jsをインストールしているのでPATHを通してから実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export PATH=/usr/local/node-v0.6.19/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;npm install socket.io -g
npm install express@2.5.10 -g
npm install ejs -g
npm install http-proxy -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、モジュールをグルーバルにインストールしているのは&lt;a href=&#34;https://github.com/hnakamur/node-http-proxy-websocket-sample&#34;&gt;hnakamur/node-http-proxy-websocket-sample&lt;/a&gt;にモジュールを含めたくないからで、実際はローカルにインストールしても構いません。&lt;/p&gt;

&lt;h3 id=&#34;サーバ起動&#34;&gt;サーバ起動&lt;/h3&gt;

&lt;p&gt;私の環境では/usr/local/node-v0.6.19にnode.jsをインストールしているのでNODE_PATHを通してから実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export NODE_PATH=/usr/local/node-v0.6.19/lib/node_modules
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;node VHost1App/app &amp;amp;
node VHost2App/app &amp;amp;
node proxy-vhost &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ローカルマシンの-etc-hostsに以下のエントリ追加&#34;&gt;ローカルマシンの/etc/hostsに以下のエントリ追加&lt;/h3&gt;

&lt;p&gt;IPアドレスは実際のサーバに合わせて変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;192.0.2.2 vhost1.example.com vhost2.example.com
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ブラウザでアクセス&#34;&gt;ブラウザでアクセス&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://vhost1.example.com/&#34;&gt;https://vhost1.example.com/&lt;/a&gt;
や
&lt;a href=&#34;https://vhost2.example.com/&#34;&gt;https://vhost2.example.com/&lt;/a&gt;
にアクセスします。自己証明書なのでエラーになりますが受け入れて進んでください。
バーチャルホスト毎にそれぞれ内容が異なることを確認します。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>