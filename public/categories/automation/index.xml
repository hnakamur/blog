<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automation on hnakamur&#39;s blog at github</title>
    <link>/blog/categories/automation/</link>
    <description>Recent content in Automation on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Mon, 06 Apr 2015 04:40:43 +0900</lastBuildDate>
    <atom:link href="/blog/categories/automation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JXA (JavaScript for Automation)を使ってOSXの初期設定を半自動化してみた</title>
      <link>/blog/public/2015/04/06/jxa-osx-automation-with-javascript/</link>
      <pubDate>Mon, 06 Apr 2015 04:40:43 +0900</pubDate>
      
      <guid>/blog/public/2015/04/06/jxa-osx-automation-with-javascript/</guid>
      <description>

&lt;h2 id=&#34;概要:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;OSXを再インストールしたときなどキーボードやトラックパッドの設定を行いますが、
設定する項目が意外と多くて時間がかかります。&lt;/p&gt;

&lt;p&gt;そこでJXA (JavaScript for Automation)で自動化してみました。
全自動ではなく半自動化と書いているのはパスワードの入力などは手動で行う必要があるからです。&lt;/p&gt;

&lt;h2 id=&#34;きっかけはapplescriptのui-elementsの記事を読んだこと:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;きっかけはAppleScriptのUI elementsの記事を読んだこと&lt;/h2&gt;

&lt;p&gt;以前からAppleScriptでOSXの初期設定の自動化をやってみたかったのですが、
UI要素の調べ方がわからず諦めていました。&lt;/p&gt;

&lt;p&gt;StackOverflowの&lt;a href=&#34;http://apple.stackexchange.com/questions/40436/how-to-know-the-name-of-ui-elements-using-accessibility-inspector-or-any-other/87412#87412&#34;&gt;applescript - How to know the name of UI elements using Accessibility inspector (or any other tool) - Ask Different&lt;/a&gt;のコメントから
&lt;a href=&#34;http://n8henrie.com/2013/03/a-strategy-for-ui-scripting-in-applescript/&#34;&gt;n8henrie.com | A Strategy for UI Scripting in AppleScript&lt;/a&gt;という記事を見つけて、これがブレイクスルーになりました。&lt;/p&gt;

&lt;p&gt;で、いろいろ試していくうちにJavaScriptで書くほうがクロージャが使えて便利ということに気づいたのでJavaScriptに切り替えました。&lt;/p&gt;

&lt;p&gt;以下の記事が参考になりました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dtinth/JXA-Cookbook/wiki&#34;&gt;Home · dtinth/JXA-Cookbook Wiki · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zakuroishikuro/items/afab0e33ad2030ba2f92&#34;&gt;Macのキーボード入力、マウスクリックをJavaScriptで (JXA) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;自分用セットアップスクリプト:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;自分用セットアップスクリプト&lt;/h2&gt;

&lt;p&gt;私用のセットアップスクリプトを&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup&#34;&gt;hnakamur/my-macbook-initial-setup · GitHub&lt;/a&gt;に置きました。完全に自分仕様ですが、ライセンスはMITなので適宜変更してご利用ください。&lt;/p&gt;

&lt;h2 id=&#34;applescriptやjxaで設定している内容:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;AppleScriptやJXAで設定している内容&lt;/h2&gt;

&lt;p&gt;最初はAppleScriptで書いていたので一部はそのままです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Store経由でのXcodeのインストール&lt;/li&gt;
&lt;li&gt;Xcodeコマンドラインツールのインストール&lt;/li&gt;
&lt;li&gt;キーボードの設定

&lt;ul&gt;
&lt;li&gt;リピート率の設定&lt;/li&gt;
&lt;li&gt;ControlとCapsの入れ替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;トラックパッドの設定

&lt;ul&gt;
&lt;li&gt;使う機能と使わない機能の設定&lt;/li&gt;
&lt;li&gt;ドラッグロック設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ショートカットキーの設定

&lt;ul&gt;
&lt;li&gt;次のウィンドウのショートカットキー変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スクリーンロックのタイミング調整&lt;/li&gt;
&lt;li&gt;キーボードの入力ソースにGoogle日本語入力のひらがなを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;のショートカット追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mstarke.github.io/MacPass/&#34;&gt;MacPass&lt;/a&gt;のメニューショートカット設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;applescriptに比べてjxaが嬉しいところ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;AppleScriptに比べてJXAが嬉しいところ&lt;/h2&gt;

&lt;p&gt;上にも書きましたが、クロージャが使えるのが便利です。&lt;/p&gt;

&lt;p&gt;例えば特定の要素が出現するまで待つために以下の様な関数を定義しました。
&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isInvalidIndexError(e) {
  return e.toString() === &#39;Error: Invalid index.&#39;
}
function waitUntilSuccess(f) {
  var ret
  do {
    delay(1)
    try {
      ret = f()
    } catch (e) {
      if (!isInvalidIndexError(e)) {
        throw e
      }
    }
  } while (!ret)
  return ret
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで使用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var storeProc = Application(&#39;System Events&#39;).processes.byName(&#39;App Store&#39;)
  storeProc.frontmost = true
  var win = storeProc.windows.byName(&#39;App Store&#39;)
  // Search for Xcode
  var textField = waitUntilSuccess(function() {
    return win.toolbars[0].groups[6].textFields[0]
  })
  textField.value = &#39;Xcode&#39;
  textField.buttons[0].click()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;try catchを使わずにUI要素の存在をチェックするのは、上のように深い要素だと
面倒なので、アクセスするコードを動かしてみて &lt;code&gt;Error: Invalid index.&lt;/code&gt; の
エラーが出たら要素が存在しないと判断するようにしています。&lt;/p&gt;

&lt;h2 id=&#34;うまくいってないところ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;うまくいってないところ&lt;/h2&gt;

&lt;h3 id=&#34;sparkのショートカット追加がうまくいかないときがある:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;Sparkのショートカット追加がうまくいかないときがある&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;というアプリを使って
ショートカットを登録しておくと、キーボードの1ストロークで登録したアプリの
起動や起動済みの場合は最前面に持ってこれるので愛用しています。&lt;/p&gt;

&lt;p&gt;フリーですがソースは非公開で設定ファイル形式も不明なのでJXAで登録しています。&lt;/p&gt;

&lt;p&gt;しかし、アプリケーションのパスを選ぶところが、うまくいくときと行かない時があります。ファイル選択画面でパスを/から入力すると選べるのでその方式で実装しているのですが、 例えばFinderのパスを &lt;code&gt;/System/Library/CoreServices/Finder.app&lt;/code&gt; のように入力してreturnキーを押す操作をJXAで行うと、そのフォルダの中が開いた状態になってしまう時があります。&lt;/p&gt;

&lt;p&gt;カラムビューにすると成功するようだったので⌘3を押して切り替えるようにしてみたのですが、2秒ディレイを入れても全体を通して実行していると途中から失敗することがあります。&lt;/p&gt;

&lt;p&gt;その後run.shを書き換えてSparkのショートカット設定の部分だけ実行すると、うまくいきます。なぜ全体を通して実行した時は失敗するのかが謎です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;上記のように一部問題はありますが、大部分の操作は自動化できたので、全て手動で設定するのに比べるとずいぶん楽になりました。JXA (JavaScript for Automation)便利です。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>