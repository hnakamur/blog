<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Automation on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/categories/automation/index.xml</link>
    <description>Recent content in Automation on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/categories/automation/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JXA (JavaScript for Automation)を使ってOSXの初期設定を半自動化してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/06/jxa-osx-automation-with-javascript/</link>
      <pubDate>Mon, 06 Apr 2015 04:40:43 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/06/jxa-osx-automation-with-javascript/</guid>
      <description>

&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;OSXを再インストールしたときなどキーボードやトラックパッドの設定を行いますが、
設定する項目が意外と多くて時間がかかります。&lt;/p&gt;

&lt;p&gt;そこでJXA (JavaScript for Automation)で自動化してみました。
全自動ではなく半自動化と書いているのはパスワードの入力などは手動で行う必要があるからです。&lt;/p&gt;

&lt;h2 id=&#34;きっかけはapplescriptのui-elementsの記事を読んだこと&#34;&gt;きっかけはAppleScriptのUI elementsの記事を読んだこと&lt;/h2&gt;

&lt;p&gt;以前からAppleScriptでOSXの初期設定の自動化をやってみたかったのですが、
UI要素の調べ方がわからず諦めていました。&lt;/p&gt;

&lt;p&gt;StackOverflowの&lt;a href=&#34;http://apple.stackexchange.com/questions/40436/how-to-know-the-name-of-ui-elements-using-accessibility-inspector-or-any-other/87412#87412&#34;&gt;applescript - How to know the name of UI elements using Accessibility inspector (or any other tool) - Ask Different&lt;/a&gt;のコメントから
&lt;a href=&#34;http://n8henrie.com/2013/03/a-strategy-for-ui-scripting-in-applescript/&#34;&gt;n8henrie.com | A Strategy for UI Scripting in AppleScript&lt;/a&gt;という記事を見つけて、これがブレイクスルーになりました。&lt;/p&gt;

&lt;p&gt;で、いろいろ試していくうちにJavaScriptで書くほうがクロージャが使えて便利ということに気づいたのでJavaScriptに切り替えました。&lt;/p&gt;

&lt;p&gt;以下の記事が参考になりました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dtinth/JXA-Cookbook/wiki&#34;&gt;Home · dtinth/JXA-Cookbook Wiki · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zakuroishikuro/items/afab0e33ad2030ba2f92&#34;&gt;Macのキーボード入力、マウスクリックをJavaScriptで (JXA) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;自分用セットアップスクリプト&#34;&gt;自分用セットアップスクリプト&lt;/h2&gt;

&lt;p&gt;私用のセットアップスクリプトを&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup&#34;&gt;hnakamur/my-macbook-initial-setup · GitHub&lt;/a&gt;に置きました。完全に自分仕様ですが、ライセンスはMITなので適宜変更してご利用ください。&lt;/p&gt;

&lt;h2 id=&#34;applescriptやjxaで設定している内容&#34;&gt;AppleScriptやJXAで設定している内容&lt;/h2&gt;

&lt;p&gt;最初はAppleScriptで書いていたので一部はそのままです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Store経由でのXcodeのインストール&lt;/li&gt;
&lt;li&gt;Xcodeコマンドラインツールのインストール&lt;/li&gt;
&lt;li&gt;キーボードの設定

&lt;ul&gt;
&lt;li&gt;リピート率の設定&lt;/li&gt;
&lt;li&gt;ControlとCapsの入れ替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;トラックパッドの設定

&lt;ul&gt;
&lt;li&gt;使う機能と使わない機能の設定&lt;/li&gt;
&lt;li&gt;ドラッグロック設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ショートカットキーの設定

&lt;ul&gt;
&lt;li&gt;次のウィンドウのショートカットキー変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スクリーンロックのタイミング調整&lt;/li&gt;
&lt;li&gt;キーボードの入力ソースにGoogle日本語入力のひらがなを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;のショートカット追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mstarke.github.io/MacPass/&#34;&gt;MacPass&lt;/a&gt;のメニューショートカット設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;applescriptに比べてjxaが嬉しいところ&#34;&gt;AppleScriptに比べてJXAが嬉しいところ&lt;/h2&gt;

&lt;p&gt;上にも書きましたが、クロージャが使えるのが便利です。&lt;/p&gt;

&lt;p&gt;例えば特定の要素が出現するまで待つために以下の様な関数を定義しました。
&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isInvalidIndexError(e) {
  return e.toString() === &#39;Error: Invalid index.&#39;
}
function waitUntilSuccess(f) {
  var ret
  do {
    delay(1)
    try {
      ret = f()
    } catch (e) {
      if (!isInvalidIndexError(e)) {
        throw e
      }
    }
  } while (!ret)
  return ret
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで使用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var storeProc = Application(&#39;System Events&#39;).processes.byName(&#39;App Store&#39;)
  storeProc.frontmost = true
  var win = storeProc.windows.byName(&#39;App Store&#39;)
  // Search for Xcode
  var textField = waitUntilSuccess(function() {
    return win.toolbars[0].groups[6].textFields[0]
  })
  textField.value = &#39;Xcode&#39;
  textField.buttons[0].click()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;try catchを使わずにUI要素の存在をチェックするのは、上のように深い要素だと
面倒なので、アクセスするコードを動かしてみて &lt;code&gt;Error: Invalid index.&lt;/code&gt; の
エラーが出たら要素が存在しないと判断するようにしています。&lt;/p&gt;

&lt;h2 id=&#34;うまくいってないところ&#34;&gt;うまくいってないところ&lt;/h2&gt;

&lt;h3 id=&#34;sparkのショートカット追加がうまくいかないときがある&#34;&gt;Sparkのショートカット追加がうまくいかないときがある&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;というアプリを使って
ショートカットを登録しておくと、キーボードの1ストロークで登録したアプリの
起動や起動済みの場合は最前面に持ってこれるので愛用しています。&lt;/p&gt;

&lt;p&gt;フリーですがソースは非公開で設定ファイル形式も不明なのでJXAで登録しています。&lt;/p&gt;

&lt;p&gt;しかし、アプリケーションのパスを選ぶところが、うまくいくときと行かない時があります。ファイル選択画面でパスを/から入力すると選べるのでその方式で実装しているのですが、 例えばFinderのパスを &lt;code&gt;/System/Library/CoreServices/Finder.app&lt;/code&gt; のように入力してreturnキーを押す操作をJXAで行うと、そのフォルダの中が開いた状態になってしまう時があります。&lt;/p&gt;

&lt;p&gt;カラムビューにすると成功するようだったので⌘3を押して切り替えるようにしてみたのですが、2秒ディレイを入れても全体を通して実行していると途中から失敗することがあります。&lt;/p&gt;

&lt;p&gt;その後run.shを書き換えてSparkのショートカット設定の部分だけ実行すると、うまくいきます。なぜ全体を通して実行した時は失敗するのかが謎です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;上記のように一部問題はありますが、大部分の操作は自動化できたので、全て手動で設定するのに比べるとずいぶん楽になりました。JXA (JavaScript for Automation)便利です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homebrew Caskを使わずにdmgファイルのアプリをコマンドでインストールする</title>
      <link>https://hnakamur.github.io/blog/2015/04/06/install-apps-without-homebrew-cask/</link>
      <pubDate>Mon, 06 Apr 2015 00:45:50 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/06/install-apps-without-homebrew-cask/</guid>
      <description>

&lt;h2 id=&#34;なぜhomebrew-caskをやめたか&#34;&gt;なぜHomebrew Caskをやめたか&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://t-wada.hatenablog.jp/entry/mac-provisioning-by-ansible&#34;&gt;Mac の開発環境構築を自動化する (2015 年初旬編) - t-wadaのブログ&lt;/a&gt;でもHomebrew Caskの不安な点について書かれていますが、私もHomebrew Caskは便利と思いつつも止めたいなと思っていました。&lt;/p&gt;

&lt;p&gt;私が使うアプリに関してはほとんどがアプリ側で最新版のお知らせとバージョンアップの仕組みを持っています。あとHomebrew Caskは/opt/homebrew-cask/以下に実体を置いて~/Applications/や/Applications/にシンボリックリンクを貼るようになっています。&lt;/p&gt;

&lt;p&gt;私はそこまで複雑な仕組みは要らないので、初期インストールがコマンドで半自動化できれば十分です。&lt;/p&gt;

&lt;h2 id=&#34;dmgファイルのアプリをコマンドラインからインストールする&#34;&gt;dmgファイルのアプリをコマンドラインからインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22934083/install-dmg-package-on-mac-os-from-terminal/22940943#22940943&#34;&gt;osx - Install dmg package on MAC OS from Terminal - Stack Overflow&lt;/a&gt;や&lt;a href=&#34;http://commandlinemac.blogspot.jp/2008/12/installing-dmg-application-from-command.html&#34;&gt;Command Line Mac: Installing a .dmg application from the command line&lt;/a&gt;を見て実際にやってみました。&lt;/p&gt;

&lt;p&gt;ソースは&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup&#34;&gt;hnakamur/my-macbook-initial-setup · GitHub&lt;/a&gt;にあります。&lt;/p&gt;

&lt;p&gt;以下のアプリをdmgファイルからインストールしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/splhack/macvim-kaoriya&#34;&gt;splhack/macvim-kaoriya · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://calibre-ebook.com/&#34;&gt;calibre - E-book management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.jp/chrome/browser/desktop/index.html&#34;&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mozilla.org/ja/firefox/new/&#34;&gt;Firefox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.jp/ime/&#34;&gt;Google 日本語入力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iterm2.com/&#34;&gt;iTerm2 - Mac OS Terminal Replacement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://java.com/ja/download/&#34;&gt;Java (JRE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://grandperspectiv.sourceforge.net/&#34;&gt;GrandPerspective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www-jp.mysql.com/products/workbench/&#34;&gt;MySQL Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mstarke.github.io/MacPass/&#34;&gt;MacPass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;Oracle VM VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xquartz.macosforge.org/landing/&#34;&gt;XQuartz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dmgファイルのマウントとアンマウント&#34;&gt;dmgファイルのマウントとアンマウント&lt;/h2&gt;

&lt;p&gt;共通の処理として、dmgファイルのマウントは &lt;code&gt;hdiutil attach&lt;/code&gt; 、アンマウントは &lt;code&gt;hdiutil detach&lt;/code&gt; コマンドで行います。&lt;/p&gt;

&lt;p&gt;マウントした時の /Volumes/〜 のディレクトリ名は &lt;code&gt;hdiutil attach&lt;/code&gt; の実行結果の最後の行から取得できます。&lt;/p&gt;

&lt;p&gt;最初は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mount_dir=`hdiutil attach $dmg_file | awk &#39;END{print $NF}&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにして最後の行の一番右のフィールドを取得していましたが、 &lt;code&gt;/Volumes/Google Chrome&lt;/code&gt; のように空白を含む場合があることがわかりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22934083/install-dmg-package-on-mac-os-from-terminal/22940943#22940943&#34;&gt;osx - Install dmg package on MAC OS from Terminal - Stack Overflow&lt;/a&gt;では第1フィールドと第2フィールドを消して第3フィールド以降にしていますが、試してみると余分な空白（実際はタブと判明）が付いてきました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hdiutil attach&lt;/code&gt; の結果をファイルに落として見てみたら、空白に加えてタブで区切られていてタブで区切るほうがシンプルなことがわかりました。&lt;/p&gt;

&lt;p&gt;そこで、以下のようにして取得するようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インストール方法のパターン&#34;&gt;インストール方法のパターン&lt;/h2&gt;

&lt;p&gt;上記のアプリの範囲では4パターンありました。&lt;/p&gt;

&lt;h3 id=&#34;dmgファイル内に-appフォルダがあるパターン&#34;&gt;dmgファイル内に〜.appフォルダがあるパターン&lt;/h3&gt;

&lt;p&gt;Chromeなどがこのパターンです。&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/ditto.1.html&#34;&gt;ditto&lt;/a&gt;コマンドで/Applications/〜.appにコピーするようにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L731-L740&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L731-L740&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_google_chrome() {
  download_url=https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg
  dmg_file=${download_url##*/}

  curl -LO $download_url
  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
  sudo /usr/bin/ditto &amp;quot;$mount_dir/Google Chrome.app&amp;quot; &amp;quot;/Applications/Google Chrome.app&amp;quot;
  hdiutil detach &amp;quot;$mount_dir&amp;quot;
  rm $dmg_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dmgファイル内に-pkgのインストーラがあるパターン&#34;&gt;dmgファイル内に*.pkgのインストーラがあるパターン&lt;/h3&gt;

&lt;p&gt;Google日本語入力などがこのパターンです。OSXの&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/installer.8.html&#34;&gt;installer&lt;/a&gt;コマンドでインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L742-L751&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L742-L751&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_google_japanese_input() {
  download_url=https://dl.google.com/japanese-ime/latest/GoogleJapaneseInput.dmg
  dmg_file=${download_url##*/}

  curl -LO $download_url
  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
  sudo installer -pkg $mount_dir/GoogleJapaneseInput.pkg -target /
  hdiutil detach &amp;quot;$mount_dir&amp;quot;
  rm $dmg_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dmgファイル内に独自形式のインストーラがあるパターン&#34;&gt;dmgファイル内に独自形式のインストーラがあるパターン&lt;/h3&gt;

&lt;p&gt;Javaがこのパターンでした。インストーラを実行してインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L762-L772&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L762-L772&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_java() {
  download_url=http://javadl.sun.com/webapps/download/AutoDL?BundleId=105219
  dmg_file=jre.dmg

  curl -L -o $dmg_file &amp;quot;$download_url&amp;quot;
  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
  java_dir=&amp;quot;${mount_dir##*/}&amp;quot;
  sudo &amp;quot;$mount_dir/${java_dir}.app/Contents/MacOS/MacJREInstaller&amp;quot;
  hdiutil detach &amp;quot;$mount_dir&amp;quot;
  rm $dmg_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zipファイル内に-appがあるパターン&#34;&gt;zipファイル内に〜.appがあるパターン&lt;/h3&gt;

&lt;p&gt;iTerm2などがこのパターンです。unzipコマンドの-dオプションで解凍先を/Applicationsにして解凍してインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L753-L760&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L753-L760&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_iterm2() {
  download_url=https://iterm2.com/downloads/stable/iTerm2_v2_0.zip
  zip_file=${download_url##*/}

  curl -LO $download_url
  sudo unzip $zip_file -d /Applications
  rm $zip_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Homebrew Caskを使わずにコマンドラインでOSXのアプリのインストールを半自動化しました。全自動ではなく半自動化といっているのは、アプリによってパスワード入力が必要だったり、ダイアログが表示されてボタンを押す必要があるからです。&lt;/p&gt;

&lt;p&gt;アプリのバージョンが今後上がった時にダウンロードURLを再度調べる必要があるのが面倒ではありますが、OSXを一からセットアップするのはたまにしか行わないのでよしとします。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>