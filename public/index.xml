<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hnakamur&#39;s blog at github</title>
    <link>/blog/</link>
    <description>Recent content on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Mon, 06 Apr 2015 04:40:43 +0900</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>JXA (JavaScript for Automation)を使ってOSXの初期設定を半自動化してみた</title>
      <link>/blog/2015/04/06/jxa-osx-automation-with-javascript/</link>
      <pubDate>Mon, 06 Apr 2015 04:40:43 +0900</pubDate>
      
      <guid>/blog/2015/04/06/jxa-osx-automation-with-javascript/</guid>
      <description>

&lt;h2 id=&#34;概要:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;OSXを再インストールしたときなどキーボードやトラックパッドの設定を行いますが、
設定する項目が意外と多くて時間がかかります。&lt;/p&gt;

&lt;p&gt;そこでJXA (JavaScript for Automation)で自動化してみました。
全自動ではなく半自動化と書いているのはパスワードの入力などは手動で行う必要があるからです。&lt;/p&gt;

&lt;h2 id=&#34;きっかけはapplescriptのui-elementsの記事を読んだこと:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;きっかけはAppleScriptのUI elementsの記事を読んだこと&lt;/h2&gt;

&lt;p&gt;以前からAppleScriptでOSXの初期設定の自動化をやってみたかったのですが、
UI要素の調べ方がわからず諦めていました。&lt;/p&gt;

&lt;p&gt;StackOverflowの&lt;a href=&#34;http://apple.stackexchange.com/questions/40436/how-to-know-the-name-of-ui-elements-using-accessibility-inspector-or-any-other/87412#87412&#34;&gt;applescript - How to know the name of UI elements using Accessibility inspector (or any other tool) - Ask Different&lt;/a&gt;のコメントから
&lt;a href=&#34;http://n8henrie.com/2013/03/a-strategy-for-ui-scripting-in-applescript/&#34;&gt;n8henrie.com | A Strategy for UI Scripting in AppleScript&lt;/a&gt;という記事を見つけて、これがブレイクスルーになりました。&lt;/p&gt;

&lt;p&gt;で、いろいろ試していくうちにJavaScriptで書くほうがクロージャが使えて便利ということに気づいたのでJavaScriptに切り替えました。&lt;/p&gt;

&lt;p&gt;以下の記事が参考になりました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dtinth/JXA-Cookbook/wiki&#34;&gt;Home · dtinth/JXA-Cookbook Wiki · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zakuroishikuro/items/afab0e33ad2030ba2f92&#34;&gt;Macのキーボード入力、マウスクリックをJavaScriptで (JXA) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;自分用セットアップスクリプト:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;自分用セットアップスクリプト&lt;/h2&gt;

&lt;p&gt;私用のセットアップスクリプトを&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup&#34;&gt;hnakamur/my-macbook-initial-setup · GitHub&lt;/a&gt;に置きました。完全に自分仕様ですが、ライセンスはMITなので適宜変更してご利用ください。&lt;/p&gt;

&lt;h2 id=&#34;applescriptやjxaで設定している内容:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;AppleScriptやJXAで設定している内容&lt;/h2&gt;

&lt;p&gt;最初はAppleScriptで書いていたので一部はそのままです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Store経由でのXcodeのインストール&lt;/li&gt;
&lt;li&gt;Xcodeコマンドラインツールのインストール&lt;/li&gt;
&lt;li&gt;キーボードの設定

&lt;ul&gt;
&lt;li&gt;リピート率の設定&lt;/li&gt;
&lt;li&gt;ControlとCapsの入れ替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;トラックパッドの設定

&lt;ul&gt;
&lt;li&gt;使う機能と使わない機能の設定&lt;/li&gt;
&lt;li&gt;ドラッグロック設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ショートカットキーの設定

&lt;ul&gt;
&lt;li&gt;次のウィンドウのショートカットキー変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スクリーンロックのタイミング調整&lt;/li&gt;
&lt;li&gt;キーボードの入力ソースにGoogle日本語入力のひらがなを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;のショートカット追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mstarke.github.io/MacPass/&#34;&gt;MacPass&lt;/a&gt;のメニューショートカット設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;applescriptに比べてjxaが嬉しいところ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;AppleScriptに比べてJXAが嬉しいところ&lt;/h2&gt;

&lt;p&gt;上にも書きましたが、クロージャが使えるのが便利です。&lt;/p&gt;

&lt;p&gt;例えば特定の要素が出現するまで待つために以下の様な関数を定義しました。
&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isInvalidIndexError(e) {
  return e.toString() === &#39;Error: Invalid index.&#39;
}
function waitUntilSuccess(f) {
  var ret
  do {
    delay(1)
    try {
      ret = f()
    } catch (e) {
      if (!isInvalidIndexError(e)) {
        throw e
      }
    }
  } while (!ret)
  return ret
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで使用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var storeProc = Application(&#39;System Events&#39;).processes.byName(&#39;App Store&#39;)
  storeProc.frontmost = true
  var win = storeProc.windows.byName(&#39;App Store&#39;)
  // Search for Xcode
  var textField = waitUntilSuccess(function() {
    return win.toolbars[0].groups[6].textFields[0]
  })
  textField.value = &#39;Xcode&#39;
  textField.buttons[0].click()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;try catchを使わずにUI要素の存在をチェックするのは、上のように深い要素だと
面倒なので、アクセスするコードを動かしてみて &lt;code&gt;Error: Invalid index.&lt;/code&gt; の
エラーが出たら要素が存在しないと判断するようにしています。&lt;/p&gt;

&lt;h2 id=&#34;うまくいってないところ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;うまくいってないところ&lt;/h2&gt;

&lt;h3 id=&#34;sparkのショートカット追加がうまくいかないときがある:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;Sparkのショートカット追加がうまくいかないときがある&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;というアプリを使って
ショートカットを登録しておくと、キーボードの1ストロークで登録したアプリの
起動や起動済みの場合は最前面に持ってこれるので愛用しています。&lt;/p&gt;

&lt;p&gt;フリーですがソースは非公開で設定ファイル形式も不明なのでJXAで登録しています。&lt;/p&gt;

&lt;p&gt;しかし、アプリケーションのパスを選ぶところが、うまくいくときと行かない時があります。ファイル選択画面でパスを/から入力すると選べるのでその方式で実装しているのですが、 例えばFinderのパスを &lt;code&gt;/System/Library/CoreServices/Finder.app&lt;/code&gt; のように入力してreturnキーを押す操作をJXAで行うと、そのフォルダの中が開いた状態になってしまう時があります。&lt;/p&gt;

&lt;p&gt;カラムビューにすると成功するようだったので⌘3を押して切り替えるようにしてみたのですが、2秒ディレイを入れても全体を通して実行していると途中から失敗することがあります。&lt;/p&gt;

&lt;p&gt;その後run.shを書き換えてSparkのショートカット設定の部分だけ実行すると、うまくいきます。なぜ全体を通して実行した時は失敗するのかが謎です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;上記のように一部問題はありますが、大部分の操作は自動化できたので、全て手動で設定するのに比べるとずいぶん楽になりました。JXA (JavaScript for Automation)便利です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Riot.jsでタグエディターのサンプルを作ってみた</title>
      <link>/blog/2015/02/28/riot-tag-editor-example/</link>
      <pubDate>Sat, 28 Feb 2015 21:12:37 +0900</pubDate>
      
      <guid>/blog/2015/02/28/riot-tag-editor-example/</guid>
      <description>

&lt;h2 id=&#34;riot-js:62bcf495a627c2361816a64f97964c76&#34;&gt;Riot.js&lt;/h2&gt;

&lt;p&gt;Riot.jsについては&lt;a href=&#34;http://qiita.com/cognitom/items/54ae38c9a50dbbe28367&#34;&gt;Riot.js 2.0 情報まとめ - Qiita&lt;/a&gt;に良いまとめがありますのでそちらをどうぞ。良いまとめをありがとうございます。&lt;/p&gt;

&lt;h2 id=&#34;本家が提供しているtodoアプリをgoemonでライブリロードして開発を高速化するサンプル:62bcf495a627c2361816a64f97964c76&#34;&gt;本家が提供しているToDoアプリをgoemonでライブリロードして開発を高速化するサンプル&lt;/h2&gt;

&lt;p&gt;今回のタグエディターの前に、環境整備ということで本家が提供しているToDoアプリをgoemonでライブリロードして開発を高速化するサンプルを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/riotjs-todo-goemon-livereload-example&#34;&gt;hnakamur/riotjs-todo-goemon-livereload-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://muut.com/riotjs/guide/&#34;&gt;Riot developer guide&lt;/a&gt;にあるアプリからどのように変更したかはgitのコミットを小分けにしてあるので、そちらをご参照ください。
&lt;a href=&#34;https://github.com/hnakamur/riotjs-todo-goemon-livereload-example/commits/master&#34;&gt;Commits · hnakamur/riotjs-todo-goemon-livereload-example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;タグエディターのサンプルをriot-jsでも作ってみた:62bcf495a627c2361816a64f97964c76&#34;&gt;タグエディターのサンプルをRiot.jsでも作ってみた&lt;/h2&gt;

&lt;p&gt;で、本題のタグエディターのサンプルです。以前にjQuery, Backbone.js, Vue.jsで同じものを作っていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/ac5f04930d0c08f141e5&#34;&gt;jQuery - タグ・エディターを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/bfdade12bc5db21fa771&#34;&gt;Backbone.jsでタグ・エディターを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/a73ff28621e06193a228&#34;&gt;vue.jsでタグ・エディターを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はRiot.jsで作ってみました。&lt;/p&gt;

&lt;p&gt;ソース: &lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon&#34;&gt;hnakamur/riot-tag-editor-live-reload-example-with-goemon&lt;/a&gt;
コンパイル済みのデモ: &lt;a href=&#34;https://hnakamur.github.io/riot-tag-editor-live-reload-example-with-goemon/demo/&#34;&gt;Riot tag editor example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;セットアップ手順はソースの&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/master/README.md&#34;&gt;README&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;タグエディターのタグのソースは&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/master/assets/tag-editor.tag&#34;&gt;tag-editor.tag&lt;/a&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tag-editor&amp;gt;
  &amp;lt;div class=&amp;quot;tag-editor-field&amp;quot; onclick={ click }&amp;gt;
    &amp;lt;div class=&amp;quot;tag-editor-tag tag-editor-tag-measure&amp;quot;&amp;gt;
      &amp;lt;div id=&amp;quot;measure&amp;quot; class=&amp;quot;tag-editor-text&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;a class=&amp;quot;tag-editor-delete&amp;quot;&amp;gt;x&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div each={ tags } class=&amp;quot;tag-editor-tag&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;tag-editor-text&amp;quot;&amp;gt;{ name }&amp;lt;/div&amp;gt;
      &amp;lt;a class=&amp;quot;tag-editor-delete&amp;quot; onclick={ parent.clickDelete }&amp;gt;x&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;input name=&amp;quot;editor&amp;quot; class=&amp;quot;tag-editor-input&amp;quot; style=&amp;quot;width: 0&amp;quot; onkeyup={ keyup } onkeydown={ keydown } onblur={ blur }&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;script&amp;gt;
    this.tags = opts.tags
    this.separator = /[, ]+/

    click(e) {
      adjustEditorWidth(this)
      this.editor.focus()
      return false
    }

    keyup(e) {
      var val = this.editor.value
      if (this.separator.test(val)) {
        mayInsertTags(this)
      } else {
        adjustEditorWidth(this)
      }
      return false
    }

    keydown(e) {
      if (e.which == 13 /* Enter */ &amp;amp;&amp;amp; this.editor.value !== &#39;&#39;) {
        mayInsertTags(this)
        return true
      } else if (e.which == 8 /* Backspace */ &amp;amp;&amp;amp; this.editor.value === &#39;&#39; &amp;amp;&amp;amp; this.tags.length &amp;gt; 0) {
        this.tags.pop()
      }
      return true
    }

    blur(e) {
      mayInsertTags(this)
      return true
    }

    clickDelete(e) {
      e.stopPropagation()
      this.tags.splice(this.tags.indexOf(e.item), 1)
      return false
    }

    function adjustEditorWidth(elem) {
      elem.measure.innerText = elem.editor.value + &#39;WW&#39;
      elem.editor.style.width = elem.measure.offsetWidth + &#39;px&#39;
    }

    function mayInsertTags(elem) {
      var values = elem.editor.value.split(elem.separator),
          i = 0,
          len = values.length,
          value
      elem.editor.value = &#39;&#39;
      adjustEditorWidth(elem)
      for (; i &amp;lt; len; i++) {
        value = values[i]
        if (value !== &#39;&#39; &amp;amp;&amp;amp; !containsTag(elem, value)) {
          elem.tags.push({name: value})
        }
      }
    }

    function containsTag(elem, tag) {
      var i = 0, 
          len = elem.tags.length
      for (; i &amp;lt; len; i++) {
        if (elem.tags[i].name === tag) {
          return true
        }
      }
      return false
    }
  &amp;lt;/script&amp;gt;

&amp;lt;/tag-editor&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTMLのタグとJavaScriptのコードを一箇所にかけて、イベントもonclickとかで書くので、コンパクトで見やすいです。
onclickとかに指定した関数は &lt;code&gt;function&lt;/code&gt; なしで書けるようになっていますが、そうでない関数には &lt;code&gt;function&lt;/code&gt; を明記する必要がありました。&lt;/p&gt;

&lt;p&gt;タグエディターを利用する側のHTMLのコードは以下の様な感じで、こちらもシンプルです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/assets/index.html#L31-L41&#34;&gt;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/assets/index.html#L31-L41&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;script src=&amp;quot;tag-editor.tag&amp;quot; type=&amp;quot;riot/tag&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/g/riot@2.0(riot.min.js+compiler.min.js)&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
    riot.mount(&#39;tag-editor&#39;, {
      tags: [
        {name: &#39;foo&#39;},
        {name: &#39;bar&#39;},
      ]
    })
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;プリコンパイル済みのソースの作成:62bcf495a627c2361816a64f97964c76&#34;&gt;プリコンパイル済みのソースの作成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;riot assets/ demo/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で &lt;code&gt;assets/tag-editor.tag&lt;/code&gt; から &lt;code&gt;demo/tag-editor.js&lt;/code&gt; が生成されます。&lt;/p&gt;

&lt;p&gt;利用する側のHTMLは以下のようにします。 riot.jsの読み込み方法と、タグエディターのソースを読み込む順番が開発時とは違うので要注意です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/demo/index.html#L30-L40&#34;&gt;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/demo/index.html#L30-L40&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/riot/2.0/riot.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;tag-editor.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
    riot.mount(&#39;tag-editor&#39;, {
      tags: [
        {name: &#39;foo&#39;},
        {name: &#39;bar&#39;},
      ]
    })
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;riot-jsの魅力:62bcf495a627c2361816a64f97964c76&#34;&gt;Riot.jsの魅力&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://muut.com/riotjs/compare.html&#34;&gt;Riot vs React vs Polymer&lt;/a&gt;を見ても、riot.min.jsは6.7KBとコンパクトなのが魅力です。それでいてカスタムタグもすっきりシンプルに書けますし。これは今後に期待ですね！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows UI Automation APIを使うためのGoライブラリw32uiautomationを書いた</title>
      <link>/blog/2015/02/22/w32uiautomation/</link>
      <pubDate>Sun, 22 Feb 2015 00:09:24 +0900</pubDate>
      
      <guid>/blog/2015/02/22/w32uiautomation/</guid>
      <description>

&lt;h1 id=&#34;なぜ:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;なぜ&lt;/h1&gt;

&lt;p&gt;ウェブアプリ開発をしているとInternet Explorerでの動作確認のため&lt;a href=&#34;https://www.modern.ie/ja-jp&#34;&gt;modern.IE&lt;/a&gt;が欠かせません。が、インストール直後は英語環境になっているので、日本語環境での動作確認のためにはセットアップが必要です。&lt;/p&gt;

&lt;p&gt;セットアップ手順は以下のQiitaの記事に書いたのですが、手数が多くて面倒でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/5f2f9e817dd0de60abb2&#34;&gt;VirtualBox - modern.IEのWindows 7で日本語の表示と入力をできるようにする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/cd37c9c8826afe4b4dda&#34;&gt;Windows8.xのmodern.IEで日本語を入力、表示できるようにする。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それを自動化するコマンドラインツール&lt;a href=&#34;https://github.com/hnakamur/moderniejapanizer&#34;&gt;moderniejapanizer&lt;/a&gt;を作りました。実は2年ぐらい前に&lt;a href=&#34;https://www.autoitscript.com/site/autoit/&#34;&gt;AutoIt&lt;/a&gt;を使って作り始めたのですが自動制御がうまくいかないときがあって挫折していました。昨年暮れぐらいから再挑戦して、今回は勉強を兼ねてGoで実装してみました。&lt;/p&gt;

&lt;p&gt;日本語化のほとんどはWin32 APIとレジストリの操作で実現できたのですが、Windows 8で言語に日本語を追加して英語を削除する操作だけはWin32 APIやレジストリで実現する方法を見つけられませんでした。&lt;/p&gt;

&lt;p&gt;そこでコントロールパネルの操作をUIオートメーションで行うことにしました。
mattnさんの&lt;a href=&#34;https://github.com/mattn/go-ole&#34;&gt;go-ole&lt;/a&gt;を利用して、UIオートメーション APIの一部をGoで実装したのが、&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation&#34;&gt;hnakamur/w32uiautomation&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;UIオートメーションAPIの全部をカバーするつもりはなくて自分が使う部分だけを実装しています。とりあえず動くようにはなりましたが、まだまだ試行錯誤中なのでAPIは互換性無く変更予定です。&lt;/p&gt;

&lt;h1 id=&#34;windows-ui-オートメーションについて:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;Windows UI オートメーションについて&lt;/h1&gt;

&lt;p&gt;下記のページに説明とリファレンスがありました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/ms747327(v=vs.110%29.aspx&#34;&gt;UI オートメーションの概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee684009(v=vs.85%29.aspx&#34;&gt;UI Automation (Windows)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、始めの一歩として以下の記事も参考にさせて頂きました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://180.cocolog-nifty.com/blog/2011/10/ui-automationjs.html&#34;&gt;UI AutomationをJScript.NETで動かす: korokaraのブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.sunnyone.org/2014/09/windowsuiui-automation-powershell.html&#34;&gt;WindowsアプリのUI自動操作をUI Automation PowerShell Extensionで行う | d.sunnyone.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;w32uiautomationの実装について:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;w32uiautomationの実装について&lt;/h1&gt;

&lt;h2 id=&#34;uiオートメーションapiはidispatchインタフェースを実装していない:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;UIオートメーションAPIはIDispatchインタフェースを実装していない&lt;/h2&gt;

&lt;p&gt;実はw32uiautomationを実装する前に、&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa387099(v=vs.85%29.aspx&#34;&gt;Windows Update Agent API (Windows)&lt;/a&gt;の実装も作りました。 &lt;a href=&#34;https://github.com/hnakamur/windowsupdate&#34;&gt;hnakamur/windowsupdate&lt;/a&gt;です。これはWindows 7で日本語の言語パックをWindows Update経由でインストールするために作りました。&lt;/p&gt;

&lt;p&gt;Windows Update Agent APIの各インタフェースは例えば&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa385821(v=vs.85%29.aspx&#34;&gt;IAutomaticUpdates interface (Windows)&lt;/a&gt;のように&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ms221608(v=vs.85%29.aspx&#34;&gt;IDispatch interface (Automation)&lt;/a&gt;を実装しています。&lt;/p&gt;

&lt;p&gt;ですので、 &lt;a href=&#34;https://github.com/hnakamur/windowsupdate/blob/a878b9dbfeadeb768f27011d6bfd97bfecdd5d9d/search.go#L32&#34;&gt;https://github.com/hnakamur/windowsupdate/blob/a878b9dbfeadeb768f27011d6bfd97bfecdd5d9d/search.go#L32&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	searcher, err := toIDispatchErr(oleutil.CallMethod((*ole.IDispatch)(s), &amp;quot;CreateUpdateSearcher&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように&lt;a href=&#34;https://github.com/mattn/go-ole/blob/7d0136ad48c228000c2abdea549674c498110124/oleutil/oleutil.go#L47&#34;&gt;oleutil.CallMethod&lt;/a&gt;などのoleutilパッケージの各種メソッドを使ってWindows Update Agent APIのメソッド呼び出しやプロパティ値の設定・取得を動的に行うことが出来ます。&lt;/p&gt;

&lt;p&gt;一方、UIオートメーションAPIのほうは、&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee671406(v=vs.85%29.aspx&#34;&gt;IUIAutomation interface (Windows)&lt;/a&gt;のようにIDsipatchインタフェースは実装しておらず、IUnknownインタフェースを実装しているだけです。&lt;/p&gt;

&lt;p&gt;そこで、UIオートメーションのインタフェースごとにGoのstructを定義していく必要があります。&lt;/p&gt;

&lt;p&gt;mattnさんのgo-oleの&lt;a href=&#34;https://github.com/mattn/go-ole/blob/master/iunknown.go&#34;&gt;iunknown.go&lt;/a&gt;や&lt;a href=&#34;https://github.com/mattn/go-ole/blob/master/idispatch.go&#34;&gt;idispatch.go&lt;/a&gt;を見よう見まねで実装してみました。きちんと理解せず雰囲気で書いているので、おかしなところがあるかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;iuiautomationelement-findfirstは実装してみたが挙動が変:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;IUIAutomationElement::FindFirstは実装してみたが挙動が変&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee696029(v=vs.85%29.aspx&#34;&gt;IUIAutomationElement::FindFirst method (Windows)&lt;/a&gt;は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L113-L115&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L113-L115&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L141-L155&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L141-L155&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりで実装しています。実行すると戻り値の*IUIAutomationElementはnilではない値になって目的のUI要素が見つかっているようです。しかし、&lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=8279&#34;&gt;Microsoft Windows SDK for Windows 7 and .NET Framework 4&lt;/a&gt;同梱のinspect.exeで見るとnameプロパティに空ではない値が設定されているのに&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L129&#34;&gt;Get_CurrentName&lt;/a&gt;などで名前を取得してみると空文字になってしまうというトラブルに見舞われました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee671529(v=vs.85%29.aspx&#34;&gt;IUIAutomation::CreatePropertyCondition&lt;/a&gt;でVARIANT型を引数で渡すところがあって、VARIANT型のサイズはuintptrのサイズより大きいので分割してsyscall.Syscallファミリーの関数を呼ぶ必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/variant_386.go#L14-L22&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/variant_386.go#L14-L22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomation_386.go#L11-L29&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomation_386.go#L11-L29&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりで実装しているのですが、どこかおかしいのかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;回避策としてtreewalkerで自前で探すメソッドを実装:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;回避策としてTreeWalkerで自前で探すメソッドを実装&lt;/h2&gt;

&lt;p&gt;FindFirstがうまく動かせなかったので、回避策としてTreeWalkerで自前で探すメソッドを実装してみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/search.go&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/search.go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;幅優先探索でUI要素のツリーを探すようにしています。
また、ウィンドウがまだ存在しない場合はポーリングして存在するまで待ってから返す関数も実装しています。&lt;/p&gt;

&lt;h2 id=&#34;現状だとウィンドウ切り替わり時にsleepを入れる必要がある:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;現状だとウィンドウ切り替わり時にSleepを入れる必要がある&lt;/h2&gt;

&lt;p&gt;実際に試してみるとウィンドウを開いた後すぐにUI要素を探そうとすると見つからない場合がありました。おそらくウィンドウ内のUI要素が作られる前のタイミングで探そうとしているのだと思います。&lt;/p&gt;

&lt;p&gt;ただ上記のようにポーリングをしているのでUI要素が作られれば見つかると想定していたのですが、実際はいつまでもポーリングを続けてしまいました。&lt;/p&gt;

&lt;p&gt;しかたがないので、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/moderniejapanizer/blob/fcc9eb9f51560916ae8831e9c042a789ced298cf/imeja.go#L58&#34;&gt;https://github.com/hnakamur/moderniejapanizer/blob/fcc9eb9f51560916ae8831e9c042a789ced298cf/imeja.go#L58&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;のようにウィンドウが切り替わった後、ウィンドウを探す前に1秒のスリープを入れています。が、これだとマシンが重い状態だと1秒では足りなくてUI要素が見つからずにポーリングし続けてしまうケースが起こりえます。&lt;/p&gt;

&lt;h2 id=&#34;iuiautomation-addstructurechangedeventhandlerを使いたいがgoの関数をコールバックしてもらう方法がわからず挫折中:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;IUIAutomation::AddStructureChangedEventHandlerを使いたいがGoの関数をコールバックしてもらう方法がわからず挫折中&lt;/h2&gt;

&lt;p&gt;おそらくあるべき姿としてはポーリングではなく&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee671512(v=vs.85%29.aspx&#34;&gt;IUIAutomation::AddStructureChangedEventHandler method (Windows)&lt;/a&gt;を使うのだと思います。&lt;/p&gt;

&lt;p&gt;が、&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee696197(v=vs.85%29.aspx&#34;&gt;IUIAutomationStructureChangedEventHandler interface (Windows)&lt;/a&gt;の&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee696198(v=vs.85%29.aspx&#34;&gt;IUIAutomationStructureChangedEventHandler::HandleStructureChangedEvent method (Windows)&lt;/a&gt;をGoの関数で書いてコールバックで読んでもらう方法がわからず挫折中です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/commit/c76d7dfb476cd13723bed6da5581639d66b6ffbb&#34;&gt;Trying AddStructureChangedEventHandler but no luck yet · c76d7df · hnakamur/w32uiautomation&lt;/a&gt;でよくわからないまま雰囲気でトライしてみたのですが、実行時エラーになってしまいました。&lt;/p&gt;

&lt;h1 id=&#34;とりあえず当初の目的には使えていますが-まだまだ改良が必要:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;とりあえず当初の目的には使えていますが、まだまだ改良が必要&lt;/h1&gt;

&lt;p&gt;なのですが、行き詰まっているのでなにかアドバイスありましたらぜひお願いします。&lt;/p&gt;

&lt;h1 id=&#34;2015-02-23-01-07頃追記:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;2015-02-23 01:07頃追記&lt;/h1&gt;

&lt;h2 id=&#34;uiautomationelement-findfirstがちゃんと動くようになりました:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;UIAutomationElement::FindFirstがちゃんと動くようになりました&lt;/h2&gt;

&lt;p&gt;やはり &lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/0c48ebfdce27726587ae6797643b29b7fe0b99f7/variant_386.go#L14&#34;&gt;VariantToUintptrArray&lt;/a&gt;がバグっていました。
&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/commit/0c48ebfdce27726587ae6797643b29b7fe0b99f7&#34;&gt;Fix 32bit VariantToUintptrArray · 0c48ebf · hnakamur/w32uiautomation&lt;/a&gt;で修正しました。&lt;/p&gt;

&lt;p&gt;FindFirstがちゃんと動くようになったので、回避策で作ったTreeWalkerで自前で探すメソッドは削除しました。&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/commit/733229d4bd779da9e44241b4b581951ff1c4643e&#34;&gt;Remove WaitFindFirstWithBreadthFirstSearch in favor of FindFirst. · 733229d · hnakamur/w32uiautomation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;コールバックを使うためのsyscall-newcallbackという関数を見つけました:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;コールバックを使うためのsyscall.NewCallbackという関数を見つけました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/edadffa2f3464c48a234f3cf2fc092a03f91824f/src/syscall/syscall_windows.go#L113-L118&#34;&gt;go/syscall_windows.go at edadffa2f3464c48a234f3cf2fc092a03f91824f · golang/go&lt;/a&gt;で定義されていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Converts a Go function to a function pointer conforming
// to the stdcall calling convention. This is useful when
// interoperating with Windows code requiring callbacks.
func NewCallback(fn interface{}) uintptr {
	return compileCallback(fn, true)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;後日試してみたいと思います。&lt;/p&gt;

&lt;h1 id=&#34;2015-02-23-05-00頃追記:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;2015-02-23 05:00頃追記&lt;/h1&gt;

&lt;p&gt;実は&lt;a href=&#34;https://github.com/mattn/go-ole/blob/master/example/winsock/winsock.go&#34;&gt;go-ole/winsock.go&lt;/a&gt;がコールバックを使うサンプルになっていることに気づきました。&lt;/p&gt;

&lt;p&gt;またまた見よう見まねで&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee696197(v=vs.85%29.aspx&#34;&gt;IUIAutomationStructureChangedEventHandler interface&lt;/a&gt;を使えるところまでこぎつけました。
&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/pull/2&#34;&gt;Add structure changed event handler by hnakamur · Pull Request #2 · hnakamur/w32uiautomation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;早速これを活用して、FindFirstで見つからなかったら見つかるまでループするというWaitFindFirstをSleepではなくUI要素が追加されるまで待って繰り返すように改良しました。
&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/8fe8ac469892d3e07e008341a3d4a2fc2b611a4a/waitfind.go#L10-L49&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/8fe8ac469892d3e07e008341a3d4a2fc2b611a4a/waitfind.go#L10-L49&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;winsockのサンプルではコールバックを待つ間メッセージループを回すコードは
&lt;a href=&#34;https://github.com/mattn/go-ole/blob/7d0136ad48c228000c2abdea549674c498110124/example/winsock/winsock.go#L133-L137&#34;&gt;https://github.com/mattn/go-ole/blob/7d0136ad48c228000c2abdea549674c498110124/example/winsock/winsock.go#L133-L137&lt;/a&gt;
のようになっていました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/8fe8ac469892d3e07e008341a3d4a2fc2b611a4a/waitfind.go#L10-L49&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/8fe8ac469892d3e07e008341a3d4a2fc2b611a4a/waitfind.go#L10-L49&lt;/a&gt;
のほうは参照カウンタが0以外の間ループを回すのではなくて、waitingフラグがtrueの間回すようにしています。で、コールバックでお目当てのイベント、つまりUI要素が追加されたイベントだったらwaitingフラグをfalseにしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/moderniejapanizer&#34;&gt;hnakamur/moderniejapanizer&lt;/a&gt;も新しいWaitFindFirstを使うように更新しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build UIAutomation samples in Windows SDK 7.1</title>
      <link>/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</guid>
      <description>

&lt;h2 id=&#34;windows-sdk-7-1-をインストール:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;Windows SDK 7.1 をインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=8279&#34;&gt;Download Microsoft Windows SDK for Windows 7 and .NET Framework 4 from Official Microsoft Download Center&lt;/a&gt;からダウンロード、インストールします。後でMSBuild.exeを使うため、Installation Optionsのツリーでは.NET Developmentを外さずに入れるようにしてください。&lt;/p&gt;

&lt;h2 id=&#34;サンプルソースをコピー:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;サンプルソースをコピー&lt;/h2&gt;

&lt;p&gt;サンプルソースは C:\Program Files\Microsoft SDKs\Windows\v7.1\Samples\winui\uiautomation\ にありますが、ここだと一般ユーザで書き込みができないのでホームディレクトリ以下に作業ディレクトリを作ってコピーします。&lt;/p&gt;

&lt;h2 id=&#34;ビルド用にコマンドプロンプトを起動:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;ビルド用にコマンドプロンプトを起動&lt;/h2&gt;

&lt;p&gt;[スタートメニュー]/[Microsoft Windows SDK v7.1]/[Windows SDK 7.1 Command Prompt]メニューでコマンドプロンプトを起動します（通常のコマンドプロンプトだとMSBuild.exeがPATHに入っていません）。&lt;/p&gt;

&lt;h2 id=&#34;サンプルのビルド:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;サンプルのビルド&lt;/h2&gt;

&lt;p&gt;例としてUIAFragmentProviderのサンプルをビルドする場合です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd C:\Users\user\Documents\uiautomation_samples\UIAFragmentProvider\CPP
vcupgrade UIAFragmentProvider.vcproj
setenv /x86
msbuild UIAFragmentProvider.vcxproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C:\Users\user\Documents\uiautomation_samples\UIAFragmentProvider\CPP\Debug\UIAFragmentProvider.exe が生成されます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LXDを試してみた</title>
      <link>/blog/2014/12/01/lxd-the-linux-container-daemon/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/01/lxd-the-linux-container-daemon/</guid>
      <description>

&lt;h2 id=&#34;はじめに:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;LXDに関するページをいくつか紹介します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.linuxcontainers.org/pipermail/lxc-users/2014-November/007978.html&#34;&gt;[lxc-users] LXD an &amp;ldquo;hypervisor&amp;rdquo; for containers (based on liblxc)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;LXCメーリングリストに投稿されたLXDのアナウンスメール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;LXDのホームページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxc/lxd githubレポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://insights.ubuntu.com/2014/11/04/lxd-the-linux-container-daemon/&#34;&gt;Dustin KirklandさんによるLXDの紹介 (2分7秒)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;LXDの発音は&lt;a href=&#34;https://www.youtube.com/watch?v=U-lXf85Mhno&amp;amp;t=1m18s&#34;&gt;1分18秒あたり&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zdnet.com/ubuntu-lxd-not-a-docker-replacement-a-docker-enhancement-7000035463/&#34;&gt;Ubuntu LXD: Not a Docker replacement, a Docker enhancement | ZDNet&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;「LXDはdockerを置き換えるものではなく強化するもの」というタイトルの解説記事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目指しているのは以下の様なものらしいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトでセキュア

&lt;ul&gt;
&lt;li&gt;コンテナを非rootユーザで稼働できる&lt;/li&gt;
&lt;li&gt;コンテナを隔離して安全に動かせる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンテナでは単一プロセスを動かすだけではなく完全なOS環境を動かす&lt;/li&gt;
&lt;li&gt;リモートのイメージ管理サービスと連携してライブマイグレーションを可能にする&lt;/li&gt;
&lt;li&gt;OpenStackとも連携&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セットアップ:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;Ubuntu 14.04で試しました。
バイナリパッケージをインストールする手順とソースからビルドする手順を書いておきますが、実際に試したのは後者です。正確には最初前者を試したのですが、その後何してよいかドキュメントが見当たらないので後者を試した感じです。&lt;/p&gt;

&lt;h3 id=&#34;バイナリパッケージをインストールする手順:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;バイナリパッケージをインストールする手順&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;The next hypervisor: LXD is fast, secure container management for Linux | Cloud | Ubuntu&lt;/a&gt;の&amp;rdquo;Getting started with LXD&amp;rdquo;に書いてあります。&lt;/p&gt;

&lt;p&gt;add-apt-repositoryを使うため事前にsoftware-properties-commonパッケージをインストールしておく必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install software-properties-common
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;その後以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository cloud-archive:juno
sudo apt-get update
sudo apt-get install nova-compute-flex
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ソースからビルドする手順:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;ソースからビルドする手順&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd#installing-the-dependencies&#34;&gt;lxc/lxd&lt;/a&gt;の手順に従います。&lt;/p&gt;

&lt;p&gt;以下のコマンドで依存ライブラリをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install lxc lxc-dev mercurial git pkg-config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Goをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install software-properties-common
sudo add-apt-repository ppa:ubuntu-lxc/lxd-daily
sudo apt-get update
sudo apt-get install golang
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GOPATHのディレクトリを作成して、GOPATH環境変数を設定します。
以下はbashを使っている想定で ~/.bashrc に追加してシェルを再起動する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/go
echo &#39;export GOPATH=$HOME/go&#39; &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go getしてソースディレクトリに移動してビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/lxc/lxd
cd $GOPATH/src/github.com/lxc/lxd
go get -v -d ./...
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;./lxc/lxcと./lxd/lxdという2つの実行ファイルが作られます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@ubuntu-1404:~/go/src/github.com/lxc/lxd$ file ./lxc/lxc ./lxd/lxd
./lxc/lxc: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=a317752267685a543f724c02c2fb827e03564236, not stripped
./lxd/lxd: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=8f4ff9b64ecda66a2269c18fd5c440620d548da3, not stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lxdはlxdのデーモンです。lxcはlxdに通信するクライアントプログラムです。&lt;a href=&#34;http://gopkg.in/lxc/go-lxc.v2&#34;&gt;go-lxc.v2 - gopkg.in/lxc/go-lxc.v2&lt;/a&gt;というLXCのGoバインディングライブラリを使用しています。&lt;/p&gt;

&lt;h2 id=&#34;セットアップ-1:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;ビルド後以下の環境整備が必要です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /var/lib/lxd
sudo chown $USER:$USER /var/lib/lxd
echo &amp;quot;$USER:1000000:65536&amp;quot; | sudo tee -a /etc/subuid /etc/subgid
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使い方:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;使い方&lt;/h2&gt;

&lt;h3 id=&#34;lxdの起動:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxdの起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxd/lxd &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ作成:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc create iamge:ubuntu foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;READMEでは &lt;code&gt;image:ubuntu&lt;/code&gt; をつけていませんが、これだと以下の様なエラーになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc create baz
error: Only the default ubuntu image is supported. Try `lxc create images:ubuntu foo`.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ起動:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc start foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ一覧表示:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ一覧表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、通常のlxcとはコンテナの管理が別になっているのか(要確認)、 &lt;code&gt;lxc-ls&lt;/code&gt; しても fooは表示されませんでした。&lt;/p&gt;

&lt;h3 id=&#34;lxcのコンテナ停止:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ停止&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc stop foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ停止-1:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ停止&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc delete foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxc-shellが未実装:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxc shellが未実装！&lt;/h3&gt;

&lt;p&gt;コンテナでコマンドを実行してみたいところなのですが、 &lt;code&gt;lxc shell&lt;/code&gt; というサブコマンドは未実装だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc help
Usage: lxc [subcommand] [options]
Available commands:
  config     - Manage configuration.
  create     - lxc create images:ubuntu &amp;lt;name&amp;gt;
  delete     - lxc delete &amp;lt;resource&amp;gt;
  finger     - Fingers the lxd instance to check if it is up and working.
  freeze     - Changes a containers state to freeze.
  help       - Presents details on how to use lxd.
  list       - Lists the available resources.
  remote     - Manage remote lxc servers.
  restart    - Changes a containers state to restart.
  shell      - Start a shell or specified command (NOT IMPLEMENTED) in a container.
  start      - Changes a containers state to start.
  stop       - Changes a containers state to stop.
  unfreeze   - Changes a containers state to unfreeze.
  version    - Prints the version number of lxd.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースを見ても &lt;a href=&#34;https://github.com/lxc/lxd/blob/a315c07c632188f7d37fa8dbbe3f1b7d87ab34de/lxc/shell.go#L38-L42&#34;&gt;lxd/shell.go at a315c07c632188f7d37fa8dbbe3f1b7d87ab34de · lxc/lxd&lt;/a&gt; のあたりにTODOと書かれています。&lt;/p&gt;

&lt;p&gt;ただ、&lt;a href=&#34;https://github.com/lxc/go-lxc&#34;&gt;lxc/go-lxc&lt;/a&gt;のソースを見ると、コンテナ内でコマンドを実行するための関数はあるのですが、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/go-lxc/blob/bc0a9447e0be56f8e35d0affe83a92e638308e2f/container.go#L422-L423&#34;&gt;https://github.com/lxc/go-lxc/blob/bc0a9447e0be56f8e35d0affe83a92e638308e2f/container.go#L422-L423&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Execute executes the given command in a temporary container.
func (c *Container) Execute(args ...string) ([]byte, error) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンド実行後に標準出力の結果を戻り値で受け取るようになっています。&lt;/p&gt;

&lt;p&gt;シェルを起動してインタラクティブに入出力するには、標準入力、標準出力、標準エラー出力をストリームのようにリアルタイムにやりとりするような関数が必要だと思います。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;早く &lt;code&gt;lxc shell&lt;/code&gt; が実装されて欲しいですね！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diagram as a Code</title>
      <link>/blog/2014/09/07/diagram-as-a-code/</link>
      <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/09/07/diagram-as-a-code/</guid>
      <description>

&lt;p&gt;この記事はpplogに書いた記事 &lt;a href=&#34;https://www.pplog.net/u/hnakamur2&#34;&gt;https://www.pplog.net/u/hnakamur2&lt;/a&gt; の転載です。&lt;/p&gt;

&lt;h2 id=&#34;背景:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;プログラマである私は、既存の作図ツールやシステムに不満があります。こうなってたらいいのにという点を整理してみます。&lt;/p&gt;

&lt;h3 id=&#34;図の変更履歴をわかりやすい形で見たい:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;図の変更履歴をわかりやすい形で見たい&lt;/h3&gt;

&lt;p&gt;ここでの前提として図は概要をつかむためのものと考えています。&lt;/p&gt;

&lt;p&gt;データベースのテーブル定義から完全なE-R図を自動作成したり、ソースコードから全ての属性を含んだクラス図を作るといったケースは今回の想定外です。&lt;/p&gt;

&lt;p&gt;私が図が欲しいと思うのは概要を把握したい場合なので、むしろ枝葉末節は省いて大まかな構造だけを見たいわけです。何が重要で何が枝葉末節かは人の主観が入るので、図の元ネタは人が書くことになります。となるとバージョン管理して変更履歴を追えるようにしたいと思うのは自然でしょう。&lt;/p&gt;

&lt;p&gt;文書はAsciiDocなどのテキスト形式で書けばgitでバージョン管理で差分も見られます。しかし、図はどうするか。バイナリ形式だと差分を表示しても理解できないですし、SVGなら差分は表示可能ですが理解しやすいとは言えないと思います。&lt;/p&gt;

&lt;h3 id=&#34;図の要素を半自動で配置したい:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;図の要素を半自動で配置したい&lt;/h3&gt;

&lt;p&gt;たいていのGUIの作図ツールでは図の要素をマウスで配置するようになっています。整列メニューがあったりはしますが、サイズを幅だけ揃える機能はなかったりして1つずつちまちまと設定することになります。&lt;/p&gt;

&lt;p&gt;一方、PlantUMLのようにテキストで図の要素を記述する仕組みの場合、完全自動で配置されるシステムが多いです。というより手動配置のものは見たことが無いです。&lt;/p&gt;

&lt;p&gt;要素数が少ないうちは自動配置でも良いのですが、多くなってくると不満が強くなってきます。関連する要素を近くにひとかたまりで配置して、他のグループとは遠くに配置したいのです。また、グループの中でもどの順序で並べるかは明示的に指定したい。&lt;/p&gt;

&lt;p&gt;同様に、要素間を結ぶ線の引き回しの配置も半自動にしたい。図に要素を追加していく時に、配置を調整するわけですが、接続線の配置が完全手動だと修正が面倒すぎます。かと言って完全自動だと、引き回しの配置が希望通りにならなくて不満が出ます。&lt;/p&gt;

&lt;p&gt;ということで、接続線の配置のルールの一部は自動化して、残りは手動で指定するという半自動方式が欲しいわけです。&lt;/p&gt;

&lt;h2 id=&#34;解決案:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;解決案&lt;/h2&gt;

&lt;p&gt;ということで、図の要素のテキストと配置のうち手動で指定したい部分だけをユーザが指定するテキストデータとして記述し、残りはプログラムで自動化すれば良いのではという考えが浮かびました。&lt;/p&gt;

&lt;p&gt;これはまさに&lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js - Data-Driven Documents&lt;/a&gt;の名前の通りの考え方です。データドリブンでドキュメントを作るわけです。&lt;/p&gt;

&lt;p&gt;インフラ界隈で言われているInfrastracture as a Codeという言葉にのっかると、Diagram as a Codeとも言えると思います。2つ合わせるとData-Driven Diagram as a Codeかなw&lt;/p&gt;

&lt;p&gt;まだ荒削りですけど、実際にd3.jsを使ったサンプルプログラムを書いて試しています。
&lt;a href=&#34;http://qiita.com/hnakamur/items/cd7610f63f5275e774a4&#34;&gt;d3.jsでクラス図を書いてみた - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AsciiDocの文書に埋め込むためにasciidoctor-diagramのプラグインも作っています。
&lt;a href=&#34;https://github.com/hnakamur/asciidoctor-diagram-d3js&#34;&gt;https://github.com/hnakamur/asciidoctor-diagram-d3js&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;diagram-as-a-codeのノウハウを共有し合えるようになりたい:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;Diagram as a Codeのノウハウを共有し合えるようになりたい&lt;/h2&gt;

&lt;p&gt;図の要素や接続線を半自動で配置するためには、幾何学の計算アルゴリズムが重要になってきます。例えば、&lt;a href=&#34;http://qiita.com/hnakamur/items/3ce1e90aecd36883add6&#34;&gt;d3.js - 円の中心までベジェ曲線を引くときに円との交点に矢印終端を配置するサンプル - Qiita&lt;/a&gt;でもベジェ曲線と円の交点を求める計算が必要です。ネットの情報を見ながら独学でやっているだけだと、時間もかかるし挫折しがちです。&lt;/p&gt;

&lt;p&gt;ということで、Diagram as a Codeの流れが広まって、幾何学の計算のノウハウを共有し合えるようになると嬉しいなあというのが願いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OSX上でPythonのPILの代わりにPillowをインストールする</title>
      <link>/blog/2014/06/10/install-python-pillow-on-osx/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/06/10/install-python-pillow-on-osx/</guid>
      <description>&lt;p&gt;試したバージョン&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python: 2.7.7&lt;/li&gt;
&lt;li&gt;OSX: 10.8.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前作った&lt;a href=&#34;https://github.com/hnakamur/gae-oauth2-sample/&#34;&gt;Google App Engine OAuth 2.0 sample&lt;/a&gt;について問合せを受けたので、動作確認しようと思ったらPILのインストールでエラーになってしまいました。
とりあえず、このサンプルではPIL無くても問題なかったので、&lt;a href=&#34;https://github.com/hnakamur/gae-oauth2-sample/blob/master/pip_install&#34;&gt;pip_install&lt;/a&gt;からPILを外して試しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://derivecv.tumblr.com/post/79130719546&#34;&gt;【ライブラリ】Pillow : PIL (Python Imaging Library )の現代的フォーク版 | DERiVE ブログ &amp;amp; メルマガ&lt;/a&gt;によるとPILは開発停止していて&lt;a href=&#34;http://pillow.readthedocs.org/en/latest/&#34;&gt;Pillow — Pillow v2.4.0 (PIL fork)&lt;/a&gt;を使うのが良いそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/19532125/cant-install-pil-after-mac-os-x-10-9&#34;&gt;python - Can&amp;rsquo;t install PIL after Mac OS X 10.9 - Stack Overflow&lt;/a&gt;を見るとPillowのインストールには&lt;a href=&#34;http://xquartz.macosforge.org/landing/&#34;&gt;XQuartz&lt;/a&gt;が必要らしいです。&lt;/p&gt;

&lt;p&gt;調べてみると、&lt;a href=&#34;http://caskroom.io/&#34;&gt;Homebrew Cask&lt;/a&gt;に&lt;a href=&#34;https://github.com/caskroom/homebrew-cask/blob/master/Casks/xquartz.rb&#34;&gt;xquartz.rb&lt;/a&gt;が含まれていました。
ということで、OSXでのインストール手順は以下で行けました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew cask install xquartz
pip install Pillow
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>久々にoctopressをアップデート</title>
      <link>/blog/2014/06/10/upgrade-octopress/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/06/10/upgrade-octopress/</guid>
      <description>

&lt;p&gt;octopressをアップデートした時にハマったのでメモ。
アップデート手順は&lt;a href=&#34;http://blog.n-z.jp/blog/2013-12-21-update-octopress.html&#34;&gt;octopressをアップデートしてisolateを使い始めた - @znz blog&lt;/a&gt;の「octopress のアップデート」の部分を参考にしました。ありがとうございます。&lt;/p&gt;

&lt;h2 id=&#34;octopressのアップデート:6dd973bdad9933eb852512ee60bcacb7&#34;&gt;Octopressのアップデート&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://octopress.org/docs/updating/&#34;&gt;Updating Octopress - Octopress&lt;/a&gt;の&amp;rdquo;How to Update&amp;rdquo;のコマンドを順に実行しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull octopress master     # Get the latest Octopress
bundle install                # Keep gems updated
rake update_source            # update the template&#39;s source
rake update_style             # update the template&#39;s style
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git pullではconflictsが起きたので、適宜修正しました。基本的にはHEAD側を採用。&lt;/p&gt;

&lt;h2 id=&#34;sass-globbingをgemfileに追加:6dd973bdad9933eb852512ee60bcacb7&#34;&gt;sass-globbingをGemfileに追加。&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rake generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行した時に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadError on line [&amp;quot;161&amp;quot;] of /Users/hnakamur/octopress/vendor/bundle/ruby/2.1.0/gems/compass-0.12.6/lib/compass/configuration/data.rb: cannot load such file -- sass-globbing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というエラーが出ました。&lt;/p&gt;

&lt;p&gt;Gemfileにsass-globbingを追加して、&lt;code&gt;bundle&lt;/code&gt;でインストールするとエラーは解消しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chef-soloとAnsibleとFabricを試した感想</title>
      <link>/blog/2013/09/01/tried-chef-ansible-fabric/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/09/01/tried-chef-ansible-fabric/</guid>
      <description>

&lt;p&gt;Chef-soloとAnsibleとFabricを試してみたので感想をメモ。どれもそんなに深くは使い込んではいない。&lt;/p&gt;

&lt;p&gt;このメモは自分の脳内の考えを整理するためのもので、人が使うことについてどうこう言うつもりはないです。&lt;/p&gt;

&lt;h2 id=&#34;chef-solo:3fccd7895b8e69ec7083f038c938f3c6&#34;&gt;Chef-solo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;書いてみたcookbookはこちら。&lt;a href=&#34;https://github.com/hnakamur/chef-cookbooks&#34;&gt;hnakamur/chef-cookbooks&lt;/a&gt; &lt;a href=&#34;https://github.com/hnakamur/chef-repo&#34;&gt;hnakamur/chef-repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;クックブックは手順を書くのではなくて結果を書くというのがどうも本質的に違うと私は思ってしまう。料理のレシピだって手順を書くし。書結果がこうあるべきというのはserverspecが出来た今となってはそちらに任せて、クックブックは本来手順を書くべきものだと思う。&lt;/li&gt;
&lt;li&gt;RubyのDSLだけど結局上から順に評価されるので、実は手続きを書いていることになっている。でもファイル単位でしか再利用できないので、一部だけ使いたいと思ってコピペするしかなくなるのが悲しい。&lt;/li&gt;
&lt;li&gt;Berkshelfでコミュニティクックブックをダウンロードして、ラッパークックブックを書くのがベストプラクティスってのが、無駄な苦行に思えてどうしても受け入れられない。自分のニーズに合わせて一から書くほうが早いしコンパクトで見やすい。これってDSLだからそうなるのかなー。&lt;/li&gt;
&lt;li&gt;もしDSLではなくRubyのクラスとして定義するようになっていて、各タスクをメソッドとして定義するようになっていたら、もっと再利用しやすかったのではないかと思う。それってむしろrakeのほうが近い気がする。&lt;a href=&#34;http://rubyhitsquad.com/Vlad_the_Deployer.html&#34;&gt;Vlad the Deployer&lt;/a&gt;とかVladから切りだされた&lt;a href=&#34;http://rubygems.org/gems/rake-remote_task&#34;&gt;rake-remote_task | RubyGems.org | your community gem host&lt;/a&gt;ベースで組み立てる感じ。なんでVladは人気出なかったのかな～。Capistranoよりいいと思うんだけど。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ansible:3fccd7895b8e69ec7083f038c938f3c6&#34;&gt;Ansible&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;書いてみたplaybookはこちら。&lt;a href=&#34;https://github.com/hnakamur/ansible-playbooks&#34;&gt;hnakamur/ansible-playbooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;手続きを記述するのにyamlというのは力不足。基本は順次処理で実行条件で実行するしないの制御ができるだけ。単一のタスクではパラメータでループはできるけど、複数のタスクをまとめてループとかはできない。&lt;/li&gt;
&lt;li&gt;モジュールとして用意されている処理はすっきり書けるが、そうでない場合はshellモジュールでゴリゴリ書くか自前モジュールを作るかになる。自前モジュールを作るのは簡単だが配布の仕組みが確立されていないので、自前でコピーする必要がある。&lt;/li&gt;
&lt;li&gt;やはり手続きはプログラミング言語で記述するほうが自由度は高いと感じた。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2013-09-02 追記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;訂正です。自作モジュール配布の仕組みは標準で用意されていました。libraryフォルダにモジュールを置いておけば自動で読み込まれます。&lt;a href=&#34;http://www.ansibleworks.com/docs/bestpractices.html#bundling-ansible-modules-with-playbooks&#34;&gt;Bundling Ansible Modules With Playbooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;それ以外の場所に置きたい場合は環境変数ANSIBLE_LIBRARYを設定するかコマンドラインオプションに&amp;ndash;module-pathを指定すればOKです。 &lt;a href=&#34;http://www.ansibleworks.com/docs/moduledev.html#module-development&#34;&gt;Module Development | AnsibleWorks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/r_rudi&#34;&gt;しろう&lt;/a&gt;さん、&lt;a href=&#34;https://twitter.com/r_rudi/status/374375071000702976&#34;&gt;ご指摘&lt;/a&gt;ありがとうございました！&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fabric:3fccd7895b8e69ec7083f038c938f3c6&#34;&gt;Fabric&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;書いてみたfabfileはこちら。&lt;a href=&#34;https://github.com/hnakamur/my-fabfiles&#34;&gt;hnakamur/my-fabfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pythonで手続きを書けるので、処理の流れは自由に書けて良い。&lt;/li&gt;
&lt;li&gt;rpmがインストール済みならダウンロードしないといった処理も自然に書ける。chefやansibleだと素直に書くとsha256sumを計算するという処理が毎回走ってしまう。自分で条件判定処理を記述して実行条件をつければ可能だが、ごちゃごちゃして見づらくなる。&lt;/li&gt;
&lt;li&gt;細かく関数に分けておけば必要なところだけの再利用も簡単。&lt;/li&gt;
&lt;li&gt;Ansibleのモジュールのようなものも、ユーティリティ関数を書くだけの話なので、レシピを書くのとなんら変わらない。レシピとモジュールの開発を同じ枠組みでできるのは便利。モジュールつくって本家にpull requestとかしなくてもすぐ使えるし。&lt;/li&gt;
&lt;li&gt;基本的にはコマンドを順次実行するだけという思想なので、冪等性について考慮した設計になってないのは不便。&lt;/li&gt;
&lt;li&gt;vagrantでfabricでprovisionするプラグインも作ってみた。 &lt;a href=&#34;https://github.com/hnakamur/vagrant-fabric-provisioner&#34;&gt;hnakamur/vagrant-fabric-provisioner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テンプレートからファイル生成も標準では毎回上書きされてしまう。Ansibleと同じようにチェックサムを計算して違う時だけ上書きするような関数を自作してみた。&lt;a href=&#34;https://github.com/hnakamur/my-fabfiles/blob/master/fabfile/common/lib/template.py&#34;&gt;my-fabfiles/fabfile/common/lib/template.py at master · hnakamur/my-fabfiles&lt;/a&gt; 変更したかどうかも戻り値で返すようにした。これによって変更した場合だけサービス再起動とかは可能になった。&lt;/li&gt;
&lt;li&gt;が、本当はchefのnotificationのように、ホスト毎の処理が終わった後にサービス再起動をまとめて実行したいところ。post-processキューみたいな仕組みが必要そう。&lt;/li&gt;
&lt;li&gt;処理をpythonで書けるのはいいのだが、リモートでの処理は基本コマンド実行になるのでpythonで直接ファイルを読み書きとかは出来ない。これがもどかしい感じ。&lt;/li&gt;
&lt;li&gt;今バージョン1.7で2.0でオーバーホールするRoadmapのようだがどうなっていくかまだわからない感じ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;思いつき:3fccd7895b8e69ec7083f038c938f3c6&#34;&gt;思いつき&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ふと思いついたのだが、Goでライブラリを用意してレシピもGoで書くのは面白いかも。&lt;/li&gt;
&lt;li&gt;Goならクロスコンパイルも簡単なので、ターゲットマシン用のバイナリを生成してrsync/scpでコピーしてターゲットマシン上で実行するという手が使える。するとファイルの読み書きもコマンド実行でもGoの関数からでもどちらでも実行できる。&lt;/li&gt;
&lt;li&gt;dockerみたいに一つのバイナリで複数の役割を持てせるようにすれば、デーモンとして実行しておいて、さらにsshからコマンド実行して制御ということも可能かも。あるいはエージェントみたいにして相互通信とかサーバと通信して連携するという道も有り得る。&lt;/li&gt;
&lt;li&gt;よくよく考えたら別にGoでなくても、言語処理系とライブラリとレシピのファイルをrsyncで送り込んで実行すれば同じか。&lt;/li&gt;
&lt;li&gt;でもGoならタスクキューとか作ってgoroutineで並列処理したり、channelで連携制御したりというのが書きやすそうなので夢は広がるな〜。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まずはローカルでコマンド実行するとか、テンプレートからファイル生成する（但し変更が無い場合は上書きしない）ユーティリティ関数群のライブラリを作ってみようということで今作り中。&lt;/p&gt;

&lt;p&gt;他にもいろいろやることがあるので、ツールとして完成するところまで行くかは期待薄。でも、ツールとしては完成しなくてもユーティリティ関数のライブラリでも有効活用できるしGoの勉強にもなるので、気が向いた時にマイペースでやってみよう。&lt;/p&gt;

&lt;p&gt;2013-09-02 追記その2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/b20458110777c3ceea3a&#34;&gt;Ansibleで自作モジュールを作成してplaybookと一緒に配布 - Qiita [キータ]&lt;/a&gt;に書きましたが、Ansibleのモジュール作成は簡単です。一定のルールに従ってスクリプトファイルを作るだけです。&lt;/li&gt;
&lt;li&gt;しかも、今頃気づいたのですが、モジュールはターゲットマシン上で実行されます。なので、例えばPythonで書く場合は直接ターゲットマシン上のファイルを読み書きできるわけです。&lt;/li&gt;
&lt;li&gt;ということで、FabricはPythonだけどターゲットマシン上で実行されないのでもどかしいと思っていた問題はAnsibleのモジュールでは無関係です。&lt;/li&gt;
&lt;li&gt;あとは、処理のフローが複雑な箇所はモジュールとして実装することにすれば、全体の流れはyamlで順次処理というのでも殆どの場合はカバーできるような気がしてきました。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant 1.1.5とSaharaを試した</title>
      <link>/blog/2013/04/03/how-to-setup-vagrant-1-dot-1-5-and-sahara/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/04/03/how-to-setup-vagrant-1-dot-1-5-and-sahara/</guid>
      <description>

&lt;h2 id=&#34;vagrantと1-0-xと1-1-xについて:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;Vagrantと1.0.xと1.1.xについて&lt;/h2&gt;

&lt;p&gt;バージョン1.1.xの位置づけについては以下の記事を参照。
&lt;a href=&#34;http://www.hashicorp.com/blog/vagrant-1-1-and-vmware.html&#34;&gt;Vagrant 1.1, VMware Fusion - HashiCorp&lt;/a&gt;
変更履歴は &lt;a href=&#34;https://github.com/mitchellh/vagrant/blob/master/CHANGELOG.md&#34;&gt;vagrant/CHANGELOG.md at master · mitchellh/vagrant · GitHub&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;gem installで入れられるのは1.0.x系のみ。現在は1.0.7。
&lt;a href=&#34;http://rubygems.org/search?utf8=%E2%9C%93&amp;amp;query=vagrant&#34;&gt;search | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;vagrant-1-1-5のインストール:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;Vagrant 1.1.5のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;
→ &lt;a href=&#34;http://downloads.vagrantup.com/&#34;&gt;Vagrant - Downloads&lt;/a&gt;
→ &lt;a href=&#34;http://downloads.vagrantup.com/tags/v1.1.5&#34;&gt;Vagrant - Downloads v1.1.5&lt;/a&gt;
と進み、Vagrant.dmgをダウンロードしてインストール&lt;/p&gt;

&lt;h2 id=&#34;path設定:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;PATH設定&lt;/h2&gt;

&lt;p&gt;vagrantコマンドにPATHを通します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;&#39;EOF&#39; &amp;gt;&amp;gt; ~/.bash_profile
export PATH=/Applications/Vagrant/bin:$PATH
EOF
. ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ruby 1.9.3p327が同梱されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /Applications/Vagrant/embedded/bin/ruby --version
ruby 1.9.3p327 (2012-11-10 revision 37606) [universal.x86_64-darwin12.2.1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vagrant-1-1-x用のsaharaをインストール:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;Vagrant 1.1.x用のSaharaをインストール&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ryuzee.com/contents/blog/6555&#34;&gt;Vagrantの必須プラグインSaharaをVagrant 1.1に対応させました | Ryuzee.com&lt;/a&gt;の手順でインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/src/chef
cd ~/src/chef
git clone https://github.com/ryuzee/sahara.git
cd sahara
export PATH=/Applications/Vagrant/embedded/bin:$PATH
sudo gem install bundler
bundle install
bundle exec rake build
vagrant plugin install pkg/sahara-0.0.14.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~/.vagrant.d/gems/gems/sahara-0.0.14/にインストールされた。&lt;/p&gt;

&lt;h3 id=&#34;複数vm環境でのテスト:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;複数VM環境でのテスト&lt;/h3&gt;

&lt;p&gt;Vagrantfile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-*- mode: ruby -*-
## vi: set ft=ruby :

Vagrant::Config.run do |config|
  config.ssh.private_key_path = &amp;quot;../vagrant.id_rsa&amp;quot;

  config.vm.define :web1 do |c|
    c.vm.box = &amp;quot;centos6.4&amp;quot;
    c.vm.host_name = &amp;quot;web1&amp;quot;
    c.vm.network :hostonly, &amp;quot;192.168.33.24&amp;quot;
    c.vm.customize [&amp;quot;modifyvm&amp;quot;, :id,
      &amp;quot;--name&amp;quot;, &amp;quot;web1&amp;quot;,
      &amp;quot;--natdnshostresolver1&amp;quot;, &amp;quot;on&amp;quot;,
      &amp;quot;--cpus&amp;quot;, 1,
      &amp;quot;--memory&amp;quot;, 512
    ]
  end

  config.vm.define :db1 do |c|
    c.vm.box = &amp;quot;centos6.4&amp;quot;
    c.vm.host_name = &amp;quot;db1&amp;quot;
    c.vm.network :hostonly, &amp;quot;192.168.33.25&amp;quot;
    c.vm.customize [&amp;quot;modifyvm&amp;quot;, :id,
      &amp;quot;--name&amp;quot;, &amp;quot;db1&amp;quot;,
      &amp;quot;--natdnshostresolver1&amp;quot;, &amp;quot;on&amp;quot;,
      &amp;quot;--cpus&amp;quot;, 1,
      &amp;quot;--memory&amp;quot;, 512
    ]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、centos6.4のVMはrubyやchef-soloはインストールしていない状態になっています。&lt;/p&gt;

&lt;p&gt;sandboxモードをオンにしてVM起動。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant sandbox on
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ホスト側からchefセットアップ実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bin/knife solo prepare web1
./bin/knife solo prepare db1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;web1, db1にログインして/usr/bin/chef-soloが作成されたことを確認。&lt;/p&gt;

&lt;p&gt;ロールバックを実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant sandbox rollback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;web1, db1にログインして/usr/bin/chef-soloが無いことを確認。&lt;/p&gt;

&lt;p&gt;ホスト側から再度chefセットアップ実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bin/knife solo prepare web1
./bin/knife solo prepare db1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コミット実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant sandbox commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ホスト側からchefクックブック実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bin/knife solo cook web1
./bin/knife solo cook db1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;web1, db1にログインして/usr/bin/chef-soloがあること、/etc/chefが作成されたことをを確認。&lt;/p&gt;

&lt;p&gt;ロールバック実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant sandbox rollback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;web1, db1にログインして/usr/bin/chef-soloがあること、/etc/chefが無いことをを確認。&lt;/p&gt;

&lt;p&gt;テスト環境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OS: OS X 10.8.3&lt;/li&gt;
&lt;li&gt;VirtualBox: 4.2.10&lt;/li&gt;
&lt;li&gt;Vagrant: 1.1.5&lt;/li&gt;
&lt;li&gt;sahara: &lt;a href=&#34;https://github.com/ryuzee/sahara.git&#34;&gt;https://github.com/ryuzee/sahara.git&lt;/a&gt; commit d22795aa417ec1cb67eb92810afb52300edd3c44&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>lua, V8, ruby, mrubyでfib(39)の実行時間比較</title>
      <link>/blog/2013/03/12/fib-39-benchmark-in-luajit/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/03/12/fib-39-benchmark-in-luajit/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.com/blog/2012/05/04/fib-39-benchmark-in-lua/&#34;&gt;lua, V8, ruby, mrubyでfib(39)の実行時間比較 - hnakamur&amp;rsquo;s blog at github&lt;/a&gt;が&lt;a href=&#34;https://twitter.com/yukihiro_matz&#34;&gt;@matz&lt;/a&gt;さんにツイートされたのを受けて、各処理系の最新版で再度試してみました。&lt;/p&gt;

&lt;h2 id=&#34;テスト環境その1-前回とは違う環境です:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;テスト環境その1（前回とは違う環境です）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Model: MacBook Pro Retina, Mid 2012&lt;/li&gt;
&lt;li&gt;CPU: 2.6GHz Intel Core i7&lt;/li&gt;
&lt;li&gt;RAM: 16GB 1600MHz DDR3&lt;/li&gt;
&lt;li&gt;OS: Mac OS X 10.8.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2013-03-24-追記:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;2013-03-24 追記&lt;/h3&gt;

&lt;p&gt;goでも試してみました&lt;/p&gt;

&lt;h3 id=&#34;go-1-0-3:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;go 1.0.3&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func fib(n int) int {
  if n &amp;lt; 2 {
    return n
  }
  return fib(n - 1) + fib(n - 2)
}

func main() {
  fmt.Println(fib(39))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ time fib39
63245986

real    0m0.484s
user    0m0.481s
sys     0m0.002s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lua:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;lua&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function fib(n)
  if n &amp;lt; 2 then
    return n
  end
  return fib(n-2) + fib(n-1)
end

print(fib(39))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ luajit -v
LuaJIT 2.0.1 -- Copyright (C) 2005-2013 Mike Pall. http://luajit.org/
$ time luajit fib.lua
63245986

real  0m0.906s
user  0m0.901s
sys 0m0.003s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ lua -v
Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time lua fib.lua
63245986

real  0m12.278s
user  0m12.271s
sys 0m0.006s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ src/lua -v
Lua 5.2.1  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time src/lua ~/bench/fib.lua
63245986

real  0m13.971s
user  0m13.965s
sys 0m0.005s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;v8:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;v8&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function fib(n) {
  if (n &amp;lt; 2) return n;
  return fib(n-2) + fib(n-1);
}

print(fib(39));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ v8
V8 version 3.16.14 [sample shell]
&amp;gt; ^D
$ time v8 fib.js
63245986

real  0m0.804s
user  0m0.798s
sys 0m0.008s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ruby:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;ruby&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def fib n
  return n if n &amp;lt; 2
  fib(n-2) + fib(n-1)
end

puts fib(39)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ git log -1 | grep commit
commit 46d8c51763bd13b69a4234f0d4be05cbfd8ae401

$ time bin/mruby fib.rb
63245986

real  0m16.357s
user  0m16.345s
sys 0m0.008s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p374 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real  0m16.225s
user  0m16.169s
sys 0m0.043s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p392 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real  0m36.813s
user  0m36.746s
sys 0m0.043s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
2.0.0-p0 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb 
63245986

real  0m31.828s
user  0m31.743s
sys 0m0.045s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2013-03-12-23-15-追記:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;2013-03-12 23:15 追記&lt;/h3&gt;

&lt;p&gt;1.9.3-p374と1.9.3-p392でこんなに違うのは変だなと思って、1.9.3-p374を入れなおして再度測ってみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p374 (set by /Users/hnakamur/.rbenv/version)
$ time ruby ~/bench/fib.rb 
63245986

real  0m38.909s
user  0m38.834s
sys 0m0.045s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以前1.9.3-p374を入れた時から、XCodeのバージョンが変わっているので、コンパイラが違うせいで大幅に時間が変わったようです。&lt;/p&gt;

&lt;h2 id=&#34;テスト環境その2:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;テスト環境その2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.com/blog/2012/05/04/fib-39-benchmark-in-lua/&#34;&gt;lua, V8, ruby, mrubyでfib(39)の実行時間比較 - hnakamur&amp;rsquo;s blog at github&lt;/a&gt;と同じマシンです。
OSはLionのままですがアップデートはしています。XCodeもバージョンアップしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Model: MacBook Air 13-inch, Mid 2011&lt;/li&gt;
&lt;li&gt;CPU: 1.7GHz Intel Core i5&lt;/li&gt;
&lt;li&gt;RAM: 4GB 1333MHz DDR3&lt;/li&gt;
&lt;li&gt;OS: Mac OS X Lion 10.7.5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lua-1:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;lua&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ src/luajit -v
LuaJIT 2.0.1 -- Copyright (C) 2005-2013 Mike Pall. http://luajit.org/
$ time src/luajit ~/fib_bench/fib.lua
63245986

real    0m1.268s
user    0m1.256s
sys     0m0.003s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ cd ../lua-5.2.1
$ src/lua -v
Lua 5.2.1  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time src/lua ~/fib_bench/fib.lua
63245986

real    0m20.299s
user    0m20.299s
sys     0m0.006s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ src/lua -v
Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time src/lua ~/fib_bench/fib.lua
63245986

real    0m20.100s
user    0m20.089s
sys     0m0.012s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;v8-1:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;V8&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ v8
V8 version 3.16.14 [sample shell]
&amp;gt; ^D

$ time v8 fib.js
63245986

real    0m1.105s
user    0m1.099s
sys     0m0.011s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ruby-1:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;ruby&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p194 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real    0m23.462s
user    0m23.431s
sys     0m0.039s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この1.9.3-p194は以前のXCodeでビルドしたものです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p392 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real    0m51.765s
user    0m51.679s
sys     0m0.048s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
2.0.0-p0 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real    0m47.074s
user    0m47.048s
sys     0m0.045s
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テスト環境その3:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;テスト環境その3&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Model: NEC Express5800/S70 type RB&lt;/li&gt;
&lt;li&gt;CPU: Intel Pentium G6950 (2.8GHz)&lt;/li&gt;
&lt;li&gt;RAM: 16GB DDR3-1333&lt;/li&gt;
&lt;li&gt;OS: CentOS 6.4 x86_64&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lua-2:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;lua&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ luajit -v
LuaJIT 2.0.1 -- Copyright (C) 2005-2013 Mike Pall. http://luajit.org/
$ time luajit fib.lua
63245986

real  0m1.244s
user  0m1.241s
sys 0m0.000s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ src/lua -v
Lua 5.2.1  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time src/lua ~hnakamur/fib_bench/fib.lua 
63245986

real  0m15.804s
user  0m15.774s
sys 0m0.002s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ time src/lua ~hnakamur/fib_bench/fib.lua 
63245986

real  0m15.658s
user  0m15.627s
sys 0m0.002s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;v8-2:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;V8&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ./out/x64.release/d8   
V8 version 3.16.14 [console: dumb]
d8&amp;gt; 
Segmentation fault
$ time ./out/x64.release/d8 ~hnakamur/fib_bench/fib.js
63245986

real  0m1.311s
user  0m1.314s
sys 0m0.004s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ruby-2:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;ruby&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p374 (set by /usr/local/rbenv/version)
$ time ruby fib.rb
63245986

real  0m40.485s
user  0m40.365s
sys 0m0.038s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p392 (set by /usr/local/rbenv/version)
$ time ruby fib.rb
63245986

real  0m38.841s
user  0m38.749s
sys 0m0.013s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
2.0.0-p0 (set by /usr/local/rbenv/version)
$ time ruby fib.rb 
63245986

real  0m32.491s
user  0m32.410s
sys 0m0.014s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ git log -1|grep commit
commit f63cd331da6257f9b44778dabff60be55b0721fa
$ time bin/mruby ~hnakamur/fib_bench/fib.rb 
63245986

real  0m20.752s
user  0m20.713s
sys 0m0.002s
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>d3.jsを使ったツールチップあり複数折れ線グラフのサンプルを作った</title>
      <link>/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js - Data-Driven Documents&lt;/a&gt;を使ってツールチップあり複数折れ線グラフのサンプルを作ったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/downloads/code/2013-03-02-multi-series-line-chart-example-with-tooltip-using-d3-dot-js/3884955.html&#34;&gt;サンプル&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bl.ocks.org/mbostock/3884955&#34;&gt;Multi-Series Line Chart&lt;/a&gt;のサンプルをベースに改良しました。&lt;/p&gt;

&lt;h2 id=&#34;x軸のラベルを回転:d0541cc9ba4f8d6587118da310bcbf60&#34;&gt;X軸のラベルを回転&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.d3noob.org/2013/01/how-to-rotate-text-labels-for-x-axis-of.html&#34;&gt;D3.js Tips and Tricks: How to rotate the text labels for the x Axis of a d3.js graph&lt;/a&gt;を参考にして回転させました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  svg.append(&amp;quot;g&amp;quot;)
      .attr(&amp;quot;class&amp;quot;, &amp;quot;x axis&amp;quot;)
      .attr(&amp;quot;transform&amp;quot;, &amp;quot;translate(0,&amp;quot; + height + &amp;quot;)&amp;quot;)
      .call(xAxis)
      .selectAll(&amp;quot;text&amp;quot;)
        .style(&amp;quot;text-anchor&amp;quot;, &amp;quot;end&amp;quot;)
        .attr(&amp;quot;dx&amp;quot;, &amp;quot;-.8em&amp;quot;)
        .attr(&amp;quot;dy&amp;quot;, &amp;quot;-.6em&amp;quot;)
        .attr(&amp;quot;transform&amp;quot;, &amp;quot;rotate(-90)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ツールチップを出す:d0541cc9ba4f8d6587118da310bcbf60&#34;&gt;ツールチップを出す&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/biovisualize/1016860#gistcomment-61316&#34;&gt;Simple D3 tooltip&lt;/a&gt;の手法で、線でもツールチップは出せなくはないのですが、カーソル位置のデータが取れないので、データの点に円を作成することにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/?fromgroups=#!topic/d3-js/8XLzUYLoFnY&#34;&gt;multi-line chart with circle points - Google グループ&lt;/a&gt;を参考に以下の様なコードで円を作成しました。&lt;/p&gt;

&lt;p&gt;ツールチップを出す部分は&lt;a href=&#34;https://gist.github.com/biovisualize/1016860#gistcomment-61316&#34;&gt;Simple D3 tooltip&lt;/a&gt;を参考にしました。元のコードではイベントを&lt;code&gt;event&lt;/code&gt;で参照していましたが、ChromeとSafariでは動くもののFirefoxではundefinedになっていました。&lt;a href=&#34;https://github.com/mbostock/d3/wiki/Selections#wiki-on&#34;&gt;Selections · mbostock/d3 Wiki&lt;/a&gt;を見ると、&lt;code&gt;d3.event&lt;/code&gt;で参照するのが正しいので修正しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; city. selectAll(&amp;quot;circle&amp;quot;)
      .data(function(d) { return d.values.map(function(v) {
              return {date: v.date, temperature: v.temperature, name: d.name};
            }); })
    .enter().append(&amp;quot;circle&amp;quot;)
      .attr(&amp;quot;cx&amp;quot;, function(d, i) { return x(d.date); })
      .attr(&amp;quot;cy&amp;quot;, function(d, i) { return y(d.temperature); })
      .style(&amp;quot;fill&amp;quot;, function(d) { return color(d.name); })
      .attr(&amp;quot;r&amp;quot;, 1)
      .on(&amp;quot;mouseover&amp;quot;, function(){
        return tooltip.style(&amp;quot;visibility&amp;quot;, &amp;quot;visible&amp;quot;);
      })
      .on(&amp;quot;mousemove&amp;quot;, function(d){
        return tooltip
          .style(&amp;quot;top&amp;quot;, (d3.event.pageY-10)+&amp;quot;px&amp;quot;)
          .style(&amp;quot;left&amp;quot;,(d3.event.pageX+10)+&amp;quot;px&amp;quot;)
          .html(&amp;quot;&amp;lt;dl&amp;gt;&amp;lt;dt&amp;gt;date&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;quot; + d3.time.format(&amp;quot;%Y-%m-%d&amp;quot;)(d.date) + &amp;quot;&amp;lt;/dd&amp;gt;&amp;lt;dt&amp;gt;temperature&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;quot; + d.temperature + &amp;quot;&amp;lt;/dd&amp;gt;&amp;lt;dt&amp;gt;name&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;quot; + d.name + &amp;quot;&amp;lt;/dd&amp;gt;&amp;lt;/dl&amp;gt;&amp;quot;);
      })
      .on(&amp;quot;mouseout&amp;quot;, function(){
        return tooltip.style(&amp;quot;visibility&amp;quot;, &amp;quot;hidden&amp;quot;);
      });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;見た目がうるさくないように円の半径は1とし、線だけ見えるような感じにしています。すると点にカーソルでポイントするのが大変なので、太めのストロークを透明色で指定して、ポイントしやすくしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.tooltip {
  border: 1px solid black;
  background-color: white;
  padding: 5px 8px 4px 8px;
  border-radius: 4px;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;線のデータ補完を止める:d0541cc9ba4f8d6587118da310bcbf60&#34;&gt;線のデータ補完を止める&lt;/h2&gt;

&lt;p&gt;データ補完してしまうと、線とデータ点がずれてしまうので、補完は止めます。
interpolate()を呼ばなければOK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var line = d3.svg.line()
    //.interpolate(&amp;quot;basis&amp;quot;)
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.temperature); });
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>EC2で同じリージョンの全ホストのプライベートIPを起動時にhostsに自動登録</title>
      <link>/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region/</link>
      <pubDate>Sat, 16 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region/</guid>
      <description>

&lt;p&gt;Elastic IPの上限数にひっかかって使えない自体に遭遇したので作りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/jp/contact-us/eip_limit_request/&#34;&gt;Elastic IP アドレス上限緩和申請 | アマゾン ウェブ サービス（AWS 日本語）&lt;/a&gt; から緩和申請できるようです。&lt;/p&gt;

&lt;p&gt;が、申請完了画面で、3〜5営業日かかる、緊急の場合は、完了画面に表示されるCase Numberを添えて ec2-request@amazon.com に送るようにと書かれていました。&lt;/p&gt;

&lt;p&gt;（Case Numberを添えてというのは今気付いた。再度メールしました。ブログに書くために読み返してよかった）&lt;/p&gt;

&lt;p&gt;そこで、hostsにプライベートアドレスを登録するスクリプトを書くことにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://frmmpgit.blog.fc2.com/blog-entry-123.html&#34;&gt;EC2 - 動的プライベートIPアドレスをどうにかする | code up&lt;/a&gt; を参考にしました。ありがとうございます。&lt;/p&gt;

&lt;p&gt;最初は対象のホストの一覧を指定するようなスクリプトを書いていたのですが、ホストを増やすことを考えると編集と反映が面倒だと予想して、リージョン内の全ホストを一括登録することにしました。&lt;/p&gt;

&lt;h2 id=&#34;情報取得用のaimユーザ作成:52b01480e63c8960ca28f50dbc8283f1&#34;&gt;情報取得用のAIMユーザ作成&lt;/h2&gt;

&lt;p&gt;AIMでUserを作ってUser PolicyにReadOnlyAccessを与えます。&lt;/p&gt;

&lt;h2 id=&#34;スクリプト設置:52b01480e63c8960ca28f50dbc8283f1&#34;&gt;スクリプト設置&lt;/h2&gt;

&lt;p&gt;以下の設定ファイルとスクリプトを設置します。&lt;/p&gt;

&lt;p&gt;アクセスキーとシークレットキーは上で作ったユーザのものを設定します。&lt;/p&gt;

&lt;p&gt;/root/.amazon_address_finder_key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export AWS_ACCESS_KEY=${your_access_key_here}
export AWS_SECRET_KEY=${your_secret_key_here}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/usr/local/sbin/update_hosts.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
. /root/.amazon_address_finder_key
region=`ec2-metadata | sed -n &#39;s/^local-hostname: ip-[0-9-]*\.\(.*\)\.compute\.i
nternal/\1/p&#39;`

ec2-describe-instances --region $region -H --show-empty-fields | gawk &#39;
BEGIN {OFS=&amp;quot;\t&amp;quot;; print &amp;quot;127.0.0.1&amp;quot;, &amp;quot;localhost localhost.localdomain&amp;quot;}
/^INSTANCE/ {ip = $18}  
/^TAG/ {print ip, gensub(/.*\tName\t([^\t]*).*/, &amp;quot;\\1&amp;quot;, $0)}  
&#39; &amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/etc/cron.d/update_hosts&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@reboot root /usr/local/sbin/update_hosts.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;実行:52b01480e63c8960ca28f50dbc8283f1&#34;&gt;実行&lt;/h2&gt;

&lt;p&gt;これで、OS起動時にhostsが上書き更新されます。&lt;/p&gt;

&lt;p&gt;インタンスのNameタグに設定した値がホスト名になります。&lt;/p&gt;

&lt;p&gt;出力例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1       localhost localhost.localdomain
10.132.102.199  web01
10.128.21.174   web02
10.120.32.111   app01
10.132.103.238  app02
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;githubに移動しました:52b01480e63c8960ca28f50dbc8283f1&#34;&gt;githubに移動しました&lt;/h2&gt;

&lt;p&gt;さらにhostnameも更新するようにして、スクリプトが発展してきたので、
&lt;a href=&#34;https://github.com/hnakamur/aws_scripts&#34;&gt;hnakamur/aws_scripts · GitHub&lt;/a&gt;
に移動しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>S3 error: Either the Signature query string parameter or the Authorization header should be specified</title>
      <link>/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified/</guid>
      <description>

&lt;h2 id=&#34;現象:ea42678f6806f6a8711cc359661fe424&#34;&gt;現象&lt;/h2&gt;

&lt;p&gt;ApacheからAmazon S3にmod_proxyでリクエストを送ったら、ステータスが400になり、
&amp;ldquo;Either the Signature query string parameter or the Authorization header should be specified, not both&amp;rdquo;というエラーメッセージが出てハマったときのメモです。&lt;/p&gt;

&lt;p&gt;開発中で、Apacheの設定でBASIC認証をかけていました。&lt;/p&gt;

&lt;p&gt;一方、S3では
&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheAuthenticationHeader&#34;&gt;Signing and Authenticating REST Requests - Amazon Simple Storage Service&lt;/a&gt;
にあるように&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Authorization: AWS AWSAccessKeyId:Signature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というリクエストヘッダで認証情報を渡すか、
&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_QSAuth.html&#34;&gt;Using Query String Authentication - Amazon Simple Storage Service&lt;/a&gt;
にあるように&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://quotes.s3.amazonaws.com/nelson?AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&amp;amp;Expires=1177363698&amp;amp;Signature=vjSAMPLENmGa%2ByT272YEAiv4%3D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようなクエリストリングで認証情報を渡すことができます。&lt;/p&gt;

&lt;p&gt;ですが、BASIC認証を使っていると、
&lt;a href=&#34;http://ja.wikipedia.org/wiki/Basic%E8%AA%8D%E8%A8%BC&#34;&gt;Basic認証 - Wikipedia&lt;/a&gt;
にあるように&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というようなヘッダがついてしまうため、S3用の認証情報をクエリストリングで指定していると上記のようなエラーになるというわけでした。&lt;/p&gt;

&lt;h2 id=&#34;解決法:ea42678f6806f6a8711cc359661fe424&#34;&gt;解決法&lt;/h2&gt;

&lt;p&gt;RequetHeader unset ヘッダ名で削除すればOKでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;Location /some/path&amp;gt;
        RequestHeader unset Authorization
    &amp;lt;/Location&amp;gt;
    ProxyRequests Off
    ProxyPassMatch ^/some/path/(.*)$ http://yourdomain.s3-ap-northeast-1.amazonaws.com/$1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意するべきはLocationでS3にプロキシする範囲に限定する必要があるということです。Location無しだとS3にプロキシしないURLについてもAuthorizationヘッダが削除され、BASIC認証のログインダイアログが延々と出続けてしまいました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IAM管理コンソールでAWSの管理画面用のユーザを作成</title>
      <link>/blog/2013/02/09/create-aim-user/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>/blog/2013/02/09/create-aim-user/</guid>
      <description>

&lt;p&gt;AWS (Amazon Web Services)の管理コンソールを複数人で使う場合に大元のIDとパスワードを共有するのは避けたい場合、IAMでユーザを作成するのがよいと&lt;a href=&#34;https://twitter.com/fujiwara&#34;&gt;@fujiwara&lt;/a&gt;さんに教わりました。これは実際に試した時のメモです。&lt;/p&gt;

&lt;p&gt;なお、IAMはIdentity and Access Managementの略です。&lt;/p&gt;

&lt;h2 id=&#34;管理者-aimユーザのログインurlの設定:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: AIMユーザのログインURLの設定&lt;/h2&gt;

&lt;p&gt;初期状態では https://{ランダムな数字}.signin.aws.amazon.com/console のようなURLになっていますが、好きなサブドメインに変更が可能です。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AWSの管理コンソールにログイン&lt;/li&gt;
&lt;li&gt;[IAM]をクリック&lt;/li&gt;
&lt;li&gt;左のメニューで[Dashboard]をクリック&lt;/li&gt;
&lt;li&gt;[Create Account Alias]ボタンを押し、[Account Alias]にサブドメインを入力します。すると https://{入力したサブドメイン}.signin.aws.amazon.com/console がログインURLになります。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;元に戻したい場合は[Remove Account Alias]ボタンを押します。&lt;/p&gt;

&lt;h2 id=&#34;管理者-aimユーザの作成:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: AIMユーザの作成&lt;/h2&gt;

&lt;h3 id=&#34;ユーザの作成とapiアクセスキーのダウンロード:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;ユーザの作成とAPIアクセスキーのダウンロード&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;AWSの管理コンソールにログイン&lt;/li&gt;
&lt;li&gt;[IAM]をクリック&lt;/li&gt;
&lt;li&gt;左のメニューで[Users]をクリック&lt;/li&gt;
&lt;li&gt;上のツールバーで[Create New Users]ボタンを押す&lt;/li&gt;
&lt;li&gt;[Create User]ダイアログで[Enter User Names:]に作成したいユーザのIDを入力。

&lt;ul&gt;
&lt;li&gt;同時に5人までつくれるようです(実際に試したのは1人だけです)。&lt;/li&gt;
&lt;li&gt;AWSサービスのAPIを使う場合は[Generate an access key for each User]チェックボックスをオンのままにしておきます。ここでオフにしていても後からキーを発行できるので、不明の場合はオフでいいです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[Create User]ダイアログで[Create]ボタンを押す&lt;/li&gt;
&lt;li&gt;[Download Credentials]ボタンを押して、&amp;rdquo;User Name&amp;rdquo;,&amp;ldquo;Access Key Id&amp;rdquo;,&amp;ldquo;Secret Access Key&amp;rdquo;が書かれたCSVファイルをダウンロード&lt;/li&gt;
&lt;li&gt;[Close Windows]ボタンを押す&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ユーザの初期パスワード作成とダウンロード:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;ユーザの初期パスワード作成とダウンロード&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;ユーザ一覧でユーザを選択して、上のツールバーの[User Actions]ボタンを押すか、右クリックのポップアップメニューから[Manage Password]メニューを選択&lt;/li&gt;
&lt;li&gt;[Manage Password]ダイアログで[Assign an auto-generated password]ラジオボタンを選択した状態で[Apply]ボタンを押す&lt;/li&gt;
&lt;li&gt;[Download Credentials]ボタンを押し、&amp;rdquo;User Name&amp;rdquo;,&amp;ldquo;Password&amp;rdquo;,&amp;ldquo;Direct Signin Link&amp;rdquo;が書かれたCSVファイルをダウンロード&lt;/li&gt;
&lt;li&gt;[Close Windows]ボタンを押す&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;利用者-初回ログインとパスワード変更:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;利用者: 初回ログインとパスワード変更&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&amp;ldquo;User Name&amp;rdquo;,&amp;ldquo;Password&amp;rdquo;,&amp;ldquo;Direct Signin Link&amp;rdquo;が書かれたCSVファイルのURLをブラウザで開き、ID、パスワードを入力してログインします。&lt;/li&gt;
&lt;li&gt;ツールバー右上のユーザIDのドロップダウンメニューを開き、[Security Credentials]を選択&lt;/li&gt;
&lt;li&gt;現在のパスワードと新しいパスワードを入力して[Change Password]ボタンを押して変更&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;管理者-利用者のパスワード変更:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: 利用者のパスワード変更&lt;/h2&gt;

&lt;p&gt;ユーザ一覧でポップアップメニューの[Manage Password]メニューから変更できます。&lt;/p&gt;

&lt;h2 id=&#34;管理者-利用者のapiアクセスキー追加-削除:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: 利用者のAPIアクセスキー追加、削除&lt;/h2&gt;

&lt;p&gt;ユーザ一覧でポップアップメニューの[Manage Access Keys]メニューから変更できます。&lt;/p&gt;

&lt;h2 id=&#34;管理者-利用者のユーザ削除:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: 利用者のユーザ削除&lt;/h2&gt;

&lt;p&gt;ユーザ一覧でポップアップメニューの[Delete User]メニューから削除できます。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>