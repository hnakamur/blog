<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cockroachdb on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/cockroachdb/index.xml</link>
    <description>Recent content in Cockroachdb on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/tags/cockroachdb/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>分散SQLデータベースCockroachDBのキーバリューストレージのデバッグコマンドを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/30/experiment-cockroachdb-key-value-store/</link>
      <pubDate>Thu, 30 Jun 2016 06:40:12 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/30/experiment-cockroachdb-key-value-store/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;h/blog/2016/06/20/lsm-tree-and-rocksdb/&#34;&gt;LSM-TreeとRocksDB、TiDB、CockroachDBが気になる&lt;/a&gt; で紹介した &lt;a href=&#34;https://github.com/cockroachdb/cockroach#client-drivers&#34;&gt;CockroachDB&lt;/a&gt; は &lt;a href=&#34;https://github.com/cockroachdb/cockroach#what-is-cockroachdb&#34;&gt;What is CockroachDB?&lt;/a&gt; によるとスケールアウトできる分散SQLデータベースです。 &lt;a href=&#34;https://github.com/cockroachdb/cockroach#client-drivers&#34;&gt;PostgreSQLのワイヤープロトコルをサポート&lt;/a&gt; していて、 &lt;a href=&#34;https://github.com/cockroachdb/cockroach#quickstart&#34;&gt;Quickstart&lt;/a&gt; の例のようにPostgreSQLで扱えるSQLのサブセットが使えます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/cockroachdb/cockroach#overview&#34;&gt;Overview&lt;/a&gt; によるとストレージには &lt;a href=&#34;http://rocksdb.org/&#34;&gt;RocksDB&lt;/a&gt; を使用し、複数台のサーバ間の合意アルゴリズムにはRaftを使用しています。&lt;/p&gt;

&lt;p&gt;分散SQLデータベースという本来の機能も魅力的なのですが、書き込みが多いケースに最適化したLSM Treeというデータ構造の実装であるRocksDBをRaftを使って分散トランザクションを実現しているという部分も個人的には興味があります。&lt;/p&gt;

&lt;p&gt;ということで、そのへんのソースを見ていこうと思います。といっても、まだ全体を把握しているわけではないので、だらだら書いていきます。
CockroachDBにデバッグ用のコマンドが用意されていたので、それで実験しつつ読み進めたいと思います。&lt;/p&gt;

&lt;h2 id=&#34;rocksdbラッパーレイヤとengineパッケージ&#34;&gt;RocksDBラッパーレイヤとengineパッケージ&lt;/h2&gt;

&lt;p&gt;RocksDBはC++で書かれているので、Goから呼び出すためcgoでラッピングしているレイヤがあります。 &lt;a href=&#34;https://github.com/cockroachdb/cockroach/tree/master/storage/engine/rocksdb&#34;&gt;cockroach/storage/engine/rocksdb&lt;/a&gt; にC++で書かれたファイルがいくつかあります。 &lt;a href=&#34;https://github.com/cockroachdb/cockroach/tree/master/storage/engine&#34;&gt;cockroach/storage/engine&lt;/a&gt; パッケージのドキュメント &lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine&#34;&gt;engine - GoDoc&lt;/a&gt; にこのパッケージで低レベルのストレージを提供しているという説明があります。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine#Engine&#34;&gt;Engine&lt;/a&gt; はRocksDBなどのストレージバックエンドとやり取りするためのインターフェースです。 Engineは &lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine#ReadWriter&#34;&gt;ReadWriter&lt;/a&gt; インタフェースをエンベッドしていて、それがさらに &lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine#Reader&#34;&gt;Reader&lt;/a&gt; と &lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine#Writer&#34;&gt;Writer&lt;/a&gt; インタフェースをエンベッドしています。&lt;/p&gt;

&lt;p&gt;Reader や Writer インタフェースのメソッドを見るとキーバリューストアのキーは &lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine#MVCCKey&#34;&gt;MVCCKey&lt;/a&gt; という型になっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type MVCCKey struct {
    Key       roachpb.Key
    Timestamp hlc.Timestamp
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/roachpb#Key&#34;&gt;roachpb.Key&lt;/a&gt; は &lt;code&gt;[]byte&lt;/code&gt; と定義されており、 &lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/util/hlc#Timestamp&#34;&gt;hlc.Timestamp&lt;/a&gt; は以下のように定義されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;type Timestamp struct {
    // Holds a wall time, typically a unix epoch time
    // expressed in nanoseconds.
    WallTime int64 `protobuf:&amp;quot;varint,1,opt,name=wall_time,json=wallTime&amp;quot; json:&amp;quot;wall_time&amp;quot;`
    // The logical component captures causality for events whose wall
    // times are equal. It is effectively bounded by (maximum clock
    // skew)/(minimal ns between events) and nearly impossible to
    // overflow.
    Logical int32 `protobuf:&amp;quot;varint,2,opt,name=logical&amp;quot; json:&amp;quot;logical&amp;quot;`
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine&#34;&gt;engine - GoDoc&lt;/a&gt; にEngineインタフェースの上にMVCC (Multi-Version Concurrency Control) システムが提供されていて、それがCockroachDBが分散トランザクションをサポートするための基礎になっていると書かれています。&lt;/p&gt;

&lt;p&gt;その下の &lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine#hdr-Notes_on_MVCC_architecture&#34;&gt;Notes on MVCC architecture&lt;/a&gt; にMVCCアーキテクチャについて詳細な説明があります。じっくり読んだほうが良いと思いますが、一旦飛ばして先に進みます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine#RocksDB&#34;&gt;RocksDB&lt;/a&gt; という構造体定義があり、これが Engine インタフェースを実装しています。  &lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/storage/engine#NewRocksDB&#34;&gt;NewRocksDB&lt;/a&gt; 関数で RocksDB を作成できます。&lt;/p&gt;

&lt;h2 id=&#34;newrocksdb関数の呼び出し箇所&#34;&gt;NewRocksDB関数の呼び出し箇所&lt;/h2&gt;

&lt;p&gt;NewRocksDB関数は、テストコード以外では、以下の2箇所で呼ばれていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/server&#34;&gt;server&lt;/a&gt; パッケージの &lt;a href=&#34;https://godoc.org/github.com/cockroachdb/cockroach/server#Context.InitStores&#34;&gt;func (*Context) InitStores&lt;/a&gt;。

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cockroachdb/cockroach/blob/549d9b575e06921fa96b6ff4881ea348d8b6d00c/server/context.go#L260-L261&#34;&gt;cockroach/context.go at 549d9b575e06921fa96b6ff4881ea348d8b6d00c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cockroachdb/cockroach/blob/master/cli/debug.go&#34;&gt;cockroach/debug.go&lt;/a&gt; の &lt;code&gt;cli.openStore(cmd *cobra.Command, dir string, stopper *stop.Stopper) (engine.Engine, error)&lt;/code&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/cockroachdb/cockroach/blob/549d9b575e06921fa96b6ff4881ea348d8b6d00c/cli/debug.go#L65-L71&#34;&gt;cockroach/debug.go at 549d9b575e06921fa96b6ff4881ea348d8b6d00c&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;後者を呼び出している箇所を見ていくとデバッグ用のサブコマンドがあることがわかりました。&lt;/p&gt;

&lt;h2 id=&#34;デバッグ用サブコマンドを試してみた&#34;&gt;デバッグ用サブコマンドを試してみた&lt;/h2&gt;

&lt;p&gt;前提条件としてLXDの3つのコンテナroach1, roach2, roach3で以下のようにCockroachDBを起動している状態とします。&lt;/p&gt;

&lt;p&gt;roach1&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/sbin/cockroach start --host 192.168.0.13 --insecure
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;roach2&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/sbin/cockroach start --join 192.168.0.13:26257 --insecure --host 192.168.0.14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;roach3&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/local/sbin/cockroach start --join 192.168.0.13:26257 --insecure --host 192.168.0.15
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;特にコンテナでなくても1台のサーバで &lt;a href=&#34;https://github.com/cockroachdb/cockroach#quickstart&#34;&gt;Quickstart&lt;/a&gt;のlocal clusterでも構いません。その場合は下記のコマンドの &lt;code&gt;--host&lt;/code&gt; の部分を適宜読み替えてください。&lt;/p&gt;

&lt;h3 id=&#34;debug-kv-コマンドを試してみた&#34;&gt;debug kv コマンドを試してみた&lt;/h3&gt;

&lt;p&gt;debug kvコマンドで、キー・バリュー・ストアに値を設定したり取得したり出来ます。&lt;/p&gt;

&lt;p&gt;コンテナroach1で値をセットして取得してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@roach1:~# cockroach debug kv scan --host 192.168.0.13
0 result(s)
root@roach1:~# cockroach debug kv put --host 192.168.0.13 foo bar
root@roach1:~# cockroach debug kv get --host 192.168.0.13 foo
&amp;quot;bar&amp;quot;
root@roach1:~# cockroach debug kv scan --host 192.168.0.13
&amp;quot;foo&amp;quot;   &amp;quot;bar&amp;quot;
1 result(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記で設定した値がコンテナroach2でも取得できました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@roach2:~# cockroach debug kv scan --host 192.168.0.14
&amp;quot;foo&amp;quot;   &amp;quot;bar&amp;quot;
1 result(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナroach2からroach1上の値を変更も出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@roach2:~# cockroach debug kv put --host 192.168.0.13 foo &#39;Hello, key value store in CockroachDB&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナroach1上の値一覧を取得して更新されていることを確認しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@roach1:~# cockroach debug kv scan --host 192.168.0.13
&amp;quot;foo&amp;quot;   &amp;quot;Hello, key value store in CockroachDB&amp;quot;
1 result(s)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;debug-keys-コマンドを試してみた&#34;&gt;debug keys コマンドを試してみた&lt;/h3&gt;

&lt;p&gt;debug keysコマンドで、キー・バリュー・ストアの内部構造をダンプして見ることが出来ます。このコマンドはサーバを停止した状態でデータのディレクトリを指定して実行するようになっています。&lt;/p&gt;

&lt;p&gt;サーバが起動したまま実行すると以下のようにロックが取得できないというエラーになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@roach2:~# cockroach debug keys ./cockroach-data
Error: storage/engine/rocksdb.go:158: could not open rocksdb instance: IO error: lock ./cockroach-data/LOCK: Resource temporarily unavailable
Usage:
  cockroach debug keys [directory] [flags]

Flags:
      --from string
        Start key in pretty-printed format. See also --raw.

      --raw
        Interpret keys as raw bytes.

      --to string
        Exclusive end key in pretty-printed format. See also --raw.

      --values
        Print values along with their associated key.

Global Flags:
      --alsologtostderr value[=INFO]   logs at or above this threshold go to stderr (default NONE)
      --log-backtrace-at value         when logging hits line file:N, emit a stack trace (default :0)
      --log-dir value                  if non-empty, write log files in this directory
      --logtostderr                    log to standard error instead of files
      --no-color value                 disable standard error log colorization
      --verbosity value                log level for V logs
      --vmodule value                  comma-separated list of pattern=N settings for file-filtered logging

Failed running &amp;quot;debug&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;そこでコンテナroach2のサーバを停止してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@roach2:~# cockroach quit --host 192.168.0.14
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サーバを停止したらキーの一覧を表示してみます。以下の例では &lt;code&gt;foo&lt;/code&gt; の前後5行を表示しています。
fooという文字列の後にタイムスタンプがついているのがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@roach2:~# cockroach debug keys ./cockroach-data | grep -A 5 -B 5 foo
&amp;quot;/System/\&amp;quot;update-cluster\&amp;quot;/1466351519.447511853,0&amp;quot;
&amp;quot;/System/\&amp;quot;update-cluster\&amp;quot;/1466265107.436191749,0&amp;quot;
&amp;quot;/System/\&amp;quot;update-cluster\&amp;quot;/1466265097.406397710,0&amp;quot;
&amp;quot;/System/\&amp;quot;update-cluster\&amp;quot;/1466178687.396782782,0&amp;quot;
&amp;quot;/System/\&amp;quot;update-cluster\&amp;quot;/1466178677.619687555,85&amp;quot;
&amp;quot;\&amp;quot;foo\&amp;quot;/1467234744.564568969,0&amp;quot;
&amp;quot;\&amp;quot;foo\&amp;quot;/1467221373.376922221,0&amp;quot;
&amp;quot;/Table/2/1/0/\&amp;quot;bank\&amp;quot;/3/1/1466178749.722011447,0&amp;quot;
&amp;quot;/Table/2/1/0/\&amp;quot;system\&amp;quot;/3/1/1466178677.367397368,0&amp;quot;
&amp;quot;/Table/2/1/1/\&amp;quot;descriptor\&amp;quot;/3/1/1466178677.367397368,0&amp;quot;
&amp;quot;/Table/2/1/1/\&amp;quot;eventlog\&amp;quot;/3/1/1466178677.367397368,0&amp;quot;
&amp;quot;/Table/2/1/1/\&amp;quot;lease\&amp;quot;/3/1/1466178677.367397368,0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--values&lt;/code&gt; オプションも追加すると、キーだけではなく値も表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cockroach debug keys --values cockroach-data/ | less
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して、 &lt;code&gt;foo&lt;/code&gt; のキーに対応する部分を見てみると以下のようになっていました。横に長過ぎるので折り返して表示しています。&lt;/p&gt;

&lt;p&gt;/Local/RangeID/21/u/RaftLog/logIndex:104861: Type:EntryNormal Term:51415 Index:104861  by {2 2 2}
  Put [&amp;ldquo;foo&amp;rdquo;,/Min)
  range_id:21 origin_replica:&lt;node_id:2 store_id:2 replica_id:2 &gt; cmd:&lt;header:&lt;timestamp:&lt;wall_time:1467234744564568969 logical:0 &gt; replica:&lt;node_id:2 store_id:2 replica_id:2 &gt; range_id:21 user_priority:NORMAL read_consistency:CONSISTENT trace:&lt;trace_id:4947902158296355776 span_id:7041358067641207168 &gt; max_scan_results:0 distinct_spans:false &amp;gt; requests:&lt;put:&lt;header:&lt;key:&#34;foo&#34; &gt; value:&lt;raw_bytes:&#34;s|S\306\003Hello, key value store in CockroachDB&#34; timestamp:&lt;wall_time:0 logical:0 &gt; &amp;gt; inline:false blind:false &amp;gt; &amp;gt; &amp;gt; max_lease_index:990&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;CockroachDBのキーバリューストレージのデバッグコマンドを試してみました。対応するソースコードも読んでみたいところですが、
&lt;a href=&#34;https://www.arangodb.com/2016/06/arangodb-3-0-a-solid-ground-to-scale/&#34;&gt;ArangoDB 3.0 – A Solid Ground to Scale – ArangoDB&lt;/a&gt;
というニュースを知ったので、今後はArangoDBのほうを先に調べたいと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>