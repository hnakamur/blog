<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rpm on hnakamur&#39;s blog at github</title>
    <link>/blog/tags/rpm/</link>
    <description>Recent content in Rpm on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Tue, 15 Dec 2015 04:19:16 +0900</lastBuildDate>
    <atom:link href="/blog/tags/rpm/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました</title>
      <link>/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</link>
      <pubDate>Tue, 15 Dec 2015 04:19:16 +0900</pubDate>
      
      <guid>/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</guid>
      <description>

&lt;h2 id=&#34;はじめに:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/&#34;&gt;Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;と&lt;a href=&#34;/blog/blog/2015/12/05/build_rpm_with_mock/&#34;&gt;mockコマンドでrpmをビルドする · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の環境でいくつかrpmをビルド・配布してみたのですが、手元の環境でビルドを成功させるまでに試行錯誤するのと、coprにsrpmをアップロードしてビルド・配布するのが別の環境だと面倒なことに気付きました。&lt;/p&gt;

&lt;p&gt;そこで、1つのdockerコンテナで両方を行えるようにしました。&lt;/p&gt;

&lt;h2 id=&#34;travis-ciは外しました:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;Travis CIは外しました&lt;/h2&gt;

&lt;p&gt;また、Travis CIは使わないようにしました。理由は2つあります。1つめの理由はgithubのプロジェクトごとにTravis CIのプロジェクトを作ってcopr APIのログイン名、ユーザ名、トークンを環境変数で設定するのが面倒だったからです。これ自体はTravisのAPIを使えば解決する問題かもしれません。&lt;/p&gt;

&lt;p&gt;2つめの理由は、結局手元の環境でビルドを試すので、そこからそのままcoprにsrpmを上げるほうが手っ取り早いことに気づいたからです。これは初回にrpmのspecファイルを作成するときも、その後specファイルのバージョンを更新して新しいバージョンのrpmを作成するときもそうです。&lt;/p&gt;

&lt;h2 id=&#34;nginxのカスタムrpmをビルド-配布するためのdockerコンテナ:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;nginxのカスタムrpmをビルド・配布するためのdockerコンテナ&lt;/h2&gt;

&lt;p&gt;githubレポジトリ&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm&#34;&gt;hnakamur/nginx-rpm&lt;/a&gt;に公開しています。対応するcoprのプロジェクトは&lt;a href=&#34;https://copr.fedoraproject.org/coprs/hnakamur/nginx/&#34;&gt;hnakamur/nginx Copr&lt;/a&gt;です。&lt;/p&gt;

&lt;h2 id=&#34;ビルド前の準備:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;ビルド前の準備&lt;/h2&gt;

&lt;h3 id=&#34;copr-apiトークンを-envrcにコピー:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;copr APIトークンを.envrcにコピー&lt;/h3&gt;

&lt;p&gt;coprを使うにはFedoraアカウントが必要です。&lt;a href=&#34;https://admin.fedoraproject.org/accounts/user/new&#34;&gt;Sign up for a Fedora account&lt;/a&gt; から登録してください。&lt;/p&gt;

&lt;p&gt;Fedoraアカウントにログインした状態で &lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;を開くと、ページの先頭にAPI Tokenというセクションがあり、以下のような内容が表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[copr-cli]
login = ログインID
username = ユーザ名
token = トークン
copr_url = https://copr.fedoraproject.org
# expiration date: 2016-05-12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドを実行して上記のgithubレポジトリを手元にコピーします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/hnakamur/nginx-rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.envrc.example&lt;/code&gt; を &lt;code&gt;.envrc&lt;/code&gt; にコピーして、上で表示したログインID、ユーザ名、トークンを &lt;code&gt;.envrc&lt;/code&gt; 内の &lt;code&gt;COPR_LOGIN&lt;/code&gt;, &lt;code&gt;COPR_USERNAME&lt;/code&gt;, &lt;code&gt;COPR_TOKEN&lt;/code&gt; 環境変数に設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# NOTE: Copy this file to .envrc and edit the values
# Go https://copr.fedoraproject.org/api/ and login in and see the values to set.
export COPR_LOGIN=_your_login_here_
export COPR_USERNAME=_your_username_here_
export COPR_TOKEN=_your_token_here_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;セキュリティを考慮してこれらの値はdockerのイメージには埋め込まず、実行時にdockerの &lt;code&gt;-e&lt;/code&gt; オプションで渡すようにしています。具体的には &lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/docker_wrapper.sh&#34;&gt;docker_wrapper.sh&lt;/a&gt; の &lt;code&gt;docker run&lt;/code&gt; の行を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;specファイルの調整:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;specファイルの調整&lt;/h3&gt;

&lt;p&gt;specファイルは &lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/SPECS/nginx.spec&#34;&gt;SPECS/nginx&lt;/a&gt; にあります。各自のニーズに応じて適宜調整します。現時点では &lt;a href=&#34;http://nginx.org/packages/centos/7/SRPMS/&#34;&gt;http://nginx.org/packages/centos/7/SRPMS/&lt;/a&gt; で配布されているCentOS 7用のsrpmをベースに以下の3つのモジュールを組み込んだものになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;openresty/lua-nginx-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yaoweibin/nginx_upstream_check_module&#34;&gt;yaoweibin/nginx_upstream_check_module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/replay/ngx_http_consistent_hash&#34;&gt;replay/ngx_http_consistent_hash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nginx.orgで配布されているsrpm内のnginx.specからの差分は &lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/compare/7e234d2a222778c0a46204dba4e2dcaae8bf7894...ce4e842731a9b90034f9e00796e16839d8bda826&#34;&gt;https://github.com/hnakamur/nginx-rpm/compare/7e234d2a222778c0a46204dba4e2dcaae8bf7894...ce4e842731a9b90034f9e00796e16839d8bda826&lt;/a&gt; で見られます。&lt;/p&gt;

&lt;h3 id=&#34;sources-ファイルの調整:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;SOURCES/*ファイルの調整&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/tree/master/SOURCES&#34;&gt;SOURCES/&lt;/a&gt;にsrpmで必要なソースファイルを置いています。必要に応じて調整してください。今は &lt;a href=&#34;http://nginx.org/packages/centos/7/SRPMS/&#34;&gt;http://nginx.org/packages/centos/7/SRPMS/&lt;/a&gt; で配布されているCentOS 7用のsrpmから頂いたものをそのまま使用しています。&lt;/p&gt;

&lt;p&gt;なお、nginx自体のソースコード(例: nginx-1.9.9.tar.gz)や各エクステンションのソースコードは含めず、ビルド時にダウンロードするようにしています。これはgitレポジトリの肥大化を防ぐためです。&lt;/p&gt;

&lt;h3 id=&#34;ビルドスクリプトの調整:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;ビルドスクリプトの調整&lt;/h3&gt;

&lt;p&gt;ビルドスクリプト&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/scripts/build.sh&#34;&gt;scripts/build.sh&lt;/a&gt;も適宜調整します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copr_project_name、copr_project_description、copr_project_instructions、rpm_nameをお好みで編集してください。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;download_source_files&lt;/code&gt; 関数はspecファイルの &lt;code&gt;/^Source[0-9]*:&lt;/code&gt; にマッチするパターンで値がhttpから始まるURLについてダウンロードするようにしています。そしてURLの最後のスラッシュ以降をファイル名として採用しています。このルールから外れる場合は、この関数を適宜変更してください。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dockerfileとdockerのラッパースクリプトを調整:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;Dockerfileとdockerのラッパースクリプトを調整&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;と&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/docker_wrapper.sh&#34;&gt;docker_wrapper.sh&lt;/a&gt;を適宜調整してください。&lt;/p&gt;

&lt;p&gt;通常は&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/fa051c195e030c2e7f247fa258c6fad1ef9f0dde/docker_wrapper.sh&#34;&gt;docker_wrapper.sh&lt;/a&gt;のdockerimageを好きな名前に変えるぐらいで大丈夫だと思います。&lt;/p&gt;

&lt;h2 id=&#34;dockerイメージを作成:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;dockerイメージを作成&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行してdockerイメージをビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./docker_wrapper.sh build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dockerイメージを起動してmockでrpmをビルド:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;dockerイメージを起動してmockでrpmをビルド&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行してdockerイメージを起動してbashプロンプトを表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source .envrc
./docker_wrapper.sh bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに私は&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv/direnv&lt;/a&gt;を使っているので、 &lt;code&gt;source .envrc&lt;/code&gt; の行は自分で入力しなくても&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv/direnv&lt;/a&gt;が実行してくれるので便利です。direnvについては&lt;a href=&#34;http://blog.hde.co.jp/entry/2015/02/27/182117&#34;&gt;改めて、direnvを使いましょう！ - HDE BLOG&lt;/a&gt;などの記事を参照してください。&lt;/p&gt;

&lt;p&gt;dockerイメージのbashプロンプトで以下のコマンドを実行してmockでrpmをビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./build.sh mock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mockはchroot環境を作ってそこでrpmをビルドするようになっているので、chroot環境の作成にちょっと時間がかかります。&lt;/p&gt;

&lt;p&gt;dockerコンテナという独立空間が既にあるのにmockでchroot環境を作るのは無駄なんですが、coprがmockを使っているためmockでビルドが成功することを確認してからcoprにsrpmをアップロードするほうが、coprでのビルド失敗を減らせて良いですのでこうしています。&lt;/p&gt;

&lt;h2 id=&#34;coprにsrpmをアップロードして-rpmをビルド-配布:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;coprにsrpmをアップロードして、rpmをビルド・配布&lt;/h2&gt;

&lt;p&gt;mockでrpmのビルドが成功することを確認できたら、dockerコンテナ内で以下のコマンドを実行してsrpmをcoprにアップロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./build.sh copr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/scripts/build.sh&#34;&gt;scripts/build.sh&lt;/a&gt;の &lt;code&gt;copr_project_name&lt;/code&gt; で指定した名前のプロジェクトがcopr上に存在しない場合はまず作成してからsrpmをアップロードするようになっています。&lt;/p&gt;

&lt;p&gt;coprのプロジェクト &lt;code&gt;https://copr.fedoraproject.org/coprs/${COPR_USER_NAME}/${copr_project_name}/&lt;/code&gt; でビルドが完了すれば、rpmのレポジトリとして利用可能です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;mockとcoprを使ってnginxのカスタムrpmをビルド・配布する環境について説明しました。&lt;/p&gt;

&lt;p&gt;mockを使ってクリーンな環境でビルドできるので、今回のスクリプトでdockerコンテナを使う必要性は特にありません。Dockerfileでセットアップしたのと同等のCentOS7環境があれば &lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/scripts/build.sh&#34;&gt;scripts/build.sh&lt;/a&gt;を使ってsrpmのビルド、rpmのビルド、srpmのcoprへのアップロードを行えます。&lt;/p&gt;

&lt;p&gt;mockでのrpmのビルドが失敗した場合の調査方法とかcoprのAPIをcopr-cliではなくcurlで呼び出している話とか、いくつか書きたい話があるので日を改めて別記事として書こうと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた</title>
      <link>/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/</link>
      <pubDate>Thu, 26 Nov 2015 22:33:57 +0900</pubDate>
      
      <guid>/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/</guid>
      <description>

&lt;h2 id=&#34;2015-12-15-追記:feab3b17551715c7fe87c510b9d66160&#34;&gt;2015-12-15 追記&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/&#34;&gt;nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;という記事を書きましたのでそちらもご参照ください。&lt;/p&gt;

&lt;h2 id=&#34;はじめに:feab3b17551715c7fe87c510b9d66160&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;CentOSを使っていると、パッケージのバージョンが古いのでspecファイルを改変してrpmをビルドすることがちょくちょくあります。
一度ビルドした後は、自作rpmのレポジトリサーバを立ててそこに置いておくのが本来は良いんだろうなと思います。
ですが、サーバの運用の手間を考えると面倒だなと思って、AnsibleやDockerでのプロビジョニング中にビルドするようにしていました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://copr.fedoraproject.org/coprs/&#34;&gt;fedora projectのcoprというサービス&lt;/a&gt;を使うと、自分でサーバを用意しなくても
自作rpmのビルドとホスティングが出来ることを知り、試してみました。&lt;/p&gt;

&lt;h3 id=&#34;今回試したサンプル:feab3b17551715c7fe87c510b9d66160&#34;&gt;今回試したサンプル&lt;/h3&gt;

&lt;p&gt;githubのレポジトリは&lt;a href=&#34;https://github.com/hnakamur/nodejs-rpm&#34;&gt;hnakamur/nodejs-rpm&lt;/a&gt;にあります。Node.jsをビルドするrpmです。&lt;/p&gt;

&lt;p&gt;specファイルは&lt;a href=&#34;https://github.com/kazuhisya/nodejs-rpm&#34;&gt;kazuhisya/nodejs-rpm&lt;/a&gt;のをほぼ流用しています。ありがとうございます！
一点変更したのはダウンロードするNode.jsのソースのtarballを &lt;code&gt;node-v*.tar.gz&lt;/code&gt; ではなく &lt;code&gt;node-v*.tar.xz&lt;/code&gt; にしています。&lt;/p&gt;

&lt;h2 id=&#34;coprについて:feab3b17551715c7fe87c510b9d66160&#34;&gt;coprについて&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://fedorahosted.org/copr/&#34;&gt;copr&lt;/a&gt;に説明があります。FAQの&lt;a href=&#34;https://fedorahosted.org/copr/wiki/UserDocs#HowisCoprpronounced&#34;&gt;How is Copr pronounced?&lt;/a&gt;によると、銅(copper)と同じでカッパーと発音するそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://fedorahosted.org/copr/wiki/UserDocs#Howlongdoyoukeepthebuilds&#34;&gt;How long do you keep the builds?&lt;/a&gt;によるとプロジェクトごとに最後に成功したビルドだけが保持されて、古いバージョンのビルドや失敗したビルドは14日後に削除されるそうです。&lt;/p&gt;

&lt;p&gt;ですので、古いバージョンも残しておきたい場合は、coprは使えません。その場合は自前でレポジトリサーバを立てて運用するしかなさそうです。&lt;/p&gt;

&lt;h3 id=&#34;参考-coprのウェブ管理画面にsrpmをアップロードしてrpmをビルドする手順:feab3b17551715c7fe87c510b9d66160&#34;&gt;参考: coprのウェブ管理画面にsrpmをアップロードしてrpmをビルドする手順&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://fedorahosted.org/copr/wiki/ScreenshotsTutorial&#34;&gt;ScreenshotsTutorial – copr&lt;/a&gt;にcoprのウェブ管理画面からsrpmをアップロードしてrpmをビルドする手順がスクリーンショット満載で説明されています。&lt;/p&gt;

&lt;h2 id=&#34;今回試したビルド手順の流れ:feab3b17551715c7fe87c510b9d66160&#34;&gt;今回試したビルド手順の流れ&lt;/h2&gt;

&lt;p&gt;今回試したビルド手順の流れは以下の通りです。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;githubのプロジェクトにspecファイルを置きます。&lt;/li&gt;
&lt;li&gt;git pushしたときにTravis CIでdockerコンテナを動かしてsrpmを作ってcoprに投入します。&lt;/li&gt;
&lt;li&gt;coprでrpmをビルドしてホスティングしてもらいます。&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;事前準備:feab3b17551715c7fe87c510b9d66160&#34;&gt;事前準備&lt;/h2&gt;

&lt;h3 id=&#34;fedora-account-登録:feab3b17551715c7fe87c510b9d66160&#34;&gt;Fedora account 登録&lt;/h3&gt;

&lt;p&gt;まずは &lt;a href=&#34;https://admin.fedoraproject.org/accounts/user/new&#34;&gt;Sign up for a Fedora account&lt;/a&gt; からアカウント登録します。手順はメモしてなかったので省略します。&lt;/p&gt;

&lt;p&gt;私のアカウントのログイン後の「アカウントの詳細」のページを見ると「あなたの役割」のところにSigned CLA GroupとSigners of the Fedora Project Contributor Agreementという項目があり、共にステータスが「承認されました」となっているので、これらの申請の手順が必要だったと思います。&lt;/p&gt;

&lt;p&gt;承認されるまでしばらく時間がかかって、その間にrpmをビルドしてみたら署名されないことがありました。今ではプロジェクトごとに鍵が自動生成されてrpmが署名されるようになっています。&lt;/p&gt;

&lt;h3 id=&#34;travis-ciのプロジェクト作成:feab3b17551715c7fe87c510b9d66160&#34;&gt;Travis CIのプロジェクト作成&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://travis-ci.org/hnakamur/nodejs-rpm&#34;&gt;Travis CI上にhnakamur/nodejs-rpmプロジェクト&lt;/a&gt;を作成して、githubのレポジトリ&lt;a href=&#34;https://github.com/hnakamur/nodejs-rpm&#34;&gt;hnakamur/nodejs-rpm&lt;/a&gt;に対応付けておきます。手順はメモしてなかったので省略します。&lt;/p&gt;

&lt;h3 id=&#34;travis-ciでdockerでコンテナを動かしてsrpmを作る:feab3b17551715c7fe87c510b9d66160&#34;&gt;Travis CIでdockerでコンテナを動かしてsrpmを作る&lt;/h3&gt;

&lt;p&gt;Travis CIでdockerを使う方法は &lt;a href=&#34;https://docs.travis-ci.com/user/docker/&#34;&gt;Using Docker in Builds - Travis CI&lt;/a&gt; で説明されています。&lt;/p&gt;

&lt;p&gt;試行錯誤の結果、以下のような &lt;a href=&#34;https://github.com/hnakamur/nodejs-rpm/blob/0ed19cd5504fcb11875f12184bdb3ccd27caa6aa/.travis.yml&#34;&gt;.travis.yml&lt;/a&gt;を作成しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo: required

services:
  - docker

branches:
  only:
    - master
    - LTS

install:
  - docker build -t hnakamur/nodejsrpm .

script:
  - case $TRAVIS_BRANCH in master) project=nodejs5;; LTS) project=nodejs;; esac
  - docker run hnakamur/nodejsrpm &amp;quot;$COPR_LOGIN&amp;quot; &amp;quot;$COPR_USERNAME&amp;quot; &amp;quot;$COPR_TOKEN&amp;quot; &amp;quot;$project&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/nodejs-rpm&#34;&gt;hnakamur/nodejs-rpm&lt;/a&gt;では、mainブランチでNode.jsのv5.x (Stable)、LTSブランチでNode.jsのv4.x (LTS)のspecファイルを保持しています。&lt;/p&gt;

&lt;p&gt;coprは上記の通り1つのプロジェクトで複数バージョンは保持できないので、 &lt;a href=&#34;https://copr.fedoraproject.org/coprs/hnakamur/nodejs5/&#34;&gt;hnakamur/nodejs5 Copr&lt;/a&gt; と &lt;a href=&#34;https://copr.fedoraproject.org/coprs/hnakamur/nodejs/&#34;&gt;hnakamur/nodejs Copr&lt;/a&gt; の2つのプロジェクトを作ることにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables/#Default-Environment-Variables&#34;&gt;Environment Variables - Travis CI&lt;/a&gt;によると &lt;code&gt;TRAVIS_BRANCH&lt;/code&gt; 環境変数でgitのブランチが取得できます。ブランチ名に応じてプロジェクト名を切り替え、 &lt;code&gt;docker run&lt;/code&gt; で呼び出すスクリプトの引数に渡しています。&lt;/p&gt;

&lt;p&gt;COPR_LOGIN、COPR_USERNAME、COPR_TOKENの3つの環境変数ですが、Fedora accountにログインした状態で &lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;にアクセスし表示された値を使います。表示されているのはcoprのコマンドラインクライアント &lt;a href=&#34;https://pypi.python.org/pypi/copr-cli&#34;&gt;copr-cli&lt;/a&gt;用の設定ファイル &lt;code&gt;~/.config/copr&lt;/code&gt; の内容です。&lt;/p&gt;

&lt;p&gt;APIのアクセストークンなどは秘密にすべき情報なのでgithubのレポジトリ内のファイルには含めてはいけません。&lt;/p&gt;

&lt;p&gt;そこでこれらの値は&lt;a href=&#34;https://travis-ci.org/hnakamur/nodejs-rpm&#34;&gt;Travis CI上のhnakamur/nodejs-rpmプロジェクト&lt;/a&gt;で&lt;a href=&#34;https://docs.travis-ci.com/user/environment-variables/#Defining-Variables-in-Repository-Settings&#34;&gt;Defining Variables in Repository Settings&lt;/a&gt;の手順に従って設定しておきます。&lt;/p&gt;

&lt;p&gt;プロジェクトの管理画面の右上の[Settings]/[Settings]メニュー (このメニューはプロジェクトの管理者にのみ表示されます)を選んでCOPR_LOGIN、COPR_USERNAME、COPR_TOKENの3つの環境変数を追加します。COPR_LOGINとCOPR_TOKENの2つは[Display value in build log]を[ON]にしてログに出力しないようにしました。&lt;/p&gt;

&lt;p&gt;docker runで実行されるスクリプトの内容は以下の通りです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/nodejs-rpm/blob/0ed19cd5504fcb11875f12184bdb3ccd27caa6aa/copr-build.sh&#34;&gt;https://github.com/hnakamur/nodejs-rpm/blob/0ed19cd5504fcb11875f12184bdb3ccd27caa6aa/copr-build.sh&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/bash
set -e
copr_login=$1
copr_username=$2
copr_token=$3
project_name=$4

spec_file=/root/rpmbuild/SPECS/nodejs.spec

mkdir -p /root/.config
cat &amp;gt; /root/.config/copr &amp;lt;&amp;lt;EOF
[copr-cli]
login = ${copr_login}
username = ${copr_username}
token = ${copr_token}
copr_url = https://copr.fedoraproject.org
EOF

status=`curl -s -o /dev/null -w &amp;quot;%{http_code}&amp;quot; https://copr.fedoraproject.org/api/coprs/${copr_username}/${project_name}/detail/`
if [ $status = &amp;quot;404&amp;quot; ]; then
  copr-cli create --chroot epel-7-x86_64 --description &#39;node.js repository&#39; ${project_name}
fi
version=`awk &#39;$1==&amp;quot;Version:&amp;quot; {print $2}&#39; ${spec_file}`
release=$(rpm --eval `awk &#39;$1==&amp;quot;Release:&amp;quot; {print $2}&#39; ${spec_file}`)
srpm_file=/root/rpmbuild/SRPMS/nodejs-${version}-${release}.src.rpm
copr-cli build --nowait ${project_name} ${srpm_file}

rm /root/.config/copr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;まず、引数で渡された情報を元にcopr-cliの設定ファイル &lt;code&gt;/root/.config/copr&lt;/code&gt; を生成します。
次にcoprのAPIでプロジェクトが作成済みかチェックし、作成されていなければ作成します。
その後、 &lt;code&gt;copr-cli build&lt;/code&gt; でsrpmをcoprにアップロードしてビルドを開始します。&lt;/p&gt;

&lt;p&gt;curlでhttpステータスだけを出力する方法は &lt;a href=&#34;http://superuser.com/questions/272265/getting-curl-to-output-http-status-code/442395#442395&#34;&gt;Getting curl to output HTTP status code? - Super User&lt;/a&gt; で知りました。ありがとうございます！&lt;/p&gt;

&lt;p&gt;ビルド完了までTravis側で待つようにするのはムダだと思ったので &lt;code&gt;copr-cli build&lt;/code&gt; には &lt;code&gt;--nowait&lt;/code&gt; オプションを指定しました。代わりに &lt;a href=&#34;https://apps.fedoraproject.org/notifications/&#34;&gt;Fedora Notifications&lt;/a&gt;でメール通知を有効にして、ビルド終了時には &lt;code&gt;notifications@fedoraproject.org&lt;/code&gt; からメールが届くようにして使っています。&lt;/p&gt;

&lt;h3 id=&#34;srpmのビルドとcopr-cliのインストール:feab3b17551715c7fe87c510b9d66160&#34;&gt;srpmのビルドとcopr-cliのインストール&lt;/h3&gt;

&lt;p&gt;話が前後しますが、srpmのビルドとcopr-cliのインストールは &lt;code&gt;docker build&lt;/code&gt; で行っています。
&lt;a href=&#34;https://github.com/hnakamur/nodejs-rpm/blob/0ed19cd5504fcb11875f12184bdb3ccd27caa6aa/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;の内容は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;FROM centos:7
MAINTAINER Hiroaki Nakamura &amp;lt;hnakamur@gmail.com&amp;gt;

RUN yum -y install rpmdevtools rpm-build \
 &amp;amp;&amp;amp; rpmdev-setuptree

RUN yum -y install epel-release \
 &amp;amp;&amp;amp; yum -y install python-pip \
 &amp;amp;&amp;amp; pip install copr-cli

ADD nodejs.spec /root/rpmbuild/SPECS/
ADD node-js.*patch /root/rpmbuild/SOURCES/

RUN version=`awk &#39;$1==&amp;quot;Version:&amp;quot; {print $2}&#39; /root/rpmbuild/SPECS/nodejs.spec` \
 &amp;amp;&amp;amp; curl -sL -o /root/rpmbuild/SOURCES/node-v${version}.tar.xz https://nodejs.org/dist/v${version}/node-v${version}.tar.xz \
 &amp;amp;&amp;amp; rpmbuild -bs /root/rpmbuild/SPECS/nodejs.spec

ADD copr-build.sh /root/
ENTRYPOINT [&amp;quot;/bin/bash&amp;quot;, &amp;quot;/root/copr-build.sh&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;copr-cliはCentOS 7だとepelから &lt;code&gt;yum install&lt;/code&gt; でインストール可能なのですが、バージョンが古いため &lt;code&gt;copr-cli build&lt;/code&gt; でsrpmファイルのパスを指定してアップロードする機能が無いようです。サイトにアップロードしておいてURLを指定することは可能なのですが、それだと面倒なので &lt;code&gt;pip&lt;/code&gt; を使って最新版の &lt;code&gt;copr-cli&lt;/code&gt; をインストールしています。&lt;/p&gt;

&lt;p&gt;長く運用するサーバならrpmでインストールされるパスと同じパスにpipでインストールしてしまうのは良くないかもしれませんが、ビルド終了したら破棄するコンテナなので気にせず上書きインストールとしています。&lt;/p&gt;

&lt;h2 id=&#34;rpmを使う手順:feab3b17551715c7fe87c510b9d66160&#34;&gt;rpmを使う手順&lt;/h2&gt;

&lt;p&gt;例えば&lt;a href=&#34;https://copr.fedoraproject.org/coprs/hnakamur/nodejs/&#34;&gt;hnakamur/nodejs Copr&lt;/a&gt;だと右の方の[Quick Enable]という欄に &lt;code&gt;dnf copr enable hnakamur/nodejs&lt;/code&gt; というコマンドで有効にできるという説明があります。&lt;/p&gt;

&lt;p&gt;その下のリンクをたどると&lt;a href=&#34;https://fedorahosted.org/copr/wiki/HowToEnableRepo&#34;&gt;HowToEnableRepo – copr&lt;/a&gt;に
yumの場合は &lt;code&gt;yum copr enable user/project&lt;/code&gt; となるとあります。ただし、 &lt;code&gt;yum-plugin-copr&lt;/code&gt; という &lt;code&gt;yum&lt;/code&gt; のプラグインが必要です。&lt;/p&gt;

&lt;p&gt;これはepelとかには無いようで、&lt;a href=&#34;https://copr.fedoraproject.org/coprs/alonid/yum-plugin-copr/&#34;&gt;alonid/yum-plugin-copr Copr&lt;/a&gt;にありました。が、これをインストールするにはこのプロジェクトを有効にする必要があるので面倒です。&lt;/p&gt;

&lt;p&gt;コマンドを使わなくても&lt;a href=&#34;https://copr.fedoraproject.org/coprs/hnakamur/nodejs/&#34;&gt;hnakamur/nodejs Copr&lt;/a&gt;のActive Releasesセクションの表のRepo Downloadの列にある[Epel 7]というボタンを押すと以下のようにレポジトリの設定ファイルが表示されます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://copr.fedoraproject.org/coprs/hnakamur/nodejs/repo/epel-7/hnakamur-nodejs-epel-7.repo&#34;&gt;https://copr.fedoraproject.org/coprs/hnakamur/nodejs/repo/epel-7/hnakamur-nodejs-epel-7.repo&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[hnakamur-nodejs]
name=Copr repo for nodejs owned by hnakamur
baseurl=https://copr-be.cloud.fedoraproject.org/results/hnakamur/nodejs/epel-7-$basearch/
skip_if_unavailable=True
gpgcheck=1
gpgkey=https://copr-be.cloud.fedoraproject.org/results/hnakamur/nodejs/pubkey.gpg
enabled=1
enabled_metadata=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なので、これを &lt;code&gt;/etc/yum.repos.d/hnakamur-nodejs-epel-7.repo&lt;/code&gt; に保存して &lt;code&gt;yum install nodejs&lt;/code&gt; でインストールすればOKです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:feab3b17551715c7fe87c510b9d66160&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;これでスペックファイルを書いてgithubにプッシュすれば、coprでrpmをビルドして公開されるようになり便利になりました。&lt;/p&gt;

&lt;p&gt;ただし問題もあって、coprのビルドはときどき失敗してしまうようです。スペックファイルの中身を変えずにREADMEに無意味な空行を入れるなどして再度pushしてビルドを再実行すると成功したりしました。&lt;/p&gt;

&lt;h2 id=&#34;さらに気になっていること:feab3b17551715c7fe87c510b9d66160&#34;&gt;さらに気になっていること&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://fedorahosted.org/copr/wiki/ScreenshotsTutorial&#34;&gt;ScreenshotsTutorial – copr&lt;/a&gt;の[New Build]タブのスクリーンショットには[From URLs]と[Upload SRPM]という2つのタブしかないですが、実際の画面ではそれに加えて [Git and Tito]、[Mock SCM]というタブがあります。&lt;/p&gt;

&lt;p&gt;これらを使うとTravis CIを使わずにビルドできるかもしれないと期待しているのですが、使い方の説明を見つけられておらず使い方がわからない状態です。ということで一旦この記事を書きました。&lt;/p&gt;

&lt;h2 id=&#34;2015-12-06-追記:feab3b17551715c7fe87c510b9d66160&#34;&gt;2015-12-06 追記&lt;/h2&gt;

&lt;p&gt;rpmのビルドが通るまでの試行錯誤中は毎回coprでビルドするより手元の環境でビルドするほうが快適です。そのための手順を&lt;a href=&#34;/blog/blog/2015/12/05/build_rpm_with_mock/&#34;&gt;mockコマンドでrpmをビルドする · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;に書きましたので、ご参照ください。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>