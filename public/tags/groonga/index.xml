<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Groonga on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/groonga/index.xml</link>
    <description>Recent content in Groonga on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/tags/groonga/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>groongaのgoバインディングでWikipedia全文検索のサンプルウェブアプリを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</link>
      <pubDate>Tue, 12 May 2015 21:24:11 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.io/blog/2015/04/27/cgoroonga/&#34;&gt;データ登録用にgroongaのC APIのgoバインディングを書いてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の続きで、APIを追加実装し、Wikipedia全文検索のサンプルウェブアプリを作ってみました。&lt;/p&gt;

&lt;h2 id=&#34;ソースコード&#34;&gt;ソースコード&lt;/h2&gt;

&lt;p&gt;ウェブアプリのソースは
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/tree/master/examples/search_wikipedia_webapp&#34;&gt;https://github.com/hnakamur/cgoroonga/tree/master/examples/search_wikipedia_webapp&lt;/a&gt;
にあります。&lt;/p&gt;

&lt;p&gt;GroongaのC APIについては&lt;a href=&#34;http://groonga.org/ja/docs/reference/api.html&#34;&gt;7.20. API — Groonga v5.0.3ドキュメント&lt;/a&gt;を見つつ、ドキュメント化されていないものは&lt;a href=&#34;https://github.com/groonga/groonga&#34;&gt;groongaのソース&lt;/a&gt;を見て、goバインディングを作りました。&lt;/p&gt;

&lt;p&gt;goバインディングもウェブアプリもとりあえず全文検索の動作確認ができればいいやということで、ゆるい感じで書いています。&lt;/p&gt;

&lt;p&gt;ウェブアプリのサーバサイドのソースは
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/master/examples/search_wikipedia_webapp/main.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/master/examples/search_wikipedia_webapp/main.go&lt;/a&gt;
で、groongaのgoバインディングのソースは
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga&#34;&gt;https://github.com/hnakamur/cgoroonga&lt;/a&gt;
の &lt;code&gt;*.go&lt;/code&gt; です。&lt;/p&gt;

&lt;h2 id=&#34;フロントエンドについては別記事で&#34;&gt;フロントエンドについては別記事で&lt;/h2&gt;

&lt;p&gt;フロントエンドは&lt;a href=&#34;http://qiita.com/shibukawa/items/890d24874655439932ec&#34;&gt;最速MVCフレームワークMithril.jsの速度の秘密 - Qiita&lt;/a&gt;の記事を見て気になっていたので、&lt;a href=&#34;https://lhorie.github.io/mithril/&#34;&gt;Mithril&lt;/a&gt;で書いてみました。こちらについては別記事&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/05/12/tried_mithril_js/&#34;&gt;mithril.jsを試してみた&lt;/a&gt;に書きました。&lt;/p&gt;

&lt;h2 id=&#34;インデクスの作成&#34;&gt;インデクスの作成&lt;/h2&gt;

&lt;p&gt;groongaコマンドで以下のようにして作成しました。約27分かかりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;column_create --table ArticleIndexes --name article_index --flags COLUMN_INDEX|WITH_POSITION|WITH_SECTION --type Articles --source _key,text&#39; | time groonga ~/work/groonga/db/wikipedia.db
[[0,1431052924.67975,1555.13576507568],true]
     1660.80 real      1135.40 user       146.29 sys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wikipediaのページタイトルと本文の両方を対象に検索したいので、 &lt;code&gt;--source&lt;/code&gt; には _keyカラム (タイトル) と text カラム (本文) の両方を指定しました。&lt;/p&gt;

&lt;h2 id=&#34;検索の応答は約80-250ms程度と満足な早さ&#34;&gt;検索の応答は約80〜250ms程度と満足な早さ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;動作環境

&lt;ul&gt;
&lt;li&gt;マシン: MacBook Pro 15inch (Retina, Mid 2012) SSD&lt;/li&gt;
&lt;li&gt;CPU: Intel Core i7 2.6GHz&lt;/li&gt;
&lt;li&gt;RAM: 16GB 1600MHz DDR3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;データサイズ

&lt;ul&gt;
&lt;li&gt;データファイルの合計サイズ: 188MB&lt;/li&gt;
&lt;li&gt;データ件数: 約193万件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ du -sm ~/work/groonga/db
18848 /Users/hnakamur/work/groonga/db
$ echo &#39;select Articles --limit 0&#39; | groonga ~/work/groonga/db/wikipedia.db
[[0,1431434283.68242,0.00117397308349609],[[[1932736],[[&amp;quot;_id&amp;quot;,&amp;quot;UInt32&amp;quot;],[&amp;quot;_key&amp;quot;,&amp;quot;ShortText&amp;quot;],[&amp;quot;text&amp;quot;,&amp;quot;Text&amp;quot;],[&amp;quot;updated_at&amp;quot;,&amp;quot;Time&amp;quot;]]]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON形式の検索APIの応答が約80〜250ms程度で、快適に検索できました。
Groongaすごいですね！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>データ登録用にgroongaのC APIのgoバインディングを書いてみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/27/cgoroonga/</link>
      <pubDate>Mon, 27 Apr 2015 00:44:23 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/27/cgoroonga/</guid>
      <description>

&lt;h2 id=&#34;groongaで大量のデータを登録する方法を調べてみた&#34;&gt;groongaで大量のデータを登録する方法を調べてみた&lt;/h2&gt;

&lt;h3 id=&#34;方法1-loadコマンドの文字列を組み立ててgroongaコマンドの標準入力に流し込む&#34;&gt;方法1: loadコマンドの文字列を組み立ててgroongaコマンドの標準入力に流し込む&lt;/h3&gt;

&lt;p&gt;groongaのデータの登録はチュートリアルの&lt;a href=&#34;http://groonga.org/ja/docs/tutorial/introduction.html#load-records&#34;&gt;データのロード&lt;/a&gt;にあるように&lt;a href=&#34;http://groonga.org/ja/docs/reference/commands/load.html&#34;&gt;loadコマンド&lt;/a&gt;を使えば出来ます。&lt;/p&gt;

&lt;p&gt;外部ファイルから大量のデータを登録するときはどうするのかなと思って調べてみると、 groongaのソースの examples/dictionary/eijiro/ の例では &lt;code&gt;load&lt;/code&gt; コマンドの文字列を組み立てて &lt;code&gt;groonga&lt;/code&gt; コマンドの標準入力に流し込んでいました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/groonga/groonga/blob/59ef5d1d26b4ba47d163019a21a20519d349489b/examples/dictionary/eijiro/eijiro-import.sh#L10-L12&#34;&gt;https://github.com/groonga/groonga/blob/59ef5d1d26b4ba47d163019a21a20519d349489b/examples/dictionary/eijiro/eijiro-import.sh#L10-L12&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if iconv -f UCS2 -t UTF8 $2 | ${base_dir}/eijiro2grn.rb | groonga $1 &amp;gt; /dev/null; then
  echo &amp;quot;eijiro data loaded.&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;方法2-groongaのc-apiを使う&#34;&gt;方法2: groongaのC APIを使う&lt;/h3&gt;

&lt;p&gt;この方法はお手軽ですが、エラー処理が難しそうと重い、さらに調べてみると、groongaのC APIを使ってデータ登録する例を見つけました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://createfield.com/C%E8%A8%80%E8%AA%9E%E3%81%A7Groonga%E3%81%AEAPI%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95&#34;&gt;C言語でGroongaのAPIを使う方法 - CreateField&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;go言語用のライブラリを作ってみました&#34;&gt;go言語用のライブラリを作ってみました&lt;/h2&gt;

&lt;p&gt;折角なのでCのライブラリのgo言語バインディングを作る練習を兼ねてgo言語用のライブラリを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/cgoroonga&#34;&gt;hnakamur/cgoroonga&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;テーブルとカラムを作ってレコードを1件登録するサンプルコード&#34;&gt;テーブルとカラムを作ってレコードを1件登録するサンプルコード&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/add_record/main.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/add_record/main.go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OSX + homebrewという環境で試しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install groonga
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でgroongaをインストールして、以下の手順で実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/hnakamur/cgoroonga
cd $GOPATH/src/github.com/hnakamur/cgoroonga/examples/add_record
go build
./add_record
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wikipedia日本語版の記事データを登録するサンプルコード&#34;&gt;Wikipedia日本語版の記事データを登録するサンプルコード&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/import_wikipedia/main.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/import_wikipedia/main.go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;データファイルは
&lt;a href=&#34;http://dumps.wikimedia.org/jawiki/20150422/&#34;&gt;jawiki dump progress on 20150422&lt;/a&gt;
から以下の4つのファイルをダウンロードしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jawiki-20150422-pages-articles1.xml.bz2&lt;/li&gt;
&lt;li&gt;jawiki-20150422-pages-articles2.xml.bz2&lt;/li&gt;
&lt;li&gt;jawiki-20150422-pages-articles3.xml.bz2&lt;/li&gt;
&lt;li&gt;jawiki-20150422-pages-articles4.xml.bz2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wikipediaのデータファイルはxmlをbzip2で圧縮した形式になっているので、Goの標準ライブラリの&lt;a href=&#34;http://golang.org/pkg/compress/bzip2/&#34;&gt;bzip2&lt;/a&gt;と&lt;a href=&#34;http://golang.org/pkg/encoding/xml/&#34;&gt;xml&lt;/a&gt;パッケージを使って読み込むようにしています。&lt;/p&gt;

&lt;p&gt;サイズの大きいXMLファイルを読み込んで処理するときにおすすめの方法が
&lt;a href=&#34;http://blog.davidsingleton.org/parsing-huge-xml-files-with-go/&#34;&gt;Parsing huge XML files with Go - david singleton&lt;/a&gt;で紹介されていたので、それを真似しました。ありがとうございます！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/hnakamur/cgoroonga/examples/import_wikipedia
go build
./import_wikipedia jawiki-20150422-pages-articles1.xml.bz2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように実行します。&lt;/p&gt;

&lt;h2 id=&#34;cライブラリのgoバインディングを書くときのtips&#34;&gt;Cライブラリのgoバインディングを書くときのtips&lt;/h2&gt;

&lt;p&gt;基本的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/cmd/cgo/&#34;&gt;cgo - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/cgo&#34;&gt;cgo · golang/go Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を読めばOKなのですが、ハマった点をメモしておきます。&lt;/p&gt;

&lt;h3 id=&#34;import-c-の上に空行を入れないように注意&#34;&gt;import &amp;ldquo;C&amp;rdquo;の上に空行を入れないように注意&lt;/h3&gt;

&lt;p&gt;たとえば
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/column.go#L7&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/column.go#L7&lt;/a&gt;
で &lt;code&gt;import &amp;quot;C&amp;quot;&lt;/code&gt; の上に空行を入れて &lt;code&gt;go build&lt;/code&gt; を実行すると以下の様なエラーになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go build
# github.com/hnakamur/cgoroonga
could not determine kind of name for C.free
could not determine kind of name for C.grn_column_create
could not determine kind of name for C.grn_obj_column
could not determine kind of name for C.grn_obj_flags
could not determine kind of name for C.strlen
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cのマクロはgoから呼べないのでcの関数でラップする&#34;&gt;Cのマクロはgoから呼べないのでCの関数でラップする&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/cgoroonga.c&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/cgoroonga.c&lt;/a&gt;
のようにマクロをラップしたCの関数を書いて、それをgoから呼ぶようにします。&lt;/p&gt;

&lt;h3 id=&#34;エラーコードが有るエラーと無いエラーを統一的に扱うようにした&#34;&gt;エラーコードが有るエラーと無いエラーを統一的に扱うようにした&lt;/h3&gt;

&lt;p&gt;groongaのC APIはほとんどが&lt;a href=&#34;http://groonga.org/ja/docs/reference/api/grn_table.html&#34;&gt;7.20.21. grn_table — Groonga v5.0.2ドキュメント&lt;/a&gt;の &lt;a href=&#34;http://groonga.org/ja/docs/reference/api/grn_table.html#c.grn_table_delete&#34;&gt;grn_table_delete&lt;/a&gt;  のように &lt;a href=&#34;https://github.com/groonga/groonga/blob/v5.0.2/include/groonga/groonga.h#L44-L125&#34;&gt;grn_rc&lt;/a&gt; を返します。&lt;/p&gt;

&lt;p&gt;が、 &lt;a href=&#34;http://groonga.org/ja/docs/reference/api/grn_table.html#c.grn_table_create&#34;&gt;grn_table_create&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grn_obj *grn_table_create(grn_ctx *ctx, const char *name, unsigned int name_size, const char *path, grn_obj_flags flags, grn_obj *key_type, grn_obj *value_type)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;grn_rc&lt;/code&gt; を返さないAPIもあります。ドキュメントには明記されていませんが、Cの慣例としてエラーのときはおそらく戻り値が &lt;code&gt;NULL&lt;/code&gt; になるのだと予想します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/groonga/groonga/blob/v5.0.2/lib/db.c#L744-L930&#34;&gt;https://github.com/groonga/groonga/blob/v5.0.2/lib/db.c#L744-L930&lt;/a&gt; を見るとやはりNULLを返すケースが有りました。&lt;/p&gt;

&lt;p&gt;そこで、
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/error.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/error.go&lt;/a&gt;
のようにエラーコードが有るエラーと無いエラーを全てGoの変数として定義するようにしてみました。&lt;/p&gt;

&lt;p&gt;これにより
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/import_wikipedia/main.go#L59-L63&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/import_wikipedia/main.go#L59-L63&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	table, err := ctx.TableOpenOrCreate(&amp;quot;Articles&amp;quot;, &amp;quot;&amp;quot;,
		grn.OBJ_TABLE_HASH_KEY|grn.OBJ_PERSISTENT, keyType, nil)
	if err != nil {
		return
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにエラーを常に戻り値で受け取るように統一することができ、見通しのよいコードが実現できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;データ登録用にgroongaのC APIのgoバインディングを書きました。
C APIがエラーコードを返さない場合でもGo側ではエラーを返し &lt;code&gt;if err != nil&lt;/code&gt; というのようにエラーチェックの方式を統一することで、エラー処理の漏れに気づきやすくする事が出来ました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groongaのチュートリアルを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/26/tried_groonga_tutorial/</link>
      <pubDate>Sun, 26 Apr 2015 23:53:06 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/26/tried_groonga_tutorial/</guid>
      <description>

&lt;p&gt;Groongaのチュートリアルを試してみたメモです。
試した環境は Groonga 5.0.2, Ubuntu 14.04.2 です。&lt;/p&gt;

&lt;h2 id=&#34;セットアップ手順&#34;&gt;セットアップ手順&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://groonga.org/ja/docs/install/ubuntu.html#ppa-personal-package-archive&#34;&gt;2.4. Ubuntu — Groonga v5.0.2ドキュメント&lt;/a&gt;にそってセットアップしました。&lt;/p&gt;

&lt;p&gt;セットアップ手順は&lt;a href=&#34;https://github.com/hnakamur/groonga-dockerfiles/blob/b4d64e23eaf9afda47c31bc34794eb2e56b7614d/dockerfiles/trusty/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;にまとめておきました。&lt;/p&gt;

&lt;p&gt;さらにVirtualBox + VagrantでUbuntuにdockerとdocker-composeをインストールして、上のDockerfileでコンテナを作る手順を自動化するVagrantfileを作成して
&lt;a href=&#34;https://github.com/hnakamur/groonga-dockerfiles&#34;&gt;hnakamur/groonga-dockerfiles&lt;/a&gt;
で公開しています。&lt;/p&gt;

&lt;p&gt;VirtualBoxとVagrantをインストールしてあれば、以下の手順ですぐ試せます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/hnakamur/groonga-dockerfiles
cd groonga-dockerfiles
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動後コンテナを作って起動するまでには結構時間がかかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でVMにログインして、以下のようにCommandでgroonga-httpdが実行されたら起動完了です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /vagrant/dockerfiles
$ sudo docker-compose ps
      Name             Command             State              Ports
-------------------------------------------------------------------------
dockerfiles_groo   /usr/sbin          Up                 0.0.0.0:80-&amp;gt;1004
ngatrusty_1        /groonga-httpd                        1/tcp
                   -g ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;管理画面とgroongaコマンドの起動方法&#34;&gt;管理画面とgroongaコマンドの起動方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://192.168.33.12/&#34;&gt;http://192.168.33.12/&lt;/a&gt; でgroongaの管理画面にアクセスできます。&lt;/p&gt;

&lt;p&gt;groongaコマンドの起動方法は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でVMにログインし、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker exec -it dockerfiles_groongatrusty_1 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でコンテナ内に入り&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u groonga groonga /var/lib/groonga/db/db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でgroongaコマンドを実行します。&lt;/p&gt;

&lt;h3 id=&#34;groongaコマンドの実行ユーザをrootにするとハマるので注意&#34;&gt;groongaコマンドの実行ユーザをrootにするとハマるので注意&lt;/h3&gt;

&lt;p&gt;groongaコマンドはgroongaで実行するのが重要です。&lt;/p&gt;

&lt;p&gt;rootユーザで実行してしまうとエラーにはならないのですが、テーブルなどを作成してもgroongaの管理画面で表示されずハマりました。&lt;/p&gt;

&lt;p&gt;groongaのデータベースは最初は1つのファイルですが、テーブルなどを作るとファイルが追加で作成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@b95446c72160:/# cd /var/lib/groonga/db
root@b95446c72160:/var/lib/groonga/db# ll
total 15332
drwxr-xr-x 2 groonga groonga     4096 Apr 26 14:34 ./
drwxr-xr-x 3 groonga groonga     4096 Apr 26 01:49 ../
-rw-r--r-- 1 groonga groonga     4096 Apr 26 14:33 db
-rw-r--r-- 1 groonga groonga 21245952 Apr 26 14:33 db.0000000
-rw-r--r-- 1 groonga groonga 16842752 Apr 26 14:34 db.0000100
-rw-r--r-- 1 groonga groonga 12857344 Apr 26 14:26 db.0000101
-rw-r--r-- 1 groonga groonga  8437760 Apr 26 14:28 db.0000102
-rw-r--r-- 1 groonga groonga  1085440 Apr 26 14:28 db.0000103
-rw-r--r-- 1 groonga groonga  4198400 Apr 26 14:28 db.0000103.c
-rw-r--r-- 1 groonga groonga  8437760 Apr 26 14:34 db.0000104
-rw-r--r-- 1 groonga groonga  4198400 Apr 26 14:34 db.0000105
-rw-r--r-- 1 groonga groonga  1085440 Apr 26 14:34 db.0000106
-rw-r--r-- 1 groonga groonga  4198400 Apr 26 14:34 db.0000106.c
-rw-r--r-- 1 groonga groonga  1048576 Apr 26 14:34 db.001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rootユーザでgroongaコマンドを実行すると作成されたファイルの所有者がrootユーザになり、groonga-httpdから見えないようです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chown groonga: /var/lib/groonga/db/db*&lt;/code&gt; で所有者をgroongaユーザに変更すれば見えるようになりました。&lt;/p&gt;

&lt;p&gt;ということで、上記のようにgroongaユーザでgroongaコマンドを実行するのが良いです。&lt;/p&gt;

&lt;h2 id=&#34;チュートリアルの一部手順でエラーが出てハマった&#34;&gt;チュートリアルの一部手順でエラーが出てハマった&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://groonga.org/ja/docs/tutorial.html&#34;&gt;4. チュートリアル — Groonga v5.0.2ドキュメント&lt;/a&gt;の手順で試してみました。ほとんどはすんなり実行できましたが、1箇所ハマりました。&lt;/p&gt;

&lt;h3 id=&#34;インデックス付きジオサーチのところでnonexistent-sourceというエラー&#34;&gt;インデックス付きジオサーチのところでnonexistent sourceというエラー&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://groonga.org/ja/docs/tutorial/index.html#geo-location-search-with-index&#34;&gt;4.6.3. インデックス付きジオサーチ&lt;/a&gt;のところで以下の様なエラーが出ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; table_create --name GeoIndex --flags TABLE_PAT_KEY --key_type WGS84GeoPoint
[[0,1429178015.01179,0.00191092491149902],true]
&amp;gt; column_create --table GeoIndex --name index_point --type Site --flags COLUMN_INDEX --source location
[[-22,1429178020.73797,0.00554323196411133,&amp;quot;[column][create] nonexistent source: &amp;lt;location&amp;gt;&amp;quot;,[[&amp;quot;proc_column_create_resolve_source_name&amp;quot;,&amp;quot;proc.c&amp;quot;,1774]]],false]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Siteテーブルは&lt;a href=&#34;http://groonga.org/ja/docs/tutorial/introduction.html#create-a-table&#34;&gt;4.1.5. テーブルの作成&lt;/a&gt;で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;table_create --name Site --flags TABLE_HASH_KEY --key_type ShortText
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として作成していますが、その後 &lt;code&gt;location&lt;/code&gt; カラムを作る箇所がなかったようです。&lt;/p&gt;

&lt;p&gt;2015-04-28追記 &lt;a href=&#34;https://twitter.com/kenhys/status/592901925089189889&#34;&gt;https://twitter.com/kenhys/status/592901925089189889&lt;/a&gt; でご指摘いただいたのですが、実は&lt;a href=&#34;http://groonga.org/ja/docs/tutorial/search.html#narrow-down-sort-by-using-location-information&#34;&gt;4.4.3. 位置情報を用いた絞込・ソート&lt;/a&gt;で &lt;code&gt;location&lt;/code&gt; カラムを作っているのを私が見落としていました。失礼いたしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;column_create --table Site --name location --type WGS84GeoPoint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにカラムを作成すれば大丈夫でした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;table_create --name GeoIndex --flags TABLE_PAT_KEY --key_type WGS84GeoPoint
column_create --table GeoIndex --name index_point --type Site --flags COLUMN_INDEX --source location
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインデクス用のテーブルとカラムを作成して、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load --table Site
[
 {&amp;quot;_key&amp;quot;:&amp;quot;http://example.org/&amp;quot;,&amp;quot;location&amp;quot;:&amp;quot;128452975x503157902&amp;quot;},
 {&amp;quot;_key&amp;quot;:&amp;quot;http://example.net/&amp;quot;,&amp;quot;location&amp;quot;:&amp;quot;128487316x502920929&amp;quot;}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、データをロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; select --table Site --filter &#39;geo_in_circle(location, &amp;quot;128515259x503187188&amp;quot;, 5000)&#39; --output_columns _key,location
[[0,1430061299.24235,0.00105690956115723],[[[1],[[&amp;quot;_key&amp;quot;,&amp;quot;ShortText&amp;quot;],[&amp;quot;location&amp;quot;,&amp;quot;WGS84GeoPoint&amp;quot;]],[&amp;quot;http://example.org/&amp;quot;,&amp;quot;128452975x503157902&amp;quot;]]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で検索できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;2箇所ハマりましたが解決してとりあえず使えるようになりました。今後さらに調査していきたいと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>