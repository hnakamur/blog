<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Apache Traffic Server on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/apache-traffic-server/index.xml</link>
    <description>Recent content in Apache Traffic Server on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/tags/apache-traffic-server/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Apache Traffic Server を GDB で動かす</title>
      <link>https://hnakamur.github.io/blog/2016/02/12/run-apache-traffic-server-with-gdb/</link>
      <pubDate>Fri, 12 Feb 2016 00:02:11 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/02/12/run-apache-traffic-server-with-gdb/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://gihyo.jp/magazine/wdpress/archive/2012/vol69&#34;&gt;WEB+DB PRESS Vol.69｜技術評論社&lt;/a&gt; にあった &lt;a href=&#34;http://dev.ariel-networks.com/wp/archives/author/inoue&#34;&gt;アリエル・ネットワーク㈱の井上さん&lt;/a&gt;による「大規模コードリーディング」の特集を読んで、静的解析 (コードを読んで理解する手法) と動的解析 (実行時の動作を予測しながら構造を理解する方法) を行ったり来たり繰り返すのが良いと理解しました。&lt;/p&gt;

&lt;p&gt;というわけで、 &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/02/11/apache-traffic-server-code-reading/&#34;&gt;Apache Traffic Server のコードリーディング · hnakamur&amp;rsquo;s blog at github&lt;/a&gt; でコードを読みつつ、デバッガ上で動かしてみました。手順は整理してないですが、とりあえず自分向けメモです。&lt;/p&gt;

&lt;h2 id=&#34;試した環境&#34;&gt;試した環境&lt;/h2&gt;

&lt;p&gt;試した環境は &lt;a href=&#34;https://github.com/hnakamur/trafficserver-ansible-playbook&#34;&gt;hnakamur/trafficserver-ansible-playbook&lt;/a&gt; で構築したものです。Apache Traffic Server のバージョンは 6.1.1 です。&lt;/p&gt;

&lt;h2 id=&#34;事前準備&#34;&gt;事前準備&lt;/h2&gt;

&lt;h3 id=&#34;debuginfo-パッケージのインストール&#34;&gt;debuginfo パッケージのインストール&lt;/h3&gt;

&lt;p&gt;gdb でプログラムを実行するにはプログラムのパッケージと依存パッケージの debuginfo が必要です。これは、たぶん以下のコマンドでインストールできます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install -y yum-utils
sudo debuginfo-install -y trafficserver
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;debuginfo-パッケージのインストールの試行錯誤メモ&#34;&gt;debuginfo パッケージのインストールの試行錯誤メモ&lt;/h3&gt;

&lt;p&gt;この項は上のコマンドを知る前に試した手順のメモです。&lt;/p&gt;

&lt;p&gt;まずデバッグ情報のパッケージが必要だと思ったので、以下のコマンドでインストールしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install -y trafficserver-debuginfo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl start trafficserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して trafficserver のサービスを起動した状態で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ps auxww | grep traffic
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行して &lt;code&gt;traffic_server&lt;/code&gt; のコマンドラインをメモします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/usr/bin/traffic_server -M --bind_stdout /var/log/trafficserver/traffic.out --bind_stderr /var/log/trafficserver/traffic.out --httpport 80:fd=9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていました。 &lt;a href=&#34;https://docs.trafficserver.apache.org/en/latest/appendices/command-line/traffic_server.en.html&#34;&gt;traffic_server — Apache Traffic Server 6.2.0 documentation&lt;/a&gt; を見ると &lt;code&gt;-M&lt;/code&gt; は &lt;code&gt;--remote_management&lt;/code&gt; のショートオプションです。 &lt;code&gt;systemctl start trafficserver&lt;/code&gt; でサービスを起動すると &lt;code&gt;traffic_cop&lt;/code&gt; と &lt;code&gt;traffic_manager&lt;/code&gt; 経由で &lt;code&gt;traffic_server&lt;/code&gt; が起動するのですが、その場合に必要になるオプションのようです。 gdb で実行するときは &lt;code&gt;-M&lt;/code&gt; は外します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;systemctl stop trafficserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でサービスを停止します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gdb /usr/bin/traffic_server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で gdb を起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;break HttpSM::set_next_state
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;などとブレークポイントを設定します。ブレークポイントは Apache Traffic Server のソースコードを読んで、自分が止めたい場所にお好みで設定します。&lt;/p&gt;

&lt;p&gt;gdb のプロンプトで以下のように入力して、 Apache Traffic Server を実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;run --bind_stdout /var/log/trafficserver/traffic.out --bind_stderr /var/log/trafficserver/traffic.out --httpport 80:fd=9
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ところがdebuginfoが足りず、以下のようなエラーになってしまいました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[Inferior 1 (process 17590) exited with code 01]
Missing separate debuginfos, use: debuginfo-install glibc-2.17-106.el7_2.1.x86_64 hwloc-libs-1.7-5.el7.x86_64 keyutils-libs-1.5.8-3.el7.x86_64 krb5-libs-1.13.2-10.el7.x86_64 libcom_err-1.42.9-7.el7.x86_64 libgcc-4.8.5-4.el7.x86_64 libpciaccess-0.13.4-2.el7.x86_64 libselinux-2.2.2-6.el7.x86_64 libstdc++-4.8.5-4.el7.x86_64 libxml2-2.9.1-6.el7_2.2.x86_64 nss-softokn-freebl-3.16.2.3-13.el7_1.x86_64 numactl-libs-2.0.9-5.el7_1.x86_64 openssl-libs-1.0.1e-51.el7_2.2.x86_64 pcre-8.32-15.el7.x86_64 tcl-8.5.13-8.el7.x86_64 xz-libs-5.1.2-12alpha.el7.x86_64 zlib-1.2.7-15.el7.x86_64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;use:&lt;/code&gt; の後をコピペして実行して途中で (y/n) で聞かれたら y を押すと、必要な debuginfo をイントール出来ました。&lt;/p&gt;

&lt;p&gt;調べてみると、最初から以下のコマンドを実行しておけば依存するライブラリの debuginfo もインストールできるようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo debuginfo-install -y trafficserver
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、 &lt;code&gt;debuginfo-install&lt;/code&gt; コマンドは &lt;code&gt;yum-utils&lt;/code&gt; パッケージに入っているので予めインストールしておきます。&lt;/p&gt;

&lt;h2 id=&#34;実行例&#34;&gt;実行例&lt;/h2&gt;

&lt;p&gt;まず、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;gdb /usr/bin/traffic_server
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で gdb を起動し &lt;code&gt;HttpSM::set_next_state&lt;/code&gt; にブレークポイントを設定して traffic_server を実行しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@localhost ~]# gdb /usr/bin/traffic_server
GNU gdb (GDB) Red Hat Enterprise Linux 7.6.1-80.el7
Copyright (C) 2013 Free Software Foundation, Inc.
License GPLv3+: GNU GPL version 3 or later &amp;lt;http://gnu.org/licenses/gpl.html&amp;gt;
This is free software: you are free to change and redistribute it.
There is NO WARRANTY, to the extent permitted by law.  Type &amp;quot;show copying&amp;quot;
and &amp;quot;show warranty&amp;quot; for details.
This GDB was configured as &amp;quot;x86_64-redhat-linux-gnu&amp;quot;.
For bug reporting instructions, please see:
&amp;lt;http://www.gnu.org/software/gdb/bugs/&amp;gt;...
Reading symbols from /usr/bin/traffic_server...Reading symbols from /usr/lib/debug/usr/bin/traffic_server.debug...done.
done.
(gdb) break HttpSM::set_next_state
Breakpoint 1 at 0x151510: file HttpSM.cc, line 6940.
(gdb) run --bind_stdout /var/log/trafficserver/traffic.out --bind_stderr /var/log/trafficserver/traffic.out --httpport 80:fd=9
Starting program: /usr/bin/traffic_server --bind_stdout /var/log/trafficserver/traffic.out --bind_stderr /var/log/trafficserver/traffic.out --httpport 80:fd=9
[Thread debugging using libthread_db enabled]
Using host libthread_db library &amp;quot;/lib64/libthread_db.so.1&amp;quot;.
traffic_server: using root directory &#39;/usr&#39;
[New Thread 0x7ffff3bde700 (LWP 19929)]
[New Thread 0x7ffff1249700 (LWP 19930)]
[New Thread 0x7ffff1047700 (LWP 19931)]
[New Thread 0x7ffff0a3c700 (LWP 19932)]
[New Thread 0x7fffebefe700 (LWP 19933)]
[New Thread 0x7fffebcfc700 (LWP 19934)]
[New Thread 0x7fffebafa700 (LWP 19935)]
[New Thread 0x7fffeb8f8700 (LWP 19936)]
[New Thread 0x7fffeb6f6700 (LWP 19937)]
[New Thread 0x7fffeb4f4700 (LWP 19938)]
[New Thread 0x7fffeb2f2700 (LWP 19939)]
[New Thread 0x7fffeb0f0700 (LWP 19940)]
[New Thread 0x7fffeac5d700 (LWP 19941)]
[New Thread 0x7fffea95a700 (LWP 19942)]
[New Thread 0x7fffea859700 (LWP 19943)]
[New Thread 0x7fffea657700 (LWP 19944)]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで別の端末で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -sv http://192.168.33.131/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行しました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;HttpSM&lt;/code&gt; というクラス名は &lt;code&gt;Http State Machine&lt;/code&gt; の略と思われます。 HTTP を処理する状態遷移マシンになっています。以下のセッションでは HttpSM クラスの t_state メンバ変数の next_action を表示して、状態の遷移を確認してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) where
#0  HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
#1  0x000055555569aa96 in HttpSM::state_read_client_request_header (this=0x7fffea0d0080, event=&amp;lt;optimized out&amp;gt;, data=&amp;lt;optimized out&amp;gt;)
    at HttpSM.cc:771
#2  0x00005555556a7600 in HttpSM::main_handler (this=0x7fffea0d0080, event=100, data=0x7fffe0017e38) at HttpSM.cc:2561
#3  0x00005555556a0f13 in HttpSM::state_api_callout (this=0x7fffea0d0080, event=&amp;lt;optimized out&amp;gt;, data=&amp;lt;optimized out&amp;gt;)
    at HttpSM.cc:1464
#4  0x00005555556a19a8 in do_api_callout (this=0x7fffea0d0080) at HttpSM.cc:391
#5  HttpSM::state_add_to_list (this=0x7fffea0d0080, event=&amp;lt;optimized out&amp;gt;) at HttpSM.cc:418
#6  0x00005555556a719b in HttpSM::attach_client_session (this=0x7fffea0d0080, client_vc=0x555556592d40, buffer_reader=0x555556575ea8)
    at HttpSM.cc:544
#7  0x0000555555682ec5 in HttpClientSession::new_transaction (this=0x555556592d40) at HttpClientSession.cc:141
#8  0x000055555565e901 in ProxyClientSession::state_api_callout (this=0x555556592d40, event=&amp;lt;optimized out&amp;gt;)
    at ProxyClientSession.cc:123
#9  0x00005555556824b2 in HttpClientSession::new_connection (this=0x555556592d40, new_vc=&amp;lt;optimized out&amp;gt;, iobuf=&amp;lt;optimized out&amp;gt;,
    reader=&amp;lt;optimized out&amp;gt;, backdoor=&amp;lt;optimized out&amp;gt;) at HttpClientSession.cc:220
#10 0x000055555567d969 in HttpSessionAccept::accept (this=0x55555621cab0, netvc=0x7fffe0017d20, iobuf=&amp;lt;optimized out&amp;gt;,
    reader=0x555556575ea8) at HttpSessionAccept.cc:74
#11 0x000055555565e683 in ProtocolProbeTrampoline::ioCompletionEvent (this=0x5555563bc880, event=&amp;lt;optimized out&amp;gt;,
    edata=&amp;lt;optimized out&amp;gt;) at ProtocolProbeSessionAccept.cc:123
#12 0x000055555581de76 in handleEvent (data=0x7fffe0017e38, event=100, this=&amp;lt;optimized out&amp;gt;)
    at ../../iocore/eventsystem/I_Continuation.h:153
#13 read_signal_and_update (vc=0x7fffe0017d20, event=100) at UnixNetVConnection.cc:150
#14 read_from_net (nh=0x7ffff31e0b90, vc=0x7fffe0017d20, thread=0x7ffff31dd010) at UnixNetVConnection.cc:390
#15 0x000055555580e6b0 in NetHandler::mainNetEvent (this=0x7ffff31e0b90, event=&amp;lt;optimized out&amp;gt;, e=&amp;lt;optimized out&amp;gt;) at UnixNet.cc:518
#16 0x000055555583c2d0 in handleEvent (data=0x555556172dc0, event=5, this=&amp;lt;optimized out&amp;gt;) at I_Continuation.h:153
#17 EThread::process_event (this=this@entry=0x7ffff31dd010, e=0x555556172dc0, calling_code=calling_code@entry=5) at UnixEThread.cc:128
#18 0x000055555583cdab in EThread::execute (this=0x7ffff31dd010) at UnixEThread.cc:252
#19 0x000055555560af60 in main (argv=&amp;lt;optimized out&amp;gt;) at Main.cc:1918
(gdb) p t_state.next_action
$1 = HttpTransact::SM_ACTION_API_READ_REQUEST_HDR
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$2 = HttpTransact::SM_ACTION_API_PRE_REMAP
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$3 = HttpTransact::SM_ACTION_REMAP_REQUEST
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$4 = HttpTransact::SM_ACTION_API_POST_REMAP
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$5 = HttpTransact::SM_ACTION_CACHE_LOOKUP
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$6 = HttpTransact::SM_ACTION_API_READ_CACHE_HDR
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$7 = HttpTransact::SM_ACTION_API_CACHE_LOOKUP_COMPLETE
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$8 = HttpTransact::SM_ACTION_DNS_LOOKUP
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$9 = HttpTransact::SM_ACTION_API_OS_DNS
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$10 = HttpTransact::SM_ACTION_CACHE_ISSUE_WRITE
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$11 = HttpTransact::SM_ACTION_ORIGIN_SERVER_OPEN
(gdb) c
Continuing.

Breakpoint 1, HttpSM::set_next_state (this=0x7fffea0d0080) at HttpSM.cc:6940
6940    {
(gdb) p t_state.next_action
$12 = HttpTransact::SM_ACTION_SERVER_READ
(gdb) c
Continuing.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;gdb-でよく使うコマンドのメモ&#34;&gt;gdb でよく使うコマンドのメモ&lt;/h2&gt;

&lt;p&gt;ブレークポイント一覧表示あたりをよく忘れるのでメモ。ググってみると &lt;a href=&#34;http://wombat.cc.tsukuba.ac.jp/~furuse/jikken/text-07/text-07.html&#34;&gt;マイクロデータベース管理システムの実装&lt;/a&gt; にわかりやすくまとまっていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;b: break。ブレークポイント設定。b の後に「クラス名::メソッド名」、「関数名」、「ファイル名:行番号」のように止めたい箇所を指定します。&lt;/li&gt;
&lt;li&gt;i b: info breakpointsの略。ブレークポイント一覧表示。&lt;/li&gt;
&lt;li&gt;del [ブレークポイント番号]。ブレークポイント削除。番号を省略すると全て削除。&lt;/li&gt;
&lt;li&gt;where: ブレークポイントで止まったときにコールスタックを表示します。&lt;/li&gt;
&lt;li&gt;p: print。ブレークポイントで止まったときに変数の値を表示します。&lt;/li&gt;
&lt;li&gt;c: continue。実行継続。ブレークポイントを設定していればそこで止まります。&lt;/li&gt;
&lt;li&gt;n: next。ステップオーバー。関数呼び出しの際には中に入らずにステップ実行します。&lt;/li&gt;
&lt;li&gt;s: step。ステップイン。関数呼び出しの際にの中に入ってステップ実行します。&lt;/li&gt;
&lt;li&gt;q: quit。実行終了。まだ実行中だと &lt;code&gt;Quit anyway? (y or n)&lt;/code&gt; と聞かれるので y を押して終了します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ブレークポイントで止まっていない場合も、実行中に Ctrl-C で gdb のプロンプトが出るので、そこで上記のコマンドを実行できます。その後 c で実行再開できます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Apache Traffic Server のコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2016/02/11/apache-traffic-server-code-reading/</link>
      <pubDate>Thu, 11 Feb 2016 23:11:50 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/02/11/apache-traffic-server-code-reading/</guid>
      <description>

&lt;p&gt;Apache Traffic Server のコードリーディングを少しやってみたので、将来の自分に向けてメモ。&lt;/p&gt;

&lt;h2 id=&#34;コードリーディングの方法についての参考文献&#34;&gt;コードリーディングの方法についての参考文献&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/magazine/wdpress/archive/2012/vol69&#34;&gt;WEB+DB PRESS Vol.69｜技術評論社&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://dev.ariel-networks.com/wp/archives/author/inoue&#34;&gt;アリエル・ネットワーク㈱の井上さん&lt;/a&gt;による「大規模コードリーディング」の特集&lt;/li&gt;
&lt;li&gt;私は&lt;a href=&#34;http://gihyo.jp/book/2013/978-4-7741-5783-2&#34;&gt;WEB+DB PRESS総集編［Vol.1～72］：書籍案内｜技術評論社&lt;/a&gt;を買ってたので、これに入っています。&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/book/2015/978-4-7741-7538-6&#34;&gt;WEB+DB PRESS総集編［Vol.1～84］：書籍案内｜技術評論社&lt;/a&gt;というのも出ていました。将来チェックするときはより新しい総集編が出ているかチェックしましょう。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/satorutakeuchi18/viewing-source-code&#34;&gt;大規模ソースコードの読み方&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ツール&#34;&gt;ツール&lt;/h2&gt;

&lt;p&gt;以下の 2 つのツールを使ってみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.doxygen.jp/&#34;&gt;Doxygen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.tamacom.com/global-j.html&#34;&gt;GNU GLOBAL&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apache Traffic Server は C++ で書かれています。 C 言語に対応したツールなら他にもあるのですが、 C++ に対応していてちゃんと動いたのはこの 2 つでした。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://gccxml.github.io/HTML/Index.html&#34;&gt;GCC-XML&lt;/a&gt; とその後継の &lt;a href=&#34;https://github.com/CastXML/CastXML#readme&#34;&gt;CastXML/CastXML: C-family Abstract Syntax Tree XML Output&lt;/a&gt; はうまくいかなくて諦めました。&lt;/p&gt;

&lt;h3 id=&#34;doxygen&#34;&gt;Doxygen&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.doxygen.jp/starting.html&#34;&gt;Doxygen&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://onlineconsultant.jp/pukiwiki/?Doxygen%2FGraphviz%E3%81%A7%E3%83%89%E3%82%AD%E3%83%A5%E3%83%A1%E3%83%B3%E3%83%88%E3%82%92%E8%87%AA%E5%8B%95%E7%94%9F%E6%88%90%E3%81%99%E3%82%8B&#34;&gt;Doxygen/Graphvizでドキュメントを自動生成する -でじうぃき&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりを参考にしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/trafficserver&#34;&gt;https://github.com/apache/trafficserver&lt;/a&gt; を &lt;code&gt;git clone&lt;/code&gt; したディレクトリで作業しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;doxygen -g
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で &lt;code&gt;Doxyfile&lt;/code&gt; を生成して、以下のように編集しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;--- Doxyfile.generated	2016-02-11 23:27:47.000000000 +0900
+++ Doxyfile	2016-01-22 20:52:30.000000000 +0900
@@ -32,13 +32,13 @@
 # title of most generated pages and in a few other places.
 # The default value is: My Project.
 
-PROJECT_NAME           = &amp;quot;My Project&amp;quot;
+PROJECT_NAME           = &amp;quot;Apache Traffic Server&amp;quot;
 
 # The PROJECT_NUMBER tag can be used to enter a project or revision number. This
 # could be handy for archiving the generated documentation or if some version
 # control system is used.
 
-PROJECT_NUMBER         =
+PROJECT_NUMBER         = 6.0
 
 # Using the PROJECT_BRIEF tag one can provide an optional one line description
 # for a project that appears at the top of each page and should give viewer a
@@ -58,7 +58,7 @@
 # entered, it will be relative to the location where doxygen was started. If
 # left blank the current directory will be used.
 
-OUTPUT_DIRECTORY       =
+OUTPUT_DIRECTORY       = ../trafficserver-doxygen
 
 # If the CREATE_SUBDIRS tag is set to YES then doxygen will create 4096 sub-
 # directories (in 2 levels) under the output directory of each output format and
@@ -802,7 +802,7 @@
 # be searched for input files as well.
 # The default value is: NO.
 
-RECURSIVE              = NO
+RECURSIVE              = YES
 
 # The EXCLUDE tag can be used to specify files and/or directories that should be
 # excluded from the INPUT source files. This way you can easily exclude a
@@ -933,13 +933,13 @@
 # also VERBATIM_HEADERS is set to NO.
 # The default value is: NO.
 
-SOURCE_BROWSER         = NO
+SOURCE_BROWSER         = YES
 
 # Setting the INLINE_SOURCES tag to YES will include the body of functions,
 # classes and enums directly into the documentation.
 # The default value is: NO.
 
-INLINE_SOURCES         = NO
+INLINE_SOURCES         = YES
 
 # Setting the STRIP_CODE_COMMENTS tag to YES will instruct doxygen to hide any
 # special comment blocks from generated source code fragments. Normal C, C++ and
@@ -1865,7 +1865,7 @@
 # captures the structure of the code including all documentation.
 # The default value is: NO.
 
-GENERATE_XML           = NO
+GENERATE_XML           = YES
 
 # The XML_OUTPUT tag is used to specify where the XML pages will be put. If a
 # relative path is entered the value of OUTPUT_DIRECTORY will be put in front of
@@ -2250,7 +2250,7 @@
 # The default value is: NO.
 # This tag requires that the tag HAVE_DOT is set to YES.
 
-CALL_GRAPH             = NO
+CALL_GRAPH             = YES
 
 # If the CALLER_GRAPH tag is set to YES then doxygen will generate a caller
 # dependency graph for every global function or class method.
@@ -2262,7 +2262,7 @@
 # The default value is: NO.
 # This tag requires that the tag HAVE_DOT is set to YES.
 
-CALLER_GRAPH           = NO
+CALLER_GRAPH           = YES
 
 # If the GRAPHICAL_HIERARCHY tag is set to YES then doxygen will graphical
 # hierarchy of all classes instead of a textual one.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;Doxyfile&lt;/code&gt; を編集したら、以下のように実行するとドキュメントが生成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;doxygen
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記では &lt;code&gt;GENERATE_XML&lt;/code&gt; を &lt;code&gt;YES&lt;/code&gt; にしていますが、通常は &lt;code&gt;NO&lt;/code&gt; で良いです。生成された HTML に不満がある場合は &lt;code&gt;YES&lt;/code&gt; にして xml ファイルを生成し好みに加工すれば良いということです。&lt;/p&gt;

&lt;p&gt;CALL_GRAPH と CALLER_GRAPH を作るには GraphViz をインストールしておく必要があります。メソッドの呼び出し図ではなくファイルのインクルード関係図っぽかったです (図のあるページへのたどり着き方を見失ってしまって現在確認できず)。&lt;/p&gt;

&lt;h3 id=&#34;gnu-global&#34;&gt;GNU GLOBAL&lt;/h3&gt;

&lt;p&gt;コードリーディング用にはこちらのほうが使いやすかったです。Homebrewからインストールしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install global
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/apache/trafficserver&#34;&gt;https://github.com/apache/trafficserver&lt;/a&gt; を &lt;code&gt;git clone&lt;/code&gt; したディレクトリで以下のコマンドを実行して &lt;code&gt;HTML&lt;/code&gt; ディレクトリにドキュメントが生成しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;htags -sa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-s&lt;/code&gt; をつけると関数などの定義箇所で名前がリンクになり、クリックすると参照箇所一覧のページに飛べます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;-a&lt;/code&gt; はアルファベットの索引を作るオプションです。&lt;/p&gt;

&lt;p&gt;以下のように &lt;code&gt;-n&lt;/code&gt; も追加するとソースリストに行番号が追加されます。ただし、コピペしようとコードを選択すると行番号も混ざってしまいます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;htags -sa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースコードのフォントを Monaco にするには &lt;code&gt;HTML/styles.css&lt;/code&gt; に以下のコードを追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pre {
        font-family: Monaco;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;時々参照箇所へのリンクが違うクラスに飛んだりすることがあったので、その場合は &lt;a href=&#34;https://github.com/monochromegane/the_platinum_searcher&#34;&gt;the_platinum_searcher&lt;/a&gt; で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pt -G &#39;\.(h|cc)$&#39; 文字列
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;や&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pt -e -G &#39;\.(h|cc)$&#39; 正規表現
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で検索しました。&lt;/p&gt;

&lt;h2 id=&#34;コードリーディングのメモ&#34;&gt;コードリーディングのメモ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/trafficserver-code-reading&#34;&gt;hnakamur/trafficserver-code-reading: This is my code reading memo for Apache Traffic Server&lt;/a&gt; に置きました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>