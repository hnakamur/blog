<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Vendoring on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/vendoring/index.xml</link>
    <description>Recent content in Vendoring on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/tags/vendoring/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>mattn/gomにGoのvendoringサポートが追加されました</title>
      <link>https://hnakamur.github.io/blog/2015/10/22/gom_got_go_vendoring_support/</link>
      <pubDate>Thu, 22 Oct 2015 01:22:10 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/10/22/gom_got_go_vendoring_support/</guid>
      <description>

&lt;p&gt;以前&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;を読んだのですが、その時は様子見にしていました。&lt;/p&gt;

&lt;p&gt;しかし、仕事でGoを書くとなるとやはりVendoringは必要だろうと思い、遅ればせながら今回&lt;a href=&#34;https://getgb.io/examples/getting-started/&#34;&gt;gb&lt;/a&gt;, &lt;a href=&#34;https://github.com/tools/godep&#34;&gt;tools/godep&lt;/a&gt;, &lt;a href=&#34;https://github.com/mattn/gom&#34;&gt;mattn/gom&lt;/a&gt;を試してみました。&lt;/p&gt;

&lt;h2 id=&#34;gbの不満&#34;&gt;gbの不満&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://getgb.io/examples/getting-started/&#34;&gt;gb&lt;/a&gt;の例を見ると、自分のプロジェクトのトップディレクトリに &lt;code&gt;src/cmd&lt;/code&gt; あるいは &lt;code&gt;src/github.com/ユーザID/プロジェクト名&lt;/code&gt; というディレクトリを作ってそこにソースを置く必要があるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://getgb.io/faq/#cannot-build-src-root&#34;&gt;FAQ&lt;/a&gt;にも&lt;a href=&#34;http://getgb.io/faq/#cannot-build-src-root&#34;&gt;Why can&amp;rsquo;t I place source in $PROJECT/src?&lt;/a&gt;という項があるので、これは仕様のようです。&lt;/p&gt;

&lt;p&gt;でもこれだと、自分のプロジェクトを他のプロジェクトで使いたい時に &lt;code&gt;go get&lt;/code&gt; で使えないですよね。
FAQに &amp;ldquo;Can I use gb if I am working on a Go library?&amp;rdquo; とか &amp;ldquo;Copying code is gross! Can I use git submodules?&amp;rdquo; とかあるんですが、git submoduleにせよgit subtreeにせよ面倒だなと思いました。&lt;/p&gt;

&lt;h2 id=&#34;godepsの不満&#34;&gt;godepsの不満&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/tools/godep&#34;&gt;tools/godep&lt;/a&gt; の&amp;rdquo;Go 1.5 vendor/ experiment&amp;rdquo;の項を読んで試してみたところ、&lt;code&gt;go build&lt;/code&gt; が使用する環境変数 &lt;code&gt;GO15VENDOREXPERIMENT&lt;/code&gt; を &lt;code&gt;export GO15VENDOREXPERIMENT=1&lt;/code&gt; のように設定しておくと、そうでないときは &lt;code&gt;Godeps/_workspace/&lt;/code&gt; に置かれる依存ライブラリが &lt;code&gt;vendor/&lt;/code&gt; 以下に置かれるようになることがわかりました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;vendor/&lt;/code&gt; を &lt;code&gt;.gitignore&lt;/code&gt; で除外してコミットしたいので、後から &lt;code&gt;Godeps/Godeps.json&lt;/code&gt; から &lt;code&gt;vendor/&lt;/code&gt; を再構成する必要があります。READMEには書いてないですが、 &lt;code&gt;godep get&lt;/code&gt; でダウンロードして、 &lt;code&gt;godep save&lt;/code&gt; で &lt;code&gt;vendor/&lt;/code&gt; に反映できることがわかりました。&lt;/p&gt;

&lt;p&gt;ただ、 &lt;code&gt;godep get&lt;/code&gt; でダウンロードする先は環境変数 &lt;code&gt;GOPATH&lt;/code&gt; で指しているディレクトリなんですよね。 &lt;code&gt;godep save&lt;/code&gt; は &lt;code&gt;$GOPATH&lt;/code&gt; から &lt;code&gt;vendor/&lt;/code&gt; に反映するコマンドです。&lt;/p&gt;

&lt;p&gt;ちなみに &lt;code&gt;godep restore&lt;/code&gt; というコマンドもありますが、これは &lt;code&gt;vendor/&lt;/code&gt; から &lt;code&gt;$GOPATH&lt;/code&gt; に反映します。GoにVendoringサポートがなかったときは、これで &lt;code&gt;$GOPATH&lt;/code&gt; に反映してから &lt;code&gt;go build&lt;/code&gt; という手順も妥当な気がしますが、Vendoringがある今となってはグローバルの &lt;code&gt;$GOPATH&lt;/code&gt; 配下は触らずに &lt;code&gt;vendor/&lt;/code&gt; 以下を直接更新したいところです。&lt;/p&gt;

&lt;p&gt;とりあえずイシュー&lt;a href=&#34;https://github.com/tools/godep/issues/299&#34;&gt;Download dependency to vendor/ directory with godep get when GO15VENDOREXPERIMENT=1 · Issue #299 · tools/godep&lt;/a&gt; を立ててみたところ、同じことを考えていたというコメントがついていました。&lt;/p&gt;

&lt;h2 id=&#34;gomならバッチリ&#34;&gt;gomならバッチリ！&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/mattn/gom&#34;&gt;mattn/gom&lt;/a&gt;を見ると&lt;a href=&#34;https://github.com/mattn/gom/issues/51&#34;&gt;Consider adding GO15VENDOREXPERIMENT support · Issue #51 · mattn/gom&lt;/a&gt;というイシューがあったので、対応するコードを書いて &lt;a href=&#34;https://github.com/mattn/gom/pull/57&#34;&gt;Support go15vendorexperiment by mattn · Pull Request #57 · mattn/gom&lt;/a&gt;で追加修正の上マージしていただきました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;gom install&lt;/code&gt; では内部的に &lt;code&gt;go get&lt;/code&gt; を呼び出しているので、ターゲットディレクトリを &lt;code&gt;vendor/&lt;/code&gt; にしても &lt;code&gt;vendor/src/github.com/...&lt;/code&gt; のように &lt;code&gt;src&lt;/code&gt; フォルダが作られてしまいます。上の修正では対処療法的に &lt;code&gt;gom install&lt;/code&gt; 内で &lt;code&gt;vendor/*&lt;/code&gt; を &lt;code&gt;vendor/src/*&lt;/code&gt; に移動して、終わったら &lt;code&gt;vendor/src/*&lt;/code&gt; を &lt;code&gt;vendor/*&lt;/code&gt; に移動して対応しています。&lt;/p&gt;

&lt;p&gt;正確には最初の移動では &lt;code&gt;vendor/&lt;/code&gt; 以下の &lt;code&gt;bin&lt;/code&gt;, &lt;code&gt;pkg&lt;/code&gt;, &lt;code&gt;src&lt;/code&gt; は除外しています。&lt;/p&gt;

&lt;p&gt;これで、 &lt;code&gt;export GO15VENDOREXPERIMENT=1&lt;/code&gt; さえしておけば、 &lt;code&gt;gom install&lt;/code&gt; で &lt;code&gt;$GOPATH&lt;/code&gt; 配下は変更せずに直接 &lt;code&gt;vendor/&lt;/code&gt; 以下を更新できるようになりました。&lt;/p&gt;

&lt;p&gt;READMEには書いてないですが、 &lt;code&gt;gom lock&lt;/code&gt; を実行すれば &lt;code&gt;Gomfile.lock&lt;/code&gt; が作られて、以降の &lt;code&gt;gom install&lt;/code&gt; では依存ライブラリのバージョンを正確に反映できます。&lt;/p&gt;

&lt;p&gt;ということで、gomならバッチリ私の希望を満たしてくれることがわかりました。
mattnさん、便利なツールをありがとうございます！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>