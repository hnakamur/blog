<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Copr on hnakamur&#39;s blog at github</title>
    <link>/blog/tags/copr/</link>
    <description>Recent content in Copr on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Wed, 16 Dec 2015 00:06:39 +0900</lastBuildDate>
    <atom:link href="/blog/tags/copr/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>coprのAPIをcurlで呼び出す</title>
      <link>/blog/2015/12/16/calling_copr_api_with_curl/</link>
      <pubDate>Wed, 16 Dec 2015 00:06:39 +0900</pubDate>
      
      <guid>/blog/2015/12/16/calling_copr_api_with_curl/</guid>
      <description>

&lt;h2 id=&#34;はじめに:d97aa5d91864f67b35847063abc7f579&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://fedorahosted.org/copr/&#34;&gt;copr&lt;/a&gt;を利用するには以下の3つの手段があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ウェブ管理画面を使う

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://fedorahosted.org/copr/wiki/ScreenshotsTutorial&#34;&gt;スクリーンショットつきのチュートリアル&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://apps.fedoraproject.org/packages/copr-cli&#34;&gt;copr-cli&lt;/a&gt;というコマンドラインツールを使う

&lt;ul&gt;
&lt;li&gt;内部的に下記の&lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;を呼び出しています&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;を使う&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;copr-cliを使わずにcurlでapiを呼ぶ理由:d97aa5d91864f67b35847063abc7f579&#34;&gt;copr-cliを使わずにcurlでAPIを呼ぶ理由&lt;/h2&gt;

&lt;p&gt;折角copr-cliというコマンドラインツールが用意されているのでそれを活用すれば良いのですが、以下のような問題に遭遇したのでAPIをcurlで呼ぶようにしてみました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;CentOS 7でyumでインストールできるcopr-cliはバージョンが古くてsrpmのアップロード機能が未サポート&lt;/li&gt;
&lt;li&gt;CentOS 7のPythonが古いのでInsecurePlatformWarningが出てしまう&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;centos-7でyumでインストールできるcopr-cliはバージョンが古くてsrpmのアップロード機能が未サポート:d97aa5d91864f67b35847063abc7f579&#34;&gt;CentOS 7でyumでインストールできるcopr-cliはバージョンが古くてsrpmのアップロード機能が未サポート&lt;/h3&gt;

&lt;p&gt;正確にはcopr-cliが利用している&lt;a href=&#34;https://apps.fedoraproject.org/packages/python-copr/&#34;&gt;python-copr&lt;/a&gt;のバージョンの問題です。
&lt;a href=&#34;https://apps.fedoraproject.org/packages/python-copr/changelog&#34;&gt;python-coprのChangelog&lt;/a&gt;を見ると1.58-1でsrpmをアップロードする機能が追加されています。&lt;/p&gt;

&lt;p&gt;一方、CentOS 7のepelにあるpython-coprは1.57-1です。srpmをアップロードする機能を使わないとなると、インターネット上にsrpmを置いてURLを指定する必要があり面倒です。&lt;/p&gt;

&lt;h3 id=&#34;centos-7のpythonが古いのでinsecureplatformwarningが出てしまう:d97aa5d91864f67b35847063abc7f579&#34;&gt;CentOS 7のPythonが古いのでInsecurePlatformWarningが出てしまう&lt;/h3&gt;

&lt;p&gt;copr-cliはpipからインストールすれば1.58-1が使えて解決と思ったのですが、今度はPythonのバージョンが古くてhttps通信時にInsecurePlatformWarningが出ました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://urllib3.readthedocs.org/en/latest/security.html#insecureplatformwarning&#34;&gt;Security: Verified HTTPS with SSL/TLS — urllib3 dev documentation&lt;/a&gt;を見るとPythonを2.7.9以上にするのが一番理想なのですが、CentOS 7に入っているPythonは2.7.5です。
softwarecollection.orgの&lt;a href=&#34;https://www.softwarecollections.org/repos/rhscl/python27/epel-7-x86_64/python27-python-2.7.8-3.el7/&#34;&gt;python27-python&lt;/a&gt;でも2.7.8です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://urllib3.readthedocs.org/en/latest/security.html#without-modifying-code&#34;&gt;Without modifying code&lt;/a&gt;の手順で警告を無視するというあまり良くない方法も使ってみたのですが、手元のDocker環境ではよかったもののTravis CIだとエラーになってしまうという現象が起きました。&lt;/p&gt;

&lt;h2 id=&#34;copr-apiの認証方法:d97aa5d91864f67b35847063abc7f579&#34;&gt;copr APIの認証方法&lt;/h2&gt;

&lt;p&gt;というわけでcopr-cliを使わずにcurlでCoprのAPIを呼び出す方法を調べました。&lt;/p&gt;

&lt;p&gt;まずは認証ですが、&lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;の先頭にcopr-cli用の設定ファイル形式でAPIトークンの情報が表示されています。が、APIの認証方法は記載されていません。&lt;/p&gt;

&lt;p&gt;しかたがないので、python-coprのソースを読んでみるとcopr/client/client.pyに以下のようなコードがありました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...(snip)...
    def _fetch(self, url, data=None, username=None, method=None,
               skip_auth=False, on_error_response=None, headers=None):
...(snip)...
        if not skip_auth:
            kwargs[&amp;quot;auth&amp;quot;] = (self.login, self.token)
...(snip)...
        try:
            response = requests.request(
                method=method.upper(),
                url=url,
                **kwargs
            )
...(snip)...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.python-requests.org/en/latest/&#34;&gt;PythonのRequestsライブラリ&lt;/a&gt;の&lt;a href=&#34;http://docs.python-requests.org/en/latest/user/authentication/#basic-authentication&#34;&gt;Basic Authentication&lt;/a&gt;のドキュメントを見ると、上記のコードは &lt;code&gt;self.login&lt;/code&gt; の値をユーザ名、 &lt;code&gt;self.token&lt;/code&gt; の値をパスワードとしてBASIC認証していることがわかりました。&lt;/p&gt;

&lt;h2 id=&#34;apiの呼び出し例:d97aa5d91864f67b35847063abc7f579&#34;&gt;APIの呼び出し例&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/&#34;&gt;hnakamur/nginx-rpm&lt;/a&gt;の&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/358d646a22c9c516a9247595e296b256d61a86f6/scripts/build.sh#L72-L95&#34;&gt;scripts/build.sh&lt;/a&gt;のコードで説明します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;build_rpm_on_copr() {
  build_srpm

  # Check the project is already created on copr.
  status=`curl -s -o /dev/null -w &amp;quot;%{http_code}&amp;quot; https://copr.fedoraproject.org/api/coprs/${COPR_USERNAME}/${copr_project_name}/detail/`
  if [ $status = &amp;quot;404&amp;quot; ]; then
    # Create the project on copr.
    # We call copr APIs with curl to work around the InsecurePlatformWarning problem
    # since system python in CentOS 7 is old.
    # I read the source code of https://pypi.python.org/pypi/copr/1.62.1
    # since the API document at https://copr.fedoraproject.org/api/ is old.
    curl -s -X POST -u &amp;quot;${COPR_LOGIN}:${COPR_TOKEN}&amp;quot; \
      --data-urlencode &amp;quot;name=${copr_project_name}&amp;quot; \
      --data-urlencode &amp;quot;${mock_chroot}=y&amp;quot; \
      --data-urlencode &amp;quot;description=$copr_project_description&amp;quot; \
      --data-urlencode &amp;quot;instructions=$copr_project_instructions&amp;quot; \
      https://copr.fedoraproject.org/api/coprs/${COPR_USERNAME}/new/
  fi
  # Add a new build on copr with uploading a srpm file.
  curl -s -X POST -u &amp;quot;${COPR_LOGIN}:${COPR_TOKEN}&amp;quot; \
    -F &amp;quot;${mock_chroot}=y&amp;quot; \
    -F &amp;quot;pkgs=@${topdir}/SRPMS/${srpm_file};type=application/x-rpm&amp;quot; \
    https://copr.fedoraproject.org/api/coprs/${COPR_USERNAME}/${copr_project_name}/new_build_upload/
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;最初の &lt;code&gt;https://copr.fedoraproject.org/api/coprs/${COPR_USERNAME}/${copr_project_name}/detail/&lt;/code&gt; はプロジェクトの詳細情報取得です。これはログイン不要です。&lt;/p&gt;

&lt;p&gt;次の &lt;code&gt;https://copr.fedoraproject.org/api/coprs/${COPR_USERNAME}/new/&lt;/code&gt; にPOSTしているのがプロジェクト作成です。&lt;/p&gt;

&lt;p&gt;最後の &lt;code&gt;https://copr.fedoraproject.org/api/coprs/${COPR_USERNAME}/${copr_project_name}/new_build_upload/&lt;/code&gt; がsrpmをアップロードしてビルド開始のAPIです。&lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;には &lt;code&gt;/new_build/&lt;/code&gt; は記載がありますが、 &lt;code&gt;/new_build_upload/&lt;/code&gt; は記載が無いです。python-coprのcopr/client/client.pyのソースで見つけました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;...(snip)...
    def create_new_build(self, projectname, pkgs, username=None,
                         timeout=None, memory=None, chroots=None,
                         progress_callback=None):
...(snip)...
        if urlparse(pkgs[0]).scheme != &amp;quot;&amp;quot;:
            api_endpoint = &amp;quot;new_build&amp;quot;
            data[&amp;quot;pkgs&amp;quot;] = &amp;quot; &amp;quot;.join(pkgs)
        else:
            try:
                api_endpoint = &amp;quot;new_build_upload&amp;quot;
                f = open(pkgs[0], &amp;quot;rb&amp;quot;)
                data[&amp;quot;pkgs&amp;quot;] = (os.path.basename(f.name), f, &amp;quot;application/x-rpm&amp;quot;)
            except IOError as e:
                raise CoprRequestException(e)

        url = &amp;quot;{0}/coprs/{1}/{2}/{3}/&amp;quot;.format(
            self.api_url, username, projectname, api_endpoint
        )
...(snip)...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ:d97aa5d91864f67b35847063abc7f579&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;のAPIドキュメントが不完全ですが、python-coprのソースを参考にしてcurlでCopr APIを呼び出すことが出来ました。&lt;/p&gt;

&lt;p&gt;これによりCentOS 7でcopr-cliやPythonのバージョンが古いことによる問題を回避できるので良かったです。curlでのcopr APIの呼び出しも上記のようにシンプルに書けるのでこれで十分だと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました</title>
      <link>/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</link>
      <pubDate>Tue, 15 Dec 2015 04:19:16 +0900</pubDate>
      
      <guid>/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</guid>
      <description>

&lt;h2 id=&#34;はじめに:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/&#34;&gt;Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;と&lt;a href=&#34;/blog/blog/2015/12/05/build_rpm_with_mock/&#34;&gt;mockコマンドでrpmをビルドする · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の環境でいくつかrpmをビルド・配布してみたのですが、手元の環境でビルドを成功させるまでに試行錯誤するのと、coprにsrpmをアップロードしてビルド・配布するのが別の環境だと面倒なことに気付きました。&lt;/p&gt;

&lt;p&gt;そこで、1つのdockerコンテナで両方を行えるようにしました。&lt;/p&gt;

&lt;h2 id=&#34;travis-ciは外しました:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;Travis CIは外しました&lt;/h2&gt;

&lt;p&gt;また、Travis CIは使わないようにしました。理由は2つあります。1つめの理由はgithubのプロジェクトごとにTravis CIのプロジェクトを作ってcopr APIのログイン名、ユーザ名、トークンを環境変数で設定するのが面倒だったからです。これ自体はTravisのAPIを使えば解決する問題かもしれません。&lt;/p&gt;

&lt;p&gt;2つめの理由は、結局手元の環境でビルドを試すので、そこからそのままcoprにsrpmを上げるほうが手っ取り早いことに気づいたからです。これは初回にrpmのspecファイルを作成するときも、その後specファイルのバージョンを更新して新しいバージョンのrpmを作成するときもそうです。&lt;/p&gt;

&lt;h2 id=&#34;nginxのカスタムrpmをビルド-配布するためのdockerコンテナ:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;nginxのカスタムrpmをビルド・配布するためのdockerコンテナ&lt;/h2&gt;

&lt;p&gt;githubレポジトリ&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm&#34;&gt;hnakamur/nginx-rpm&lt;/a&gt;に公開しています。対応するcoprのプロジェクトは&lt;a href=&#34;https://copr.fedoraproject.org/coprs/hnakamur/nginx/&#34;&gt;hnakamur/nginx Copr&lt;/a&gt;です。&lt;/p&gt;

&lt;h2 id=&#34;ビルド前の準備:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;ビルド前の準備&lt;/h2&gt;

&lt;h3 id=&#34;copr-apiトークンを-envrcにコピー:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;copr APIトークンを.envrcにコピー&lt;/h3&gt;

&lt;p&gt;coprを使うにはFedoraアカウントが必要です。&lt;a href=&#34;https://admin.fedoraproject.org/accounts/user/new&#34;&gt;Sign up for a Fedora account&lt;/a&gt; から登録してください。&lt;/p&gt;

&lt;p&gt;Fedoraアカウントにログインした状態で &lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;を開くと、ページの先頭にAPI Tokenというセクションがあり、以下のような内容が表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[copr-cli]
login = ログインID
username = ユーザ名
token = トークン
copr_url = https://copr.fedoraproject.org
# expiration date: 2016-05-12
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドを実行して上記のgithubレポジトリを手元にコピーします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/hnakamur/nginx-rpm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;.envrc.example&lt;/code&gt; を &lt;code&gt;.envrc&lt;/code&gt; にコピーして、上で表示したログインID、ユーザ名、トークンを &lt;code&gt;.envrc&lt;/code&gt; 内の &lt;code&gt;COPR_LOGIN&lt;/code&gt;, &lt;code&gt;COPR_USERNAME&lt;/code&gt;, &lt;code&gt;COPR_TOKEN&lt;/code&gt; 環境変数に設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# NOTE: Copy this file to .envrc and edit the values
# Go https://copr.fedoraproject.org/api/ and login in and see the values to set.
export COPR_LOGIN=_your_login_here_
export COPR_USERNAME=_your_username_here_
export COPR_TOKEN=_your_token_here_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;セキュリティを考慮してこれらの値はdockerのイメージには埋め込まず、実行時にdockerの &lt;code&gt;-e&lt;/code&gt; オプションで渡すようにしています。具体的には &lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/docker_wrapper.sh&#34;&gt;docker_wrapper.sh&lt;/a&gt; の &lt;code&gt;docker run&lt;/code&gt; の行を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;specファイルの調整:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;specファイルの調整&lt;/h3&gt;

&lt;p&gt;specファイルは &lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/SPECS/nginx.spec&#34;&gt;SPECS/nginx&lt;/a&gt; にあります。各自のニーズに応じて適宜調整します。現時点では &lt;a href=&#34;http://nginx.org/packages/centos/7/SRPMS/&#34;&gt;http://nginx.org/packages/centos/7/SRPMS/&lt;/a&gt; で配布されているCentOS 7用のsrpmをベースに以下の3つのモジュールを組み込んだものになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;openresty/lua-nginx-module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/yaoweibin/nginx_upstream_check_module&#34;&gt;yaoweibin/nginx_upstream_check_module&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/replay/ngx_http_consistent_hash&#34;&gt;replay/ngx_http_consistent_hash&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;nginx.orgで配布されているsrpm内のnginx.specからの差分は &lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/compare/7e234d2a222778c0a46204dba4e2dcaae8bf7894...ce4e842731a9b90034f9e00796e16839d8bda826&#34;&gt;https://github.com/hnakamur/nginx-rpm/compare/7e234d2a222778c0a46204dba4e2dcaae8bf7894...ce4e842731a9b90034f9e00796e16839d8bda826&lt;/a&gt; で見られます。&lt;/p&gt;

&lt;h3 id=&#34;sources-ファイルの調整:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;SOURCES/*ファイルの調整&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/tree/master/SOURCES&#34;&gt;SOURCES/&lt;/a&gt;にsrpmで必要なソースファイルを置いています。必要に応じて調整してください。今は &lt;a href=&#34;http://nginx.org/packages/centos/7/SRPMS/&#34;&gt;http://nginx.org/packages/centos/7/SRPMS/&lt;/a&gt; で配布されているCentOS 7用のsrpmから頂いたものをそのまま使用しています。&lt;/p&gt;

&lt;p&gt;なお、nginx自体のソースコード(例: nginx-1.9.9.tar.gz)や各エクステンションのソースコードは含めず、ビルド時にダウンロードするようにしています。これはgitレポジトリの肥大化を防ぐためです。&lt;/p&gt;

&lt;h3 id=&#34;ビルドスクリプトの調整:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;ビルドスクリプトの調整&lt;/h3&gt;

&lt;p&gt;ビルドスクリプト&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/scripts/build.sh&#34;&gt;scripts/build.sh&lt;/a&gt;も適宜調整します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;copr_project_name、copr_project_description、copr_project_instructions、rpm_nameをお好みで編集してください。&lt;/li&gt;
&lt;li&gt;&lt;code&gt;download_source_files&lt;/code&gt; 関数はspecファイルの &lt;code&gt;/^Source[0-9]*:&lt;/code&gt; にマッチするパターンで値がhttpから始まるURLについてダウンロードするようにしています。そしてURLの最後のスラッシュ以降をファイル名として採用しています。このルールから外れる場合は、この関数を適宜変更してください。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;dockerfileとdockerのラッパースクリプトを調整:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;Dockerfileとdockerのラッパースクリプトを調整&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;と&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/docker_wrapper.sh&#34;&gt;docker_wrapper.sh&lt;/a&gt;を適宜調整してください。&lt;/p&gt;

&lt;p&gt;通常は&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/fa051c195e030c2e7f247fa258c6fad1ef9f0dde/docker_wrapper.sh&#34;&gt;docker_wrapper.sh&lt;/a&gt;のdockerimageを好きな名前に変えるぐらいで大丈夫だと思います。&lt;/p&gt;

&lt;h2 id=&#34;dockerイメージを作成:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;dockerイメージを作成&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行してdockerイメージをビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./docker_wrapper.sh build
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;dockerイメージを起動してmockでrpmをビルド:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;dockerイメージを起動してmockでrpmをビルド&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行してdockerイメージを起動してbashプロンプトを表示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;source .envrc
./docker_wrapper.sh bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに私は&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv/direnv&lt;/a&gt;を使っているので、 &lt;code&gt;source .envrc&lt;/code&gt; の行は自分で入力しなくても&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv/direnv&lt;/a&gt;が実行してくれるので便利です。direnvについては&lt;a href=&#34;http://blog.hde.co.jp/entry/2015/02/27/182117&#34;&gt;改めて、direnvを使いましょう！ - HDE BLOG&lt;/a&gt;などの記事を参照してください。&lt;/p&gt;

&lt;p&gt;dockerイメージのbashプロンプトで以下のコマンドを実行してmockでrpmをビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./build.sh mock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mockはchroot環境を作ってそこでrpmをビルドするようになっているので、chroot環境の作成にちょっと時間がかかります。&lt;/p&gt;

&lt;p&gt;dockerコンテナという独立空間が既にあるのにmockでchroot環境を作るのは無駄なんですが、coprがmockを使っているためmockでビルドが成功することを確認してからcoprにsrpmをアップロードするほうが、coprでのビルド失敗を減らせて良いですのでこうしています。&lt;/p&gt;

&lt;h2 id=&#34;coprにsrpmをアップロードして-rpmをビルド-配布:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;coprにsrpmをアップロードして、rpmをビルド・配布&lt;/h2&gt;

&lt;p&gt;mockでrpmのビルドが成功することを確認できたら、dockerコンテナ内で以下のコマンドを実行してsrpmをcoprにアップロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./build.sh copr
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/scripts/build.sh&#34;&gt;scripts/build.sh&lt;/a&gt;の &lt;code&gt;copr_project_name&lt;/code&gt; で指定した名前のプロジェクトがcopr上に存在しない場合はまず作成してからsrpmをアップロードするようになっています。&lt;/p&gt;

&lt;p&gt;coprのプロジェクト &lt;code&gt;https://copr.fedoraproject.org/coprs/${COPR_USER_NAME}/${copr_project_name}/&lt;/code&gt; でビルドが完了すれば、rpmのレポジトリとして利用可能です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:a6dec0c2f0f4e62064b6bd29ded4a923&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;mockとcoprを使ってnginxのカスタムrpmをビルド・配布する環境について説明しました。&lt;/p&gt;

&lt;p&gt;mockを使ってクリーンな環境でビルドできるので、今回のスクリプトでdockerコンテナを使う必要性は特にありません。Dockerfileでセットアップしたのと同等のCentOS7環境があれば &lt;a href=&#34;https://github.com/hnakamur/nginx-rpm/blob/master/scripts/build.sh&#34;&gt;scripts/build.sh&lt;/a&gt;を使ってsrpmのビルド、rpmのビルド、srpmのcoprへのアップロードを行えます。&lt;/p&gt;

&lt;p&gt;mockでのrpmのビルドが失敗した場合の調査方法とかcoprのAPIをcopr-cliではなくcurlで呼び出している話とか、いくつか書きたい話があるので日を改めて別記事として書こうと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>