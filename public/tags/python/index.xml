<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Python on hnakamur&#39;s blog at github</title>
    <link>/blog/tags/python/</link>
    <description>Recent content in Python on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 26 Jul 2015 23:09:17 +0900</lastBuildDate>
    <atom:link href="/blog/tags/python/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Ubuntu 14.04のPython3でvenvを使う手順のメモ</title>
      <link>/blog/2015/07/26/use_python3_venv_on_ubuntu_14.04/</link>
      <pubDate>Sun, 26 Jul 2015 23:09:17 +0900</pubDate>
      
      <guid>/blog/2015/07/26/use_python3_venv_on_ubuntu_14.04/</guid>
      <description>

&lt;p&gt;Ubuntu 14.04のPython3でvenv環境をつくろうとしたらエラーになったのですが、&lt;a href=&#34;http://www.thefourtheye.in/2014/12/Python-venv-problem-with-ensurepip-in-Ubuntu.html&#34;&gt;thefourtheye&amp;rsquo;s Tech Blog: Python&amp;rsquo;s venv problem with ensurepip in Ubuntu&lt;/a&gt;に回避方法が紹介されていました。&lt;/p&gt;

&lt;p&gt;venv環境の作成手順をメモしておきます。&lt;/p&gt;

&lt;h2 id=&#34;事前準備:05eb07f168fcd264f562f523d3cefc83&#34;&gt;事前準備&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install python3 python3-pip
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;venv環境作成手順:05eb07f168fcd264f562f523d3cefc83&#34;&gt;venv環境作成手順&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;pyvenv-3.4 --without-pip venv
source venv/bin/activate
curl -LO https://bootstrap.pypa.io/get-pip.py
python3 get-pip.py
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;2015-08-29追記-スクリプトを書きました:05eb07f168fcd264f562f523d3cefc83&#34;&gt;2015-08-29追記: スクリプトを書きました&lt;/h2&gt;

&lt;p&gt;以下の内容を~/bin/venv3などというファイル名で保存します。sourceで実行するので実行パーミションは付けないでください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;venv_dir=&amp;quot;${1:-venv}&amp;quot;
pyvenv-3.4 --without-pip &amp;quot;${venv_dir}&amp;quot;
source &amp;quot;${venv_dir}/bin/activate&amp;quot;
curl -L https://bootstrap.pypa.io/get-pip.py | python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;使い方は &lt;code&gt;source ~/bin/venv3 作成するディレクトリ名&lt;/code&gt; です。作成するディレクトリ名を省略するとカレントディレクトリ下のvenvになります。
使用例は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:/tmp$ source ~/bin/venv3 venv3
  % Total    % Received % Xferd  Average Speed   Time    Time     Time  Current
                                 Dload  Upload   Total   Spent    Left  Speed
100 1379k  100 1379k    0     0  2741k      0 --:--:-- --:--:-- --:--:-- 2737k
Collecting pip
  Using cached pip-7.1.2-py2.py3-none-any.whl
Collecting setuptools
  Using cached setuptools-18.2-py2.py3-none-any.whl
Collecting wheel
  Using cached wheel-0.24.0-py2.py3-none-any.whl
Installing collected packages: pip, setuptools, wheel
Successfully installed pip-7.1.2 setuptools-18.2 wheel-0.24.0
(venv3) vagrant@vagrant-ubuntu-trusty-64:/tmp$
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>HomebrewのPython2とPython3でvirtualenv環境を作成する手順メモ</title>
      <link>/blog/2015/07/26/how_to_use_venv_with_homebrew_python2_and_3/</link>
      <pubDate>Sun, 26 Jul 2015 02:28:59 +0900</pubDate>
      
      <guid>/blog/2015/07/26/how_to_use_venv_with_homebrew_python2_and_3/</guid>
      <description>

&lt;h2 id=&#34;はじめに:0b9e6fd53135617d881618470dafc934&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;ここしばらく&lt;a href=&#34;https://github.com/riywo/anyenv&#34;&gt;riywo/anyenv&lt;/a&gt;と&lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;yyuu/pyenv&lt;/a&gt;でPython 2.7.10をPython 3.4.3を使い分けてきたのですが、私の用途だと2系と3系の最新だけ使えればいいことがわかりました。&lt;/p&gt;

&lt;p&gt;そこで、pyenvを止めてhomebrewのpython2と3を使うことにしました。自分用にPython2のvirtualenvとPython3のvenvで仮想環境を作る手順のメモを書いておきます。&lt;/p&gt;

&lt;h2 id=&#34;事前準備:0b9e6fd53135617d881618470dafc934&#34;&gt;事前準備&lt;/h2&gt;

&lt;p&gt;Python2とvirtualenvのインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install python
pip install virtualenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Python3のインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install python3
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールされるコマンドはpythonとpipがPython2用で、python3とpip3がPython3用となっています。&lt;/p&gt;

&lt;h2 id=&#34;python2の仮想環境の作成と有効化の手順:0b9e6fd53135617d881618470dafc934&#34;&gt;Python2の仮想環境の作成と有効化の手順&lt;/h2&gt;

&lt;p&gt;作業ディレクトリを作ってそこに移動し、venvというサブディレクトリにPython2用のvirtualenvを作って有効化するのは以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p $(作業ディレクトリ名)
cd !$
virtualenv venv
source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;python3の仮想環境の作成と有効化の手順:0b9e6fd53135617d881618470dafc934&#34;&gt;Python3の仮想環境の作成と有効化の手順&lt;/h2&gt;

&lt;p&gt;Python3では&lt;code&gt;virtualenv&lt;/code&gt;コマンドではなくPython 3.3で追加された&lt;a href=&#34;https://docs.python.org/3/library/venv.html?highlight=venv#module-venv&#34;&gt;venv&lt;/a&gt;という標準モジュールを使います。&lt;/p&gt;

&lt;p&gt;作業ディレクトリを作ってそこに移動し、venvというサブディレクトリにPython2用のvirtualenvを作って有効化するのは以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p $(作業ディレクトリ名)
cd !$
python3 -m venv venv
source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;python3 -m venv venv&lt;/code&gt; の1つめの &lt;code&gt;venv&lt;/code&gt; はモジュール名で2つめの &lt;code&gt;venv&lt;/code&gt; は作成するサブディレクトリ名です。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;source venv/bin/activate&lt;/code&gt; でvenv環境を有効化した後は &lt;code&gt;python3&lt;/code&gt; と &lt;code&gt;pip3&lt;/code&gt; ではなく &lt;code&gt;python&lt;/code&gt; と &lt;code&gt;pip&lt;/code&gt; でコマンドを実行します。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>GeForce搭載の旧モデルMacBook ProでPyCUDAを試してみた</title>
      <link>/blog/2015/07/25/setup_pycuda_on_macbook_pro_with_geforce/</link>
      <pubDate>Sat, 25 Jul 2015 18:31:56 +0900</pubDate>
      
      <guid>/blog/2015/07/25/setup_pycuda_on_macbook_pro_with_geforce/</guid>
      <description>

&lt;h2 id=&#34;はじめに:2e3483d036f73ae71cfba34bbe193b52&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;../setup_cuda_on_macbook_pro_with_geforce/&#34;&gt;GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ&lt;/a&gt;でCUDAをセットアップした後、&lt;a href=&#34;http://mathema.tician.de/software/pycuda/&#34;&gt;PyCUDA&lt;/a&gt;も試してみたのでメモしておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mathema.tician.de/software/pycuda/&#34;&gt;PyCUDA&lt;/a&gt;のページの &lt;code&gt;Prerequisites&lt;/code&gt; に &lt;code&gt;Boost&lt;/code&gt;, &lt;code&gt;CUDA&lt;/code&gt;, &lt;code&gt;Numpy&lt;/code&gt; が書かれています。&lt;/p&gt;

&lt;p&gt;CUDAは&lt;a href=&#34;../setup_cuda_on_macbook_pro_with_geforce/&#34;&gt;GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ&lt;/a&gt;でセットアップ済みです。&lt;/p&gt;

&lt;h2 id=&#34;boostのインストール:2e3483d036f73ae71cfba34bbe193b52&#34;&gt;Boostのインストール&lt;/h2&gt;

&lt;p&gt;Boostは &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew — The missing package manager for OS X&lt;/a&gt; でインストールしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update
brew install boost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールされたboostのバージョンは以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew info boost
boost: stable 1.58.0 (bottled), HEAD
Collection of portable C++ source libraries
http://www.boost.org
/usr/local/Cellar/boost/1.58.0 (10718 files, 486M) *
  Poured from bottle
From: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/boost.rb
==&amp;gt; Dependencies
Optional: icu4c ✘
==&amp;gt; Options
--c++11
	Build using C++11 mode
--universal
	Build a universal binary
--with-icu4c
	Build regexp engine with icu support
--with-mpi
	Build with MPI support
--without-single
	Disable building single-threading variant
--without-static
	Disable building static library variant
--HEAD
	Install HEAD version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;numpyとpycudaをインストールして試してみる:2e3483d036f73ae71cfba34bbe193b52&#34;&gt;NumpyとPyCUDAをインストールして試してみる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/riywo/anyenv&#34;&gt;riywo/anyenv&lt;/a&gt;と&lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;yyuu/pyenv&lt;/a&gt;で入れたPython 3.4.3を使い、 &lt;code&gt;~/sandbox/pycuda&lt;/code&gt; という作業ディレクトリを作成してvenv環境を作って試しました。&lt;/p&gt;

&lt;p&gt;以下の手順でvenv環境を作って有効にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/sandbox/pycuda
cd !$
python -m venv venv
source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(venv) $&lt;/code&gt; プロンプト内で以下のコマンドでNumPyとPyCUDAをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install numpy
pip install pycuda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PyCUDAのほうは以下のような警告が出ましたが、インストールは出来ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /Users/hnakamur/sandbox/pycuda/venv/lib/python3.4/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: &amp;quot;Using deprecated NumPy API, disable it by &amp;quot;          &amp;quot;#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION&amp;quot; [-W#warnings]
    #warning &amp;quot;Using deprecated NumPy API, disable it by &amp;quot; \
     ^
    src/wrapper/_pvt_struct_v3.cpp:1047:30: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        static char *kwlist[] = {&amp;quot;format&amp;quot;, 0};
                                 ^
    src/wrapper/_pvt_struct_v3.cpp:1166:30: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        static char *kwlist[] = {&amp;quot;buffer&amp;quot;, &amp;quot;offset&amp;quot;, 0};
                                 ^
    src/wrapper/_pvt_struct_v3.cpp:1166:40: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        static char *kwlist[] = {&amp;quot;buffer&amp;quot;, &amp;quot;offset&amp;quot;, 0};
                                           ^
    src/wrapper/_pvt_struct_v3.cpp:1224:17: warning: unused variable &#39;isstring&#39; [-Wunused-variable]
                int isstring;
                    ^
    src/wrapper/_pvt_struct_v3.cpp:1430:6: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        {&amp;quot;format&amp;quot;, (getter)s_get_format, (setter)NULL, &amp;quot;struct format string&amp;quot;, NULL},
         ^
    src/wrapper/_pvt_struct_v3.cpp:1430:52: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        {&amp;quot;format&amp;quot;, (getter)s_get_format, (setter)NULL, &amp;quot;struct format string&amp;quot;, NULL},
                                                       ^
    src/wrapper/_pvt_struct_v3.cpp:1431:6: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        {&amp;quot;size&amp;quot;, (getter)s_get_size, (setter)NULL, &amp;quot;struct size in bytes&amp;quot;, NULL},
         ^
    src/wrapper/_pvt_struct_v3.cpp:1431:48: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        {&amp;quot;size&amp;quot;, (getter)s_get_size, (setter)NULL, &amp;quot;struct size in bytes&amp;quot;, NULL},
                                                   ^
    src/wrapper/_pvt_struct_v3.cpp:1720:1: warning: duplicate &#39;extern&#39; declaration specifier [-Wduplicate-decl-specifier]
    PyMODINIT_FUNC
    ^
    /Users/hnakamur/.anyenv/envs/pyenv/versions/3.4.3/include/python3.4m/pyport.h:778:39: note: expanded from macro &#39;PyMODINIT_FUNC&#39;
    #               define PyMODINIT_FUNC extern &amp;quot;C&amp;quot; PyObject*
                                          ^
    10 warnings generated.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pycudaのサンプルを試す:2e3483d036f73ae71cfba34bbe193b52&#34;&gt;PyCUDAのサンプルを試す&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://documen.tician.de/pycuda/tutorial.html&#34;&gt;Tutorial — PyCUDA 2015.1.2 documentation&lt;/a&gt;と&lt;a href=&#34;http://qiita.com/masato/items/713fa8876e50a65d575c&#34;&gt;Windows7 64bitにPyCUDAとTheanoをインストールしてGPU計算する - Qiita&lt;/a&gt;の&lt;a href=&#34;http://qiita.com/masato/items/713fa8876e50a65d575c#%E3%83%86%E3%82%B9%E3%83%88&#34;&gt;テスト&lt;/a&gt;を参考にして、以下の内容で &lt;code&gt;pycuda-test.py&lt;/code&gt; を作って実行してみました。&lt;/p&gt;

&lt;p&gt;Python 3.xを使っているので &lt;code&gt;print&lt;/code&gt; の引数は括弧で囲むように書き換えています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import pycuda.gpuarray as gpuarray
import pycuda.driver as cuda
import pycuda.autoinit
import numpy

a_gpu = gpuarray.to_gpu(numpy.random.randn(4,4).astype(numpy.float32))
a_doubled = (2*a_gpu).get()
print(a_doubled)
print(a_gpu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行してみると、以下のように出力されPyCUDAが無事動きました！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv) $ python pycuda-test.py
[[-0.72795004 -0.16994514  0.02276878 -1.07509565]
 [ 0.20851769  2.08421874 -0.51877511 -1.27585149]
 [ 0.29300559 -0.40393201  3.15332532 -1.90199065]
 [ 2.87024021  0.64773476  2.65404892 -2.97092891]]
[[-0.36397502 -0.08497257  0.01138439 -0.53754783]
 [ 0.10425884  1.04210937 -0.25938755 -0.63792574]
 [ 0.14650279 -0.201966    1.57666266 -0.95099533]
 [ 1.43512011  0.32386738  1.32702446 -1.48546445]]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>