<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[hnakamur's blog at github]]></title>
  <link href="http://hnakamur.github.com/blog/atom.xml" rel="self"/>
  <link href="http://hnakamur.github.com/blog/"/>
  <updated>2013-03-02T00:45:50+09:00</updated>
  <id>http://hnakamur.github.com/blog/</id>
  <author>
    <name><![CDATA[Hiroaki Nakamura]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[d3.jsを使ったツールチップあり複数折れ線グラフのサンプルを作った]]></title>
    <link href="http://hnakamur.github.com/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js/"/>
    <updated>2013-03-02T00:10:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js</id>
    <content type="html"><![CDATA[<p><a href="http://d3js.org/">D3.js - Data-Driven Documents</a>を使ってツールチップあり複数折れ線グラフのサンプルを作ったのでメモ。</p>

<p><a href="../../../../downloads/code/2013-03-02-multi-series-line-chart-example-with-tooltip-using-d3-dot-js/3884955.html">サンプル</a></p>

<p><a href="http://bl.ocks.org/mbostock/3884955">Multi-Series Line Chart</a>のサンプルをベースに改良しました。</p>

<h2>X軸のラベルを回転</h2>

<p><a href="http://www.d3noob.org/2013/01/how-to-rotate-text-labels-for-x-axis-of.html">D3.js Tips and Tricks: How to rotate the text labels for the x Axis of a d3.js graph</a>を参考にして回転させました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>  svg.append("g")
</span><span class='line'>      .attr("class", "x axis")
</span><span class='line'>      .attr("transform", "translate(0," + height + ")")
</span><span class='line'>      .call(xAxis)
</span><span class='line'>      .selectAll("text")
</span><span class='line'>        .style("text-anchor", "end")
</span><span class='line'>        .attr("dx", "-.8em")
</span><span class='line'>        .attr("dy", "-.6em")
</span><span class='line'>        .attr("transform", "rotate(-90)");</span></code></pre></td></tr></table></div></figure>


<h2>ツールチップを出す</h2>

<p><a href="https://gist.github.com/biovisualize/1016860#gistcomment-61316">Simple D3 tooltip</a>の手法で、線でもツールチップは出せなくはないのですが、カーソル位置のデータが取れないので、データの点に円を作成することにしました。</p>

<p><a href="https://groups.google.com/forum/?fromgroups=#!topic/d3-js/8XLzUYLoFnY">multi-line chart with circle points - Google グループ</a>を参考に以下の様なコードで円を作成しました。</p>

<p>ツールチップを出す部分は<a href="https://gist.github.com/biovisualize/1016860#gistcomment-61316">Simple D3 tooltip</a>を参考にしました。元のコードではイベントを<code>event</code>で参照していましたが、ChromeとSafariでは動くもののFirefoxではundefinedになっていました。<a href="https://github.com/mbostock/d3/wiki/Selections#wiki-on">Selections · mbostock/d3 Wiki</a>を見ると、<code>d3.event</code>で参照するのが正しいので修正しました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
</pre></td><td class='code'><pre><code class=''><span class='line'> city. selectAll("circle")
</span><span class='line'>      .data(function(d) { return d.values.map(function(v) {
</span><span class='line'>              return {date: v.date, temperature: v.temperature, name: d.name};
</span><span class='line'>            }); })
</span><span class='line'>    .enter().append("circle")
</span><span class='line'>      .attr("cx", function(d, i) { return x(d.date); })
</span><span class='line'>      .attr("cy", function(d, i) { return y(d.temperature); })
</span><span class='line'>      .style("fill", function(d) { return color(d.name); })
</span><span class='line'>      .attr("r", 1)
</span><span class='line'>      .on("mouseover", function(){
</span><span class='line'>        return tooltip.style("visibility", "visible");
</span><span class='line'>      })
</span><span class='line'>      .on("mousemove", function(d){
</span><span class='line'>        return tooltip
</span><span class='line'>          .style("top", (d3.event.pageY-10)+"px")
</span><span class='line'>          .style("left",(d3.event.pageX+10)+"px")
</span><span class='line'>          .html("&lt;dl&gt;&lt;dt&gt;date&lt;/dt&gt;&lt;dd&gt;" + d3.time.format("%Y-%m-%d")(d.date) + "&lt;/dd&gt;&lt;dt&gt;temperature&lt;/dt&gt;&lt;dd&gt;" + d.temperature + "&lt;/dd&gt;&lt;dt&gt;name&lt;/dt&gt;&lt;dd&gt;" + d.name + "&lt;/dd&gt;&lt;/dl&gt;");
</span><span class='line'>      })
</span><span class='line'>      .on("mouseout", function(){
</span><span class='line'>        return tooltip.style("visibility", "hidden");
</span><span class='line'>      });</span></code></pre></td></tr></table></div></figure>


<p>見た目がうるさくないように円の半径は1とし、線だけ見えるような感じにしています。すると点にカーソルでポイントするのが大変なので、太めのストロークを透明色で指定して、ポイントしやすくしています。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>.tooltip {
</span><span class='line'>  border: 1px solid black;
</span><span class='line'>  background-color: white;
</span><span class='line'>  padding: 5px 8px 4px 8px;
</span><span class='line'>  border-radius: 4px;
</span><span class='line'>  -moz-border-radius: 4px;
</span><span class='line'>  -webkit-border-radius: 4px;
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<h2>線のデータ補完を止める</h2>

<p>データ補完してしまうと、線とデータ点がずれてしまうので、補完は止めます。
interpolate()を呼ばなければOK。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var line = d3.svg.line()
</span><span class='line'>    //.interpolate("basis")
</span><span class='line'>    .x(function(d) { return x(d.date); })
</span><span class='line'>    .y(function(d) { return y(d.temperature); });</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[EC2で同じリージョンの全ホストのプライベートIPを起動時にhostsに自動登録]]></title>
    <link href="http://hnakamur.github.com/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region/"/>
    <updated>2013-02-16T18:31:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region</id>
    <content type="html"><![CDATA[<p>Elastic IPの上限数にひっかかって使えない自体に遭遇したので作りました。</p>

<p><a href="http://aws.amazon.com/jp/contact-us/eip_limit_request/">Elastic IP アドレス上限緩和申請 | アマゾン ウェブ サービス（AWS 日本語）</a> から緩和申請できるようです。</p>

<p>が、申請完了画面で、3〜5営業日かかる、緊急の場合は、完了画面に表示されるCase Numberを添えて ec2-request@amazon.com に送るようにと書かれていました。</p>

<p>（Case Numberを添えてというのは今気付いた。再度メールしました。ブログに書くために読み返してよかった）</p>

<p>そこで、hostsにプライベートアドレスを登録するスクリプトを書くことにしました。</p>

<p><a href="http://frmmpgit.blog.fc2.com/blog-entry-123.html">EC2 - 動的プライベートIPアドレスをどうにかする | code up</a> を参考にしました。ありがとうございます。</p>

<p>最初は対象のホストの一覧を指定するようなスクリプトを書いていたのですが、ホストを増やすことを考えると編集と反映が面倒だと予想して、リージョン内の全ホストを一括登録することにしました。</p>

<h2>情報取得用のAIMユーザ作成</h2>

<p>AIMでUserを作ってUser PolicyにReadOnlyAccessを与えます。</p>

<h2>スクリプト設置</h2>

<p>以下の設定ファイルとスクリプトを設置します。</p>

<p>アクセスキーとシークレットキーは上で作ったユーザのものを設定します。</p>

<p>/root/.amazon_address_finder_key</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export AWS_ACCESS_KEY=${your_access_key_here}
</span><span class='line'>export AWS_SECRET_KEY=${your_secret_key_here}</span></code></pre></td></tr></table></div></figure>


<p>/usr/local/sbin/update_hosts.sh</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>#!/bin/sh
</span><span class='line'>. /root/.amazon_address_finder_key
</span><span class='line'>region=`ec2-metadata | sed -n 's/^local-hostname: ip-[0-9-]*\.\(.*\)\.compute\.i
</span><span class='line'>nternal/\1/p'`
</span><span class='line'>
</span><span class='line'>ec2-describe-instances --region $region -H --show-empty-fields | gawk '
</span><span class='line'>BEGIN {OFS="\t"; print "127.0.0.1", "localhost localhost.localdomain"}
</span><span class='line'>/^INSTANCE/ {ip = $18}  
</span><span class='line'>/^TAG/ {print ip, gensub(/.*\tName\t([^\t]*).*/, "\\1", $0)}  
</span><span class='line'>' &gt; /etc/hosts</span></code></pre></td></tr></table></div></figure>


<p>/etc/cron.d/update_hosts</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>@reboot root /usr/local/sbin/update_hosts.sh</span></code></pre></td></tr></table></div></figure>


<h2>実行</h2>

<p>これで、OS起動時にhostsが上書き更新されます。</p>

<p>インタンスのNameタグに設定した値がホスト名になります。</p>

<p>出力例</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>127.0.0.1       localhost localhost.localdomain
</span><span class='line'>10.132.102.199  web01
</span><span class='line'>10.128.21.174   web02
</span><span class='line'>10.120.32.111   app01
</span><span class='line'>10.132.103.238  app02</span></code></pre></td></tr></table></div></figure>


<h2>githubに移動しました</h2>

<p>さらにhostnameも更新するようにして、スクリプトが発展してきたので、
<a href="https://github.com/hnakamur/aws_scripts">hnakamur/aws_scripts · GitHub</a>
に移動しました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[IAM管理コンソールでAWSの管理画面用のユーザを作成]]></title>
    <link href="http://hnakamur.github.com/blog/2013/02/09/create-aim-user/"/>
    <updated>2013-02-09T09:37:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2013/02/09/create-aim-user</id>
    <content type="html"><![CDATA[<p>AWS (Amazon Web Services)の管理コンソールを複数人で使う場合に大元のIDとパスワードを共有するのは避けたい場合、IAMでユーザを作成するのがよいと<a href="https://twitter.com/fujiwara">@fujiwara</a>さんに教わりました。これは実際に試した時のメモです。</p>

<p>なお、IAMはIdentity and Access Managementの略です。</p>

<h2>管理者: AIMユーザのログインURLの設定</h2>

<p>初期状態では https://{ランダムな数字}.signin.aws.amazon.com/console のようなURLになっていますが、好きなサブドメインに変更が可能です。</p>

<ol>
<li>AWSの管理コンソールにログイン</li>
<li>[IAM]をクリック</li>
<li>左のメニューで[Dashboard]をクリック</li>
<li>[Create Account Alias]ボタンを押し、[Account Alias]にサブドメインを入力します。すると https://{入力したサブドメイン}.signin.aws.amazon.com/console がログインURLになります。</li>
</ol>


<p>元に戻したい場合は[Remove Account Alias]ボタンを押します。</p>

<h2>管理者: AIMユーザの作成</h2>

<h3>ユーザの作成とAPIアクセスキーのダウンロード</h3>

<ol>
<li>AWSの管理コンソールにログイン</li>
<li>[IAM]をクリック</li>
<li>左のメニューで[Users]をクリック</li>
<li>上のツールバーで[Create New Users]ボタンを押す</li>
<li>[Create User]ダイアログで[Enter User Names:]に作成したいユーザのIDを入力。

<ul>
<li>同時に5人までつくれるようです(実際に試したのは1人だけです)。</li>
<li>AWSサービスのAPIを使う場合は[Generate an access key for each User]チェックボックスをオンのままにしておきます。ここでオフにしていても後からキーを発行できるので、不明の場合はオフでいいです。</li>
</ul>
</li>
<li>[Create User]ダイアログで[Create]ボタンを押す</li>
<li>[Download Credentials]ボタンを押して、&#8221;User Name&#8221;,&#8221;Access Key Id&#8221;,&#8221;Secret Access Key&#8221;が書かれたCSVファイルをダウンロード</li>
<li>[Close Windows]ボタンを押す</li>
</ol>


<h3>ユーザの初期パスワード作成とダウンロード</h3>

<ol>
<li>ユーザ一覧でユーザを選択して、上のツールバーの[User Actions]ボタンを押すか、右クリックのポップアップメニューから[Manage Password]メニューを選択</li>
<li>[Manage Password]ダイアログで[Assign an auto-generated password]ラジオボタンを選択した状態で[Apply]ボタンを押す</li>
<li>[Download Credentials]ボタンを押し、&#8221;User Name&#8221;,&#8221;Password&#8221;,&#8221;Direct Signin Link&#8221;が書かれたCSVファイルをダウンロード</li>
<li>[Close Windows]ボタンを押す</li>
</ol>


<h2>利用者: 初回ログインとパスワード変更</h2>

<ol>
<li>&#8220;User Name&#8221;,&#8221;Password&#8221;,&#8221;Direct Signin Link&#8221;が書かれたCSVファイルのURLをブラウザで開き、ID、パスワードを入力してログインします。</li>
<li>ツールバー右上のユーザIDのドロップダウンメニューを開き、[Security Credentials]を選択</li>
<li>現在のパスワードと新しいパスワードを入力して[Change Password]ボタンを押して変更</li>
</ol>


<h2>管理者: 利用者のパスワード変更</h2>

<p>ユーザ一覧でポップアップメニューの[Manage Password]メニューから変更できます。</p>

<h2>管理者: 利用者のAPIアクセスキー追加、削除</h2>

<p>ユーザ一覧でポップアップメニューの[Manage Access Keys]メニューから変更できます。</p>

<h2>管理者: 利用者のユーザ削除</h2>

<p>ユーザ一覧でポップアップメニューの[Delete User]メニューから削除できます。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[S3 error: Either the Signature query string parameter or the Authorization header should be specified]]></title>
    <link href="http://hnakamur.github.com/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified/"/>
    <updated>2013-02-09T01:48:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified</id>
    <content type="html"><![CDATA[<h2>現象</h2>

<p>ApacheからAmazon S3にmod_proxyでリクエストを送ったら、ステータスが400になり、
&#8220;Either the Signature query string parameter or the Authorization header should be specified, not both&#8221;というエラーメッセージが出てハマったときのメモです。</p>

<p>開発中で、Apacheの設定でBASIC認証をかけていました。</p>

<p>一方、S3では
<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheAuthenticationHeader">Signing and Authenticating REST Requests - Amazon Simple Storage Service</a>
にあるように</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Authorization: AWS AWSAccessKeyId:Signature</span></code></pre></td></tr></table></div></figure>


<p>というリクエストヘッダで認証情報を渡すか、
<a href="http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_QSAuth.html">Using Query String Authentication - Amazon Simple Storage Service</a>
にあるように</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>http://quotes.s3.amazonaws.com/nelson?AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&Expires=1177363698&Signature=vjSAMPLENmGa%2ByT272YEAiv4%3D</span></code></pre></td></tr></table></div></figure>


<p>のようなクエリストリングで認証情報を渡すことができます。</p>

<p>ですが、BASIC認証を使っていると、
<a href="http://ja.wikipedia.org/wiki/Basic%E8%AA%8D%E8%A8%BC">Basic認証 - Wikipedia</a>
にあるように</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==</span></code></pre></td></tr></table></div></figure>


<p>というようなヘッダがついてしまうため、S3用の認証情報をクエリストリングで指定していると上記のようなエラーになるというわけでした。</p>

<h2>解決法</h2>

<p>RequetHeader unset ヘッダ名で削除すればOKでした。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>&lt;Location /some/path&gt;
</span><span class='line'>    RequestHeader unset Authorization
</span><span class='line'>&lt;/Location&gt;
</span><span class='line'>ProxyRequests Off
</span><span class='line'>ProxyPassMatch ^/some/path/(.*)$ http://yourdomain.s3-ap-northeast-1.amazonaws.com/$1</span></code></pre></td></tr></table></div></figure>


<p>注意するべきはLocationでS3にプロキシする範囲に限定する必要があるということです。Location無しだとS3にプロキシしないURLについてもAuthorizationヘッダが削除され、BASIC認証のログインダイアログが延々と出続けてしまいました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Unboundで在宅時に自宅サーバの名前解決]]></title>
    <link href="http://hnakamur.github.com/blog/2013/02/02/use-unbound-dns-server/"/>
    <updated>2013-02-02T11:43:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2013/02/02/use-unbound-dns-server</id>
    <content type="html"><![CDATA[<h2>背景</h2>

<p>私の自宅ではブロードバンドルータがグローバルIPを持っていて、DNSで自分のドメイン(以下ではexample.comとして説明します)のIPアドレスをそこにしています。ルータからLAN内のLinuxサーバ(CentOS 6.x)へはNATで繋いでいます。</p>

<p>外出時はこれでよいのですが、在宅時にLAN内からexample.comという名前でアクセスしようとするとサーバにアクセスできません。</p>

<p>今までは <a href="https://github.com/hnakamur/switch_net_configs">hnakamur/switch_net_configs · GitHub</a> を使って外出時と在宅時に/etc/hostsと~/.ssh/configを切り替えてしのいでいました。が、VirtualBoxのゲストとかを考えると面倒です。</p>

<p>そこで、自宅サーバにDNSサーバを入れてみることにしました。
bindはセキュリティフィクスが頻発しているから避けて他のにしようと思い、<a href="http://en.wikipedia.org/wiki/Comparison_of_DNS_server_software">Comparison of DNS server software - Wikipedia, the free encyclopedia</a> を見てみました。
moreに対してlessが生まれたように、bindに対してunboundというネーミングセンスが気に入ったのと、 <a href="http://www.atmarkit.co.jp/flinux/special/unbound/unbounda.html">＠IT：DNSリゾルバのニューフェイス「Unbound」（1/2）</a> の記事を読んで、簡単に導入できそうと思ったのでUnboundにしました。</p>

<h2>導入手順</h2>

<p>unboundはepelにあるので、yumでインストールします。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install unbound</span></code></pre></td></tr></table></div></figure>


<p>/etc/unbound/unbound.confを編集します。編集結果はこんな感じ。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># diff -u /etc/unbound/unbound.conf.orig /etc/unbound/unbound.conf
</span><span class='line'>--- /etc/unbound/unbound.conf.orig  2013-02-02 01:56:13.541249978 +0900
</span><span class='line'>+++ /etc/unbound/unbound.conf 2013-02-02 02:15:52.559227483 +0900
</span><span class='line'>@@ -28,7 +28,7 @@
</span><span class='line'>  extended-statistics: yes
</span><span class='line'> 
</span><span class='line'>  # number of threads to create. 1 disables threading.
</span><span class='line'>- num-threads: 2
</span><span class='line'>+ num-threads: 1
</span><span class='line'> 
</span><span class='line'>  # specify the interfaces to answer queries from by ip-address.
</span><span class='line'>  # The default is to listen to localhost (127.0.0.1 and ::1).
</span><span class='line'>@@ -40,6 +40,8 @@
</span><span class='line'>  # interface: 192.0.2.153
</span><span class='line'>  # interface: 192.0.2.154
</span><span class='line'>  # interface: 2001:DB8::5
</span><span class='line'>+ interface: 127.0.0.1
</span><span class='line'>+ interface: 192.168.11.103
</span><span class='line'>  #
</span><span class='line'>  # for dns over tls and raw dns over port 80
</span><span class='line'>  # interface: 0.0.0.0@443
</span><span class='line'>@@ -69,6 +71,10 @@
</span><span class='line'>  # number of ports to allocate per thread, determines the size of the
</span><span class='line'>  # port range that can be open simultaneously.
</span><span class='line'>  # outgoing-range: 4096
</span><span class='line'>+ outgoing-range: 900
</span><span class='line'>+ # Note: The value outgoing-range was set to avoid the warning below:
</span><span class='line'>+ # unbound[28716:0] warning: increased limit(open files) from 1024 to 1080
</span><span class='line'>+ # This server is used only by me, so a small value should be OK.
</span><span class='line'> 
</span><span class='line'>  # permit unbound to use this port number or port range for
</span><span class='line'>  # making outgoing queries, using an outgoing interface.
</span><span class='line'>@@ -178,6 +184,8 @@
</span><span class='line'>  # access-control: ::0/0 refuse
</span><span class='line'>  # access-control: ::1 allow
</span><span class='line'>  # access-control: ::ffff:127.0.0.1 allow
</span><span class='line'>+ access-control: 127.0.0.0/8 allow
</span><span class='line'>+ access-control: 192.168.11.0/24 allow
</span><span class='line'> 
</span><span class='line'>  # if given, a chroot(2) is done to the given directory.
</span><span class='line'>  # i.e. you can chroot to the working directory, for example,</span></code></pre></td></tr></table></div></figure>


<ul>
<li>自宅サーバのCPUはシングルコアなのでnum-threadsは1にしました。</li>
<li>interfaceを0.0.0.0にしていないのは、KVMが別のネットワークインタフェースでdnsmaskでDNSのポート53を既に使っているためです。192.168.11.103はDNSサーバのアドレスです。</li>
<li>outgoing-rangeはopen filesの警告が出ないように下げてみました。どうせ使うのは私一人なので小さくてもいいだろうし。</li>
<li>access-controlはLAN内からのみ許可するようにしました。</li>
</ul>


<p>/etc/unbound/local.d/example.com.confにlocal-dataの設定を書きます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>local-data: "example.com A 192.168.11.103"</span></code></pre></td></tr></table></div></figure>


<p>あとは、iptablesでUDPのポート53を開けて、unboundのサービスを起動してchkconfigで自動起動をオンにすればOKです。</p>

<h2>クライアントの設定</h2>

<p>Linuxの場合は、
/etc/sysconfig/networkに</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DNS1="192.168.11.103"</span></code></pre></td></tr></table></div></figure>


<p>と書いて、以下のコマンドで反映します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>service network restart</span></code></pre></td></tr></table></div></figure>


<p>Macでは[システム環境設定]/[ネットワーク]→[詳細]ボタン→[DNS]タブで「192.168.11.103」を指定すれば設定出来ます。</p>

<p>が、iPhoneでDNSの設定が出来ないようなので(ちょっと試しただけで未調査)、どうせならルータ側で設定したいなーと思ったら、
<a href="http://matsh.jp/d/0365">ONU一体型ひかり電話ルータ PR-400KI のDNS設定 - matshのふらふら日記</a>
というブログ記事を見つけました。</p>

<p>[詳細設定]-[DNS設定]の[ローカルドメイン問合せテーブル]で、ドメイン名(ワイルドカード指定可能)に対してエントリを追加してドメイン毎にプライマリDNSサーバとセカンダリDNSサーバを登録できるようになっています。</p>

<p>ただし、サーバの指定がIPv6形式のみ受け付けるようになっています。IPv4射影アドレスをIPv6形式で指定すると解決するとのことでした。
<a href="http://kaworu.jpn.org/kaworu/2010-08-16-1.php">IPv6 IPv4射影アドレス とは</a></p>

<p>DNSサーバのIPv4アドレス192.168.11.103の各オクテットを16進数に変換すると
192→C0、168→A8、11→B、103→67となり、IPv4射影アドレスは
::FFFF:C0A8:B67
となりました。</p>

<p>これでMacでもiPhoneでもexample.comで参照できるようになりました。快適！</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[VirtualBox4でCentOS6.2をインストール]]></title>
    <link href="http://hnakamur.github.com/blog/2012/07/03/virtualbox4decentos6-dot-2woinsutoru/"/>
    <updated>2012-07-03T23:52:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/07/03/virtualbox4decentos6-dot-2woinsutoru</id>
    <content type="html"><![CDATA[<h2>VirtualBoxのインストール</h2>

<p><a href="https://www.virtualbox.org/wiki/Downloads">Downloads – Oracle VM VirtualBox</a>
からダウンロードしてインストールしてください。</p>

<h2>ネットワークインストールのISOイメージをダウンロード</h2>

<p><a href="http://ftp.riken.jp/Linux/centos/6.2/isos/x86_64/CentOS-6.2-x86_64-netinstall.iso">CentOS-6.2-x86_64-netinstall.iso</a></p>

<h2>ホストオンリーネットワークを作成</h2>

<ol>
<li>[VirualBox]/[環境設定&#8230;]</li>
<li>[ネットワーク]タブ</li>
<li>[+]アイコンボタンを押してvboxnet0を作成</li>
<li>ドライバーアイコンのボタン</li>
<li>[アダプタ]タブでIPv4アドレスが「192.168.56.1」となっていることを確認</li>
<li>[DHCPサーバー]タブ</li>
<li>[サーバーを有効化]のチェックを外す</li>
<li>[OK]</li>
<li>[OK]</li>
</ol>


<h2>仮想マシンの作成</h2>

<h3>仮想マシン名とOSタイプ</h3>

<p>名前は「CentOS6」
オペレーティングシステムは「Linux」
バージョンは「Linux 2.6 (64bit)」</p>

<h3>メモリ</h3>

<p>メインメモリのサイズは1024MB</p>

<h3>仮想ハードディスク</h3>

<p>変更なし</p>

<h3>the virtual disk creation wizard</h3>

<p>File typeはVDI (VirtualBox Disk Image)</p>

<h3>Virtual disk storage details</h3>

<p>Storage detailsはDyamically allocated</p>

<h3>Virtual disk file location and size</h3>

<p>サイズは30GB</p>

<h2>インストール前の仮想マシンの設定変更</h2>

<h3>DVDドライブにメディアを設定</h3>

<ol>
<li>[仮想マシン]/[設定]</li>
<li>[ストレージ]タブ</li>
<li>ストレージツリーでIDEコントローラ/空を選択</li>
<li>属性のCD/DVDドライブの右のDVDメディアアイコンをクリックして</li>
<li>上記でダウンロードしたCentOS-6.2-x86_64-netinstall.isoを選択</li>
<li>[OK]</li>
</ol>


<h3>ネットワークアダプタ</h3>

<p>以下の手順では[VirtualBox マネージャー]画面からでも操作可能な部分もありますが、説明しやすいのでメニューバーからの操作で説明します。</p>

<ol>
<li>[仮想マシン]/[設定]</li>
<li>[ネットワーク]タブ</li>
<li>[アダプタ2]タブ</li>
<li>[ネットワークアダプタを有効化]にチェック</li>
<li>[割り当て]で「ホストオンリーアダプタ」を選択</li>
<li>[名前]で「vboxnet0」を選択</li>
<li>[OK]</li>
</ol>


<h2>CentOS6.2のインストール</h2>

<h3>テキストモードでインストール開始</h3>

<ol>
<li>[仮想マシン]/[起動]</li>
<li>Welcome to CentOS 6.2!」の画面でTABを押す</li>
</ol>


<pre>
> vmlinuz initrd=initrd.img
</pre>


<p>と表示されているところに、スペース、text、リターンを入力し</p>

<pre>
> vmlinuz initrd=initrd.img text
</pre>


<p>としてインストール開始</p>

<h3>Disc Found</h3>

<p>[Skip]を選択</p>

<h3>Choose a Language</h3>

<p>[English]を選択</p>

<h3>Keyboard Type</h3>

<p>[us]を選択</p>

<h3>Installation Method</h3>

<p>[URL]を選択して[OK]</p>

<h3>Network Device</h3>

<p>[eth0]を選択して[OK]</p>

<h3>Configure TCP/IP</h3>

<p>[Enable IPv6 support]をオフにして[OK]</p>

<h3>URL Setup</h3>

<p>http://ftp.riken.jp/Linux/centos/6.2/os/x86_64
と入力して[OK]</p>

<h3>Would you like to use VNC?</h3>

<p>[Use text mode]を選択</p>

<h3>Error processing driveのWarning</h3>

<p>[Re-initialize all]を選択</p>

<h3>Time Zone Selection</h3>

<p>[System clock uses UTC]のチェックはオンで
[Asia/Tokyo]を選択して[OK]</p>

<h3>Root Password</h3>

<p>[Password]と[Password (confirm)]を入力して[OK]</p>

<h3>Partition Type</h3>

<p>[OK]</p>

<h3>Writing storage configuration to disk</h3>

<p>[Write changes to disk]</p>

<h3>Complete</h3>

<p>[Reboot]を押し、再起動が開始して[Welcome to CentOS 6.2!]の画面になったらTABを2回押して起動を中断
仮想マシンのウィンドウの閉じるボタンを押し、｢操作を選択]で[仮想マシンの電源オフ]を選択して[OK]</p>

<h2>インストール後の仮想マシンの設定変更</h2>

<h3>DVDドライブのメディアを除去</h3>

<ol>
<li>[仮想マシン]/[設定]</li>
<li>[ストレージ]タブ</li>
<li>ストレージツリーでIDEコントローラ/CentOS-6.2-x86_64-netinstall.isoを選択</li>
<li>属性のCD/DVDドライブの右のDVDメディアアイコンをクリックして</li>
<li>[仮想ドライブからディスクを除去]</li>
</ol>


<h3>ネットワークアダプタでvirtio-netを選択</h3>

<ol>
<li>[仮想マシン]/[設定]</li>
<li>[ネットワーク]タブ</li>
<li>[アダプタ1]タブ</li>
<li>[高度]をクリック</li>
<li>アダプタタイプで「準仮想化ネットワーク(virtio-net)」を選択</li>
<li>[アダプタ2]タブ</li>
<li>[高度]をクリック</li>
<li>アダプタタイプで「準仮想化ネットワーク(virtio-net)」を選択</li>
<li>[OK]</li>
</ol>


<h2>仮想ディスクから仮想マシンを起動してネットワークの設定</h2>

<p>[仮想マシン]/[起動]</p>

<p>[localhost login:]というログインプロンプトが表示されたらroot、リターンと入力し、[Password:]プロンプトでパスワード、リターンを入力し、ログイン。</p>

<h3>eth1の設定</h3>

<p>vi /etc/sysconfig/network-scripts/ifcfg-eth1</p>

<h4>変更前</h4>

<p>HWADDRの値はインストール毎に異なります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEVICE="eth1"
</span><span class='line'>HWADDR="08:00:27:28:EB:27"
</span><span class='line'>NM_CONTROLLED="yes"
</span><span class='line'>ONBOOT="no"</span></code></pre></td></tr></table></div></figure>


<h4>変更後</h4>

<p>ONBOOTをyesに変更し、下記のようにTYPE, IPADDR, NETMASKの行を追加します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>DEVICE="eth1"
</span><span class='line'>HWADDR="08:00:27:28:EB:27"
</span><span class='line'>NM_CONTROLLED="yes"
</span><span class='line'>ONBOOT="yes"
</span><span class='line'>TYPE="Ethernet"
</span><span class='line'>IPADDR="192.168.56.101"
</span><span class='line'>NETMASK="255.255.255.0"</span></code></pre></td></tr></table></div></figure>




<pre>
/etc/init.d/network restart
</pre>


<p>を実行しネットワークを再起動します。</p>

<h3>ネットワークの動作確認</h3>

<p>以下のコマンドを実行し、DNS名前解決とインターネットへのアクセスができることを確認。</p>

<pre>
ping ftp.riken.jp
</pre>


<p>ホストマシンから仮想マシンにアクセスできることを確認。</p>

<pre>
ping 192.168.56.101
</pre>


<p>確認できたら仮想マシンからログアウト</p>

<pre>
exit
</pre>


<p>以降はホストマシンからsshでログインして操作可能です。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>ssh root@192.168.56.101</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node.jsのfs.watch()で設定ファイルが更新されたらリロード]]></title>
    <link href="http://hnakamur.github.com/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo/"/>
    <updated>2012-06-27T14:25:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo</id>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/1972242/auto-reload-of-files-in-node-js">javascript - Auto-reload of files in Node.js - Stack Overflow</a>によると、モジュールをリロードするには<a href="https://github.com/isaacs/node-supervisor">isaacs/node-supervisor</a>がよさそうです。</p>

<p>が、今回は設定ファイルのリロードなのでfs.watch(filename, [options], [listener]) で十分ということで試してみました。
<a href="http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener">File System Node.js v0.8.0 Manual &amp; Documentation</a>
によると環境によっては使えないそうなので注意が必要です。</p>

<p>CentOS 6.2では使えました。</p>

<p>watch.js</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>var fs = require('fs');
</span><span class='line'>fs.watch('router.json', function(ev, filename) {
</span><span class='line'>  if (filename) {
</span><span class='line'>    fs.readFile(filename, function(err, data) {
</span><span class='line'>      if (err) throw err;
</span><span class='line'>      var router = JSON.parse(data);
</span><span class='line'>      console.log(router);
</span><span class='line'>    });
</span><span class='line'>  }
</span><span class='line'>});</span></code></pre></td></tr></table></div></figure>


<p>router.json</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "vhost1.example.com": "127.0.0.1:3000",
</span><span class='line'>  "vhost2.example.com": "127.0.0.1:3001",
</span><span class='line'>  "vhost3.example.com": "127.0.0.1:3002",
</span><span class='line'>  "vhost4.example.com": "127.0.0.1:3003"
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node watch</span></code></pre></td></tr></table></div></figure>


<p>で起動して</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>touch router.json</span></code></pre></td></tr></table></div></figure>


<p>を実行すると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ 'vhost1.example.com': '127.0.0.1:3000',
</span><span class='line'>  'vhost2.example.com': '127.0.0.1:3001',
</span><span class='line'>  'vhost3.example.com': '127.0.0.1:3002',
</span><span class='line'>  'vhost4.example.com': '127.0.0.1:3003' }</span></code></pre></td></tr></table></div></figure>


<p>と出力されます。</p>

<p>ただし、vimでrouter.jsonを開いて:wで保存すると下記のエラーでnodeが異常終了してしまいました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>/var/www/app/watch-sample/watch.js:6
</span><span class='line'>      if (err) throw err;
</span><span class='line'>                     ^
</span><span class='line'>Error: ENOENT, open 'router.json'</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node watch</span></code></pre></td></tr></table></div></figure>


<p>再起動後、vimでrouter.jsonを開いて:wqで保存して終了すると異常終了はしませんでしたが、下記のようにコールバックが4回も呼び出されてしまいました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{ 'vhost1.example.com': '127.0.0.1:3000',
</span><span class='line'>  'vhost2.example.com': '127.0.0.1:3001',
</span><span class='line'>  'vhost3.example.com': '127.0.0.1:3002',
</span><span class='line'>  'vhost4.example.com': '127.0.0.1:3003' }
</span><span class='line'>{ 'vhost1.example.com': '127.0.0.1:3000',
</span><span class='line'>  'vhost2.example.com': '127.0.0.1:3001',
</span><span class='line'>  'vhost3.example.com': '127.0.0.1:3002',
</span><span class='line'>  'vhost4.example.com': '127.0.0.1:3003' }
</span><span class='line'>{ 'vhost1.example.com': '127.0.0.1:3000',
</span><span class='line'>  'vhost2.example.com': '127.0.0.1:3001',
</span><span class='line'>  'vhost3.example.com': '127.0.0.1:3002',
</span><span class='line'>  'vhost4.example.com': '127.0.0.1:3003' }
</span><span class='line'>{ 'vhost1.example.com': '127.0.0.1:3000',
</span><span class='line'>  'vhost2.example.com': '127.0.0.1:3001',
</span><span class='line'>  'vhost3.example.com': '127.0.0.1:3002',
</span><span class='line'>  'vhost4.example.com': '127.0.0.1:3003' }</span></code></pre></td></tr></table></div></figure>


<p>実用するには前回の設定内容と比較して変わっている場合だけ処理するとか、設定ファイルを直接見るのではなく更新完了通知用の専用ファイルを用意してそちらをtouchするとか、何らかの対処が必要そうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-http-proxyでバーチャルホストで振り分けつつhttp/https->websocketリバースプロキシの実験]]></title>
    <link href="http://hnakamur.github.com/blog/2012/06/27/node-http-proxydebatiyaruhosutodezhen-rifen-ketutuhttp-slash-https-%3Ewebsocketribasupurokisifalseshi-yan/"/>
    <updated>2012-06-27T11:36:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/06/27/node-http-proxydebatiyaruhosutodezhen-rifen-ketutuhttp-slash-https->websocketribasupurokisifalseshi-yan</id>
    <content type="html"><![CDATA[<p>以下の2つのページを参考に、node-http-proxyでバーチャルホストで振り分けつつ
http/httpsからwebsocketにリバースプロキシする実験をしてみました。
環境はCentOS 6.2です。ソースは<a href="https://github.com/hnakamur/node-http-proxy-websocket-sample">hnakamur/node-http-proxy-websocket-sample</a>にあります。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/replication/20111108/1320762287">５分くらいで出来るnode.js(0.6) + socket.io(0.8x)のサンプルプログラム - 大人になったら肺呼吸</a></li>
<li><a href="https://github.com/nodejitsu/node-http-proxy">nodejitsu/node-http-proxy</a></li>
</ul>


<pre>
                              +---------------+
                       +------+ VHost1App/app |
                       |      | port 3000     |
 +--------------+      |      +---------------+
-+ proxy-vhost  +------+
 | port 80, 443 |      |      +---------------+
 +--------------+      +------+ VHost2App/app |
                              | port 3001     |
                              +---------------+
</pre>


<p>上記の構成で、
vhost1.example.comというホスト名でアクセスしたらVHost1/app、
vhost2.example.comというホスト名でアクセスしたらVHost2/app
にリバースプロキシするようにします。
*.example.comというワイルドカードの自己証明書でproxy-vhostにてSSLを処理します。</p>

<h2>実行手順</h2>

<h3>自己証明書とパスフレーズ無しの秘密鍵を生成。</h3>

<p>以下、ドメインexample.comの部分は適宜変更してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl req -new -newkey rsa:2048 -x509 -nodes -days 365 -set_serial 0 \
</span><span class='line'>  -subj '/C=JP/ST=Kanagawa/L=Yokohama City/CN=*.example.com' \
</span><span class='line'>  -out /etc/pki/tls/certs/wildcard.example.com.crt \
</span><span class='line'>  -keyout /etc/pki/tls/private/wildcard.example.com.key</span></code></pre></td></tr></table></div></figure>


<h3>nodeモジュールインストール</h3>

<p>私の環境では/usr/local/node-v0.6.19にnode.jsをインストールしているのでPATHを通してから実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export PATH=/usr/local/node-v0.6.19/bin:$PATH</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>npm install socket.io -g
</span><span class='line'>npm install express@2.5.10 -g
</span><span class='line'>npm install ejs -g
</span><span class='line'>npm install http-proxy -g</span></code></pre></td></tr></table></div></figure>


<p>なお、モジュールをグルーバルにインストールしているのは<a href="https://github.com/hnakamur/node-http-proxy-websocket-sample">hnakamur/node-http-proxy-websocket-sample</a>にモジュールを含めたくないからで、実際はローカルにインストールしても構いません。</p>

<h3>サーバ起動</h3>

<p>私の環境では/usr/local/node-v0.6.19にnode.jsをインストールしているのでNODE_PATHを通してから実行します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>export NODE_PATH=/usr/local/node-v0.6.19/lib/node_modules</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>node VHost1App/app &
</span><span class='line'>node VHost2App/app &
</span><span class='line'>node proxy-vhost &</span></code></pre></td></tr></table></div></figure>


<h3>ローカルマシンの/etc/hostsに以下のエントリ追加</h3>

<p>IPアドレスは実際のサーバに合わせて変更してください。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>192.0.2.2 vhost1.example.com vhost2.example.com</span></code></pre></td></tr></table></div></figure>


<h3>ブラウザでアクセス</h3>

<p>https://vhost1.example.com/
や
https://vhost2.example.com/
にアクセスします。自己証明書なのでエラーになりますが受け入れて進んでください。
バーチャルホスト毎にそれぞれ内容が異なることを確認します。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[パスフレーズ無しの秘密鍵と自己証明書をコマンド一発で作る]]></title>
    <link href="http://hnakamur.github.com/blog/2012/06/21/how-to-create-self-signed-certificate/"/>
    <updated>2012-06-21T20:06:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/06/21/how-to-create-self-signed-certificate</id>
    <content type="html"><![CDATA[<p>以下はワイルドカード証明書の例です。適宜変更して使います。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>openssl req -new -newkey rsa:2048 -x509 -nodes -days 365 -set_serial 0 \
</span><span class='line'>  -subj '/C=JP/ST=Kanagawa/L=Yokohama City/CN=*.example.com' \
</span><span class='line'>  -out wildcard.example.com.crt -keyout wildcard.example.com.key</span></code></pre></td></tr></table></div></figure>


<h2>証明書の内容確認</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
<span class='line-number'>19</span>
<span class='line-number'>20</span>
<span class='line-number'>21</span>
<span class='line-number'>22</span>
<span class='line-number'>23</span>
<span class='line-number'>24</span>
<span class='line-number'>25</span>
<span class='line-number'>26</span>
<span class='line-number'>27</span>
<span class='line-number'>28</span>
<span class='line-number'>29</span>
<span class='line-number'>30</span>
<span class='line-number'>31</span>
<span class='line-number'>32</span>
<span class='line-number'>33</span>
<span class='line-number'>34</span>
<span class='line-number'>35</span>
<span class='line-number'>36</span>
<span class='line-number'>37</span>
<span class='line-number'>38</span>
<span class='line-number'>39</span>
<span class='line-number'>40</span>
<span class='line-number'>41</span>
<span class='line-number'>42</span>
<span class='line-number'>43</span>
<span class='line-number'>44</span>
<span class='line-number'>45</span>
<span class='line-number'>46</span>
<span class='line-number'>47</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># openssl x509 -in wildcard.example.com.crt -text
</span><span class='line'>Certificate:
</span><span class='line'>    Data:
</span><span class='line'>        Version: 3 (0x2)
</span><span class='line'>        Serial Number: 0 (0x0)
</span><span class='line'>        Signature Algorithm: sha1WithRSAEncryption
</span><span class='line'>        Issuer: C=JP, ST=Kanagawa, L=Yokohama City, CN=*.example.com
</span><span class='line'>        Validity
</span><span class='line'>            Not Before: Jun 21 10:52:07 2012 GMT
</span><span class='line'>            Not After : Jun 21 10:52:07 2013 GMT
</span><span class='line'>        Subject: C=JP, ST=Kanagawa, L=Yokohama City, CN=*.example.com
</span><span class='line'>        Subject Public Key Info:
</span><span class='line'>            Public Key Algorithm: rsaEncryption
</span><span class='line'>                Public-Key: (512 bit)
</span><span class='line'>                Modulus:
</span><span class='line'>                    00:ba:ce:42:5a:26:10:97:8a:fa:e8:44:b6:d0:1a:
</span><span class='line'>                    3c:4e:f6:80:7b:69:df:a7:cf:c1:64:26:79:0c:5e:
</span><span class='line'>                    c9:2f:ba:03:08:d2:14:f8:f0:df:f6:bf:49:79:1e:
</span><span class='line'>                    ec:6f:1b:04:79:65:c1:ba:14:7f:40:f7:52:bb:b8:
</span><span class='line'>                    7d:f0:aa:fc:8d
</span><span class='line'>                Exponent: 65537 (0x10001)
</span><span class='line'>        X509v3 extensions:
</span><span class='line'>            X509v3 Subject Key Identifier: 
</span><span class='line'>                49:83:EC:88:55:ED:E3:1E:61:E9:12:B6:52:9E:63:6F:D9:03:88:41
</span><span class='line'>            X509v3 Authority Key Identifier: 
</span><span class='line'>                keyid:49:83:EC:88:55:ED:E3:1E:61:E9:12:B6:52:9E:63:6F:D9:03:88:41
</span><span class='line'>
</span><span class='line'>            X509v3 Basic Constraints: 
</span><span class='line'>                CA:TRUE
</span><span class='line'>    Signature Algorithm: sha1WithRSAEncryption
</span><span class='line'>        b9:92:5a:89:1e:9c:dc:fc:44:d3:55:10:06:af:43:e8:0d:30:
</span><span class='line'>        4f:03:6c:10:c9:8e:68:16:28:7a:4c:a7:28:e8:73:04:c0:1b:
</span><span class='line'>        ce:bd:82:e7:8f:d4:b9:0f:00:32:47:5a:d1:3e:65:01:3c:a9:
</span><span class='line'>        23:e8:07:e0:03:48:24:dd:53:7c
</span><span class='line'>-----BEGIN CERTIFICATE-----
</span><span class='line'>MIIB3TCCAYegAwIBAgIBADANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJKUDER
</span><span class='line'>MA8GA1UECAwIS2FuYWdhd2ExFjAUBgNVBAcMDVlva29oYW1hIENpdHkxFDASBgNV
</span><span class='line'>BAMMCyoubmFydWgubmV0MB4XDTEyMDYyMTEwNTIwN1oXDTEzMDYyMTEwNTIwN1ow
</span><span class='line'>TjELMAkGA1UEBhMCSlAxETAPBgNVBAgMCEthbmFnYXdhMRYwFAYDVQQHDA1Zb2tv
</span><span class='line'>aGFtYSBDaXR5MRQwEgYDVQQDDAsqLm5hcnVoLm5ldDBcMA0GCSqGSIb3DQEBAQUA
</span><span class='line'>A0sAMEgCQQC6zkJaJhCXivroRLbQGjxO9oB7ad+nz8FkJnkMXskvugMI0hT48N/2
</span><span class='line'>v0l5HuxvGwR5ZcG6FH9A91K7uH3wqvyNAgMBAAGjUDBOMB0GA1UdDgQWBBRJg+yI
</span><span class='line'>Ve3jHmHpErZSnmNv2QOIQTAfBgNVHSMEGDAWgBRJg+yIVe3jHmHpErZSnmNv2QOI
</span><span class='line'>QTAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA0EAuZJaiR6c3PxE01UQBq9D
</span><span class='line'>6A0wTwNsEMmOaBYoekynKOhzBMAbzr2C54/UuQ8AMkda0T5lATypI+gH4ANIJN1T
</span><span class='line'>fA==
</span><span class='line'>-----END CERTIFICATE-----</span></code></pre></td></tr></table></div></figure>


<h2>参考</h2>

<ul>
<li><a href="http://gagravarr.org/writing/openssl-certs/ca.shtml">Certificate Management and Generation with OpenSSL</a></li>
<li><a href="http://www.nina.jp/server/slackware/openssl/openssl-command.html">openssl コマンド</a></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[daemontoolsの使い方]]></title>
    <link href="http://hnakamur.github.com/blog/2012/06/21/how-to-use-daemontools/"/>
    <updated>2012-06-21T17:48:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/06/21/how-to-use-daemontools</id>
    <content type="html"><![CDATA[<p><a href="http://www.nslabs.jp/daemontools.rhtml">daemontoolsを使う | Netsphere Laboratories</a>を参考にしました。ありがとうございます。</p>

<h2>私的ルール</h2>

<h3>無効化したサービスは/service/.disabled/に移動</h3>

<p>/service/以下に.で始まるフォルダ名にすると無視されるということですが、my_service_nameを.my_service_nameと変えるのはタイプが面倒なので、/service/.disabledというフォルダを作って無効化するときはその下に移動することにしました。</p>

<h3>作業するときは/serviceに移動</h3>

<p>svcやsvstatにフルパスを指定しても動くのですが、/service/と/service/.disabled間で移動するときにタイプ量が増えるので、最初にcd /serviceしてから作業することにしました。</p>

<h2>手順</h2>

<h3>サービス追加</h3>

<p>node-virtualhost1.example.comという名前でサービスを追加する例。
exec -cの後はサービスに応じて変更します。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /service
</span><span class='line'>mkdir -p .disabled/node-virtualhost1.example.com
</span><span class='line'>cat &lt;&lt;EOF &gt; .disabled/node-virtualhost1.example.com/run
</span><span class='line'>#!/bin/sh
</span><span class='line'>exec -c /usr/local/node-v0.6.19/bin/node /var/www/app/virtualhost1.example.com/hello.js
</span><span class='line'>EOF
</span><span class='line'>chmod 755 .disabled/node-virtualhost1.example.com/run</span></code></pre></td></tr></table></div></figure>


<h3>サービス有効化</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /service
</span><span class='line'>mv .disabled/node-virtualhost1.example.com .</span></code></pre></td></tr></table></div></figure>


<h4>状態確認</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># svstat node-virtualhost1.example.com/
</span><span class='line'>node-virtualhost1.example.com/: up (pid 1493) 3 seconds</span></code></pre></td></tr></table></div></figure>


<h3>サービス無効化</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /service
</span><span class='line'>mv node-virtualhost1.example.com .disabled/
</span><span class='line'>svc -tx .disabled/node-virtualhost1.example.com</span></code></pre></td></tr></table></div></figure>


<h4>状態確認</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># svstat .disabled/node-virtualhost1.example.com/
</span><span class='line'>.disabled/node-virtualhost1.example.com/: supervise not running</span></code></pre></td></tr></table></div></figure>


<h3>サービス一時停止(Down)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /service
</span><span class='line'>svc -d node-virtualhost1.example.com</span></code></pre></td></tr></table></div></figure>


<h4>状態確認</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># svstat node-virtualhost1.example.com/
</span><span class='line'>node-virtualhost1.example.com/: down 1 seconds, normally up</span></code></pre></td></tr></table></div></figure>


<h3>サービス一時停止からの再開(Up)</h3>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd /service
</span><span class='line'>svc -u node-virtualhost1.example.com</span></code></pre></td></tr></table></div></figure>


<h4>状態確認</h4>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'># svstat node-virtualhost1.example.com/
</span><span class='line'>node-virtualhost1.example.com/: up (pid 1512) 1 seconds</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[daemontoolsのインストール手順]]></title>
    <link href="http://hnakamur.github.com/blog/2012/06/21/how-to-install-daemontools/"/>
    <updated>2012-06-21T17:36:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/06/21/how-to-install-daemontools</id>
    <content type="html"><![CDATA[<p>CentOS6.2で確認。</p>

<p>OS起動時にdaemontoolsを起動する設定は<a href="http://cr.yp.to/daemontools/start.html">How to start daemontools</a>を参照。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>yum install -y make gcc rpm-build &&
</span><span class='line'>rpm -ivh http://mirrors.qmailtoaster.com/daemontools-toaster-0.76-1.3.6.src.rpm &&
</span><span class='line'>rpmbuild -ba /root/rpmbuild/SPECS/daemontools-toaster.spec &&
</span><span class='line'>rpm -ivh /root/rpmbuild/RPMS/x86_64/daemontools-toaster-0.76-1.3.6.x86_64.rpm &&
</span><span class='line'>cat &gt; /etc/init/svscan.conf &lt;&lt;EOF &&
</span><span class='line'>start on runlevel [12345]
</span><span class='line'>stop on runlevel [^12345]
</span><span class='line'>respawn
</span><span class='line'>exec /command/svscanboot
</span><span class='line'>EOF
</span><span class='line'>/command/svscanboot &</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6でchef-soloとknife-soloをセットアップ]]></title>
    <link href="http://hnakamur.github.com/blog/2012/05/04/setup-chef-solo-and-knife-solo-on-centos6/"/>
    <updated>2012-05-04T15:03:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/05/04/setup-chef-solo-and-knife-solo-on-centos6</id>
    <content type="html"><![CDATA[<h2>なぜ？</h2>

<p><a href="http://higelog.brassworks.jp/?p=654">chef-soloで作業環境構築の自動化 | ひげろぐ</a> を参考に、Chefサーバは使いたくないけど、chef-soloとknifeを使いたい！
ということで、そういう環境を作るためのスクリプトを作りました。
だいぶ前から試行錯誤してたけど、ようやくできたので公開。</p>

<h2>セットアップスクリプト</h2>

<p>chef-soloやknifeはrootユーザで実行する想定です。</p>

<p>このスクリプトではruby、rubygems、ruby-devel、make、gccをyumで、
chefとknife-soloをgemでインストールします。</p>

<p>chef-soloやknife実行時にオプションをなるべく指定不要にするため、設定ファイルはデフォルトの場所に配置しています。</p>

<ul>
<li>/etc/chef/solo.rb</li>
<li>/root/.chef/knife.rb</li>
</ul>


<p>その他の詳細は
<a href="https://github.com/hnakamur/setup_linux/blob/master/centos6/install_chef-solo.sh">install_chef-solo.sh</a>
を参照してください。</p>

<p>ちょっと注意が必要なのは、shのヒアドキュメントで<code>`hostname`</code>が展開されるのを避けるために、<code>\`hostname\`</code>とエスケープしていることです。
＃余談ですが、markdownだとバックスラッシュやバックティックはエスケープしないといけないんですね。</p>

<p>knife.rbの設定は
<a href="https://gist.github.com/1039666">Base &#8220;knife&#8221; configuration for a standard chef-solo setup — Gist</a> を書き換えて作りました。が、まだよく理解していません。</p>

<h2>セットアップ手順</h2>

<p>特に設定変更が不要であれば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>curl https://raw.github.com/hnakamur/setup_linux/master/centos6/install_chef-solo.sh | sudo sh</span></code></pre></td></tr></table></div></figure>


<p>でセットアップできます。変更したい場合はとってきて書き換えてから実行してください。</p>

<h2>クックブック作成例</h2>

<p>例えば</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>knife cookbook create ntp</span></code></pre></td></tr></table></div></figure>


<p>と実行すると、/etc/chef/site-cookbooks/ntp/ 以下にフォルダ構成とファイルが作られます。あとは編集して作ります。</p>

<h2>実行例</h2>

<p>/root/.chef/chef.json</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>{
</span><span class='line'>  "run_list":["recipe[ntp]"]
</span><span class='line'>}</span></code></pre></td></tr></table></div></figure>


<p>というファイルを用意して</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo chef-solo -j /root/.chef/chef.json</span></code></pre></td></tr></table></div></figure>


<p>で実行します。</p>

<h2>私のスタンス</h2>

<p>minimalistな私は正直 <a href="http://wiki.opscode.com/display/chef/Home">Chef</a> はそんなに好きじゃないです。</p>

<p><a href="http://wiki.opscode.com/display/chef/Architecture">Architecture</a> を見ると、CouchDB, Solr, RabbitMQ が必要って、高々サーバをセットアップするのになんでこんなにいろいろ稼働させる必要があるの？って感じてしまいます。セットアップ手順が自動化されたとしても、自分のマシンでそれだけのサーバが動いているのがもったいない、無駄にマシンリソースを消費してエコじゃない、と思います。</p>

<p>そもそも私がやるような3台構成ぐらいの環境構築にそこまで大掛かりな仕組みはいらないというのもありますし。</p>

<p><a href="http://rexify.org/">(R)?ex - A simple framework to simplify systemadministration</a> はsshの鍵認証またはパスワード認証で接続してリモートで処理を実行できるのでこちらのほうが好きです。リモートマシンのセットアップにsshサーバ以外に何か必要というのは、なんか違う気がするんですよね。</p>

<p>それからクックブック1つに対して、フォルダやファイルがたくさんできるのもあまり好きじゃないです。設定管理ツールじゃなくてパッケージ管理ツールですけどHomebrewはFormulaが1つのrubyスクリプトでこれは非常に編集が楽なんです。RexはRexfileにテンプレートファイルを含めることも可能なので</p>

<p>あと処理を手続き的に記述するではなく、最終的な状態を宣言的に記述するというスタイルですが、これも限定的だと思っています。結局のところ、複雑な処理だと処理順序も関係するので、やらせたいことを手続き的にかける方がストレートなのかなと。実行する必要があるかチェックする処理を最初に入れて、それを含めた一連の処理を一つのコマンドとして提供すれば、利用側のコードはシンプルになるのでそれで十分だと思います。</p>

<p>あと、実行対象の処理をJSONファイルに書いて、ファイル名を引数で指定して実行ってのもイケてない。rakeやRexのようにタスクを引数に指定させて欲しいです。</p>

<p>と文句ばかり言っているようですが、DevOpsを提唱したopscode.comが出しているツールだし、一度は使ってみるべきということで。あと、まわりでも使っているので、ツールは揃えておいたほうが良いかなという思いもあります。私自身はいいのですが、まわりで使わされる人が何種類も覚えることを強要されるのは無駄だろうし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/etc/sudoers.d/を使う→やっぱり止め]]></title>
    <link href="http://hnakamur.github.com/blog/2012/05/04/use-slash-etc-slash-sudoers-dot-d-slash/"/>
    <updated>2012-05-04T11:16:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/05/04/use-slash-etc-slash-sudoers-dot-d-slash</id>
    <content type="html"><![CDATA[<p>これまでいつも/etc/sudoersを編集していたのですが、よくみるとファイル末尾に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>## Read drop-in files from /etc/sudoers.d (the # here does not mean a comment)
</span><span class='line'>#includedir /etc/sudoers.d</span></code></pre></td></tr></table></div></figure>


<p>と書いてあって、/etc/sudoers.d/にファイルを置けば/etc/sudoersを編集しなくても済むんですね。（しかしなんでincludedirには#をつける仕様なんだろ。今までずっとコメントアウトされていると思ってました。その上のコメント行に#ついててもコメントじゃないと書いてあるのに気づいたのが今日です）</p>

<p>/etc/sudoers.d/hnakamur を</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Defaults:hnakamur !requiretty
</span><span class='line'>hnakamur ALL=(ALL)      NOPASSWD: ALL</span></code></pre></td></tr></table></div></figure>


<p>として試してみました。</p>

<p>sudoすると</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo: /etc/sudoers.d/hnakamur is mode 0644, should be 0440</span></code></pre></td></tr></table></div></figure>


<p>というエラー。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>chmod 0440 /etc/sudoers.d/hnakamur</span></code></pre></td></tr></table></div></figure>


<p>して再度試すとOKでした。</p>

<p>visudoではこのファイルは編集対象ではないので、複数人で同時に編集しないよう連絡しあうなどの運用が別途必要です。このせいでみんな使ってないんだろうか？</p>

<h2>/etc/sudoers.d/* の罠にはまった</h2>

<p>(2012-05-05 追記)</p>

<p>使うべきでない理由がわかりました！</p>

<p>/etc/sudoers.d/*のファイルで文法エラーのまま保存してしまうと、次にsudoを実行した時に以下の様なエラーが出ました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ sudo -s
</span><span class='line'>&gt;&gt;&gt; /etc/sudoers.d/hnakamur: syntax error near line 2 &lt;&lt;&lt;
</span><span class='line'>sudo: parse error in /etc/sudoers.d/hnakamur near line 2
</span><span class='line'>sudo: no valid sudoers sources found, quitting</span></code></pre></td></tr></table></div></figure>


<p>こうなるとsu -でrootになるしかないです。/etc/sudoers.d/*を使わずvisudoで編集する場合は、保存時に文法エラーがある場合は抜けずに再編集が可能なので安全です。</p>

<h2>visudoを使えば/etc/sudoers.d/* でも大丈夫</h2>

<p>(2012-05-05 追記)</p>

<p>さらに追記。visudoは/etc/sudoers.d/*に文法がエラーがある場合も抜ける前にプロンプトが出ました。人手で編集するときは必ずvisudoを使うよう肝に銘じます。</p>

<h2>/etc/sudoers.d/* だとvisudoでもダメなパターンがありました</h2>

<p>(2012-05-05 追記)</p>

<p>さらに追記。
visudoで起動して:e /etc/sudoers.d/hnakamurと切り替えて編集して:wqで保存して抜けると、文法エラーがあってもスルーしてしまいました。rootでもう一度起動して何も変更せずに:qで終わると文法エラーに反応してくれるのですが。</p>

<p>ということで、結論としては/etc/sudoers.d/*は私は使わないことにしました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[lua, V8, ruby, mrubyでfib(39)の実行時間比較]]></title>
    <link href="http://hnakamur.github.com/blog/2012/05/04/fib-39-benchmark-in-lua/"/>
    <updated>2012-05-04T11:06:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/05/04/fib-39-benchmark-in-lua</id>
    <content type="html"><![CDATA[<p><a href="http://www.quredo.net/2012/04/mruby-%E8%BB%BD%E9%87%8Fruby-%E3%82%BD%E3%83%BC%E3%82%B9%E5%85%AC%E9%96%8B/">mruby (軽量ruby) ソース公開 | quredo-style</a>を見て、自分の環境でlua, luajit, V8, ruby, mrubyで試してみた。</p>

<p>テスト環境</p>

<ul>
<li>Model: MacBook Air 13-inch, Mid 2011</li>
<li>CPU: 1.7GHz Intel Core i5</li>
<li>RAM: 4GB 1333MHz DDR3</li>
<li>OS: Mac OS X Lion 10.7.3</li>
</ul>


<h2>lua</h2>

<p>fib.lua</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function fib(n)
</span><span class='line'>  if n &lt; 2 then
</span><span class='line'>    return n
</span><span class='line'>  end
</span><span class='line'>  return fib(n-2) + fib(n-1)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>print(fib(39))</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ lua -v
</span><span class='line'>Lua 5.1.4  Copyright (C) 1994-2008 Lua.org, PUC-Rio
</span><span class='line'>$ time lua fib.lua
</span><span class='line'>63245986
</span><span class='line'>
</span><span class='line'>real  0m21.368s
</span><span class='line'>user  0m21.345s
</span><span class='line'>sys   0m0.016s</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./lua -v
</span><span class='line'>Lua 5.2.0  Copyright (C) 1994-2011 Lua.org, PUC-Rio
</span><span class='line'>$ time ./lua fib.lua
</span><span class='line'>63245986
</span><span class='line'>
</span><span class='line'>real  0m19.603s
</span><span class='line'>user  0m19.585s
</span><span class='line'>sys   0m0.012s</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ ./luajit -v
</span><span class='line'>Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio
</span><span class='line'>LuaJIT 1.1.8  Copyright (C) 2005-2012 Mike Pall, http://luajit.org/
</span><span class='line'>$ time ./luajit fib.lua
</span><span class='line'>63245986
</span><span class='line'>
</span><span class='line'>real  0m4.302s
</span><span class='line'>user  0m4.292s
</span><span class='line'>sys   0m0.006s</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ luajit -v
</span><span class='line'>LuaJIT 2.0.0-beta9 -- Copyright (C) 2005-2011 Mike Pall. http://luajit.org/
</span><span class='line'>$ time luajit fib.lua
</span><span class='line'>63245986
</span><span class='line'>
</span><span class='line'>real  0m1.299s
</span><span class='line'>user  0m1.289s
</span><span class='line'>sys   0m0.004s</span></code></pre></td></tr></table></div></figure>


<h2>V8</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>function fib(n) {
</span><span class='line'>  if (n &lt; 2) return n;
</span><span class='line'>  return fib(n-2) + fib(n-1);
</span><span class='line'>}
</span><span class='line'>
</span><span class='line'>print(fib(39));</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ v8
</span><span class='line'>V8 version 3.9.24 [sample shell]
</span><span class='line'>&gt; quit()
</span><span class='line'>$ time v8 fib.js
</span><span class='line'>63245986
</span><span class='line'>
</span><span class='line'>real  0m1.417s
</span><span class='line'>user  0m1.407s
</span><span class='line'>sys   0m0.013s</span></code></pre></td></tr></table></div></figure>


<h2>ruby</h2>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>def fib n
</span><span class='line'>  return n if n &lt; 2
</span><span class='line'>  fib(n-2) + fib(n-1)
</span><span class='line'>end
</span><span class='line'>
</span><span class='line'>puts fib(39)</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv version
</span><span class='line'>1.8.7-p358 (set by /Users/hnakamur/.rbenv/version)
</span><span class='line'>$ time ruby fib.rb
</span><span class='line'>63245986
</span><span class='line'>
</span><span class='line'>real  1m47.227s
</span><span class='line'>user  1m46.945s
</span><span class='line'>sys   0m0.132s</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv version
</span><span class='line'>1.9.3-p125 (set by /Users/hnakamur/.rbenv/version)
</span><span class='line'>$ time ruby fib.rb
</span><span class='line'>63245986
</span><span class='line'>
</span><span class='line'>real  0m16.504s
</span><span class='line'>user  0m16.374s
</span><span class='line'>sys   0m0.051s</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ time bin/mruby fib.rb 
</span><span class='line'>63245986
</span><span class='line'>
</span><span class='line'>real  0m35.465s
</span><span class='line'>user  0m35.423s
</span><span class='line'>sys   0m0.014s</span></code></pre></td></tr></table></div></figure>


<p>[2012-05-03 23:21]</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 4.3.1のファイルテンプレートをカスタマイズ]]></title>
    <link href="http://hnakamur.github.com/blog/2012/03/11/custom-file-template-for-xcode-4-dot-3-1/"/>
    <updated>2012-03-11T20:22:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/03/11/custom-file-template-for-xcode-4-dot-3-1</id>
    <content type="html"><![CDATA[<p><a href="http://meandmark.com/blog/2011/11/creating-custom-xcode-4-file-templates/">Creating Custom Xcode 4 File Templates</a>を参考に作成してみました。</p>

<p>Apple提供のファイルテンプレートは
/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates
にあるとのこと。ですが、Xcode 4.3.1からは/Developperではなく/Applications/Xcodeにインストールされるので、Xcode 4.3.1のみの環境ではここにはないかもしれません。</p>

<p>私は<a href="https://github.com/MacRuby/MacRuby">MacRubyのgithubレポジトリ</a>をクローンして、misc/xcode4-templates/File Templates/Ruby/Ruby File.xctemplate/ をコピーして書き換えてカスタマイズしました。</p>

<p>コピー先は
/Users/ユーザ名/Library/Developer/Xcode/Templates/File Templates/グループ名/ファイルタイプ.xctemplate/
です。</p>

<p>コピー後Xcodeを再起動すると認識されました。</p>

<p>なお、オリジナルと同じグループ名とファイルタイプにすると、同じ名前のものが2つ並んで紛らわしい状態になります。ですので、違う名前にしたほうが良いです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[macruby-nightly-2012-03-07をXcode 4.3.1で試す]]></title>
    <link href="http://hnakamur.github.com/blog/2012/03/11/try-macruby-nightly-2012-03-07-with-xcode-4-dot-3-1/"/>
    <updated>2012-03-11T12:29:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/03/11/try-macruby-nightly-2012-03-07-with-xcode-4-dot-3-1</id>
    <content type="html"><![CDATA[<p><a href="http://d.hatena.ne.jp/seiunsky/20111225/1324740191">おまいらもMacRubyでMacアプリ作ろう - @sugamasao.blog.title # => ”コードで世界を変えたい”</a>を見て、ファイルやプロジェクトのテンプレートを追加すればXcode 4.3.1も使えそうだと思い、<a href="http://d.hatena.ne.jp/kouji0625/20090919/p1">Snow LeopardのXcodeにRubyCocoaのテンプレートをインストール - 高尾宏治日記 on はてな</a>を参考にコピーしてみようかと思ったのですが、<a href="http://www.macruby.org/trac/ticket/1466">#1466 (does not install MacRuby&#8217;s Templetes and rb_nibtool into Xcode 4.3) – MacRuby</a>というページを見つけました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/ </span></code></pre></td></tr></table></div></figure>


<p>を実行しておいてから、
<a href="http://www.macruby.org/files/nightlies/">MacRuby » Files</a>から<a href="http://www.macruby.org/files/nightlies/macruby_nightly-2012-03-07.pkg">macruby_nightly-2012-03-07.pkg</a>を実行してインストールしてみました。</p>

<p>これでばっちりになりました。新規プロジェクト作成で[MacRuby Application]も選択可能ですし、Interface BuilderでHelloWorldControllerのoutletも認識されました。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Xcode 4.2.1でMacRuby 0.10を試す]]></title>
    <link href="http://hnakamur.github.com/blog/2012/03/11/try-macruby-0-dot-10-with-xcode-4-dot-2-1/"/>
    <updated>2012-03-11T10:42:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/03/11/try-macruby-0-dot-10-with-xcode-4-dot-2-1</id>
    <content type="html"><![CDATA[<h2>Xcode 4.1やXcode 4.3.1ではうまくいかずXcode 4.2.1ならOKだった</h2>

<p>最終的にうまく行ったバージョンの組み合わせは以下の通りです。</p>

<ul>
<li>Mac OS X 10.7.3</li>
<li>Xcode 4.2.1</li>
<li>MacRuby 0.10</li>
</ul>


<p>最初は以下の環境でした。</p>

<ul>
<li>Mac OS X 10.7.3</li>
<li>Xcode 4.1 (4.1.xのxはうろ覚えだけど4.1.1だったかな)</li>
</ul>


<p><a href="http://www.macruby.org/downloads.html">MacRuby » Download MacRuby</a>
からMacRuby 0.10をダウンロードし、インストールしました。</p>

<p><a href="http://www.macruby.org/documentation/tutorial.html">MacRuby » Introductory Tutorial</a>を試していたのですが、XcodeのInterface BuilderでHelloWorldControllerを作ってもoutletが認識されないという問題が発生しました。</p>

<p>ググってみると<a href="http://www.macruby.org/trac/ticket/1322">#1322 (Xcode 4.1/4.2) – MacRuby</a>というページが。で、とりあえず最新のXcode 4.3.1をApp Storeからインストールしてみました。インストール時には元のXcode 4.1は消さずに残すようにしました。
で、Xcode 4.3.1で試したのですが[File]/[New]/[Project &#8230;]メニューを選んで、[Mac OS X]の[Application]を選んでも[MacRuby Application]が出てこない。</p>

<p>MacRubyより後にXcode 4.3.1をインストールしたので認識されていないのかなと思い、再度MacRuby 0.10のインストーラを実行するも変わらず。</p>

<p>Xcode 4.3.1のインストーラに古いXcodeを消すか聞かれた時に、Xcode 4.1とInstall Xcode 4.2.1が並んでいて、Install Xcode 4.2.1の行には/Applications/Install Xcode.appと書かれていました。そこでそれを実行してみると、Xcode 4.1が4.2.1にアップグレードされました。</p>

<p>これでようやくInterface BuilderでHelloWorldControllerのoutletが認識されるようになりました。</p>

<p><a href="https://developer.apple.com/library/mac/#documentation/DeveloperTools/Conceptual/WhatsNewXcode/Articles/xcode_4_3.html">What&#8217;s New In Xcode: New Features in Xcode 4.3</a>にも書かれていますが、Xcode 4.1/4.2は/Developer、Xcode 4.3.1は/Applications/Xcode.appにインストールされます。</p>

<p>さらに、<a href="http://stackoverflow.com/questions/669367/can-i-have-multiple-xcode-versions-installed">osx - Can I have multiple Xcode versions installed? - Stack Overflow</a>によるとXcodeのインストーラ実行時に[location&#8230;]プルダウンでインストール先のディレクトリを変えておけば複数バージョンの同居は可能らしいです。私は既に4.1を4.2.1にアップグレードしてしまったので4.2.1と4.3.1のみですが、これを知ってたら4.1も残しておきたかった。</p>

<p><a href="https://developer.apple.com/library/mac/#documentation/Darwin/Reference/ManPages/man1/xcode-select.1.html">xcode-select(1) Mac OS X Developer Tools Manual Page</a>によると、4.2.1への切替は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>xcode-select -switch /Developer</span></code></pre></td></tr></table></div></figure>


<p><a href="https://github.com/MacRuby/MacRuby">MacRuby/MacRuby</a>によると、4.3.1への切替は</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>sudo xcode-select -switch /Applications/Xcode.app/Contents/Developer/</span></code></pre></td></tr></table></div></figure>


<p>で出来るようです。と書きながら気付いたのですが、上のリンクにMacRubyのインストール前にこれをやる必要があるかもと書いてますね。しかし、これをやってからMacRubyを再度インストールしてみましたが、やっぱり新規プロジェクト作成で[MacRuby Application]は出て来ませんでした。</p>

<p>ただ、xcode-selectで何が変わるのかはよくわかりません。Xcode自体は4.2.1は/Developer/Applications/Xcode.app、4.3.1は/Applications/Xcode.appで起動すればよいだけですし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[mod_xsendfileでダウンロード後にサーバ上のファイル自動削除]]></title>
    <link href="http://hnakamur.github.com/blog/2012/03/03/delete-on-close-using-mod-xsendfile/"/>
    <updated>2012-03-03T20:26:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/03/03/delete-on-close-using-mod-xsendfile</id>
    <content type="html"><![CDATA[<p><a href="https://tn123.org/mod_xsendfile/">mod_xsendfile</a>のホームページ上でリリースされているバージョン0.12には含まれていませんが、<a href="https://github.com/nmaier/mod_xsendfile/commit/f6b853ce0e555b61f83f928d9f927349346018b4">Githubのレポジトリのソース</a>ではX-Sendfile-Temporaryという拡張ヘッダに対応しています。</p>

<p>Scientific Linux 6.1で実験しました。</p>

<h2>mod_xsendfileのインストール</h2>

<p>以下の手順でインストールします。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>yum install -y httpd-devel
</span><span class='line'>git clone https://github.com/nmaier/mod_xsendfile.git
</span><span class='line'><span class="nb">cd </span>mod_xsendfile
</span><span class='line'>apxs -cia mod_xsendfile.c
</span></code></pre></td></tr></table></div></figure>


<p>実験スクリプト用にApacheの設定ファイルを作成します。</p>

<figure class='code'><figcaption><span>/etc/httpd/conf.d/xsendfile_test.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;Directory /var/www/html/xsendfile&gt;
</span><span class='line'>    XSendFilePath /var/www/html/xsendfile/data AllowFileDelete
</span><span class='line'>    &lt;Files out.php&gt;
</span><span class='line'>      XSendFile on
</span><span class='line'>    &lt;/Files&gt;
</span><span class='line'>&lt;/Directory&gt;
</span></code></pre></td></tr></table></div></figure>


<p>Apache再起動。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>/etc/init.d/httpd graceful
</span></code></pre></td></tr></table></div></figure>


<h2>実験</h2>

<p>実験スクリプト用のフォルダを作ります。</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='bash'><span class='line'>mkdir /var/www/html/xsendfile/data/
</span><span class='line'>chown -R apache:apache /var/www/html/xsendfile
</span></code></pre></td></tr></table></div></figure>


<p>実験用のPHPスクリプトを作成します。</p>

<figure class='code'><figcaption><span>/var/www/html/xsendfile/out.php</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='php'><span class='line'><span class="cp">&lt;?php</span>
</span><span class='line'><span class="nv">$path</span> <span class="o">=</span> <span class="s1">&#39;/var/www/html/xsendfile/data/file1.txt&#39;</span><span class="p">;</span>
</span><span class='line'><span class="nv">$fname</span> <span class="o">=</span> <span class="nb">basename</span><span class="p">(</span><span class="nv">$path</span><span class="p">);</span>
</span><span class='line'><span class="nb">header</span><span class="p">(</span><span class="s2">&quot;X-Sendfile-Temporary: </span><span class="si">$path</span><span class="s2">&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">header</span><span class="p">(</span><span class="s2">&quot;Content-Type: application/octet-stream&quot;</span><span class="p">);</span>
</span><span class='line'><span class="nb">header</span><span class="p">(</span><span class="s2">&quot;Content-Disposition: attachment; filename=</span><span class="se">\&quot;</span><span class="si">$fname</span><span class="se">\&quot;</span><span class="s2">&quot;</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<p>実験用のダウンロードファイルを作成します。</p>

<figure class='code'><figcaption><span>/var/www/html/xsendfile/data/file1.txt</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Hello, X-Sendfile-Temporary!
</span></code></pre></td></tr></table></div></figure>


<p>これで、ブラウザで http://your_host_here/xsendfile/out.php を開くとダウンロード後にサーバ上のファイルが削除されました。</p>

<h2>今回のはまりポイント</h2>

<figure class='code'><figcaption><span>/etc/httpd/conf.d/xsendfile_test.conf</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>&lt;Directory /var/www/html/xsendfile&gt;
</span><span class='line'>    XSendFilePath /var/www/html/xsendfile/data
</span><span class='line'>    &lt;Files out.php&gt;
</span><span class='line'>      XSendFile on
</span><span class='line'>    &lt;/Files&gt;
</span><span class='line'>&lt;/Directory&gt;
</span></code></pre></td></tr></table></div></figure>


<p>のようにAllowFileDeleteを忘れていたら、out.phpを開いた時に404 Not Foundエラーになり、Apacheのエラーログには以下のようなエラーが出ていました。</p>

<figure class='code'><figcaption><span>/var/log/httpd/error_log</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>[Sat Mar 03 15:57:07 2012] [error] [client 192.168.11.3] (14)Bad address: xsendfile: cannot open file: (null)
</span></code></pre></td></tr></table></div></figure>


<p>AllowFileDeleteをつければOKでした。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[octopressでgithubにブログ開設]]></title>
    <link href="http://hnakamur.github.com/blog/2012/03/03/how-to-setup-octopress/"/>
    <updated>2012-03-03T18:34:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/03/03/how-to-setup-octopress</id>
    <content type="html"><![CDATA[<p>rbenvとoctopressをインストールしてgithubにブログを作る手順のメモです。</p>

<h2>rbenvをインストール</h2>

<ul>
<li><a href="https://github.com/sstephenson/rbenv#section_2.1">sstephenson/rbenv</a></li>
<li><a href="https://github.com/sstephenson/ruby-build">sstephenson/ruby-build</a></li>
</ul>


<p>を参考にインストールしました。</p>

<p>インストール先は~/.rbenvとしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd
</span><span class='line'>git clone git://github.com/sstephenson/rbenv.git .rbenv
</span><span class='line'>
</span><span class='line'>echo 'export PATH="$HOME/.rbenv/bin:$PATH"' &gt;&gt; .bash_profile
</span><span class='line'>echo 'eval "$(rbenv init -)"' &gt;&gt; .bash_profile
</span><span class='line'>
</span><span class='line'>. ~/.bash_profile</span></code></pre></td></tr></table></div></figure>


<p>ruby-buildをインストールします。なお、私はHomebrewを使っているので/usr/localには書き込み権限をつけてあります。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd
</span><span class='line'>git clone git://github.com/sstephenson/ruby-build.git
</span><span class='line'>cd ruby-build
</span><span class='line'>./install.sh</span></code></pre></td></tr></table></div></figure>


<p>rbenvでruby 1.9.2-p290をインストール。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv install 1.9.2-p290</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ rbenv versions
</span><span class='line'>* 1.9.2-p290 (set by /Users/hnakamur/octopress/.rbenv-version)</span></code></pre></td></tr></table></div></figure>


<p>でインストールされたrubyがrbenvで認識されたことを確認。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rbenv global 1.9.2-p290</span></code></pre></td></tr></table></div></figure>


<p>で切替。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>$ which ruby
</span><span class='line'>/Users/hnakamur/.rbenv/shims/ruby
</span><span class='line'>$ ruby --version
</span><span class='line'>ruby 1.9.2p290 (2011-07-09 revision 32553) [x86_64-darwin11.3.0]</span></code></pre></td></tr></table></div></figure>


<h2>octopressでgitにブログをセットアップ</h2>

<p><a href="http://octopress.org/docs/deploying/github/">Deploying to Github Pages - Octopress</a>
を参考にセットアップしました。</p>

<p>ここでは~/octopressを作業ディレクトリとしました。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>cd
</span><span class='line'>git clone git://github.com/imathis/octopress.git octopre
</span><span class='line'>cd octopress
</span><span class='line'>ruby --version
</span><span class='line'>gem install bundler
</span><span class='line'>rbenv rehash
</span><span class='line'>rake install</span></code></pre></td></tr></table></div></figure>


<p>ブラウザでgithubを開き、自分のアカウント(私の場合はhnakamur)でblogというプロジェクトを作ります。ブラウザで https://github.com/hnakamur/blog を開き、&#8221;Next steps:&#8221;に</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>git remote add origin git@github.com:hnakamur/blog.git</span></code></pre></td></tr></table></div></figure>


<p>と書かれている行のgitのURL(ここではgit@github.com:hnakamur/blog.git)をコピーします。</p>

<p>その後</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>rake setup_github_pages</span></code></pre></td></tr></table></div></figure>


<p>を実行し、&#8221;Enter the read/write url for your repository:&#8221;というプロンプトが出たらURLを貼り付けます。</p>

<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Enter the read/write url for your repository: git@github.com:hnakamur/blog.git</span></code></pre></td></tr></table></div></figure>




<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>vi _config.yml</span></code></pre></td></tr></table></div></figure>


<p>ブログタイトルなどを編集します。</p>

<figure class='code'><figcaption><span>_config.yml</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>url: http://hnakamur.github.com/blog
</span><span class='line'>title: &quot;hnakamur&#39;s blog at github&quot;
</span><span class='line'>subtitle: my trial and error log
</span><span class='line'>author: Hiroaki Nakamura
</span><span class='line'>…(略)…
</span><span class='line'>date_format: &quot;%Y-%m-%d&quot;
</span><span class='line'>…(略)…
</span></code></pre></td></tr></table></div></figure>


<p>さらに</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>permalink: /blog/:year/:month/:day/:title/
</span><span class='line'>…(略)…
</span><span class='line'>category_dir: blog/categories
</span><span class='line'>…(略)…
</span><span class='line'>titlecase: true       # Converts page and post titles to titlecase
</span></code></pre></td></tr></table></div></figure>


<p>を以下のように変更します。</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>permalink: /:year/:month/:day/:title/
</span><span class='line'>…(略)…
</span><span class='line'>category_dir: categories
</span><span class='line'>…(略)…
</span><span class='line'>titlecase: false      # Converts page and post titles to titlecase
</span></code></pre></td></tr></table></div></figure>


<p>これは記事のパーマリンクやカテゴリページのURLが/blog/blog/…のようになってしまうのを/blog/…のようにするためです。</p>

<p>またタイトルの先頭を大文字にするのもオフにしています。</p>

<p>なお、アーカイブのページのURLは/blog/blog/archiveになってしまっていますが、変更方法をまだ見つけられていません。</p>

<h2>記事の作成と投稿</h2>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake new_post[&#39;Hello, octopress!&#39;]
</span></code></pre></td></tr></table></div></figure>


<p>と実行すると、最後に</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Creating new post: source/_posts/2012-03-03-hello.markdown
</span></code></pre></td></tr></table></div></figure>


<p>と作成されたファイルが表示されます。</p>

<p>エディタでこのファイルを開いて記事を書きます。</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>vi source/_posts/2012-03-03-hello.markdown
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>---
</span><span class='line'>layout: post
</span><span class='line'>title: &quot;Hello, octopress!&quot;
</span><span class='line'>date: 2012-03-03 17:57
</span><span class='line'>comments: true
</span><span class='line'>categories: octopress
</span><span class='line'>---
</span><span class='line'>octopressでブログ記事を投稿してみるテスト。
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake generate
</span></code></pre></td></tr></table></div></figure>


<p>でHTMLが生成されます。</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake preview
</span></code></pre></td></tr></table></div></figure>


<p>を実行して、ブラウザで
http://localhost:4000/blog/
を開くと、プレビューできます。</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>rake deploy
</span></code></pre></td></tr></table></div></figure>


<p>でgithubにプッシュされ、10分ぐらい待つと
http://hnakamur.github.com/blog/
に記事のページで作られました。</p>

<p>時間がかかるのは初回にgithub pagesを作るときだけで、次回以降は即座に作られました。</p>

<h2>記事のソースをgithubにプッシュ</h2>

<p>リモートの設定にoriginを追加して、そこをデフォルトのブランチに設定。</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>git remote add origin git@github.com:hnakamur/blog.git
</span><span class='line'>git config branch.master.remote origin
</span></code></pre></td></tr></table></div></figure>


<p>設定の変更と生成されたソースをコミット、プッシュします。</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>git add .
</span><span class='line'>git commit -m &#39;Modify config. Add source and sass&#39;
</span><span class='line'>git push origin HEAD:source
</span></code></pre></td></tr></table></div></figure>


<p>github上でのブランチ名をsourceではなくmasterにしてよければ、単に</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>git push
</span></code></pre></td></tr></table></div></figure>


<p>でOKです。</p>

<h2>ローカルのApacheでプレビュー</h2>

<p>Apacheは事前にセットアップ済みという前提で、プレビュー用の設定を追加します。</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sudo vi /etc/apache2/other/blog.conf
</span></code></pre></td></tr></table></div></figure>


<p>と実行して、以下の内容で作成します(hnakamurの部分は自分のアカウント名で置換してください)。</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>Alias /blog /Users/hnakamur/octopress/public/blog
</span><span class='line'>&lt;Directory /Users/hnakamur/octopress/public/blog&gt;
</span><span class='line'>  AllowOverride None
</span><span class='line'>  DirectoryIndex index.html
</span><span class='line'>  Order allow,deny
</span><span class='line'>  Allow from all
</span><span class='line'>&lt;/Directory&gt;
</span></code></pre></td></tr></table></div></figure>




<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>sudo apachectl restart
</span></code></pre></td></tr></table></div></figure>


<p>でApacheを再起動します。</p>

<p>これ以降は記事を編集してrake generateだけ実行すれば <a href="http://localhost/blog/">http://localhost/blog/</a> を開いてプレビューできます。</p>

<h2>今回のはまりポイント</h2>

<h3>YAMLで文字列を&#8221;&#8220;で囲む必要があった</h3>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ rake generate
</span><span class='line'>(in /Users/hnakamur/octopress)
</span><span class='line'>## Generating Site with Jekyll
</span><span class='line'>unchanged sass/screen.scss
</span><span class='line'>/Users/hnakamur/.rbenv/versions/1.9.2-p290/lib/ruby/1.9.1/psych.rb:148:in `parse&#39;: couldn&#39;t parse YAML at line 16 column 13 (Psych::SyntaxError)
</span><span class='line'>  from /Users/hnakamur/.rbenv/versions/1.9.2-p290/lib/ruby/1.9.1/psych.rb:148:in `parse_stream&#39;
</span><span class='line'>  from /Users/hnakamur/.rbenv/versions/1.9.2-p290/lib/ruby/1.9.1/psych.rb:119:in `parse&#39;
</span><span class='line'>  from /Users/hnakamur/.rbenv/versions/1.9.2-p290/lib/ruby/1.9.1/psych.rb:106:in `load&#39;
</span><span class='line'>  from /Users/hnakamur/.rbenv/versions/1.9.2-p290/lib/ruby/1.9.1/psych.rb:205:in `load_file&#39;
</span><span class='line'>  from /Users/hnakamur/.rbenv/versions/1.9.2-p290/lib/ruby/gems/1.9.1/gems/jekyll-0.11.0/lib/jekyll.rb:119:in `configuration&#39;
</span><span class='line'>  from /Users/hnakamur/.rbenv/versions/1.9.2-p290/lib/ruby/gems/1.9.1/gems/jekyll-0.11.0/bin/jekyll:207:in `&lt;top (required)&gt;&#39;
</span><span class='line'>  from /Users/hnakamur/.rbenv/versions/1.9.2-p290/lib/ruby/gems/1.9.1/bin/jekyll:19:in `load&#39;
</span><span class='line'>  from /Users/hnakamur/.rbenv/versions/1.9.2-p290/lib/ruby/gems/1.9.1/bin/jekyll:19:in `&lt;main&gt;&#39;
</span></code></pre></td></tr></table></div></figure>


<p>_config.ymlの</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>date_format: %Y-%m-%dT%k:%M:%S%z
</span></code></pre></td></tr></table></div></figure>


<p>を</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>date_format: &quot;%Y-%m-%dT%k:%M:%S%z&quot;
</span></code></pre></td></tr></table></div></figure>


<p>と修正して再実行したらOKでした。</p>

<h3>git push origin sourceでエラー</h3>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>$ git push origin source
</span><span class='line'>error: src refspec source does not match any.
</span><span class='line'>error: failed to push some refs to &#39;git@github.com:hnakamur/blog.git&#39;
</span></code></pre></td></tr></table></div></figure>


<p>ググって <a href="http://stackoverflow.com/questions/959477/error-when-git-push-to-github">Error when &#8220;git push&#8221; to github - Stack Overflow</a> を発見。</p>

<figure class='code'><figcaption><span>_config.yml (before edit)</span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='text'><span class='line'>git push origin HEAD:source
</span></code></pre></td></tr></table></div></figure>


<p>にしたらOK。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello, octopress!]]></title>
    <link href="http://hnakamur.github.com/blog/2012/03/03/hello/"/>
    <updated>2012-03-03T17:57:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/03/03/hello</id>
    <content type="html"><![CDATA[<p>octopressでブログ記事を投稿してみるテスト。</p>
]]></content>
  </entry>
  
</feed>
