<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/post/</link>
    <description>Recent content in Posts on hnakamur&#39;s blog</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 14 Feb 2025 15:48:05 +0900</lastBuildDate>
    <atom:link href="https://hnakamur.github.io/blog/post/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>ZFSを使っているUbuntuのIncus上でmacvlanを使ってFreeBSDの仮想マシンを動かす</title>
      <link>https://hnakamur.github.io/blog/2025/02/14/freebsd-vm-incus-macvlan/</link>
      <pubDate>Fri, 14 Feb 2025 15:48:05 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2025/02/14/freebsd-vm-incus-macvlan/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://agren.cc/p/freebsd-vm-incus/&#34;&gt;FreeBSD VM under Incus on Debian :: agren.cc&lt;/a&gt;を読んで試してみたメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://discuss.linuxcontainers.org/t/freebsd-instructions-do-not-work-anymore/20138&#34;&gt;FreeBSD instructions do not work anymore - Incus - Linux Containers Forum&lt;/a&gt;で紹介されているFreeBSDのインストーラーのISOイメージを使ってインストールする方式と異なり、FreeBSDで提供されているraw diskイメージを使って仮想マシン（以下VM (Virtual Machineの略)とします）を構築します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>otelcol-contribでClickHouseにOpenTelemetryのデータ投入を試してみた</title>
      <link>https://hnakamur.github.io/blog/2025/01/06/tried-otelcol-contrib-with-clickhouse/</link>
      <pubDate>Mon, 06 Jan 2025 21:11:06 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2025/01/06/tried-otelcol-contrib-with-clickhouse/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://nonylene.hatenablog.jp/entry/2024/12/09/010951&#34;&gt;ISUCON 14: ClickHouse と OpenTelemetry で ISUCON の計測環境を作ったら快適だった - Unyablog.&lt;/a&gt;の記事を見て、私もClickHouseにOpenTelemetryのデータを投入するのは気になっていたので試してみた、というメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Prometheusのexporterのメトリックをcarbon-clickhouseに登録する</title>
      <link>https://hnakamur.github.io/blog/2024/12/02/relay-prometheus-exporter-to-carbon-clickhouse/</link>
      <pubDate>Mon, 02 Dec 2024 14:22:25 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/12/02/relay-prometheus-exporter-to-carbon-clickhouse/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Prometheusのexporterのメトリックを&lt;a href=&#34;https://github.com/go-graphite/carbon-clickhouse&#34;&gt;carbon-clickhouse&lt;/a&gt;に登録しようとして調べてみた際のメモです。&#xA;実際に調べたのは、&lt;a href=&#34;https://github.com/prometheus/node_exporter&#34;&gt;prometheus/node_exporter: Exporter for machine metrics&lt;/a&gt;だけなので、他のexporterだと違うことがあるかもしれません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IncusのUbuntuコンテナでcloud-initを使ってIPv6を無効化</title>
      <link>https://hnakamur.github.io/blog/2024/11/17/incus-ubuntu-cloud-init-disable-ipv6/</link>
      <pubDate>Sun, 17 Nov 2024 17:51:14 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/11/17/incus-ubuntu-cloud-init-disable-ipv6/</guid>
      <description>&lt;h2 id=&#34;手順&#34;&gt;手順&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;incus launch images:ubuntu/24.04/cloud &amp;#34;$container_name&amp;#34; \&#xA;  -c user.network-config=&amp;#34;#cloud-config&#xA;network:&#xA;  version: 2&#xA;  ethernets:&#xA;    eth0:&#xA;      dhcp4: true&#xA;      dhcp-identifier: mac&#xA;      link-local: [ ipv4 ]&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;メモ&#34;&gt;メモ&lt;/h2&gt;&#xA;&lt;h3 id=&#34;試したけど良くなかった方法&#34;&gt;試したけど良くなかった方法&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://discuss.linuxcontainers.org/t/disable-ipv6-address-on-certain-containers/21485/6&#34;&gt;Disable IPv6 address on certain containers - Incus - Linux Containers Forum&lt;/a&gt;で&lt;code&gt;ipv6.address&lt;/code&gt;を&lt;code&gt;none&lt;/code&gt;にしたネットワークを作って、コンテナ作成時にそのネットワークを指定するという方法があり試してみました。&#xA;しかしリンクローカルのIPv6アドレスがついてしまいました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでetcdを使ったシンプルなジョブキューを実装してみた</title>
      <link>https://hnakamur.github.io/blog/2024/11/06/simple-job-queue-using-go-and-etcd/</link>
      <pubDate>Wed, 06 Nov 2024 12:52:43 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/11/06/simple-job-queue-using-go-and-etcd/</guid>
      <description>&lt;h2 id=&#34;背景これまではpostgresqlのselect-for-update-skip-lockedを使っていました&#34;&gt;背景：これまではPostgreSQLのSELECT FOR UPDATE SKIP LOCKEDを使っていました&lt;/h2&gt;&#xA;&lt;p&gt;ジョブキュー用のデーブルで状態のカラムが処理待ちの行を&lt;code&gt;SELECT FOR UPDATE SKIP LOCKED&lt;/code&gt;に&lt;code&gt;LIMIT 1&lt;/code&gt;をつけて1行取得し、その後&lt;code&gt;UPDATE&lt;/code&gt;文でそのレコードの状態のカラムを処理中に変更して、&#xA;ジョブの処理を開始します。&#xA;で、処理が終わったらジョブキュー用のテーブルから対象のレコードを削除するという感じです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Traffic Serverで400 Bad Reqeuestエラーが出る問題</title>
      <link>https://hnakamur.github.io/blog/2024/08/31/ats-bad-request-issue/</link>
      <pubDate>Sat, 31 Aug 2024 23:18:22 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/08/31/ats-bad-request-issue/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;upstreamをnginxとしてApache Traffic Serverをリバースプロキシとして使う場合に、コンテンツありのリクエストを多数送ると、upstreamのnginxで400 Bad Requestが出る場合があるという問題があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>freenginxでAgeヘッダーの扱いが改善されました</title>
      <link>https://hnakamur.github.io/blog/2024/07/22/freenginx-proxy-cache-age/</link>
      <pubDate>Mon, 22 Jul 2024 17:59:56 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/07/22/freenginx-proxy-cache-age/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://nginx.org/&#34;&gt;nginx&lt;/a&gt;とそのフォークの&lt;a href=&#34;https://freenginx.org/&#34;&gt;freenginx&lt;/a&gt;は&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc9111#name-age&#34;&gt;Age&lt;/a&gt;レスポンスヘッダーの値を一切更新しないという挙動になっていましたが、freenginxではそれが改善されたという話です。&lt;/p&gt;&#xA;&lt;p&gt;ただし、コミットはされましたがリリースはまだです。おそらく次のリリースに含まれると思います。&lt;/p&gt;&#xA;&lt;h2 id=&#34;過去&#34;&gt;過去&lt;/h2&gt;&#xA;&lt;p&gt;2012年に&lt;a href=&#34;https://trac.nginx.org/nginx/ticket/146&#34;&gt;#146 (Age header for proxy_http_version 1.1) – nginx&lt;/a&gt;というイシューは作られていましたが、対応されないままになっていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>さくらのVPSでUbuntu 24.04をLUKSでディスク暗号化ありでインストール</title>
      <link>https://hnakamur.github.io/blog/2024/07/14/install-ubuntu24.04-with-luks-on-sakura-vps/</link>
      <pubDate>Sun, 14 Jul 2024 11:25:52 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/07/14/install-ubuntu24.04-with-luks-on-sakura-vps/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;さくらのVPSでUbuntu 24.04をLUKSでディスク暗号化ありでインストールしたときのメモです。&#xA;もっと良いやり方があるかもしれませんが、とりあえずこれでできたという手順を書いています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vue.jsのアプリ開発でローカルの依存ライブラリを参照してデバッグログを追加する手順</title>
      <link>https://hnakamur.github.io/blog/2024/07/05/use-local-dependency-with-vite/</link>
      <pubDate>Fri, 05 Jul 2024 17:28:33 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/07/05/use-local-dependency-with-vite/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://vuejs.org/&#34;&gt;Vue.js&lt;/a&gt;と&lt;a href=&#34;https://vee-validate.logaretm.com/v4/&#34;&gt;VeeValidate V4&lt;/a&gt;でアプリケーションを書いているときに、VeeValidateにデバッグログを追加して挙動を調査したときの手順をメモ。&#xA;例によって、真っ当な方法かは不明です。とりあえずこれでやりたいことはできました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>多段HTTPプロキシでのAgeヘッダ</title>
      <link>https://hnakamur.github.io/blog/2024/06/17/age-header-in-multi-hop-proxy/</link>
      <pubDate>Mon, 17 Jun 2024 21:19:26 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/06/17/age-header-in-multi-hop-proxy/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc9111&#34;&gt;RFC 9111: HTTP Caching&lt;/a&gt;の&lt;a href=&#34;https://www.rfc-editor.org/rfc/rfc9111#name-calculating-age&#34;&gt;4.2.3. Calculating Age&lt;/a&gt;ではAgeの計算式は以下のように定義されています。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;A response&amp;#39;s age can be calculated in two entirely independent ways:&#xA;&#xA;the &amp;#34;apparent_age&amp;#34;: response_time minus date_value, if the implementation&amp;#39;s clock is reasonably well synchronized to the origin server&amp;#39;s clock. If the result is negative, the result is replaced by zero.&#xA;&#xA;the &amp;#34;corrected_age_value&amp;#34;, if all of the caches along the response path implement HTTP/1.1 or greater. A cache MUST interpret this value relative to the time the request was initiated, not the time that the response was received.&#xA;&#xA;  apparent_age = max(0, response_time - date_value);&#xA;&#xA;  response_delay = response_time - request_time;&#xA;  corrected_age_value = age_value + response_delay;&#xA;&#xA;The corrected_age_value MAY be used as the corrected_initial_age. In circumstances where very old cache implementations that might not correctly insert Age are present, corrected_initial_age can be calculated more conservatively as&#xA;&#xA;  corrected_initial_age = max(apparent_age, corrected_age_value);&#xA;&#xA;The current_age of a stored response can then be calculated by adding the time (in seconds) since the stored response was last validated by the origin server to the corrected_initial_age.&#xA;&#xA;  resident_time = now - response_time;&#xA;  current_age = corrected_initial_age + resident_time;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;nginxでAgeヘッダをこの仕様に沿って更新するようにパッチを作った後、テストをしているうちにいろいろ気付いたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IncusのDebian 12コンテナでpingが遅かったのをsystemd-resolvedのLLMNRを無効にしたら解決</title>
      <link>https://hnakamur.github.io/blog/2024/04/29/disable-systemd-resolved-llmnr-to-fix-slow-ping-on-incus-debian12-container/</link>
      <pubDate>Mon, 29 Apr 2024 16:13:56 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/04/29/disable-systemd-resolved-llmnr-to-fix-slow-ping-on-incus-debian12-container/</guid>
      <description>&lt;h2 id=&#34;incusのdebian-12コンテナでpingが遅かった&#34;&gt;IncusのDebian 12コンテナでpingが遅かった&lt;/h2&gt;&#xA;&lt;p&gt;以下のようにpingが出力する行の&lt;code&gt;time=&lt;/code&gt;の値は遅くないのですが、&#xA;各行を出力する間隔が非常に遅い状態でした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ModSecurityについて調べた</title>
      <link>https://hnakamur.github.io/blog/2024/02/10/modsecurity/</link>
      <pubDate>Sat, 10 Feb 2024 08:45:09 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2024/02/10/modsecurity/</guid>
      <description>&lt;h2 id=&#34;レポジトリ&#34;&gt;レポジトリ&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/owasp-modsecurity/ModSecurity&#34;&gt;owasp-modsecurity/ModSecurity: ModSecurity is an open source, cross platform web application firewall (WAF) engine for Apache, IIS and Nginx that is developed by Trustwave&amp;rsquo;s SpiderLabs. It has a robust event-based programming language which provides protection from a range of attacks against web applications and allows for HTTP traffic monitoring, logging and real-time analysis. With over 10,000 deployments world-wide, ModSecurity is the most widely deployed WAF in existence.&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;C++, Apache 2.0ライセンス&lt;/li&gt;&#xA;&lt;li&gt;What is the difference between this project and the old ModSecurity (v2.x.x)? の項によるとv3のlibmodsecurityはApache依存のv2とは異なりApache非依存のライブラリ&lt;/li&gt;&#xA;&lt;li&gt;下のBindingsにPythonとVarnishのバインディングが書かれている。nginx用に&lt;a href=&#34;https://github.com/owasp-modsecurity/ModSecurity-nginx&#34;&gt;owasp-modsecurity/ModSecurity-nginx: ModSecurity v3 Nginx Connector&lt;/a&gt;、Apache用に&lt;a href=&#34;https://github.com/owasp-modsecurity/ModSecurity-apache&#34;&gt;owasp-modsecurity/ModSecurity-apache: ModSecurity v3 Apache Connector&lt;/a&gt;がある。&lt;/li&gt;&#xA;&lt;li&gt;READMEにあるコード例は古いようだ。実際のヘッダファイルTransactionクラスのprocessConnectionメソッドのシグネチャは&lt;a href=&#34;https://github.com/owasp-modsecurity/ModSecurity/blob/v3.0.12/headers/modsecurity/transaction.h#L342-L343&#34;&gt;int processConnection(const char *client, int cPort,&#xA;const char *server, int sPort)&lt;/a&gt;となっている。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://twitter.com/ivanristic&#34;&gt;Ivan Ristic（@ivanristic）さん / X&lt;/a&gt;のプロフィールに Chief Scientist at Red Sift. Founder of Hardenize and author of Bulletproof TLS and PKI. Previously, founder of SSL Labs and ModSecurity. とある。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;2024-01にtrustwaveからowaspへ移管された&#34;&gt;2024-01にTrustwaveからOWASPへ移管された&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.modsecurity.org/&#34;&gt;https://www.modsecurity.org/&lt;/a&gt; に2024-01-25にそれまでModSecurityの開発とサポートをしていたTrustwaveからOWASPに移管した旨が書かれいてる。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://owasp.org/blog/2024/01/09/ModSecurity.html&#34;&gt;Trustwave Transfers ModSecurity Custodianship to OWASP | OWASP Foundation&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;移管前からCore Rule SetはOWASPが管理していたとのこと。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://en.wikipedia.org/wiki/OWASP&#34;&gt;OWASP - Wikipedia&lt;/a&gt;によると Open Worldwide Application Security Project の略。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;core-rule-set-crs&#34;&gt;Core Rule Set (CRS)&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://coreruleset.org/&#34;&gt;OWASP ModSecurity Core Rule Set – The 1st Line of Defense Against Web Application Attacks&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;レポジトリ：&lt;a href=&#34;https://github.com/coreruleset/coreruleset/&#34;&gt;coreruleset/coreruleset: OWASP ModSecurity Core Rule Set (Official Repository)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;Xのアカウント：&lt;a href=&#34;https://twitter.com/CoreRuleSet&#34;&gt;Core Rule Set（@CoreRuleSet）さん / X&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://twitter.com/ModSecurity/status/1755974502113046555&#34;&gt;XユーザーのModSecurityさん: 「Congratulations on version 3.1.0 @corazaio!」 / X&lt;/a&gt;で知ったが、&lt;a href=&#34;https://github.com/corazawaf/coraza&#34;&gt;corazawaf/coraza: OWASP Coraza WAF is a golang modsecurity compatible web application firewall library&lt;/a&gt;というのもある。Go製、Apache 2.0ライセンス、OWASP Core Rule Set v4と100%互換性ありとのこと。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;cve-2024-1019の脆弱性&#34;&gt;CVE-2024-1019の脆弱性&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://nvd.nist.gov/vuln/detail/CVE-2024-1019?ref=blog.sicuranext.com&#34;&gt;NVD - CVE-2024-1019&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://blog.sicuranext.com/modsecurity-path-confusion-bugs-bypass/&#34;&gt;ModSecurity: Path Confusion and really easy bypass on v2 and v3&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://twitter.com/ModSecurity/status/1752372749824045547&#34;&gt;Xで@ModSecurityの2024-01-31のポスト&lt;/a&gt;によるとバージョン3.0.12で修正。これがOWASP移管後の初リリースとのこと。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;debian-12のmodsecurity関連パッケージ&#34;&gt;Debian 12のModSecurity関連パッケージ&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://packages.debian.org/search?keywords=modsecurity&amp;amp;searchon=names&amp;amp;suite=bookworm&amp;amp;section=all&#34;&gt;modsecurity を名前に含むパッケージを、bookworm スイート、すべてのセクション、すべてのアーキテクチャで検索&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;libmodsecurity-dev 3.0.9-1+deb12u1: ModSecurity v3 library component (development files)&lt;/li&gt;&#xA;&lt;li&gt;libmodsecurity3 3.0.9-1+deb12u1: ModSecurity v3 library component&lt;/li&gt;&#xA;&lt;li&gt;libnginx-mod-http-modsecurity 1.0.3-1+b2: WAF module for Nginx&lt;/li&gt;&#xA;&lt;li&gt;modsecurity-crs 3.3.4-1: OWASP ModSecurity Core Rule Set&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;参考記事&#34;&gt;参考記事&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://siteguard.jp-secure.com/blog/what-is-oss-modsecurity&#34;&gt;ModSecurityとは？オープンソースWAFのメリット・デメリットを解説 | WebセキュリティのEGセキュアソリューションズ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>Embeddableなkey value storeについてのメモ</title>
      <link>https://hnakamur.github.io/blog/2023/07/01/embeddable-key-value-stores/</link>
      <pubDate>Sat, 01 Jul 2023 14:28:11 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/07/01/embeddable-key-value-stores/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;書き込みも読み取りも低遅延なキーバリューストアが欲しいということで調べてみたメモです。ただし、このメモに書いたキーバリューストアがそうであるかは不明です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LMDBをGoとnginxとtrafficserver上のLuaJITから使ってみた</title>
      <link>https://hnakamur.github.io/blog/2023/04/03/use-lmdb-from-go-and-luajit-on-nginx-and-trafficserver/</link>
      <pubDate>Mon, 03 Apr 2023 21:21:25 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/04/03/use-lmdb-from-go-and-luajit-on-nginx-and-trafficserver/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/2023/01/01/ats-ngx-lua-shdict/#%E3%83%99%E3%83%BC%E3%82%B9%E3%82%A2%E3%83%89%E3%83%AC%E3%82%B9%E3%81%8B%E3%82%89%E3%81%AE%E3%82%AA%E3%83%95%E3%82%BB%E3%83%83%E3%83%88%E3%82%92%E6%9B%B8%E3%81%8F%E3%82%88%E3%81%86%E3%81%AB%E6%94%B9%E5%A4%89%E3%81%97%E3%81%A6%E5%AF%BE%E5%BF%9C&#34;&gt;Apache Traffic Serverとnginxで使えるLuaJIT用shared dictを作ってみた · hnakamur&amp;rsquo;s blog&lt;/a&gt;ものの、実際には使わないままでした。&lt;/p&gt;&#xA;&lt;h2 id=&#34;lmdb&#34;&gt;LMDB&lt;/h2&gt;&#xA;&lt;p&gt;その後、ライブラリとして使えるキーバリューストアを調べて&lt;a href=&#34;https://www.symas.com/lmdb&#34;&gt;LMDB (Lightning Memory-Mapped Database)&lt;/a&gt;にたどり着きました。&#xA;説明を読むとOpenLDAP用に開発されたとのことですが、&lt;a href=&#34;https://www.symas.com/symas-lmdb-tech-info&#34;&gt;Symas LMDB Tech Info&lt;/a&gt;の Other Projects を見ると他にも多数のプロジェクトから利用されています。&#xA;&lt;a href=&#34;https://www.openldap.org/software/repo.html&#34;&gt;OpenLDAP, Source Repository&lt;/a&gt;にリポジトリのリンクがあり、GitHubにも読み取り専用の&lt;a href=&#34;https://github.com/LMDB/lmdb&#34;&gt;ミラー&lt;/a&gt;があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでHTTPの通信をキャプチャーするライブラリを書いた</title>
      <link>https://hnakamur.github.io/blog/2023/02/23/http-capture-library-in-go/</link>
      <pubDate>Thu, 23 Feb 2023 18:04:15 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/02/23/http-capture-library-in-go/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://trafficserver.apache.org/&#34;&gt;Apache Traffic Server&lt;/a&gt;の挙動を調べるときに、tcpdumpでパケットをキャプチャすることがあります。&#xA;アクセスログを見るだけだと、upstreamへのアクセスが失敗してリトライするようなケースでもログは1件しか出ないのですが、パケットのログを見れば全てのHTTPリクエストとレスポンスが見られて便利です。&#xA;私は以下のようなスクリプトを使っています(対象のポートは適宜調整)。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PCGと乱数生成について調べた</title>
      <link>https://hnakamur.github.io/blog/2023/02/06/pcg32-random/</link>
      <pubDate>Mon, 06 Feb 2023 23:11:11 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/02/06/pcg32-random/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;テストでランダムな入力値を生成するのにどういうアルゴリズムを使うのが良いのかと調べていたのですが、&#xA;今回いろいろ知ったのでメモです。Goだとmath/randパッケージを使っておけば良いのですが、C言語だと下記のリンク先からコードをコピペ改変して使うのが良さそうです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Neluaを試してみた</title>
      <link>https://hnakamur.github.io/blog/2023/01/27/tried-nelua/</link>
      <pubDate>Fri, 27 Jan 2023 17:31:37 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/01/27/tried-nelua/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2022/12/28/tried-tarai-benchmark-with-luajit/&#34;&gt;LuaJITでたらい回し関数のベンチマークを試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt;と&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2022/12/28/tried-luajit-remake/&#34;&gt;luajit-remakeを試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt;に続いて今度は&lt;a href=&#34;https://nelua.io/&#34;&gt;Nelua&lt;/a&gt;を試しました。&lt;/p&gt;&#xA;&lt;p&gt;NeluaはJITコンパイラではなく、事前にCにコンパイルするAOT (Ahead of Time)コンパイラです。&#xA;&lt;a href=&#34;https://nelua.io/faq/&#34;&gt;FAQ&lt;/a&gt;に&lt;a href=&#34;https://nelua.io/faq/#why-does-nelua-compile-to-c-first&#34;&gt;Why does Nelua compile to C first?&lt;/a&gt;という項がありました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Traffic Serverのautest.sh</title>
      <link>https://hnakamur.github.io/blog/2023/01/16/trafficserver-autest/</link>
      <pubDate>Mon, 16 Jan 2023 16:45:13 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/01/16/trafficserver-autest/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/apache/trafficserver/releases/tag/9.2.0-rc0&#34;&gt;trafficserver 9.2.0-rc0&lt;/a&gt;の&lt;a href=&#34;https://github.com/apache/trafficserver/tree/9.2.0-rc0/tests&#34;&gt;tests&lt;/a&gt;ディレクトリのautest.shを実行する際のメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://trafficserver.apache.org/&#34;&gt;Apache Traffic Server&lt;/a&gt;の&lt;a href=&#34;https://the-asf.slack.com/&#34;&gt;The ASF Slack&lt;/a&gt;で&lt;a href=&#34;https://github.com/masaori335&#34;&gt;masaori335&lt;/a&gt;さんにいろいろ教えていただきました。ありがとうございました！&lt;/p&gt;&#xA;&lt;p&gt;Docker上のUbuntu 22.04 LTSと20.04 LTSでautest.shを動かす手順を&#xA;&lt;a href=&#34;https://github.com/hnakamur/trafficserver-run-autest-docker&#34;&gt;GitHub - hnakamur/trafficserver-run-autest-docker&lt;/a&gt;&#xA;においています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AWS SigV4のCのライブラリを見つけた</title>
      <link>https://hnakamur.github.io/blog/2023/01/10/aws-sigv4-c-library/</link>
      <pubDate>Tue, 10 Jan 2023 22:44:43 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/01/10/aws-sigv4-c-library/</guid>
      <description>&lt;p&gt;AWS SigV4のCのライブラリを見つけたというメモです。&lt;/p&gt;&#xA;&lt;p&gt;レポジトリは&lt;a href=&#34;https://github.com/aws/SigV4-for-AWS-IoT-embedded-sdk&#34;&gt;aws/SigV4-for-AWS-IoT-embedded-sdk: AWS library to sign AWS HTTP requests with Signature Version 4 Signing Process.&lt;/a&gt;でorganizationがawsなので公式ライブラリです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Quantileについて調査してみた(途中)</title>
      <link>https://hnakamur.github.io/blog/2023/01/10/quantile/</link>
      <pubDate>Tue, 10 Jan 2023 21:39:28 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/01/10/quantile/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2023/01/03/fast-log2-for-uint64/&#34;&gt;uint64で高速にLog2を計算する方法を知った · hnakamur&amp;rsquo;s blog&lt;/a&gt;のあと、本題のQuantileについて調査したのでメモです。実はまだ途中なのですが、この後一旦他のことをするので現状をメモしておくということで。&lt;/p&gt;</description>
    </item>
    <item>
      <title>uint64で高速にLog2を計算する方法を知った</title>
      <link>https://hnakamur.github.io/blog/2023/01/03/fast-log2-for-uint64/</link>
      <pubDate>Tue, 03 Jan 2023 17:09:58 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/01/03/fast-log2-for-uint64/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/kazuho/status/1610109662346752002&#34;&gt;kazuhoさんのツイート&lt;/a&gt;とソースを見て、本題のパーセンタイル値をインクリメンタルに更新する方法の前に、&#xA;&lt;a href=&#34;https://github.com/h2o/h2o/blob/0f08b675c8244fc4552a93e9b35271ecf5e0f8fa/deps/libgkc/gkc.c#L109-L127&#34;&gt;&lt;code&gt;static uint64_t ullog2(uint64_t x)&lt;/code&gt;&lt;/a&gt;というuint64の整数のlog2を高速に計算する関数に興味がわいて調べてみたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;試したコードは&lt;a href=&#34;https://github.com/hnakamur/log2_experiment&#34;&gt;hnakamur/log2_experiment&lt;/a&gt;に置いてます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;2022-01-10追記-その後さらに更新しました&#34;&gt;2022-01-10追記 その後さらに更新しました&lt;/h2&gt;&#xA;&lt;p&gt;2022-01-04追記の説明、今から見ると自分でもよくわかりませんが、&lt;code&gt;x=0&lt;/code&gt;では呼ばないという前提で以下のように変えました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Traffic Serverとnginxで使えるLuaJIT用shared dictを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2023/01/01/ats-ngx-lua-shdict/</link>
      <pubDate>Sun, 01 Jan 2023 15:53:38 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2023/01/01/ats-ngx-lua-shdict/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;レポジトリは&lt;a href=&#34;https://github.com/hnakamur/ats-ngx-lua-shdict&#34;&gt;hnakamur/ats-ngx-lua-shdict&lt;/a&gt;です。&lt;/p&gt;&#xA;&lt;p&gt;作ってみたといっても、0から作り上げたわけではなく、nginxとlua-nginx-moduleの&lt;a href=&#34;https://github.com/openresty/lua-nginx-module#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;のソースをコピペして改変しただけです。私がLinuxでしか使う予定がないので、対象環境はLinuxのみです。&lt;/p&gt;&#xA;&lt;p&gt;コミットログを見ると去年の12月11日から作り始めていたので3週間かかっています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>luajit-remakeを試してみた</title>
      <link>https://hnakamur.github.io/blog/2022/12/28/tried-luajit-remake/</link>
      <pubDate>Wed, 28 Dec 2022 18:20:31 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/12/28/tried-luajit-remake/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2022/12/28/tried-tarai-benchmark-with-luajit/&#34;&gt;LuaJITでたらい回し関数のベンチマークを試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt;のついでに&lt;a href=&#34;https://github.com/luajit-remake/luajit-remake&#34;&gt;luajit-remake/luajit-remake: An ongoing attempt to re-engineer LuaJIT from scratch&lt;/a&gt;も試してみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ビルド&#34;&gt;ビルド&lt;/h2&gt;&#xA;&lt;p&gt;Dockerはインストール済みという前提で、以下のコマンドを実行すると、カレントディレクトリに&lt;code&gt;luajitr&lt;/code&gt;という実行ファイルが生成されます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LuaJITでたらい回し関数のベンチマークを試してみた</title>
      <link>https://hnakamur.github.io/blog/2022/12/28/tried-tarai-benchmark-with-luajit/</link>
      <pubDate>Wed, 28 Dec 2022 16:22:42 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/12/28/tried-tarai-benchmark-with-luajit/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sumim.hatenablog.com/entry/2022/09/08/173557&#34;&gt;Pythonが速度改善に本気出すと聞いたので恒例のたらい回しベンチをとってみたら、RubyがYJITですごく速くなっていて驚いた話 - Smalltalkのtは小文字です&lt;/a&gt;の記事を見ました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cybozushiki.cybozu.co.jp/articles/m000434.html&#34;&gt;ハッカーの遺言状──竹内郁雄の徒然苔第18回：問題児も悪くない | サイボウズ式&lt;/a&gt;には以下のように書かれていました。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;竹内関数ことタライ回し関数は、アッカーマン関数に比べればヒヨコのヒヨコだが、それでも十分に時間がかかる。それでいて、計算の途中で使うメモリはほんのちょっとしかない。上の例では途中に現れる数は -1 から 2n の間の整数だし、計算に必要なスタックの長さは n の数倍程度である。洗濯機の中のマイコンでも計算できる。つまり、ベンチマークとしては無差別級として使える問題だったのだ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Zabbixのデータベースのパーティショニングについて検索してみた</title>
      <link>https://hnakamur.github.io/blog/2022/12/18/zabbix-database-partitioning/</link>
      <pubDate>Sun, 18 Dec 2022 08:20:34 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/12/18/zabbix-database-partitioning/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Zabbixのデータベースのパーティショニングについて検索してみたメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;zabbixの長期サポート版&#34;&gt;Zabbixの長期サポート版&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.zabbix.com/life_cycle_and_release_policy&#34;&gt;Zabbix Life Cycle &amp;amp; Release Policy&lt;/a&gt;の表でバージョンの後にLTS (Long Term Support)とついているのが長期サポート版です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HAProxyのserver stateについてコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2022/12/15/haproxy-server-state/</link>
      <pubDate>Thu, 15 Dec 2022 19:52:54 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/12/15/haproxy-server-state/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;kazeburoさんの&lt;a href=&#34;https://twitter.com/kazeburo/status/1603243011038552064&#34;&gt;ツイート&lt;/a&gt;を見て興味が湧いたのでちょっと見てみました。なお私自身は普段HAProxy使ってないです。&lt;/p&gt;&#xA;&lt;p&gt;リーディング対象は &lt;a href=&#34;https://github.com/haproxy/haproxy/commit/c4913f6b54e8b323b9ecbd2a711b2cbf486afae0&#34;&gt;https://github.com/haproxy/haproxy/commit/c4913f6b54e8b323b9ecbd2a711b2cbf486afae0&lt;/a&gt; です。&lt;/p&gt;&#xA;&lt;p&gt;なお以下のコードの引用ではインデントが深い行は適宜調整しています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;コードリーディング&#34;&gt;コードリーディング&lt;/h2&gt;&#xA;&lt;p&gt;まず UP 1/3 の文字列を組み立てている箇所を探してみます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LuaJIT&#43;FFIで共有メモリを試してみた</title>
      <link>https://hnakamur.github.io/blog/2022/12/04/tried-shared-memory-in-luajit-and-ffi/</link>
      <pubDate>Sun, 04 Dec 2022 21:23:06 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/12/04/tried-shared-memory-in-luajit-and-ffi/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;openresty/lua-nginx-module&lt;/a&gt; の &lt;a href=&#34;https://github.com/openresty/lua-nginx-module#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt; のような仕組みが &lt;a href=&#34;https://github.com/apache/trafficserver&#34;&gt;Apache Traffic Server™&lt;/a&gt; の&#xA;&lt;a href=&#34;https://docs.trafficserver.apache.org/en/latest/admin-guide/plugins/lua.en.html&#34;&gt;Lua Plugin&lt;/a&gt; にも欲しいなあと以前から思っていました。&lt;/p&gt;&#xA;&lt;p&gt;私の場合は公式の &lt;a href=&#34;https://www.lua.org/&#34;&gt;Lua&lt;/a&gt; の実装ではなく &lt;a href=&#34;https://luajit.org/&#34;&gt;LuaJIT&lt;/a&gt; を使用していますので、複数の LuaJIT の VM でデータを共有して排他制御しつつ読み書きしたいというわけです。NGINX の場合はワーカーがマルチプロセス構成なのでプロセス間で参照できる共有メモリが必要です。Traffic Server の場合はシングルプロセス・マルチスレッドですが、可能なら同じサーバ上で稼働している NGINX とも共有したいという思いがあって、そうなるとやはりマルチプロセスとなります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PostgreSQLのレプリケーション関連の関数についてメモ</title>
      <link>https://hnakamur.github.io/blog/2022/11/28/postgresql-replication-functions/</link>
      <pubDate>Mon, 28 Nov 2022 21:25:10 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/11/28/postgresql-replication-functions/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gihyo.jp/dp/ebook/2022/978-4-297-13207-1&#34;&gt;［改訂3版］内部構造から学ぶPostgreSQL ―設計・運用計画の鉄則 | Gihyo Digital Publishing&lt;/a&gt; の「11.5.2：プライマリ／スタンバイの監視」を読んで知ったPostgreSQLのレプリケーション関連の関数についてコードリーディングしたメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PostgreSQL 15とrepmgrで自動フェイルオーバーを試してみた</title>
      <link>https://hnakamur.github.io/blog/2022/11/20/automatic-failover-with-postgresql-15-and-repmgr/</link>
      <pubDate>Sun, 20 Nov 2022 18:49:33 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/11/20/automatic-failover-with-postgresql-15-and-repmgr/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://repmgr.org/&#34;&gt;repmgr - Replication Manager for PostgreSQL clusters&lt;/a&gt; というのを最近知ったので PostgreSQL 15 との組み合わせで自動フェールオーバーを試してみたメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;試した環境&#34;&gt;試した環境&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LXD 5.6&lt;/li&gt;&#xA;&lt;li&gt;Ubuntu 22.04 LTS&lt;/li&gt;&#xA;&lt;li&gt;PostgreSQL 15&lt;/li&gt;&#xA;&lt;li&gt;repmgr 5.3.3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;構築手順メモ&#34;&gt;構築手順メモ&lt;/h2&gt;&#xA;&lt;p&gt;LXD で repmgr のプロジェクトを作って切り替えます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでGratious ARP (GARP)を送信と受信する</title>
      <link>https://hnakamur.github.io/blog/2022/11/19/send-and-receive-garp-with-go/</link>
      <pubDate>Sat, 19 Nov 2022 21:20:07 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/11/19/send-and-receive-garp-with-go/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;GARP については &lt;a href=&#34;https://ja.wikipedia.org/wiki/Gratuitous_ARP&#34;&gt;Gratuitous ARP - Wikipedia&lt;/a&gt; や &lt;a href=&#34;https://wiki.wireshark.org/Gratuitous_ARP&#34;&gt;Gratuitous_ARP&lt;/a&gt; 参照。&lt;/p&gt;&#xA;&lt;p&gt;2台のサーバからなる冗長構成でフェイルオーバーした際に、新しいプライマリサーバに仮想IPアドレス(Virtual IP; VIP)を追加してGARPを送信することで、他のサーバのARPテーブルを更新し仮想IPアドレスに対応するMACアドレスを新しいプライマリサーバのものに更新するという使い方があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>UbuntuのUSERとLOGNAME環境変数について調べてみた</title>
      <link>https://hnakamur.github.io/blog/2022/11/06/ubuntu-user-and-logname-environment-variables/</link>
      <pubDate>Sun, 06 Nov 2022 09:56:38 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/11/06/ubuntu-user-and-logname-environment-variables/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Linuxで現在のユーザ名の取得に &lt;code&gt;USER&lt;/code&gt; 環境変数を使っていたのですが、どこで設定されているのか調べたことがなかったので調べてみたメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;user-と-logname-は-login-コマンドが設定している&#34;&gt;USER と LOGNAME は login コマンドが設定している&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://unix.stackexchange.com/questions/76354/who-sets-user-and-username-environment-variables&#34;&gt;Who sets $USER and $USERNAME environment variables? - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt; の&lt;a href=&#34;https://unix.stackexchange.com/a/76356/135274&#34;&gt;回答&lt;/a&gt; によると Linux の &lt;a href=&#34;https://man7.org/linux/man-pages/man1/login.1.html&#34;&gt;man 1 login&lt;/a&gt; に以下の記載があるとのことでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>マイナンバーカードに含まれる2つの電子証明書について調べてみた</title>
      <link>https://hnakamur.github.io/blog/2022/11/01/certificates-in-my-number-card/</link>
      <pubDate>Tue, 01 Nov 2022 21:39:34 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/11/01/certificates-in-my-number-card/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;マイナンバーカードに含まれる2つの電子証明書について調べてみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;マイナンバーカードに含まれる2つの電子証明&#34;&gt;マイナンバーカードに含まれる2つの電子証明&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.soumu.go.jp/kojinbango_card/kojinninshou-01.html&#34;&gt;総務省｜マイナンバー制度とマイナンバーカード｜公的個人認証サービスによる電子証明書&lt;/a&gt; によるとマイナンバーカードには2つの電子証明書が含まれています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntuで日本語キーボードのCapsLockをControlに変更する</title>
      <link>https://hnakamur.github.io/blog/2022/09/19/change-capslock-to-control-for-ubuntu-japanese-keyboard/</link>
      <pubDate>Mon, 19 Sep 2022 10:25:42 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/09/19/change-capslock-to-control-for-ubuntu-japanese-keyboard/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;英語キーボードだけ使うようになって随分経つのですが、また日本語キーボードも併用できるようにしようと日本語キーボードも使い始めています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;英語キーボードでcapslockとcontrol入れ替え&#34;&gt;英語キーボードでCapsLockとControl入れ替え&lt;/h2&gt;&#xA;&lt;p&gt;英語キーボードのときは以下のように設定変更してCapsLockとControlと入れ替えていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 22.04でbtrfsとmainline kernelを試してみた</title>
      <link>https://hnakamur.github.io/blog/2022/08/14/try-ubuntu-22.04-btrfs-mainline-kernel/</link>
      <pubDate>Sun, 14 Aug 2022 12:29:56 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/08/14/try-ubuntu-22.04-btrfs-mainline-kernel/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2022/08/14/try-archlinux/&#34;&gt;Arch Linux を試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt; でとりあえずセットアップできることを確認したので、再度 Ubuntu をセットアップすることにしました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストーラをusbメモリに書き込み&#34;&gt;インストーラをUSBメモリに書き込み&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2022/04/22/setup-ubuntu-22.04/&#34;&gt;Ubuntu 22.04のセットアップメモ · hnakamur&amp;rsquo;s blog&lt;/a&gt; と同様に今回も &lt;a href=&#34;https://rufus.ie/en/&#34;&gt;Rufus - Create bootable USB drives the easy way&lt;/a&gt; のポータブル版 (バージョン 3.20p) を使いました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Arch Linux を試してみた</title>
      <link>https://hnakamur.github.io/blog/2022/08/14/try-archlinux/</link>
      <pubDate>Sun, 14 Aug 2022 02:03:26 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/08/14/try-archlinux/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu を入れていた 2台の ThinkCentre のうち1台に mainline のカーネルを入れてみたら、再起動後 zfs のモジュールが読み込めくてハマったので、この機会に前から気になってた Arch Linux を試してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GPGのプライマリーキーとサブキーを作成</title>
      <link>https://hnakamur.github.io/blog/2022/08/06/create-gpg-master-and-sub-keys/</link>
      <pubDate>Sat, 06 Aug 2022 19:49:49 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/08/06/create-gpg-master-and-sub-keys/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;以下の記事を参考にGPGのプライマリーキーとサブキーを作成してGitのコミットの署名をやってみたメモです。&#xA;脱線多めですが、自分用の記録ということで。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Targeted Cache Control のライブラリをC言語で書いた</title>
      <link>https://hnakamur.github.io/blog/2022/07/09/targeted-cache-control-impl/</link>
      <pubDate>Sat, 09 Jul 2022 22:38:40 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/07/09/targeted-cache-control-impl/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;C11 のような最近(と言っても2022年だと11年前ですが)のC言語の勉強を兼ねて &lt;a href=&#34;https://datatracker.ietf.org/doc/rfc8941/&#34;&gt;RFC 8941 - Structured Field Values for HTTP&lt;/a&gt; のライブラリを書いてみました。&#xA;さらに &lt;a href=&#34;https://datatracker.ietf.org/doc/rfc9213/&#34;&gt;RFC 9213 - Targeted HTTP Cache Control&lt;/a&gt; のフィールド値をパースする関数も書いてみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go言語でMultiErrorというのを考えてみたが微妙かも</title>
      <link>https://hnakamur.github.io/blog/2022/07/03/golang-multi-error/</link>
      <pubDate>Sun, 03 Jul 2022 10:40:10 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/07/03/golang-multi-error/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Go の標準ライブラリの &lt;a href=&#34;https://pkg.go.dev/database/sql@go1.18.3&#34;&gt;database/sql&lt;/a&gt; パッケージや&#xA;サードパーティライブラリの &lt;a href=&#34;https://pkg.go.dev/github.com/jmoiron/sqlx&#34;&gt;github.com/jmoiron/sqlx&lt;/a&gt; でトランザクションを使う際に、成功したらコミット、失敗したらロールバックというのを毎回書くのは面倒だし、書き漏れが出そうなので避けたいです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>snap 版 LXD が aa-exec: Permission denied でエラーの対処</title>
      <link>https://hnakamur.github.io/blog/2022/06/29/snap-lxd-aa-exec-permission-denied/</link>
      <pubDate>Wed, 29 Jun 2022 11:54:03 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/06/29/snap-lxd-aa-exec-permission-denied/</guid>
      <description>&lt;p&gt;snap で入れた LXD で &lt;code&gt;lxc list&lt;/code&gt; が &lt;code&gt;aa-exec: Permission denied&lt;/code&gt; というエラーになったときの対処のメモです。正確なエラーメッセージは以下のとおりです。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ lxc list&#xA;cat: /proc/self/attr/current: Permission denied&#xA;/snap/lxd/23155/commands/lxc: 6: exec: aa-exec: Permission denied&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://forum.snapcraft.io/t/snapped-lxd-has-stopped-working-aa-exec-permission-denied/2356&#34;&gt;Snapped LXD has stopped working - aa-exec: Permission denied - snap - snapcraft.io&lt;/a&gt; の &lt;a href=&#34;https://forum.snapcraft.io/t/snapped-lxd-has-stopped-working-aa-exec-permission-denied/2356/2&#34;&gt;最初のコメント&lt;/a&gt; の手順を実行したら解消しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDとDockerを同時利用するためにiptables設定を調整</title>
      <link>https://hnakamur.github.io/blog/2022/06/18/adjust-iptables-for-lxd-and-docker/</link>
      <pubDate>Sat, 18 Jun 2022 15:49:54 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/06/18/adjust-iptables-for-lxd-and-docker/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 22.04 LTS 上で snapcraft で入れた LXD 5.2 と Docker 公式パッケージの docker-ce 20.10.17 を入れているのですが、 LXD コンテナから &lt;code&gt;ping 8.8.8.8&lt;/code&gt; のように実行しても通信できないという症状が起きていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDコンテナ内でChromiumをビルド・実行してみた</title>
      <link>https://hnakamur.github.io/blog/2022/06/18/build-and-run-chromium-in-lxd-container/</link>
      <pubDate>Sat, 18 Jun 2022 14:52:08 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/06/18/build-and-run-chromium-in-lxd-container/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;背景は &lt;a href=&#34;https://twitter.com/hnakamur2/status/1537786550716489728&#34;&gt;https://twitter.com/hnakamur2/status/1537786550716489728&lt;/a&gt; のスレッドに書きましたが、こちらにも残しておきます。&lt;/p&gt;&#xA;&lt;p&gt;Chrome 拡張の API のコンテキストメニューをクリックしたときに呼ばれる onClick ハンドラの引数に渡される &lt;a href=&#34;https://developer.chrome.com/docs/extensions/reference/contextMenus/#type-OnClickData&#34;&gt;chrome.contextMenus.OnClickData&lt;/a&gt; に &lt;code&gt;linkUrl&lt;/code&gt; というプロパティがあるのですが &lt;code&gt;linkText&lt;/code&gt; は無いのでこれを追加したいということです（ちなみに Firefox の &lt;a href=&#34;https://developer.mozilla.org/en-US/docs/Mozilla/Add-ons/WebExtensions/API/menus/OnClickData&#34;&gt;menus.OnClickData - Mozilla | MDN&lt;/a&gt; には &lt;code&gt;linkText&lt;/code&gt; もあります）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PDFなどを買い切りの電子書籍ストア</title>
      <link>https://hnakamur.github.io/blog/2022/05/27/ebook-stores/</link>
      <pubDate>Fri, 27 May 2022 01:12:03 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/05/27/ebook-stores/</guid>
      <description>&lt;p&gt;PDFなどをダウンロードしてオフラインで読める買い切りの電子書籍ストアのメモです。&lt;/p&gt;&#xA;&lt;p&gt;一部自分のメールアドレスが電子書籍に印字されるソーシャルDRMつきのものもあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Litestreamのコードリーディングその2</title>
      <link>https://hnakamur.github.io/blog/2022/05/13/litestream-code-reading2/</link>
      <pubDate>Fri, 13 May 2022 14:48:24 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/05/13/litestream-code-reading2/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;対象バージョン&#xA;&lt;a href=&#34;https://github.com/benbjohnson/litestream/tree/e6f7c6052d84b7265fd54d3a3ab33208948e126b&#34;&gt;https://github.com/benbjohnson/litestream/tree/e6f7c6052d84b7265fd54d3a3ab33208948e126b&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;前回: &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2022/05/12/litestream-code-reading/&#34;&gt;Litestreamのコードリーディング&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;今回は upstream の URL を指定した場合の挙動関連。&lt;/p&gt;&#xA;&lt;h2 id=&#34;db-構造体&#34;&gt;DB 構造体&lt;/h2&gt;&#xA;&lt;p&gt;// DB represents a managed instance of a SQLite database in the file system.&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/benbjohnson/litestream/blob/e6f7c6052d84b7265fd54d3a3ab33208948e126b/db.go#L46-L125&#34;&gt;type DB struct&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h3 id=&#34;db-構造体の-streamclient-のコメント&#34;&gt;DB 構造体の StreamClient のコメント&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;&#x9;// Client used to receive live, upstream changes. If specified, then&#xA;&#x9;// DB should be used as read-only as local changes will conflict with&#xA;&#x9;// upstream changes.&#xA;&#x9;StreamClient StreamClient&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;&lt;a href=&#34;https://github.com/benbjohnson/litestream/blob/e6f7c6052d84b7265fd54d3a3ab33208948e126b/litestream.go#L595-L600&#34;&gt;StreamClient インタフェース&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Litestreamのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2022/05/12/litestream-code-reading/</link>
      <pubDate>Thu, 12 May 2022 18:18:49 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/05/12/litestream-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;対象バージョン&#xA;&lt;a href=&#34;https://github.com/benbjohnson/litestream/tree/e6f7c6052d84b7265fd54d3a3ab33208948e126b&#34;&gt;https://github.com/benbjohnson/litestream/tree/e6f7c6052d84b7265fd54d3a3ab33208948e126b&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;replicate と restore のコードを読んで見る。&#xA;順を追って全部書くのは大変なので気になったところだけメモ。&lt;/p&gt;&#xA;&lt;p&gt;次回: &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2022/05/13/litestream-code-reading2/&#34;&gt;Litestreamのコードリーディングその2&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;replicate-と-restore-のログ出力例&#34;&gt;replicate と restore のログ出力例&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ litestream replicate source.db file:///home/hnakamur/litestream-work/destination.db&#xA;litestream (development build)&#xA;initialized db: /home/hnakamur/litestream-work/source.db&#xA;replicating to: name=&amp;#34;file&amp;#34; type=&amp;#34;file&amp;#34; path=&amp;#34;/home/hnakamur/litestream-work/destination.db&amp;#34;&#xA;litestream initialization complete&#xA;/home/hnakamur/litestream-work/source.db: init: no wal files available, clearing generation&#xA;/home/hnakamur/litestream-work/source.db: init: no wal files available, clearing generation&#xA;/home/hnakamur/litestream-work/source.db: sync: new generation &amp;#34;40e9bff6b361ab2f&amp;#34;, no generation exists&#xA;/home/hnakamur/litestream-work/source.db(file): snapshot written 40e9bff6b361ab2f/0000000000000000&#xA;/home/hnakamur/litestream-work/source.db(file): wal segment written: 40e9bff6b361ab2f/00000000&#xA;00000000:0000000000000000 sz=16512&#xA;/home/hnakamur/litestream-work/source.db(file): wal segment written: 40e9bff6b361ab2f/0000000000000000:0000000000004080 sz=4120&#xA;/home/hnakamur/litestream-work/source.db(file): wal segment written: 40e9bff6b361ab2f/0000000000000000:0000000000005098 sz=4120&#xA;/home/hnakamur/litestream-work/source.db(file): wal segment written: 40e9bff6b361ab2f/0000000000000000:00000000000060b0 sz=4120&#xA;/home/hnakamur/litestream-work/source.db(file): wal segment written: 40e9bff6b361ab2f/0000000000000000:00000000000070c8 sz=4120&#xA;/home/hnakamur/litestream-work/source.db(file): wal segment written: 40e9bff6b361ab2f/0000000000000000:00000000000080e0 sz=4120&#xA;^Csignal received, litestream shutting down&#xA;/home/hnakamur/litestream-work/source.db: checkpoint(PASSIVE): [0,9,9]&#xA;/home/hnakamur/litestream-work/source.db(file): wal segment written: 40e9bff6b361ab2f/0000000000000001:0000000000000000 sz=4152&#xA;litestream shut down&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ litestream restore -o restored.db file:///home/hnakamur/litestream-work/destination.db&#xA;2022/05/12 18:10:26.394413 restoring snapshot 40e9bff6b361ab2f/0000000000000000 to restored.db.tmp&#xA;2022/05/12 18:10:26.404514 applied wal 40e9bff6b361ab2f/0000000000000000 elapsed=1.810673ms&#xA;2022/05/12 18:10:26.405770 applied wal 40e9bff6b361ab2f/0000000000000001 elapsed=1.237403ms&#xA;2022/05/12 18:10:26.405779 renaming database from temporary location&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;データベースのオープン周り&#34;&gt;データベースのオープン周り&lt;/h2&gt;&#xA;&lt;h3 id=&#34;litestream-sqlite3-というカスタムのsqlドライバ&#34;&gt;litestream-sqlite3 というカスタムのsqlドライバ&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/benbjohnson/litestream/blob/e6f7c6052d84b7265fd54d3a3ab33208948e126b/litestream.go#L60-L69&#34;&gt;litestream.go 内の init() 関数&lt;/a&gt; で litestream-sqlite3 という名前のドライバを sql.Register で登録している。接続時のフックで &lt;code&gt;conn.SetFileControlInt(&amp;quot;main&amp;quot;, sqlite3.SQLITE_FCNTL_PERSIST_WAL, 1)&lt;/code&gt; を呼んで WAL を閉じた後も消さないようにしている。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Axumでのアクセスログ出力の現状について調べてみた</title>
      <link>https://hnakamur.github.io/blog/2022/05/08/memo-about-axum-access-log/</link>
      <pubDate>Sun, 08 May 2022 22:10:35 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/05/08/memo-about-axum-access-log/</guid>
      <description>&lt;p&gt;Axumでのアクセスログ出力の現状について調べてみたのでメモです。&#xA;個人的には特にヘッダとボディ（新しい用語だとフィールドとコンテント）を合わせた転送量をログに書きたいというニーズがあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDでCentOS7の仮想マシンのネームサーバをcloud-initで設定</title>
      <link>https://hnakamur.github.io/blog/2022/04/24/lxd-centos7-vm-cloud-init/</link>
      <pubDate>Sun, 24 Apr 2022 09:05:35 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/04/24/lxd-centos7-vm-cloud-init/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 22.04 LTS はデフォルトで cgroup v2 を使っているので LXD で CentOS 7 のコンテナはそのままでは動きません。&#xA;一方、 CentOS 7 の仮想マシンはそのままではネームサーバが設定されなかったので cloud-init で設定する必要がありました。&#xA;ということで手順をメモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 22.04のセットアップメモ</title>
      <link>https://hnakamur.github.io/blog/2022/04/22/setup-ubuntu-22.04/</link>
      <pubDate>Fri, 22 Apr 2022 21:23:18 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2022/04/22/setup-ubuntu-22.04/</guid>
      <description>&lt;h2 id=&#34;ブート可能なusbメモリ作成&#34;&gt;ブート可能なUSBメモリ作成&lt;/h2&gt;&#xA;&lt;p&gt;今回は &lt;a href=&#34;https://phoenixnap.com/kb/ubuntu-22-04-lts&#34;&gt;How to Install Ubuntu 22.04 LTS Desktop (Jammy Jellyfish)&lt;/a&gt; の &amp;ldquo;Option 2: Make a Bootable USB Drive on Windows&amp;rdquo; の手順を参考にしました。&lt;/p&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://releases.ubuntu.com/22.04/&#34;&gt;Ubuntu 22.04 LTS (Jammy Jellyfish)&lt;/a&gt; から Desktop image をダウンロード。&lt;/li&gt;&#xA;&lt;li&gt;サイズが4GB以上のUSBメモリをPCに挿す。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://rufus.ie/en/&#34;&gt;Rufus - Create bootable USB drives the easy way&lt;/a&gt; の Portable 版をダウンロードして実行。&lt;/li&gt;&#xA;&lt;li&gt;以下のように選択して[スタート]ボタンを押して書き込み。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;[ブートの種類]の右のほうの[選択]ボタンを押して上でダウンロードしたイメージファイルを選択。&lt;/li&gt;&#xA;&lt;li&gt;[パーティション構成]は[MBR]、[ターゲットシステム]は[BIOSまたはUEFI]のまま。&lt;/li&gt;&#xA;&lt;li&gt;[ボリュームラベル]も自動入力される[Ubuntu 22.04 LTS amd64]のまま。&lt;/li&gt;&#xA;&lt;li&gt;[ファイルシステム]は[FAT32]、[クラスターサイズ]は[4096バイト(規定)]。&#xA;&lt;ul&gt;&#xA;&lt;li&gt;これは容量4GBのUSBメモリの場合。容量がもっと大きい場合は異なる可能性あり。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;p&gt;約18分とかなり時間がかかりましたが、書き込み完了後、USBメモリからインストーラを起動して無事インストールできました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Misc Cgroup を試そうと調べてみたけど手持ちのCPUが非対応でした</title>
      <link>https://hnakamur.github.io/blog/2021/11/27/failed-to-try-misc-cgroup/</link>
      <pubDate>Sat, 27 Nov 2021 21:56:08 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2021/11/27/failed-to-try-misc-cgroup/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/ten_forward/status/1464396509055635456&#34;&gt;https://twitter.com/ten_forward/status/1464396509055635456&lt;/a&gt;&#xA;のスレッドを見て Misc Cgroup を試してみようかと調べてみたけど手持ちのハードウェアは非対応で試せなかったというメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;misc-cgroup-についての調査メモ&#34;&gt;Misc Cgroup についての調査メモ&lt;/h2&gt;&#xA;&lt;p&gt;検索すると cgroup v1 のドキュメント &lt;a href=&#34;https://www.kernel.org/doc/html/latest/admin-guide/cgroup-v1/misc.html&#34;&gt;Misc controller — The Linux Kernel documentation&lt;/a&gt; がヒットしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>USBメモリを使ってThinkCentreのBIOSをアップデート</title>
      <link>https://hnakamur.github.io/blog/2021/11/27/update-thinkcentre-bios-using-usb-memory/</link>
      <pubDate>Sat, 27 Nov 2021 21:17:29 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2021/11/27/update-thinkcentre-bios-using-usb-memory/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;私物の ThinkPad P14s AMD Gen 2 は Windows で使っているので Lenovo Commercial Vantage で BIOS をアップデートしています。&#xA;ですが ThinkCentre M75q Tiny Gen2 のほうは Windows を消して Ubuntu Linux を入れているので別の方法でアップデートする必要があります。今回調べてアップデートしたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linuxのkernel TLSでnginxのSSL_sendfileを試してみた</title>
      <link>https://hnakamur.github.io/blog/2021/10/31/tried-linux-kernel-tls-nginx-sendfile/</link>
      <pubDate>Sun, 31 Oct 2021 01:10:06 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2021/10/31/tried-linux-kernel-tls-nginx-sendfile/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/04/29/tried-ssl_sendfile-with-openssl-and-nginx/&#34;&gt;OpenSSLのSSL_sendfileとパッチを当てたnginxでLinuxのkTLSを試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt; を書いてから1年半経って状況が変わっていたので再度試してみました。&lt;/p&gt;&#xA;&lt;p&gt;9日前に &lt;a href=&#34;https://github.com/nginx/nginx/commit/1fc61b7b1ff182e86078200a59d3c523419c7b3b&#34;&gt;SSL: SSL_sendfile() support with kernel TLS. · nginx/nginx@1fc61b7&lt;/a&gt; で Linux の kernel TLS を使って sendfile するコードが nginx に入っていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ハッシュ化された~/.ssh/known_hostsにエントリを追加・検索・削除する</title>
      <link>https://hnakamur.github.io/blog/2021/07/23/find_add_delete_entry_in_hashed_ssh_known_hosts/</link>
      <pubDate>Fri, 23 Jul 2021 09:53:07 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2021/07/23/find_add_delete_entry_in_hashed_ssh_known_hosts/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://zenn.dev/yoichi/articles/host-in-ssh-known-hosts&#34;&gt;~/.ssh/known_hostsのホスト名&lt;/a&gt; を読みました。ハッシュ化された &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; のフォーマットについて詳しく説明されていて良いですね。&lt;/p&gt;&#xA;&lt;p&gt;関連して私が LXD で複数コンテナ間で ssh するために &lt;code&gt;~/.ssh/known_hosts&lt;/code&gt; を自動構築している際に使っている手順をメモしておきます。実際はコンテナ作成を自動化するスクリプト内で呼び出していますが、この記事では各操作のコマンドを単独で説明します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ThinkPad P14s AMD Gen 2 のセットアップ</title>
      <link>https://hnakamur.github.io/blog/2021/07/04/setup-thinkpad-p14s-amd-gen2/</link>
      <pubDate>Sun, 04 Jul 2021 13:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2021/07/04/setup-thinkpad-p14s-amd-gen2/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;購入した ThinkPad P14s AMD Gen 2 が届いたのでセットアップのメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;構成&#34;&gt;構成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.lenovo.com/jp/ja/notebooks/thinkpad/p-series/P14s-AMD-G2/p/22WSP144SA2&#34;&gt;ThinkPad P14s AMD Gen 2 | レノボジャパン&lt;/a&gt;&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;構成内容: ThinkPad P14s Gen 2 AMD&lt;/li&gt;&#xA;&lt;li&gt;製品番号: 21A0CTO1WWJAJP3&lt;/li&gt;&#xA;&lt;li&gt;単価(税込): 134,618 円&lt;/li&gt;&#xA;&lt;li&gt;Configuration Details&#xA;&lt;ul&gt;&#xA;&lt;li&gt;AMD Ryzen 7 PRO 5850U (1.90GHz, 12MB)&lt;/li&gt;&#xA;&lt;li&gt;Windows 10 Pro 64bit - 日本語版&lt;/li&gt;&#xA;&lt;li&gt;16GB DDR4 3200MHz (オンボード)&lt;/li&gt;&#xA;&lt;li&gt;128GB ソリッドステートドライブ (M.2 2242, PCIe-NVMe)&lt;/li&gt;&#xA;&lt;li&gt;14.0型FHD液晶(1920x1080) IPS、400nit、72%NTSC、マルチタッチ非対応&lt;/li&gt;&#xA;&lt;li&gt;ブラック&lt;/li&gt;&#xA;&lt;li&gt;なし&lt;/li&gt;&#xA;&lt;li&gt;内蔵グラフィックス&lt;/li&gt;&#xA;&lt;li&gt;IR &amp;amp; 720p HDカメラ(マイクロホン付)&lt;/li&gt;&#xA;&lt;li&gt;指紋センサーあり (ブラック)&lt;/li&gt;&#xA;&lt;li&gt;英語キーボード&lt;/li&gt;&#xA;&lt;li&gt;Wi-Fi 6対応 (IEEE802.11ax/ac/a/b/g/n準拠) (2x2) +Bluetooth&lt;/li&gt;&#xA;&lt;li&gt;TPMあり(TCG V2.0準拠，ハードウェアチップ搭載)&lt;/li&gt;&#xA;&lt;li&gt;BIOS Absolute有効&lt;/li&gt;&#xA;&lt;li&gt;3セル リチウムイオンバッテリー (50Wh)&lt;/li&gt;&#xA;&lt;li&gt;65W ACアダプター (2ピン)(USB Type-C)&lt;/li&gt;&#xA;&lt;li&gt;14.0型FHD液晶(1920x1080)IPS、400nit、72%NTSC、マルチタッチ非対応、IR&amp;amp;720p HDカメラ、マイク、WLAN、WWAN非対応、FreeSync&lt;/li&gt;&#xA;&lt;li&gt;日本語&lt;/li&gt;&#xA;&lt;li&gt;なし&lt;/li&gt;&#xA;&lt;li&gt;1年間 引き取り修理&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;ramとssdは別途ヨドバシドットコムで購入&#34;&gt;RAMとSSDは別途ヨドバシ・ドット・コムで購入&lt;/h3&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RAM CT32G4SFD832A [32GB DDR4 3200 MT/s PC4-25600 CL22 DR x8 Unbuffered SODIMM 260pin]&#xA;&lt;ul&gt;&#xA;&lt;li&gt;単価(税込): 21,180 円&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;SSD WDS100T2B0C [バルクSSD WD SN550シリーズ 1TB]&#xA;&lt;ul&gt;&#xA;&lt;li&gt;単価(税込): 14,920 円&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;注文と発送&#34;&gt;注文と発送&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;2021-06-19 注文&lt;/li&gt;&#xA;&lt;li&gt;2021-06-28 発送&lt;/li&gt;&#xA;&lt;li&gt;2021-07-03 到着&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;windows-10-のプロダクトキー確認&#34;&gt;Windows 10 のプロダクトキー確認&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.quora.com/How-can-I-retrieve-my-Windows-10-product-key-from-my-Lenovos-and-HPs-laptop&#34;&gt;(1) How can I retrieve my Windows 10 product key from my Lenovo&amp;rsquo;s and HP&amp;rsquo;s laptop? - Quora&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntuで長期サポートのLinuxカーネルを使用する</title>
      <link>https://hnakamur.github.io/blog/2021/06/28/use-long-term-support-linux-kernel-on-ubuntu/</link>
      <pubDate>Mon, 28 Jun 2021 05:12:14 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2021/06/28/use-long-term-support-linux-kernel-on-ubuntu/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.kernel.org/category/releases.html&#34;&gt;The Linux Kernel Archives - Releases&lt;/a&gt; と &lt;a href=&#34;https://en.wikipedia.org/wiki/Linux_kernel_version_history&#34;&gt;Linux kernel version history - Wikipedia&lt;/a&gt; を見て Linux カーネルは長期サポート版とそうでない版があることを知りました。なるべくなら長期サポート版を使うほうが安心だなと思ったので切り替えることにしました。その際のメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoのHTTPリバースプロキシーでのchunkedレスポンス</title>
      <link>https://hnakamur.github.io/blog/2021/06/26/go-http-chunked-response-in-reverse-proxy/</link>
      <pubDate>Sat, 26 Jun 2021 16:55:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2021/06/26/go-http-chunked-response-in-reverse-proxy/</guid>
      <description>&lt;h2 id=&#34;httpサーバーのリクエストハンドラー内からの-chunked-出力&#34;&gt;HTTPサーバーのリクエストハンドラー内からの chunked 出力&lt;/h2&gt;&#xA;&lt;p&gt;まずはリバースプロキシー無しでHTTPサーバー単体での chunked 出力について調べました。&lt;/p&gt;&#xA;&lt;p&gt;そもそもどうやって Go の net/http パッケージで chunked なレスポンスを返すかですが、 &lt;a href=&#34;https://stackoverflow.com/a/30603654/1391518&#34;&gt;StackOverflow の回答&lt;/a&gt; にコードと telnet で受信したレスポンスのサンプルが紹介されていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>RustとRusotoを使ってさくらのクラウドのオブジェクトストレージAPIでオブジェクトを取得してみた</title>
      <link>https://hnakamur.github.io/blog/2021/02/11/get-object-from-sakura-object-storage-with-rust-and-rusoto/</link>
      <pubDate>Thu, 11 Feb 2021 09:52:45 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2021/02/11/get-object-from-sakura-object-storage-with-rust-and-rusoto/</guid>
      <description>&lt;h2 id=&#34;2021-06-26-追記&#34;&gt;2021-06-26 追記&lt;/h2&gt;&#xA;&lt;p&gt;2021-05-07 に &lt;a href=&#34;https://aws.amazon.com/blogs/developer/a-new-aws-sdk-for-rust-alpha-launch/&#34;&gt;A New AWS SDK for Rust – Alpha Launch | AWS Developer Tools Blog&lt;/a&gt; という記事が出て、今後は &lt;a href=&#34;https://github.com/awslabs/aws-sdk-rust&#34;&gt;awslabs/aws-sdk-rust&lt;/a&gt; に移行していくそうです。&lt;/p&gt;&#xA;&lt;p&gt;今日確認したところでは&#xA;&lt;a href=&#34;https://github.com/rusoto/rusoto&#34;&gt;rusoto/rusoto: AWS SDK for Rust&lt;/a&gt; の README に Rusoto is in maintenance mode. と書かれていました。&#xA;一方、 &lt;a href=&#34;https://github.com/awslabs/aws-sdk-rust&#34;&gt;awslabs/aws-sdk-rust&lt;/a&gt; のほうは&#xA;Please Note: The SDK is currently released as an alpha and is intended strictly for feedback purposes only. Do not use this SDK for production workloads.&#xA;と書かれていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>theftを使ってC言語で property based testing を試してみた</title>
      <link>https://hnakamur.github.io/blog/2021/01/03/property-based-testing-in-c-with-theft/</link>
      <pubDate>Sun, 03 Jan 2021 17:49:10 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2021/01/03/property-based-testing-in-c-with-theft/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;これまで私は Go 言語では &lt;a href=&#34;https://github.com/flyingmutant/rapid&#34;&gt;flyingmutant/rapid&lt;/a&gt; (&lt;a href=&#34;https://github.com/hnakamur/property-based-test-example&#34;&gt;例&lt;/a&gt;)、 C++ では&#xA;&lt;a href=&#34;https://github.com/emil-e/rapidcheck&#34;&gt;emil-e/rapidcheck&lt;/a&gt; (&lt;a href=&#34;https://github.com/hnakamur/rapidcheck-experiment&#34;&gt;例&lt;/a&gt;) を使って property based testing を試してみました。&lt;/p&gt;&#xA;&lt;p&gt;先日 &lt;a href=&#34;https://hypothesis.works/articles/quickcheck-in-every-language/&#34;&gt;QuickCheck in Every Language - Hypothesis&lt;/a&gt; で C言語用にも &lt;a href=&#34;https://github.com/silentbicycle/theft&#34;&gt;silentbicycle/theft&lt;/a&gt; というライブラリーがあることを知ったので試してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 20.10 で apt-key add が deprecated になっていたので代替スクリプトを書いた</title>
      <link>https://hnakamur.github.io/blog/2020/12/10/alternative-script-for-apt-key-add/</link>
      <pubDate>Thu, 10 Dec 2020 22:37:26 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/12/10/alternative-script-for-apt-key-add/</guid>
      <description>&lt;h2 id=&#34;2022-05-17-追記別のスクリプトを書きました&#34;&gt;2022-05-17 追記：別のスクリプトを書きました&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/setup-my-ubuntu-desktop/blob/main/my-apt-add-repository&#34;&gt;https://github.com/hnakamur/setup-my-ubuntu-desktop/blob/main/my-apt-add-repository&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;事前に gpg, coreutils パッケージがインストールされている必要があります。&lt;/p&gt;&#xA;&lt;p&gt;使用例&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;curl -sS &amp;#39;https://keyserver.ubuntu.com/pks/lookup?op=get&amp;amp;search=0x532a4a026239fc3baeb7869c60d954a11017341e&amp;#39; | my-apt-key-add - hnakamur-ubuntu-nginx-jammy&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;2021-07-21-追記このスクリプトは使わないでください&#34;&gt;2021-07-21 追記：このスクリプトは使わないでください&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gihyo.jp/admin/serial/01/ubuntu-recipe/0675&#34;&gt;第675回　apt-keyはなぜ廃止予定となったのか：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社&lt;/a&gt;&#xA;によると&#xA;&lt;code&gt;/etc/apt/trusted.gpg.d/&lt;/code&gt; にファイルを作るのはリスク管理として完全な対応ではなく、Debian Wiki では禁止(MUST NOT)との記載があるとのことです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Bazel で試行錯誤したときのメモ</title>
      <link>https://hnakamur.github.io/blog/2020/11/28/my-trial-and-error-on-bazel/</link>
      <pubDate>Sat, 28 Nov 2020 22:32:54 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/11/28/my-trial-and-error-on-bazel/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/envoyproxy/envoy&#34;&gt;envoyproxy/envoy: Cloud-native high-performance edge/middle/service proxy&lt;/a&gt; がビルドツールとして&#xA;&lt;a href=&#34;https://www.bazel.build/&#34;&gt;Bazel - a fast, scalable, multi-language and extensible build system&amp;quot; - Bazel&lt;/a&gt; を使っているので少し慣れておこうと2日ぐらい試行錯誤してみたメモです。&lt;/p&gt;&#xA;&lt;p&gt;具体的には&#xA;&lt;a href=&#34;https://cor3ntin.github.io/posts/iouring/&#34;&gt;A Universal I/O Abstraction for C++ | cor3ntin&lt;/a&gt;&#xA;で紹介されている&#xA;&lt;a href=&#34;https://github.com/facebookexperimental/libunifex&#34;&gt;facebookexperimental/libunifex: Unified Executors&lt;/a&gt; のサンプルのビルドを試しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>psgreptree というコマンドラインツールを Rust で書いた</title>
      <link>https://hnakamur.github.io/blog/2020/09/22/wrote-psgreptree-in-rust/</link>
      <pubDate>Tue, 22 Sep 2020 18:47:59 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/09/22/wrote-psgreptree-in-rust/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;私は仕事で Ubuntu の物理サーバーに ssh して&#xA;&lt;code&gt;LC_TIME=C ps auxwwf | grep [n]ginx&lt;/code&gt; とか &lt;code&gt;LC_TIME=C ps auxwwf | grep -E &#39;(nginx|traffic)&#39; | grep -v grep&lt;/code&gt; のようなコマンドを実行することがよくあります。&lt;/p&gt;&#xA;&lt;p&gt;しかし、ヘッダー行が出ない（grepのパターンに &lt;code&gt;^USER&lt;/code&gt; を追加すれば出せますが）とか、 grep 自体を出力させない小技が面倒という問題がありました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows10上のGlobalProtectでVPN接続後にプログラムを最上位の特権で実行する</title>
      <link>https://hnakamur.github.io/blog/2020/08/14/run-program-with-highest-runlevel-when-globalprotect-vpn-connected-on-windows10/</link>
      <pubDate>Fri, 14 Aug 2020 11:16:18 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/08/14/run-program-with-highest-runlevel-when-globalprotect-vpn-connected-on-windows10/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;勤務先で共有されているVPN用のルート追加プログラムがあるのですが、&#xA;今まではショートカットを作ってGlobalProtectでVPN接続後に手動で実行していました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rustで書かれたUIツールキットdruid 0.6.0を試した</title>
      <link>https://hnakamur.github.io/blog/2020/08/13/tried-rust-ui-toolkit-druid-0.6.0/</link>
      <pubDate>Thu, 13 Aug 2020 19:07:20 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/08/13/tried-rust-ui-toolkit-druid-0.6.0/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/08/10/tried-rust-ui-toolkit-orbtk-0.3.1-alpha2/&#34;&gt;Rust で書かれた UI Toolkit の OrbTk 0.3.1-alpha2 を試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt; の「おわりに」に書いたツールキットのうちgtk-rsとicedは試して&#xA;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/08/10/tried-gtk-rs-0.9.0/&#34;&gt;gtk-rs 0.9.0を試した · hnakamur&amp;rsquo;s blog&lt;/a&gt;と&#xA;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/08/11/tried-rust-gui-library-iced/&#34;&gt;Rustで書かれたGUIライブラリーのicedを試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt;に書きました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rustで書かれたGUIライブラリーのicedを試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/08/11/tried-rust-gui-library-iced/</link>
      <pubDate>Tue, 11 Aug 2020 22:11:09 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/08/11/tried-rust-gui-library-iced/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/08/10/tried-rust-ui-toolkit-orbtk-0.3.1-alpha2/&#34;&gt;Rust で書かれた UI Toolkit の OrbTk 0.3.1-alpha2 を試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt; の最後に書いていた&#xA;&lt;a href=&#34;https://github.com/hecrj/iced&#34;&gt;hecrj/iced: A cross-platform GUI library for Rust, inspired by Elm&lt;/a&gt;&#xA;も試してみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;todo-サンプルアプリケーションを試す手順&#34;&gt;ToDo サンプルアプリケーションを試す手順&lt;/h2&gt;&#xA;&lt;p&gt;git clone でレポジトリ取って来てそこに移動。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gtk-rs 0.9.0を試した</title>
      <link>https://hnakamur.github.io/blog/2020/08/10/tried-gtk-rs-0.9.0/</link>
      <pubDate>Mon, 10 Aug 2020 14:45:42 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/08/10/tried-gtk-rs-0.9.0/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gtk-rs/gtk&#34;&gt;gtk-rs/gtk: GTK+ 3.x bindings and wrappers for Rust&lt;/a&gt; 0.9.0 を試したメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://rustup.rs/&#34;&gt;rustup.rs - The Rust toolchain installer&lt;/a&gt;&#xA;はインストールしてセットアップ済みとします。&lt;/p&gt;&#xA;&lt;h2 id=&#34;windows-10&#34;&gt;Windows 10&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/gtk-rs/gtk#building&#34;&gt;Building&lt;/a&gt; から&#xA;&lt;a href=&#34;http://gtk-rs.org/docs/requirements.html&#34;&gt;Requirements&lt;/a&gt; を開いて&#xA;Windows のセクションを参考に MSYS2 と GTK をインストールしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Rust で書かれた UI Toolkit の OrbTk 0.3.1-alpha2 を試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/08/10/tried-rust-ui-toolkit-orbtk-0.3.1-alpha2/</link>
      <pubDate>Mon, 10 Aug 2020 07:58:44 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/08/10/tried-rust-ui-toolkit-orbtk-0.3.1-alpha2/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Rust の GUI ライブラリーを&#xA;&lt;a href=&#34;https://lib.rs/gui&#34;&gt;GUI — list of Rust libraries/crates // Lib.rs&lt;/a&gt;&#xA;で見て、成熟してそうなのは gtk のようですが、&#xA;&lt;a href=&#34;https://lib.rs/crates/orbtk&#34;&gt;OrbTk — Rust GUI library // Lib.rs&lt;/a&gt;&#xA;というのも気になったので試してみました。&lt;/p&gt;&#xA;&lt;p&gt;gtk のような既存のGUIライブラリーに依存しないのと&#xA;&lt;a href=&#34;https://github.com/redox-os/orbtk&#34;&gt;redox-os/orbtk: The Rust UI-Toolkit.&lt;/a&gt;&#xA;の&#xA;&lt;a href=&#34;https://github.com/redox-os/orbtk#platforms&#34;&gt;Platforms&lt;/a&gt;&#xA;を見てターゲットのプラットフォームの多さが良いなと思いました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>sysstatのバイナリファイルフォーマット</title>
      <link>https://hnakamur.github.io/blog/2020/08/09/sysstat-binary-file-format/</link>
      <pubDate>Sun, 09 Aug 2020 16:31:09 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/08/09/sysstat-binary-file-format/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://sebastien.godard.pagesperso-orange.fr/&#34;&gt;sysstat&lt;/a&gt; のバイナリファイルのフォーマットを調べてみたメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://sebastien.godard.pagesperso-orange.fr/documentation.html&#34;&gt;Documents&lt;/a&gt; のページを見てみましたが、ファイルフォーマットについての記述は見つけられませんでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ksarでsysstatのメトリックをグラフで表示</title>
      <link>https://hnakamur.github.io/blog/2020/08/09/show-sysstat-metric-graph-with-ksar/</link>
      <pubDate>Sun, 09 Aug 2020 09:28:33 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/08/09/show-sysstat-metric-graph-with-ksar/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;サーバーのメトリックを確認するのに &lt;a href=&#34;http://sebastien.godard.pagesperso-orange.fr/&#34;&gt;sysstat&lt;/a&gt; の sar コマンドが便利ですが、 ksar でグラフで見るほうがさらに便利です。&lt;/p&gt;&#xA;&lt;p&gt;ということで手順をメモしておきます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;sysstat-のインストールと設定&#34;&gt;sysstat のインストールと設定&lt;/h2&gt;&#xA;&lt;h3 id=&#34;sysstat-のインストール&#34;&gt;sysstat のインストール&lt;/h3&gt;&#xA;&lt;p&gt;Ubuntu では以下のように sysstat パッケージをインストールします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goで時刻をモックする</title>
      <link>https://hnakamur.github.io/blog/2020/08/07/mock-time-in-go/</link>
      <pubDate>Fri, 07 Aug 2020 09:56:52 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/08/07/mock-time-in-go/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;初めてこの話題を聞いたのは &lt;a href=&#34;https://kawaken.hateblo.jp/entry/2017/07/31/150015&#34;&gt;umeda.go #2 で発表してきた - kawaken&amp;rsquo;s blog&lt;/a&gt; でした（スライドは &lt;a href=&#34;https://www.slideshare.net/kawaken/golang-testingfortime-77668188&#34;&gt;Goの時刻に関するテスト&lt;/a&gt;）。&#xA;その節は良いお話をありがとうございました。&lt;/p&gt;&#xA;&lt;p&gt;この時点ではGoのアプリケーションのビルド時にGoの標準ライブラリーのコードを差し替えるのは別の用途で試して便利だったものの、時刻に関するテストは自分では試してませんでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Envoy と envoy-filter-example をビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2020/08/02/build-envoy-on-ubuntu-20.04/</link>
      <pubDate>Sun, 02 Aug 2020 15:55:58 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/08/02/build-envoy-on-ubuntu-20.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/songmu/status/1289230625933680641&#34;&gt;Sonmuさんのツイート&lt;/a&gt; で紹介されていた&#xA;&lt;a href=&#34;https://dropbox.tech/infrastructure/how-we-migrated-dropbox-from-nginx-to-envoy&#34;&gt;How we migrated Dropbox from Nginx to Envoy - Dropbox&lt;/a&gt;&#xA;を読みました。&lt;/p&gt;&#xA;&lt;p&gt;nginx や Go でプロキシーサーバーを構築することについて、ずっと気になっていたけど私の力不足で性能検証できなくてもやもやしていたことについて詳しく書かれていて非常に参考になりました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>pgregory.net/rapidを使ってGoでProperty Based Testingをやってみた</title>
      <link>https://hnakamur.github.io/blog/2020/07/26/tried-go-property-based-testing-with-pgregory.net-rapid/</link>
      <pubDate>Sun, 26 Jul 2020 16:54:19 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/07/26/tried-go-property-based-testing-with-pgregory.net-rapid/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;以前から Go で Property Based Testing をやってみたいと思っていたのですが&#xA;@objectxplosive さんの &lt;a href=&#34;https://twitter.com/objectxplosive/status/1284837906520006657&#34;&gt;ツイート&lt;/a&gt;&#xA;を見て &lt;a href=&#34;https://pkg.go.dev/pgregory.net/rapid?tab=doc&#34;&gt;pgregory.net/rapid package · pkg.go.dev&lt;/a&gt; を試してみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;property-based-testing-について&#34;&gt;Property Based Testing について&lt;/h2&gt;&#xA;&lt;p&gt;@dgryski さんの &lt;a href=&#34;https://twitter.com/dgryski/status/1277647928690008064&#34;&gt;ツイート&lt;/a&gt; で紹介されていた&#xA;&lt;a href=&#34;https://www.youtube.com/watch?v=IYzDFHx6QPY&amp;amp;feature=emb_logo&#34;&gt;The lazy programmer&amp;rsquo;s guide to writing thousands of tests - Scott Wlaschin - YouTube&lt;/a&gt; が分かりやすかったです。&#xA;この動画では Go 言語ではなく別の言語 (Haskell?) を使って説明されています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>React Native for Windows &#43; macOS を試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/07/25/tried-react-native-windows-and-macos/</link>
      <pubDate>Sat, 25 Jul 2020 10:38:36 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/07/25/tried-react-native-windows-and-macos/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;voluntas さんの &lt;a href=&#34;https://twitter.com/voluntas/status/1286568276676370433&#34;&gt;ツイート&lt;/a&gt; と &lt;a href=&#34;https://www.youtube.com/watch?v=QMFbrHZnvvw&#34;&gt;MS Build SK119 React Native: Build cross platform apps that target Windows, Mac, and more! - YouTube&lt;/a&gt; の紹介動画を見て自分でも試してみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;react-native-for-windows&#34;&gt;React Native for Windows&lt;/h2&gt;&#xA;&lt;h3 id=&#34;必要なソフトウェアのインストール&#34;&gt;必要なソフトウェアのインストール&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/react-native-windows#getting-started&#34;&gt;microsoft/react-native-windows: A framework for building native Windows apps with React.&lt;/a&gt; の &lt;a href=&#34;https://github.com/microsoft/react-native-windows#requirements&#34;&gt;Requirements&lt;/a&gt; から&#xA;&lt;a href=&#34;https://microsoft.github.io/react-native-windows/docs/rnw-dependencies&#34;&gt;System Requirements · React Native for Windows + macOS&lt;/a&gt; を開いてここに書いてある PowerShell のスクリプトを実行して必要なソフトウェアをインストールしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>carbon-relay-ngのAggregationについてのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/06/16/carbon-relay-ng-aggregator-code-reading/</link>
      <pubDate>Tue, 16 Jun 2020 21:49:01 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/06/16/carbon-relay-ng-aggregator-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/carbon-relay-ng/&#34;&gt;grafana/carbon-relay-ng: Fast carbon relay+aggregator with admin interfaces for making changes online - production ready&lt;/a&gt; の &lt;a href=&#34;https://github.com/grafana/carbon-relay-ng/blob/2dc70e909221a0408ca0505759f9e8f290c1d6f9/aggregator/aggregator.go&#34;&gt;aggregator/aggregator.go&lt;/a&gt; と &lt;a href=&#34;https://github.com/grafana/carbon-relay-ng/blob/2dc70e909221a0408ca0505759f9e8f290c1d6f9/aggregator/processor.go&#34;&gt;aggregator/processor.go&lt;/a&gt; あたりのコードを読んだメモです。&lt;/p&gt;&#xA;&lt;p&gt;今回の焦点は &lt;code&gt;Sum&lt;/code&gt; の実装とその使われ方です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;sum-構造体の定義&#34;&gt;Sum 構造体の定義&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/carbon-relay-ng/blob/2dc70e909221a0408ca0505759f9e8f290c1d6f9/aggregator/processor.go#L282-L301&#34;&gt;aggregator/processor.go#L282-L301&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// Sum aggregates to sum&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Sum&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;NewSum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ts&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Processor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Add&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;float64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ts&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;uint32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Flush&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;processorResult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;processorResult&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;fcnName&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;sum&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;val&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;sum&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;},&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;},&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;processor-インターフェース&#34;&gt;Processor インターフェース&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/grafana/carbon-relay-ng/blob/2dc70e909221a0408ca0505759f9e8f290c1d6f9/aggregator/processor.go#L303-L310&#34;&gt;aggregator/processor.go#L303-L310&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 20.04 LTS デスクトップでのfcitxとMozcの設定手順</title>
      <link>https://hnakamur.github.io/blog/2020/06/11/setup-fcitx-mozc-on-ubuntu-20.04-desktop/</link>
      <pubDate>Thu, 11 Jun 2020 15:56:12 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/06/11/setup-fcitx-mozc-on-ubuntu-20.04-desktop/</guid>
      <description>&lt;p&gt;例によって自分用メモです。&#xA;英語キーボードを使っていて、言語は英語でインストールした想定です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;キーボードのcapslockとctrl入れ替え&#34;&gt;キーボードのCapsLockとCtrl入れ替え&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo sed -i -e &amp;#39;/^XKBOPTIONS=/s/&amp;#34;&amp;#34;/&amp;#34;ctrl:swapcaps&amp;#34;/&amp;#39; /etc/default/keyboard&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;日本語環境の追加インストール&#34;&gt;日本語環境の追加インストール&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;Settings 画面を開いて左のリストで [Region &amp;amp; Language] を選び、右の [Manage Installed Languages] をクリック&lt;/li&gt;&#xA;&lt;li&gt;&amp;ldquo;The language support is not installed completely&amp;rdquo; というメッセージボックス&#xA;が出たら [Install] ボタンを押す&lt;/li&gt;&#xA;&lt;li&gt;Language Support ダイアログの [Close] ボタンを押して閉じる&lt;/li&gt;&#xA;&lt;li&gt;ターミナルで &lt;code&gt;sudo apt update &amp;amp;&amp;amp; sudo apt -y install fcitx-mozc&lt;/code&gt; を実行して fcitx-mozc をインストール&lt;/li&gt;&#xA;&lt;li&gt;[Manage Installed Languages] ボタンを再度押して [Language Support] ダイアログの [Keyboard input method system] を fcitx に変更して [Close] ボタンを押す&lt;/li&gt;&#xA;&lt;li&gt;ターミナルで &lt;code&gt;sudo apt -y purge ibus&lt;/code&gt; で ibus をアンインストール&lt;/li&gt;&#xA;&lt;li&gt;ここで一度再起動&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;fcitx-の設定&#34;&gt;fcitx の設定&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;画面右上のキーボードの形のアイコンをクリックして [Confiugre Current Input Method] メニューを選択&lt;/li&gt;&#xA;&lt;li&gt;[Input Method Configuration] ダイアログで左下の [+] ボタンを押し [Only Show Current Language] のチェックを外して、その下の検索欄に Mozc と入力し、上のリストに表示された Mozc の行を選んで [OK] ボタンを押す&lt;/li&gt;&#xA;&lt;li&gt;[Input Method Configuration] ダイアログの [Global Config] タブを開いて [Trigger Input Method] の右の Ctrl+Space のところをクリックして Alt+` に変更&lt;/li&gt;&#xA;&lt;li&gt;端末を開いて Ctrl+Space を押すと Mozc が使えることを確認&lt;/li&gt;&#xA;&lt;li&gt;Settings 画面を開いて左のリストで [Keyboard Shortcuts] を選び、右のリストで [Switch windows of an application] を選んでデフォルトの Super+` から Super+F1 など別のキーに変える&lt;/li&gt;&#xA;&lt;li&gt;Ctrl+Alt+T を押してターミナルを開き、 Alt+` で Mozc が起動することを確認&lt;/li&gt;&#xA;&lt;/ol&gt;</description>
    </item>
    <item>
      <title>WSL2のUbuntuでsystemdとsnapdとLXDとdockerを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2020/05/30/run-systemd-snapd-and-lxd-on-wsl2-ubuntu/</link>
      <pubDate>Sat, 30 May 2020 15:50:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/05/30/run-systemd-snapd-and-lxd-on-wsl2-ubuntu/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/05/28/setup-wsl2-ubuntu-and-docker-desktop-for-windows/&#34;&gt;WSL2のUbuntuとDocker Desktop for Windowsを試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt; で Docker は動いたので、次は LXD を動かそうと調べました。&lt;/p&gt;&#xA;&lt;p&gt;すると WSL2 では標準では systemd が動いていないため snapd や LXD が使えないことが分かりました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KeePassとKeeAgentでWSL2用にssh-agentを動かす</title>
      <link>https://hnakamur.github.io/blog/2020/05/29/run-ssh-agent-with-keepass-and-keeagent-for-wsl2/</link>
      <pubDate>Fri, 29 May 2020 19:59:34 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/05/29/run-ssh-agent-with-keepass-and-keeagent-for-wsl2/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/03/06/setup-wsl-ssh-agent/&#34;&gt;wsl-ssh-agentでWindows Subsystem for LinuxからWindowsのssh-agentを使う設定手順 · hnakamur&amp;rsquo;s blog&lt;/a&gt; は快適だったのですが WSL2 では使えないことが分かりました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/rupor-github/wsl-ssh-agent&#34;&gt;wsl-ssh-agent&lt;/a&gt; の&#xA;&lt;a href=&#34;https://github.com/rupor-github/wsl-ssh-agent#wsl-2-compatibility&#34;&gt;WSL 2 compatibility&lt;/a&gt; に回避策が書いてあるのを見つけ&#xA;&lt;a href=&#34;https://medium.com/@pscheit/use-an-ssh-agent-in-wsl-with-your-ssh-setup-in-windows-10-41756755993e&#34;&gt;Use an ssh-agent in WSL with your ssh setup from windows 10&lt;/a&gt; も読んで設定してみたので手順をメモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WSL2のUbuntuとDocker Desktop for Windowsを試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/05/28/setup-wsl2-ubuntu-and-docker-desktop-for-windows/</link>
      <pubDate>Thu, 28 May 2020 19:46:07 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/05/28/setup-wsl2-ubuntu-and-docker-desktop-for-windows/</guid>
      <description>&lt;h2 id=&#34;docker-desktop-for-windows-を使わない方法もあります-2020-05-31-追記&#34;&gt;Docker Desktop for Windows を使わない方法もあります （2020-05-31 追記）&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/05/30/run-systemd-snapd-and-lxd-on-wsl2-ubuntu/&#34;&gt;WSL2のUbuntuでsystemdとsnapdとLXDを動かしてみた · hnakamur&amp;rsquo;s blog&lt;/a&gt; の手順で systemd を動かして、あとは WSL2 の Ubuntu 内で docker を動かすという方法もあります。&lt;/p&gt;&#xA;&lt;p&gt;上記の記事の「Docker Desktop for Windows をアンインストールして docker を動かしてみた」の項に手順を書いています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>macOSのpfでGlobalProtect用にNATを設定する</title>
      <link>https://hnakamur.github.io/blog/2020/05/25/setup-nat-with-macos-pf-for-globalprotect/</link>
      <pubDate>Mon, 25 May 2020 14:57:27 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/05/25/setup-nat-with-macos-pf-for-globalprotect/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;macOS で &lt;a href=&#34;https://www.paloaltonetworks.jp/products/secure-the-network/subscriptions/globalprotect&#34;&gt;GlobalProtect - Palo Alto Networks&lt;/a&gt; でVPNに接続した際に &lt;a href=&#34;https://multipass.run/&#34;&gt;Multipass&lt;/a&gt; で作成したHypervisor.frameworkベースのVMとそのVM上のLXDコンテナからの通信をNATにする方法を調べたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>macOSでHypervisor.frameworkのVMのサブネットIPアドレスを変える</title>
      <link>https://hnakamur.github.io/blog/2020/05/25/change-macos-hypervisor.framework-vm-subnet-ip-address/</link>
      <pubDate>Mon, 25 May 2020 14:10:55 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/05/25/change-macos-hypervisor.framework-vm-subnet-ip-address/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://multipass.run/docs/troubleshooting-networking-on-macos&#34;&gt;Troubleshooting networking on macOS | Multipass documentation&lt;/a&gt; に Hypervisor.framework のVMのIPアドレスの変更方法が書いてあるのを見つけて試してみたのでメモ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;multipass-のvm停止&#34;&gt;multipass のVM停止&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;multipass stop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;vmnet-の設定変更&#34;&gt;vmnet の設定変更&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;/Library/Preferences/SystemConfiguration/com.apple.vmnet.plist&lt;/code&gt; という設定ファイルにVMのサブネットのアドレス設定があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows Terminalの私の設定</title>
      <link>https://hnakamur.github.io/blog/2020/05/16/my-settings-for-windows-terminal/</link>
      <pubDate>Sat, 16 May 2020 21:25:21 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/05/16/my-settings-for-windows-terminal/</guid>
      <description>&lt;h2 id=&#34;windows-terminal-のインストール&#34;&gt;Windows Terminal のインストール&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/microsoft/terminal/blob/master/doc/user-docs/index.md&#34;&gt;Windows Terminal User Documentation&lt;/a&gt; を見ると Windows Terminal は Microsoft Store からインストール可能です。&#xA;私は &lt;a href=&#34;https://github.com/microsoft/terminal/releases&#34;&gt;Releases · microsoft/terminal&lt;/a&gt; の Assets からインストーラをダウンロードしてインストールしています。&lt;/p&gt;&#xA;&lt;h2 id=&#34;設定の変更について&#34;&gt;設定の変更について&lt;/h2&gt;&#xA;&lt;h3 id=&#34;2021-07-02-追記&#34;&gt;2021-07-02 追記&lt;/h3&gt;&#xA;&lt;p&gt;設定についてのドキュメントは &lt;a href=&#34;https://docs.microsoft.com/en-us/windows/terminal/customize-settings/startup&#34;&gt;Windows Terminal Startup Settings | Microsoft Docs&lt;/a&gt; に移動されていました。　&lt;/p&gt;</description>
    </item>
    <item>
      <title>OpenSSLのSSL_sendfileとパッチを当てたnginxでLinuxのkTLSを試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/04/29/tried-ssl_sendfile-with-openssl-and-nginx/</link>
      <pubDate>Wed, 29 Apr 2020 17:51:58 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/04/29/tried-ssl_sendfile-with-openssl-and-nginx/</guid>
      <description>&lt;h2 id=&#34;2021-10-31-追記&#34;&gt;2021-10-31 追記&lt;/h2&gt;&#xA;&lt;p&gt;再度検証してみたので &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2021/10/31/tried-linux-kernel-tls-nginx-sendfile/&#34;&gt;Linuxのkernel TLSでnginxのSSL_sendfileを試してみた · hnakamur&amp;rsquo;s blog&lt;/a&gt; のほうをご参照ください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;試したきっかけ&#34;&gt;試したきっかけ&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.reddit.com/r/rust/comments/a82w9b/can_a_rust_web_server_beat_nginx_in_serving/#ec7ul6t&#34;&gt;Can a Rust web server beat nginx in serving static files? : rust&lt;/a&gt; に以下のようなコメントがありました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ルートパーティションをZFSにしてUbuntu 20.04 LTSをインストールしてみた</title>
      <link>https://hnakamur.github.io/blog/2020/04/26/ubuntu-20.04-root-on-zfs/</link>
      <pubDate>Sun, 26 Apr 2020 15:13:33 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/04/26/ubuntu-20.04-root-on-zfs/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;実はルートパーティションをZFSにするのは以前から試してみたいと思っていました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.phoronix.com/scan.php?page=news_item&amp;amp;px=Trying-Ubuntu-20.04-ZFS-Snaps&#34;&gt;Trying Out Ubuntu 20.04 With ZFS + Zsys Automated APT Snapshots - Phoronix&lt;/a&gt;&#xA;をみて Ubuntu 20.04 LTS のデスクトップインストーラーで advanced features に追加されたというのを知りました。&#xA;ただし、 ZFS をルートファイルシステムにするのは引き続き experimental です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gbpとsbuildとPPAでUbuntu 20.04 LTS用のdebパッケージをビルド</title>
      <link>https://hnakamur.github.io/blog/2020/04/24/build-deb-for-ubuntu-focal-with-gbp-sbuild-ppa/</link>
      <pubDate>Fri, 24 Apr 2020 19:49:58 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/04/24/build-deb-for-ubuntu-focal-with-gbp-sbuild-ppa/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;このブログの過去記事でも書いたように（とっちらかってますが、いつか整理したい）、私は &lt;a href=&#34;https://github.com/agx/git-buildpackage&#34;&gt;git-buildpackage&lt;/a&gt; と &lt;a href=&#34;https://wiki.ubuntu.com/SimpleSbuild&#34;&gt;sbuild&lt;/a&gt; と &lt;a href=&#34;https://launchpad.net/ubuntu/+ppas&#34;&gt;PPA&lt;/a&gt; で Ubuntu 18.04 LTS (以下 bionic と略) 用のカスタム deb パッケージをビルドしてきました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>xmllintコマンドでのXMLスキーマを使ったバリデーションのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/04/12/xmllint-schema-validation-code-reading/</link>
      <pubDate>Sun, 12 Apr 2020 11:40:04 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/04/12/xmllint-schema-validation-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html&#34;&gt;SAML Security · OWASP Cheat Sheet Series&lt;/a&gt; の &lt;a href=&#34;https://cheatsheetseries.owasp.org/cheatsheets/SAML_Security_Cheat_Sheet.html#validate-signatures&#34;&gt;Validate Signatures&lt;/a&gt; を見ると、SAMLのXMLはローカルに置いた信頼できるスキーマファイルでバリデートせよと書かれています。&lt;/p&gt;&#xA;&lt;p&gt;そこで実際に試してみてサンプルを &lt;a href=&#34;https://github.com/hnakamur/saml-response-sign-validate-verify-example&#34;&gt;hnakamur/saml-response-sign-validate-verify-example&lt;/a&gt; に置きました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>io_uringのサンプルを試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/04/07/tried_io_uring_example/</link>
      <pubDate>Tue, 07 Apr 2020 17:34:14 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/04/07/tried_io_uring_example/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;io_uring について以下の素晴らしい入門記事を知ったので試してみたメモです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://unixism.net/2020/04/io-uring-by-example-article-series/&#34;&gt;io_uring By Example: An Article Series - Unixism&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://unixism.net/2020/04/io-uring-by-example-part-1-introduction/&#34;&gt;io_uring by example: Part 1 - Introduction - Unixism&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://unixism.net/2020/04/io-uring-by-example-part-2-queuing-multiple-requests/&#34;&gt;io_uring By Example: Part 2 - Queuing multiple requests - Unixism&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://unixism.net/2020/04/io-uring-by-example-part-3-a-web-server-with-io-uring/&#34;&gt;io_uring By Example: Part 3 - A Web Server with io_uring - Unixism&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;サンプルソースコード&#xA;&lt;a href=&#34;https://github.com/shuveb/io_uring-by-example&#34;&gt;shuveb/io_uring-by-example: A companion repository for the io_uring by Example article series&lt;/a&gt;&#xA;README に書いてありますが Linux カーネル 5.5 以上が必要となります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>fsyncを使うようにビルドしたLMDBのdebパッケージを作った</title>
      <link>https://hnakamur.github.io/blog/2020/03/31/lmdb-deb-built-with-fsync/</link>
      <pubDate>Tue, 31 Mar 2020 20:46:39 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/03/31/lmdb-deb-built-with-fsync/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.cloudflare.com/introducing-quicksilver-configuration-distribution-at-internet-scale/&#34;&gt;Introducing Quicksilver: Configuration Distribution at Internet Scale&lt;/a&gt;&#xA;で LMDB というキーバリューストアを知ったので、いろいろ調査したメモ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;cloudflare-での-lmdb-の使い方&#34;&gt;Cloudflare での LMDB の使い方&lt;/h2&gt;&#xA;&lt;p&gt;上の記事によると Cloudflare で DNS 用のデータストアに昔は Kyoto Tycoon を使っていたのですが、2015年にシステムを一新する際に LMDB に変えたそうです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LuaJIT FFIでモジュールを書く時のハウツー</title>
      <link>https://hnakamur.github.io/blog/2020/03/21/how-to-write-luajit-ffi-module/</link>
      <pubDate>Sat, 21 Mar 2020 23:10:18 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/03/21/how-to-write-luajit-ffi-module/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/03/17/xmlsec-verify-code-reading/&#34;&gt;XMLSecでの証明書検証のコードリーディング · hnakamur&amp;rsquo;s blog&lt;/a&gt; の結果を元に &lt;a href=&#34;https://github.com/hnakamur/nginx-lua-saml-service-provider&#34;&gt;hnakamur/nginx-lua-saml-service-provider&lt;/a&gt; で SAML レスポンスを検証する処理を外部コマンド呼び出し方式から LuaJIT FFI でのライブラリ関数呼び出し方式に書き換えました。&#xA;&lt;a href=&#34;https://github.com/hnakamur/nginx-lua-saml-service-provider/pull/4&#34;&gt;Add response:verify_response_memory method by hnakamur · Pull Request #4 · hnakamur/nginx-lua-saml-service-provider&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>XMLSecでの証明書検証のコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/03/17/xmlsec-verify-code-reading/</link>
      <pubDate>Tue, 17 Mar 2020 20:01:08 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/03/17/xmlsec-verify-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/07/31/saml-service-provider-with-nginx-lua/&#34;&gt;nginx luaでSAMLのService Providerを作ってみた · hnakamur&amp;rsquo;s blog&lt;/a&gt; の &lt;a href=&#34;https://github.com/hnakamur/nginx-lua-saml-service-provider&#34;&gt;hnakamur/nginx-lua-saml-service-provider&lt;/a&gt; ですがレスポンスのXMLを検証する処理は非同期ではなく同期的に実行される実装としていました。 詳しくは &lt;a href=&#34;https://github.com/hnakamur/nginx-lua-saml-service-provider/blob/90b79233bfc28dd48ad8f2d38a8d547d182f1a62/README.md#caveats&#34;&gt;Caveats&lt;/a&gt; に書いています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>wsl-ssh-agentでWindows Subsystem for LinuxからWindowsのssh-agentを使う設定手順</title>
      <link>https://hnakamur.github.io/blog/2020/03/06/setup-wsl-ssh-agent/</link>
      <pubDate>Fri, 06 Mar 2020 18:48:43 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/03/06/setup-wsl-ssh-agent/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2020/02/22/install-openssh-client-to-windows10/&#34;&gt;Windows 10 に OpenSSH クライアントをインストール · hnakamur&amp;rsquo;s blog&lt;/a&gt; で Windows の ssh-agent を使いだしてから Windows Subsystem for Linux （以下WSLと略）からも使いたいと思うようになりました。&lt;/p&gt;&#xA;&lt;p&gt;調べてみると &lt;a href=&#34;https://github.com/rupor-github/wsl-ssh-agent&#34;&gt;wsl-ssh-agent&lt;/a&gt; で出来るそうなので設定手順をメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>tmuxで複数サーバー同時オペレーションのセッション共有</title>
      <link>https://hnakamur.github.io/blog/2020/03/05/tmux-multi-ssh-share-script/</link>
      <pubDate>Thu, 05 Mar 2020 18:00:51 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/03/05/tmux-multi-ssh-share-script/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;職場で &lt;a href=&#34;http://tech.naviplus.co.jp/2014/01/09/tmux%E3%81%A7%E8%A4%87%E6%95%B0%E3%82%B5%E3%83%BC%E3%83%90%E3%81%AE%E5%90%8C%E6%99%82%E3%82%AA%E3%83%9A%E3%83%AC%E3%83%BC%E3%82%B7%E3%83%A7%E3%83%B3/&#34;&gt;tmuxで複数サーバの同時オペレーション – NaviPlus Engineers&amp;rsquo; Blog&lt;/a&gt; のスクリプトを使わせて頂いているのですが、リモートワークに伴って他のユーザーの tmux セッションを閲覧したいという話になりました。&lt;/p&gt;&#xA;&lt;p&gt;当初 tmux をソケットファイルを使うという単純な改変をしてみたのですが、スクリプト内で tmux セッションを作っているので、作業者がこのスクリプトを実行するたびに閲覧者が接続する必要がありました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>BadgerのErrConflictについて</title>
      <link>https://hnakamur.github.io/blog/2020/02/29/badger-errconflict/</link>
      <pubDate>Sat, 29 Feb 2020 16:34:32 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/02/29/badger-errconflict/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dgraph-io/badger/blob/617ed7c7db9d618b6511adfff5d22dcde2233049/README.md&#34;&gt;badger の README.md&lt;/a&gt; の &lt;a href=&#34;https://github.com/dgraph-io/badger/blob/617ed7c7db9d618b6511adfff5d22dcde2233049/README.md#read-write-transactions&#34;&gt;Read-write transactions&lt;/a&gt; に &lt;code&gt;ErrConflict&lt;/code&gt; について以下のように説明があります。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;An ErrConflict error will be reported in case of a conflict. Depending on the state of your application, you have the option to retry the operation if you receive this error.&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&lt;p&gt;一方 &lt;code&gt;DB&lt;/code&gt; の &lt;code&gt;NewWriteBatch&lt;/code&gt; メソッドの API ドキュメントに blind writes は &lt;code&gt;ErrConflict&lt;/code&gt; が起きないと書かれています。&#xA;&lt;a href=&#34;https://github.com/dgraph-io/badger/blob/617ed7c7db9d618b6511adfff5d22dcde2233049/batch.go#L35-L39&#34;&gt;batch.go#L35-L39&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>BadgerのErrTxnTooBigについて</title>
      <link>https://hnakamur.github.io/blog/2020/02/29/badger-errtxntoobig/</link>
      <pubDate>Sat, 29 Feb 2020 15:44:41 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/02/29/badger-errtxntoobig/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/dgraph-io/badger&#34;&gt;badgerのREADME&lt;/a&gt;&#xA;の&#xA;&lt;a href=&#34;https://github.com/dgraph-io/badger#read-write-transactions&#34;&gt;Read-write transactions&lt;/a&gt;&#xA;に Badger の ErrTxnTooBig について以下のような説明がありました。&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;An ErrTxnTooBig will be reported in case the number of pending writes/deletes in the transaction exceeds a certain limit. In that case, it is best to commit the transaction and start a new transaction immediately. Here is an example (we are not checking for errors in some places for simplicity):&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hyper-VとmultipassでUbuntu VMを起動してcloud-initで初期化する手順</title>
      <link>https://hnakamur.github.io/blog/2020/02/22/ubuntu-cloud-init-hyper-v-multipass/</link>
      <pubDate>Sat, 22 Feb 2020 23:45:32 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/02/22/ubuntu-cloud-init-hyper-v-multipass/</guid>
      <description>&lt;h2 id=&#34;windows-では-multipass-から-hyper-v-に移行してました&#34;&gt;Windows では multipass から Hyper-V に移行してました&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2019/10/17/multipass-on-windows-and-macos/&#34;&gt;仮想マシンマネージャmultipassをWindowsとmacOSで試してみた  hnakamur&amp;rsquo;s blog&lt;/a&gt; を書いた後しばらく使っていましたが、Windows では Hyper-V を直接使うように切り替えました。&lt;/p&gt;&#xA;&lt;p&gt;移行の主な理由は &lt;code&gt;vEthernet (Default Switch)&lt;/code&gt; の IP アドレスが Windows 再起動の度に変わってしまうからです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PowerShellでZIPファイルを解凍する</title>
      <link>https://hnakamur.github.io/blog/2020/02/22/extract-zip-on-powershell/</link>
      <pubDate>Sat, 22 Feb 2020 23:30:22 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/02/22/extract-zip-on-powershell/</guid>
      <description>&lt;h2 id=&#34;powershell-の-expand-archive-で-zip-ファイルを解凍&#34;&gt;PowerShell の Expand-Archive で ZIP ファイルを解凍&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cheshire-wara.com/powershell/ps-cmdlets/item-file/expand-archive/&#34;&gt;逆引き！PowerShellで圧縮ファイル(ZIP)の解凍する方法【Expand-Archive】 | 【ﾁｪｼｬわら】Powershellとは、から学ぶ入門者の教科書-脱コマンドプロンプト-&lt;/a&gt; で紹介されていた &lt;a href=&#34;https://docs.microsoft.com/ja-jp/PowerShell/module/microsoft.powershell.archive/expand-archive?view=powershell-5.1&#34;&gt;Expand-Archive&lt;/a&gt; コマンドで解凍できます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows 10 に OpenSSH クライアントをインストール</title>
      <link>https://hnakamur.github.io/blog/2020/02/22/install-openssh-client-to-windows10/</link>
      <pubDate>Sat, 22 Feb 2020 23:08:54 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/02/22/install-openssh-client-to-windows10/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Windows Subsystem for Linux で ssh クライアントをしばらく使っていたのですが、&#xA;&lt;a href=&#34;https://www.atmarkit.co.jp/ait/articles/1903/28/news005.html&#34;&gt;Windows 10にオンデマンド機能のOpenSSHサーバをインストールする方法：企業ユーザーに贈るWindows 10への乗り換え案内（45） - ＠IT&lt;/a&gt;&#xA;で Windows 10 1803 以降では標準で OpenSSH が使えるようになっていることを知りました。&#xA;試してみたら快適だったのでインストール手順をメモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PowershellでEmacsライクなキーバインドを使う</title>
      <link>https://hnakamur.github.io/blog/2020/02/22/powershell-emacs-like-keybindings/</link>
      <pubDate>Sat, 22 Feb 2020 22:09:32 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/02/22/powershell-emacs-like-keybindings/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://qiita.com/StoneDot/items/c9f4178be53aebea696e&#34;&gt;PSReadLine で PowerShell を bash のキーバインドにする - Qiita&lt;/a&gt; と &lt;a href=&#34;https://maskaw.hatenablog.com/entry/2019/02/08/193256&#34;&gt;PowerShellのキーバインドをEmacs風にする【PSReadLine】 - メモ.org&lt;/a&gt; を参考に設定したメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストール手順&#34;&gt;インストール手順&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/PowerShell/PSReadLine&#34;&gt;PowerShell/PSReadLine: A bash inspired readline implementation for PowerShell&lt;/a&gt; と &lt;a href=&#34;https://docs.microsoft.com/ja-jp/powershell/scripting/gallery/installing-psget?view=powershell-7&#34;&gt;PowerShellGet のインストール - PowerShell | Microsoft Docs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;PowerShell を管理者権限で開き、以下のコマンドで &lt;code&gt;PowerShellGet&lt;/code&gt; をインストールします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Linuxのvm_swapinessについてコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/2020/02/16/linux-vm-swappiness-code-reading/</link>
      <pubDate>Sun, 16 Feb 2020 20:10:48 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/02/16/linux-vm-swappiness-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://chrisdown.name/ja/2018/01/02/in-defence-of-swap.html&#34;&gt;スワップの弁護：よくある誤解を解く&lt;/a&gt; と &lt;a href=&#34;https://chrisdown.name/ja/2019/07/18/linux-memory-management-at-scale.html&#34;&gt;大規模システムでの Linux のメモリ管理&lt;/a&gt; を読んで Linux のスワップについて理解を深めたところで、実際のコードを読んでみることにしました。今回のリーディングの対象バージョンは &lt;a href=&#34;https://github.com/torvalds/linux/tree/v5.6-rc1&#34;&gt;torvalds/linux at v5.6-rc1&lt;/a&gt; です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>bboltのフリーリストのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/01/03/bbolt-freelist-code-reading/</link>
      <pubDate>Fri, 03 Jan 2020 20:21:58 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/01/03/bbolt-freelist-code-reading/</guid>
      <description>&lt;h2 id=&#34;freelist-型と関連する型&#34;&gt;&lt;code&gt;freelist&lt;/code&gt; 型と関連する型&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/etcd-io/bbolt/blob/v1.3.3/freelist.go#L9-L36&#34;&gt;freelist.go#L9-L36&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// txPending holds a list of pgids and corresponding allocation txns&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// that are pending to be freed.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;txPending&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;ids&lt;/span&gt;              &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;alloctx&lt;/span&gt;          &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txid&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// txids allocating the ids&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;lastReleaseBegin&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;txid&lt;/span&gt;   &lt;span class=&#34;c1&#34;&gt;// beginning txid of last matching releaseRange&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// pidSet holds the set of starting pgids which have the same span size&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pidSet&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;{}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// freelist represents a list of all pages that are available for allocation.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;// It also tracks pages that have been freed but are still in use by open transactions.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;kd&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;freelist&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;struct&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nx&#34;&gt;freelistType&lt;/span&gt;   &lt;span class=&#34;nx&#34;&gt;FreelistType&lt;/span&gt;                &lt;span class=&#34;c1&#34;&gt;// freelist type&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;ids&lt;/span&gt;            &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt;                      &lt;span class=&#34;c1&#34;&gt;// all free and available free page ids.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;allocs&lt;/span&gt;         &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txid&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;// mapping of txid that allocated a pgid.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;pending&lt;/span&gt;        &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txPending&lt;/span&gt;         &lt;span class=&#34;c1&#34;&gt;// mapping of soon-to-be free page ids by tx.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;cache&lt;/span&gt;          &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;// fast lookup of all free and pending page ids.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;freemaps&lt;/span&gt;       &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pidSet&lt;/span&gt;           &lt;span class=&#34;c1&#34;&gt;// key is the size of continuous pages(span), value is a set which contains the starting pgids of same size&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;forwardMap&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// key is start pgid, value is its span size&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;backwardMap&lt;/span&gt;    &lt;span class=&#34;kd&#34;&gt;map&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;uint64&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// key is end pgid, value is its span size&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;allocate&lt;/span&gt;       &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;txid&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;txid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;n&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// the freelist allocate func&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;free_count&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;                  &lt;span class=&#34;c1&#34;&gt;// the function which gives you free page number&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;mergeSpans&lt;/span&gt;     &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ids&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;pgids&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;             &lt;span class=&#34;c1&#34;&gt;// the mergeSpan func&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;getFreePageIDs&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt;               &lt;span class=&#34;c1&#34;&gt;// get free pgids func&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;  &lt;span class=&#34;nx&#34;&gt;readIDs&lt;/span&gt;        &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgids&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;[]&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;pgid&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;          &lt;span class=&#34;c1&#34;&gt;// readIDs func reads list of pages and init the freelist&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;FreelistType&lt;/code&gt; 型&#xA;&lt;a href=&#34;https://github.com/etcd-io/bbolt/blob/v1.3.3/db.go#L46-L54&#34;&gt;db.go#L46-L54&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>bboltのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/01/02/bbolt-code-reading/</link>
      <pubDate>Thu, 02 Jan 2020 11:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2020/01/02/bbolt-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/etcd-io/bbolt&#34;&gt;etcd-io/bbolt: An embedded key/value database for Go.&lt;/a&gt; は B+Tree を使った Go で書かれたキーバリューストアです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/etcd-io/bbolt#project-status&#34;&gt;Project Status&lt;/a&gt; を見ると開発のフェーズとしては安定期に入っていて、 API、ファイルフォーマットともに stable になっています。高負荷なプロダクション環境でも使用されていて 1TB といった大きなサイズでも使われているそうです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VictoriaMetricsのデータディレクトリ構造</title>
      <link>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-data-directory-structure/</link>
      <pubDate>Mon, 30 Dec 2019 16:19:41 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-data-directory-structure/</guid>
      <description>&lt;h2 id=&#34;victoriamatricsのデータディレクトリの例&#34;&gt;VictoriaMatricsのデータディレクトリの例&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;sudo tree -F /var/lib/viectoriametrics&lt;/code&gt; で調べたVictoriaMetricsのデータディレクトリ構造の例を以下に示します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;/var/lib/victoriametrics/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── cache/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── curr_hour_metric_ids&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── metricID_metricName/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.0.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.1.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.2.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.3.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── metadata.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── metricID_tsid/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.0.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.1.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.2.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.3.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── metadata.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── metricName_tsid/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.0.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.1.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.2.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── data.3.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── metadata.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── prev_hour_metric_ids&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── rollupResult/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       ├── data.0.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       ├── data.1.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       ├── data.2.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       ├── data.3.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       └── metadata.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── data/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── big/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── 2019_12/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── tmp/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   └── txn/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── snapshots/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── flock.lock&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── small/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       ├── 2019_12/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       │   ├── 72_36_20191223001228.000_20191225142526.000_15E3A2BA1AE90E27/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       │   │   ├── index.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       │   │   ├── metaindex.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       │   │   ├── timestamps.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       │   │   └── values.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       │   ├── tmp/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       │   └── txn/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│       └── snapshots/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── flock.lock&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── indexdb/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── 15E2BB7FA24B99C4/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── converted-to-v1.28.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── flock.lock&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── tmp/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── txn/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   ├── 15E2BB7FA24B99C5/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── 10_1_15E2D7634FA6BCEF/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── index.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── items.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── lens.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── metadata.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   └── metaindex.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── 210_1_15E3A2BA19A1617C/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── index.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── items.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── lens.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   ├── metadata.json&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   │   └── metaindex.bin&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── converted-to-v1.28.0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── flock.lock&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   ├── tmp/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   │   └── txn/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;│   └── snapshots/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;├── snapshots/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;└── tmp/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    └── searchResults/&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;30 directories, 42 files&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h3 id=&#34;cache-ディレクトリ&#34;&gt;cache ディレクトリ&lt;/h3&gt;&#xA;&lt;p&gt;&lt;code&gt;cache&lt;/code&gt; ディレクトリ以下のデータの読み込みは以下のコードで行ってます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VictoriaMetrics/fastcacheのコードリーディングその2</title>
      <link>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part2/</link>
      <pubDate>Mon, 30 Dec 2019 05:11:55 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part2/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2019/12/30/victoriametrics-fastcache-code-reading-part1/&#34;&gt;VictoriMetrics/fastcacheのコードリーディングその1&lt;/a&gt; の後、新しいコミットが入っていたので今回の対象は &lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache/commit/2dd94801554bb525434adca19ae035c391934f18&#34;&gt;2dd9480&lt;/a&gt; です。&lt;/p&gt;&#xA;&lt;p&gt;今回はファイルへの書き出しとファイルからの読み込みが対象です。ファイルは &lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache/blob/2dd94801554bb525434adca19ae035c391934f18/file.go&#34;&gt;file.go&lt;/a&gt; です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;コードリーディング&#34;&gt;コードリーディング&lt;/h2&gt;&#xA;&lt;h3 id=&#34;savetofile-関数&#34;&gt;SaveToFile 関数&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache/blob/2dd94801554bb525434adca19ae035c391934f18/file.go#L16-L26&#34;&gt;file.go#L16-L26&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>VictoriaMetrics/fastcacheのコードリーディングその1</title>
      <link>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part1/</link>
      <pubDate>Mon, 30 Dec 2019 01:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part1/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache&#34;&gt;VictoriaMetrics/fastcache&lt;/a&gt; のコードリーディングのメモです。対象バージョンはこの記事を書いた時点の最新コミット &lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache/commit/c9a5939fd508ba790b708b23929feea13623d735&#34;&gt;c9a5939&lt;/a&gt; です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;仕様&#34;&gt;仕様&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache&#34;&gt;VictoriaMetrics/fastcache&lt;/a&gt; は &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;VictoriaMetrics/VictoriaMetrics&lt;/a&gt; のメトリクス名の管理に使っているキーバリューストアを切り出したものなので、 VictoriaMetrics での要件に沿った仕様となっています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VictoriMetrics/fastcacheによるGoのGC負荷の回避方法</title>
      <link>https://hnakamur.github.io/blog/2019/12/29/victoriametrics-fastcache/</link>
      <pubDate>Sun, 29 Dec 2019 16:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/29/victoriametrics-fastcache/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;VictoriaMetrics&lt;/a&gt; で &lt;code&gt;foo.bar.baz&lt;/code&gt; といったメトリクス名からIDへのマッピングは&#xA;&lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache&#34;&gt;VictoriaMetrics/fastcache&lt;/a&gt; というキーバリューストアで保管されています。ということで調査したメモ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ベンチマーク&#34;&gt;ベンチマーク&lt;/h2&gt;&#xA;&lt;p&gt;ベンチマークがついているので自分のサーバでも試してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>cgoとunsafeについてのメモ</title>
      <link>https://hnakamur.github.io/blog/2019/12/29/cgo-and-unsafe/</link>
      <pubDate>Sun, 29 Dec 2019 03:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/29/cgo-and-unsafe/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;まず大前提として cgo や unsafe を使ったプログラムは Go の将来のバージョンで動く保証がないので極力避けるべきです（unsafeについては&lt;a href=&#34;https://golang.org/doc/go1compat&#34;&gt;Go 1 and the Future of Go Programs - The Go Programming Language&lt;/a&gt;で明示的に互換性保証の対象外と書かれています。cgo は &lt;a href=&#34;https://golang.org/doc/go1.12#cgo&#34;&gt;Go 1.12 Release Notes - The Go Programming Language&lt;/a&gt; に変更された実例があります）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VictoriaMetricsのクエリのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2019/12/24/victoria-metrics-query-code-reading/</link>
      <pubDate>Tue, 24 Dec 2019 08:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/24/victoria-metrics-query-code-reading/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;VictoriaMetrics/VictoriaMetrics: VictoriaMetrics - fast, cost-effective and scalable time series database, long-term remote storage for Prometheus&lt;/a&gt; の v1.31.2 のコードリーディングのメモ。&lt;/p&gt;&#xA;&lt;p&gt;今回は Prometheus QL 互換のクエリ回りを見る。&lt;/p&gt;&#xA;&lt;h2 id=&#34;メイン&#34;&gt;メイン&lt;/h2&gt;&#xA;&lt;p&gt;メインのリクエストハンドラ。&#xA;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/blob/v1.31.2/app/victoria-metrics/main.go#L52-L63&#34;&gt;app/victoria-metrics/main.go#L52-L63&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;requestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;ResponseWriter&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;http&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Request&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;bool&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;vminsert&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;vmselect&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;vmstorage&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;RequestHandler&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;w&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;r&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;false&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;code&gt;vmselect.RequestHandler&lt;/code&gt;&#xA;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/blob/v1.31.2/app/vmselect/main.go#L57-L199&#34;&gt;app/vmselect/main.go#L57-L199&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>VictoriaMetricsにgraphite形式でデータ投入のコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2019/12/23/victoria-metrics-code-reading/</link>
      <pubDate>Mon, 23 Dec 2019 22:55:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/23/victoria-metrics-code-reading/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;VictoriaMetrics/VictoriaMetrics: VictoriaMetrics - fast, cost-effective and scalable time series database, long-term remote storage for Prometheus&lt;/a&gt; の v1.31.2 のコードリーディングのメモ。&lt;/p&gt;&#xA;&lt;p&gt;graphite 形式で投入したデータがどう格納されるかを調べたい。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;app/vminsert/graphite&lt;/code&gt; パッケージの &lt;code&gt;serveTCP&lt;/code&gt; 関数から &lt;code&gt;insertHandler&lt;/code&gt; 関数を呼び出している。&#xA;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics/blob/v1.31.2/app/vminsert/graphite/server.go#L101&#34;&gt;app/vminsert/graphite/server.go#L101&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>tcpdumpとss -antpを同時に実行するシェルスクリプトの例</title>
      <link>https://hnakamur.github.io/blog/2019/12/23/tcpdump-and-ss-script/</link>
      <pubDate>Mon, 23 Dec 2019 22:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/23/tcpdump-and-ss-script/</guid>
      <description>&lt;p&gt;仕事で調査の時に書いた &lt;code&gt;tcpdump&lt;/code&gt; と &lt;code&gt;ss -antp&lt;/code&gt; を同時に実行するスクリプトの例をメモ。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;tcpdump で複数のポートを調べたいときはtcpdumpを複数起動せずにportをorで繋いで複数指定。&lt;/li&gt;&#xA;&lt;li&gt;tcpdump で取得時は余計な名前解決をして遅くならないように &lt;code&gt;-n&lt;/code&gt; を指定。&lt;/li&gt;&#xA;&lt;li&gt;tcpdump の取得結果はファイルに書いておいて、後でファイルから読み込んでじっくり見る。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#!/bin/sh&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;[&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$#&lt;/span&gt; -ne &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;]&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;then&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; &lt;span class=&#34;s2&#34;&gt;&amp;#34;Usage: tcpdump-and-ss-antp.sh logprefix&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;exit&lt;/span&gt; &lt;span class=&#34;m&#34;&gt;1&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;k&#34;&gt;fi&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;logprefix&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$1&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;pids&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ss_antp_loop&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; :&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    date +%FT%T.%N&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ss -antp&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    sleep 0.5&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;done&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;stop_background_processes&lt;span class=&#34;o&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; killing &lt;span class=&#34;nv&#34;&gt;$pids&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nb&#34;&gt;kill&lt;/span&gt; &lt;span class=&#34;nv&#34;&gt;$pids&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;o&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;# 2=SIGINT&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;trap&lt;/span&gt; stop_background_processes &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;k&#34;&gt;$(&lt;/span&gt;hostname&lt;span class=&#34;k&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;ss_antp_loop &amp;gt; /tmp/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;logprefix&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-ss-antp.log &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;pids&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$pids&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$!&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;tcpdump -n -vvv -i any -w /tmp/&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;logprefix&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-&lt;span class=&#34;si&#34;&gt;${&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;host&lt;/span&gt;&lt;span class=&#34;si&#34;&gt;}&lt;/span&gt;-tcpdump.log tcp port &lt;span class=&#34;s1&#34;&gt;&amp;#39;(80 or 443 or 8080 or 9090)&amp;#39;&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;amp;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nv&#34;&gt;pids&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$pids&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt; &lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$!&lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;echo&lt;/span&gt; background &lt;span class=&#34;nv&#34;&gt;pids&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;=&lt;/span&gt;&lt;span class=&#34;nv&#34;&gt;$pids&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;wait&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;複数台のサーバで同時に調査するときは上記のようなスクリプトを各サーバに配置してポートを適宜調整。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VictoriaMetricsのインストール</title>
      <link>https://hnakamur.github.io/blog/2019/12/23/install-victoria-metrics/</link>
      <pubDate>Mon, 23 Dec 2019 00:05:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/23/install-victoria-metrics/</guid>
      <description>&lt;p&gt;参考: &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;github.com/VictoriaMetrics/VictoriaMetrics&lt;/a&gt; の &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics#production-build&#34;&gt;production build&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;予め &lt;a href=&#34;https://golang.org/dl/&#34;&gt;Downloads - The Go Programming Language&lt;/a&gt; の手順で Go の最新版をインストールしておきます。&lt;/p&gt;&#xA;&lt;p&gt;VictoriaMetrics の git レポジトリを clone して最新版のリリースに切り替えます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;git clone https://github.com/VictoriaMetrics/VictoriaMetrics&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;cd VictoriaMetrics&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;git checkout v1.31.2&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;production 版をビルドし生成された実行ファイルを &lt;code&gt;/usr/local/bin/victoriametrics&lt;/code&gt; にインストールします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>aptでgrafanaをインストール</title>
      <link>https://hnakamur.github.io/blog/2019/12/22/install-grafana-via-apt/</link>
      <pubDate>Sun, 22 Dec 2019 23:50:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/22/install-grafana-via-apt/</guid>
      <description>&lt;p&gt;参考: &lt;a href=&#34;https://grafana.com/docs/grafana/latest/installation/debian/&#34;&gt;Install on Debian/Ubuntu | Grafana Labs&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;grafana の apt レポジトリの GPG 鍵を追加します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;curl -sSL https://packages.grafana.com/gpg.key | sudo apt-key add -&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;apt-transport-https をまだ入れていない場合はインストールします。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo apt -y install apt-transport-https&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;apt line を追加します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo &amp;#34;deb https://packages.grafana.com/oss/deb stable main&amp;#34; | sudo tee /etc/apt/sources.list.d/grafana.list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;grafana パッケージをインストールします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>DockerでZFSストレージドライバを使う</title>
      <link>https://hnakamur.github.io/blog/2019/12/21/configure-docker-with-zfs/</link>
      <pubDate>Sat, 21 Dec 2019 21:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/21/configure-docker-with-zfs/</guid>
      <description>&lt;p&gt;参考: &lt;a href=&#34;https://docs.docker.com/storage/storagedriver/zfs-driver/&#34;&gt;Use the ZFS storage driver | Docker Documentation&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;/var/lib/docker&lt;/code&gt; を &lt;code&gt;/var/lib/docker.bak&lt;/code&gt; にリネームして &lt;code&gt;/var/lib/docker&lt;/code&gt; を作り直しパーミションを合わせます。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo mv /var/lib/docker{,.bak}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo mkdir /var/lib/docker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo 711 /var/lib/docker&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;以下では &lt;code&gt;tank1&lt;/code&gt; というボリュームが既にある想定で &lt;code&gt;tank1/docker&lt;/code&gt; ボリュームを新規作成し &lt;code&gt;/var/lib/docker&lt;/code&gt; にマウントポイントを設定します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CoreDNSをWindowsのサービスとして登録するためのラッパをGoで書いてみた</title>
      <link>https://hnakamur.github.io/blog/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</link>
      <pubDate>Wed, 30 Oct 2019 15:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Windows の Hyper-V の Linux 上でサーバサイドの開発をしていると Windows 上のウェブブラウザや Windows Subsystem for Linux の curl からアクセスする際に好みの FQDN でアクセスできるようにしたいというニーズがあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hyper-VのWindows NAT機能を使ってVMのIPアドレスを固定</title>
      <link>https://hnakamur.github.io/blog/2019/10/29/static-ip-address-with-hyper-v-nat/</link>
      <pubDate>Tue, 29 Oct 2019 12:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/10/29/static-ip-address-with-hyper-v-nat/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;multipassでVMを作成すると vEthernet (Default Switch) という仮想イーサネットアダプタが使用されますが、Windowsの再起動のたびにIPアドレスが変わるという問題があります。このため hosts ファイルのVMのアドレスを Windows を再起動するたびに書き換えなければなりません。これは面倒です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>multipassのVM作成時にcloud-initでLXDをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2019/10/21/setup-lxd-on-multipass-using-cloud-init/</link>
      <pubDate>Mon, 21 Oct 2019 06:05:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/10/21/setup-lxd-on-multipass-using-cloud-init/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/CanonicalLtd/multipass&#34;&gt;multipass&lt;/a&gt; ではVMの作成時に &lt;code&gt;multipass launch&lt;/code&gt; の &lt;code&gt;--cloud-init&lt;/code&gt; オプションで &lt;a href=&#34;https://github.com/cloud-init/cloud-init&#34;&gt;cloud-init&lt;/a&gt; を使って初期化を行えます。&lt;/p&gt;&#xA;&lt;p&gt;LXD をセットアップする手順を試行錯誤したのでメモです。&lt;/p&gt;&#xA;&lt;h1 id=&#34;参考資料&#34;&gt;参考資料&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://cloudinit.readthedocs.io/en/latest/topics/modules.html&#34;&gt;cloud-init の Modules のドキュメント&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/cloud-init/cloud-init/blob/ubuntu/19.2-36-g059d049c-0ubuntu2_18.04.1/cloudinit/config/cc_lxd.py&#34;&gt;Ubuntu 18.04 LTS の cloud-init の cc_lxd.py のソース&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;cloud-initの設定ファイル例その1&#34;&gt;cloud-initの設定ファイル例その1&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;まず apt の設定でURLを日本のミラーサイトにします。&lt;/li&gt;&#xA;&lt;li&gt;zfs でループバックのストレージを 80GB で作成します。&lt;/li&gt;&#xA;&lt;li&gt;LXD のストレージバックエンドを zfs にします。&lt;/li&gt;&#xA;&lt;li&gt;LXDのブリッジをデフォルト設定で新規作成します。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-yaml&#34; data-lang=&#34;yaml&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c&#34;&gt;#cloud-config&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;locale&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;en_US.utf8&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;timezone&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;Asia/Tokyo&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;package_upgrade&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;package_reboot_if_required&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;kc&#34;&gt;true&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;apt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;primary&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;- &lt;span class=&#34;nt&#34;&gt;arches&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;amd64&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;        &lt;/span&gt;- &lt;span class=&#34;l&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;      &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;uri&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;s2&#34;&gt;&amp;#34;http://jp.archive.ubuntu.com/ubuntu/&amp;#34;&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;&lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;lxd&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;init&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage_backend&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;zfs&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;storage_create_loop&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;m&#34;&gt;80&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;  &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;bridge&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;w&#34;&gt;    &lt;/span&gt;&lt;span class=&#34;nt&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&lt;span class=&#34;w&#34;&gt; &lt;/span&gt;&lt;span class=&#34;l&#34;&gt;lxdbr0&lt;/span&gt;&lt;span class=&#34;w&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;上記のファイルを &lt;code&gt;lxd-cloud-config.yml&lt;/code&gt; などお好みの名前で保存し、以下のコマンドを実行してVMを作成・起動します。ディスクサイズは上記の zfs のプールサイズ80GBにシステム領域で20GBを使う想定で合計100GBとしています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>multipassのVMにsshで接続</title>
      <link>https://hnakamur.github.io/blog/2019/10/21/access-multipass-vm-via-ssh/</link>
      <pubDate>Mon, 21 Oct 2019 06:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/10/21/access-multipass-vm-via-ssh/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;code&gt;multipass shell&lt;/code&gt; サブコマンドでmultipassで作成したVMにアクセスできますが、ホストから ssh したいケースもあります。&lt;/p&gt;&#xA;&lt;p&gt;というわけでセットアップ手順のメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>仮想マシンマネージャmultipassをWindowsとmacOSで試してみた</title>
      <link>https://hnakamur.github.io/blog/2019/10/17/multipass-on-windows-and-macos/</link>
      <pubDate>Thu, 17 Oct 2019 06:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/10/17/multipass-on-windows-and-macos/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;multipass は私は Linux で &lt;a href=&#34;https://snapcraft.io/first-snap#&#34;&gt;Snapcraft - Snaps are universal Linux packages&lt;/a&gt; のチュートリアルで snap パッケージを作ってみた時にインストールされたのが初めての出会いでしたが、その時はなんかまた新しい仮想マシンのツールが増えたのかぐらいに思っていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDでUbuntuコンテナにロケールとタイムゾーンを設定するプロファイル</title>
      <link>https://hnakamur.github.io/blog/2019/08/15/lxd-profile-to-set-locale-and-timezone-to-ubuntu-container/</link>
      <pubDate>Thu, 15 Aug 2019 12:45:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/08/15/lxd-profile-to-set-locale-and-timezone-to-ubuntu-container/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://blog.simos.info/how-to-preconfigure-lxd-containers-with-cloud-init/&#34;&gt;How to preconfigure LXD containers with cloud-init – Mi blog lah!&lt;/a&gt; に cloud-init を使って Ubuntu コンテナの初期化時にロケールとタイムゾーンを設定する方法が紹介されていたのでメモしておきます。&lt;/p&gt;&#xA;&lt;h1 id=&#34;ubuntu-用のプロファイル作成&#34;&gt;Ubuntu 用のプロファイル作成&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2019/08/15/lxd-container-templates/&#34;&gt;LXDでコンテナの初期化に使われるテンプレート&lt;/a&gt; に書いたように CentOS 7 コンテナは cloud-init 非対応ですので、 Ubuntu 用のプロファイルを作成して、そこにロケールとタイムゾーンの設定を入れることにします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDでコンテナの初期化に使われるテンプレート</title>
      <link>https://hnakamur.github.io/blog/2019/08/15/lxd-container-temlates/</link>
      <pubDate>Thu, 15 Aug 2019 11:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/08/15/lxd-container-temlates/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://cloudinit.readthedocs.io/en/latest/topics/dir_layout.html&#34;&gt;Custom network configuration with cloud-init - LXD - system container manager&lt;/a&gt; に説明がありますが、LXDのコンテナイメージにはいくつかのテンプレートファイルがメタデータとして含まれていて、コンテナの初期化の際に使用されます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goで書き込み中のファイルをHTTPレスポンスとして返す</title>
      <link>https://hnakamur.github.io/blog/2019/01/31/serve-file-as-http-response-while-writing-in-go/</link>
      <pubDate>Thu, 31 Jan 2019 11:50:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/01/31/serve-file-as-http-response-while-writing-in-go/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Goで別のgoroutineで書き込み中のファイルをHTTPレスポンスとして返せないかなと思って試行錯誤してみたところ、出来たのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PXEブートでVyOSをインストール</title>
      <link>https://hnakamur.github.io/blog/2018/10/08/install-vyos-with-pxe-boot/</link>
      <pubDate>Mon, 08 Oct 2018 18:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/10/08/install-vyos-with-pxe-boot/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;半年前くらいに &lt;a href=&#34;https://twitter.com/yamamasa23&#34;&gt;yamamasa23&lt;/a&gt; さんの真似して中古で買った&#xA;&lt;a href=&#34;https://store.atworks.co.jp/eol/eol2012/quad-beagle-zg/&#34;&gt;Quad Beagle ZG&lt;/a&gt;&#xA;に PXE ブートで &lt;a href=&#34;https://vyos.io/&#34;&gt;VyOS&lt;/a&gt; をインストールしてみたメモです。&lt;/p&gt;&#xA;&lt;p&gt;手順は &lt;a href=&#34;https://wiki.vyos.net/wiki/PXE&#34;&gt;PXE - VyOS Wiki&lt;/a&gt; を参考にしました。&lt;/p&gt;&#xA;&lt;p&gt;私は EdgeRouter-Lite で EdgeOS は利用していますが、 VyOS は今回が初めてです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginx luaでSAMLのService Providerを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2018/07/31/saml-service-provider-with-nginx-lua/</link>
      <pubDate>Tue, 31 Jul 2018 10:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/31/saml-service-provider-with-nginx-lua/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/&#34;&gt;nginxとshibbolethでSAML2のシングルサインオンを試してみた&lt;/a&gt; では &lt;a href=&#34;https://www.shibboleth.net/products/service-provider/&#34;&gt;Service Provider – Shibboleth Consortium&lt;/a&gt; を使いましたが、汎用的な分、設定方法のドキュメント&#xA;&lt;a href=&#34;https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPConfiguration&#34;&gt;NativeSPConfiguration - Shibboleth 2 - Shibboleth Wiki&lt;/a&gt; を見ても圧倒される感がありました （なお、ページ上部の囲みを見ると Shibboleth SP は先日 3.x がリリースされて 2.x はEOLになったそうです）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>macOS→VagrantのUbuntu→LXDコンテナへのポートフォワーディング</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-macos-vagrant-lxd/</link>
      <pubDate>Thu, 05 Jul 2018 16:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-macos-vagrant-lxd/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/&#34;&gt;VagrantでUbuntu 18.04 LTSとLXDをインストールする手順&lt;/a&gt; で構築したLXDの環境で、macOS→VagrantのUbuntu→LXDコンテナへのポートフォワーディングをしたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VagrantでUbuntu 18.04 LTSとLXDをインストールする手順</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/</link>
      <pubDate>Thu, 05 Jul 2018 15:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;私自身は職場でも自宅でも Ubuntu MATE 18.04 LTS を使っていてVagrantはもう使っていません。&#xA;ですが職場の同僚が macOS を使っていてLXDの環境をセットアップするのに少々手間どったのでメモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDのコンテナイメージのエクスポート・インポート</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/export-and-import-lxd-container-image/</link>
      <pubDate>Thu, 05 Jul 2018 14:50:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/05/export-and-import-lxd-container-image/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/&#34;&gt;nginxとshibbolethでSAML2のシングルサインオンを試してみた&lt;/a&gt; で使ったCentOS7のLXDコンテナのイメージをエクスポートし、別のマシンにコピーしてインポートするのを試してみたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;LXD 3.2で試しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDのproxyを使ってポートフォワーディング</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-using-lxd-proxy/</link>
      <pubDate>Thu, 05 Jul 2018 08:50:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-using-lxd-proxy/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;LXDのコンテナでnginxを動かして、ホストからChromeなどのブラウザでアクセスしたいことがよくあります。&lt;/p&gt;&#xA;&lt;p&gt;LXDのイシューを見るとiptablesで実現可能とのことなのですが、iptablesとネットワークに弱い私がコマンド例を見て雰囲気で実行してもうまくできず、回避策としてホストでnginxを動かしてリバースプロキシでLXDコンテナのnginxに繋いで使っていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginxとshibbolethでSAML2のシングルサインオンを試してみた</title>
      <link>https://hnakamur.github.io/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</link>
      <pubDate>Wed, 04 Jul 2018 16:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;勤務先でSAML2のシングルサインオンについて調査していたところ&#xA;&lt;a href=&#34;https://github.com/nginx-shib/nginx-http-shibboleth/issues/16&#34;&gt;Is this module compatible with SAML 2 in HTTP POST mode? · Issue #16 · nginx-shib/nginx-http-shibboleth&lt;/a&gt;&#xA;というイシューを見つけました。&#xA;この nginx-http-shibboleth というモジュールを使えば実現できそうということで、&#xA;nginxとshibbolethでSAML2のシングルサインオンを試してみたメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go-carbonのdebパッケージをsbuildとPPAでビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</link>
      <pubDate>Fri, 15 Jun 2018 10:55:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lomik/go-carbon&#34;&gt;lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister&lt;/a&gt;&#xA;のdebパッケージをsbuildとPPAでビルドしたときのメモです。&lt;/p&gt;&#xA;&lt;p&gt;成果物は以下に有ります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PPA: &lt;a href=&#34;https://launchpad.net/~hnakamur/+archive/ubuntu/go-carbon&#34;&gt;go-carbon : Hiroaki Nakamura&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;debソースレポジトリ: &lt;a href=&#34;https://github.com/hnakamur/go-carbon-deb&#34;&gt;hnakamur/go-carbon-deb: go-carbon deb package for Ubuntu 18.04 LTS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;debianでのgoのパッケージング方針&#34;&gt;debianでのgoのパッケージング方針&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wiki.debian.org/MichaelStapelberg/GoPackaging&#34;&gt;MichaelStapelberg/GoPackaging - Debian Wiki&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://go-team.pages.debian.net/packaging.html&#34;&gt;Debian Go Packaging&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;に書いてあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>sbuildで外部レポジトリを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</link>
      <pubDate>Fri, 15 Jun 2018 10:12:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;外部レポジトリのdebパッケージに依存したdebパッケージをsbuildでビルドするための手順メモです。&lt;/p&gt;&#xA;&lt;p&gt;以下の2つの方法がありますが、別のchroot環境を作る必要がないので2つめのほうが良いです。1つめの方法は別の用途にも使えるかもしれないので一応メモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PPAでのビルドの予行演習にsbuildを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</link>
      <pubDate>Wed, 13 Jun 2018 18:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;PPAでビルドする前に手元でビルドが通ることを確認したくてpbuilderを使っていましたが、pbuilderではビルドが通るのにPPAでは通らないケースが何度か起きたのでsbuildを使い始めました。使い方がある程度わかってきたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>universal-ctagsのUbuntu 18.04 LTS用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Fri, 08 Jun 2018 00:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;ctagsというと Ubuntu 18.04 LTS には&#xA;&lt;a href=&#34;https://packages.ubuntu.com/bionic/exuberant-ctags&#34;&gt;exuberant-ctags (1:5.9~svn20110310-11)&lt;/a&gt;&#xA;というパッケージがあります。ですが、バージョン番号のsvnの後の日付が2011年とあるようにかなり古いです。&lt;/p&gt;&#xA;&lt;p&gt;検索してみると&#xA;&lt;a href=&#34;https://github.com/universal-ctags/ctags&#34;&gt;universal-ctags/ctags: A maintained ctags implementation&lt;/a&gt;&#xA;活発に開発されているので、こちらを使うことにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04 LTSでsbuildをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</link>
      <pubDate>Thu, 07 Jun 2018 21:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;手元でpbuilderでdebパッケージのビルドが通ってからPPAでビルドしたらテストの1つがエラーになるという問題が起きてしまい、ビルドログを見てみると以下のような行があって &lt;code&gt;sbuild&lt;/code&gt; を使っていることに気づきました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginxのコードリーディングにrtagsを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</link>
      <pubDate>Wed, 23 May 2018 22:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/&#34;&gt;Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した&lt;/a&gt; で作成したrtagsを使ってnginxのコードリーディングをするための手順メモです。&lt;/p&gt;&#xA;&lt;p&gt;configure で生成される &lt;code&gt;ngx_auto_config.h&lt;/code&gt; と &lt;code&gt;ngx_auto_headers.h&lt;/code&gt; も含めて読みたいというのと、rtagsのREADMEの &lt;code&gt;Setup](https://github.com/Andersbakken/rtags#setup) のうちnginxでは [Bear](https://github.com/rizsotto/Bear) を使って &lt;/code&gt;compile_commands.json&lt;code&gt;を生成するという関係もあり、&lt;/code&gt;debパッケージを使ってnginxモジュールをビルド・デバッグする](&lt;a href=&#34;https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/&#34;&gt;https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/&lt;/a&gt;) と似た感じでビルドしていくことになります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Wed, 23 May 2018 14:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/09/05/built-rtags-deb/&#34;&gt;rtagsのdebパッケージを作成した&lt;/a&gt; のときのメモを端折りすぎて、Ubuntu 18.04 LTS用に rtags 2.18のパッケージを作ろうと思ったら苦労したのでメモしておきます。&lt;/p&gt;&#xA;&lt;h1 id=&#34;ビルドのメモ&#34;&gt;ビルドのメモ&lt;/h1&gt;&#xA;&lt;h2 id=&#34;参考-gcc-8とllvm-60入りのpbuilderのchroot環境作成&#34;&gt;(参考) gcc-8とLLVM 6.0入りのpbuilderのchroot環境作成&lt;/h2&gt;&#xA;&lt;p&gt;よくよく考えたらこの手順は不要ですが、今後別件で使うかもしれないのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04 LTSにSlack 3.2.0-beta.2をインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/22/install-slack-3.2.0-beta.2-on-ubuntu-18.04-lts/</link>
      <pubDate>Tue, 22 May 2018 15:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/22/install-slack-3.2.0-beta.2-on-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Ubuntu MATE 18.04 LTSにSlack 3.2.0-beta.2をインストールしたときのメモです。&lt;/p&gt;&#xA;&lt;h1 id=&#34;snapパッケージでのインストール&#34;&gt;snapパッケージでのインストール&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://get.slack.help/hc/ja/articles/212924728-Linux%E7%89%88-Slack-%CE%B2%E7%89%88-&#34;&gt;Linux版 Slack  (β版) – Slack&lt;/a&gt; によると、snapパッケージが提供されていて以下のコマンドでインストールできます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntuのデスクトップ環境でsshのパスフレーズ入力を1回だけにする</title>
      <link>https://hnakamur.github.io/blog/2018/05/21/input-ssh-passphrase-only-once-on-ubuntu-desktop/</link>
      <pubDate>Mon, 21 May 2018 16:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/21/input-ssh-passphrase-only-once-on-ubuntu-desktop/</guid>
      <description>&lt;p&gt;Ubuntuのデスクトップ環境でssh-agentを使ってsshのパスフレーズ入力を1回だけで良いようにするための設定メモです。&lt;/p&gt;&#xA;&lt;p&gt;といっても、&#xA;&lt;a href=&#34;http://www.clear-code.com/blog/2017/11/8.html&#34;&gt;Windows 10のWindows Subsystem for Linux（WSL）を日常的に活用する - ククログ(2017-11-08)&lt;/a&gt;&#xA;に書かれていたスクリプトをほぼそのまま頂いただけです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ClamAVをUbuntu MATE 18.04 LTSにセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/05/21/setup-clamav-on-ubuntu-mate-18.04-lts/</link>
      <pubDate>Mon, 21 May 2018 15:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/21/setup-clamav-on-ubuntu-mate-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Ubuntu MATE 18.04 LTSの環境にオープンソースのアンチウィルスソフト &lt;a href=&#34;https://www.clamav.net/&#34;&gt;ClamAV&lt;/a&gt; をセットアップしてみたメモです。例によっていろいろ試行錯誤した後に思い出しながら書いているので、多少抜けがあるかも。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu MATE 18.04 LTSの私用設定メモ</title>
      <link>https://hnakamur.github.io/blog/2018/05/21/my-settings-on-ubunt-mate/</link>
      <pubDate>Mon, 21 May 2018 12:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/21/my-settings-on-ubunt-mate/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;USキーボードのThinkPad T480sとThinkPad X260にUbuntu MATE 18.04 LTSをセットアップしました。ということで自分用の設定メモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>debパッケージを使ってnginxモジュールをビルド・デバッグする</title>
      <link>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</link>
      <pubDate>Thu, 10 May 2018 09:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;私は &lt;a href=&#34;https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/&#34;&gt;私のnginxのカスタムrpmとdebをビルドする手順&lt;/a&gt; でサードパーティモジュールを含んだnginxのパッケージをビルドしています。&lt;/p&gt;&#xA;&lt;p&gt;このパッケージに自作モジュールを追加して開発するためのビルド手順を考えてみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04でVPN切断後にホスト名解決が動くようにするための回避策</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/workaround-to-get-dns-working-after-vpn-disconnection-on-ubuntu-18.04/</link>
      <pubDate>Sun, 06 May 2018 20:35:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/06/workaround-to-get-dns-working-after-vpn-disconnection-on-ubuntu-18.04/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/03/31/l2tp-vpn-on-ubuntu-17.10/&#34;&gt;Ubuntu 17.10でL2TPのVPN接続を試してみた&lt;/a&gt; でVPN切断後にホスト名解決が動かなくなるのでWifiを一旦オフにしてオンにしていたのですが、それよりはマシな回避策を見つけたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntuでsnapを使って最新バージョンのgoをインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</link>
      <pubDate>Sun, 06 May 2018 15:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</guid>
      <description>&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;&#xA;&lt;p&gt;私が今後あちこちの環境でインストールすることになるので結論を先にメモしておきます。&lt;/p&gt;&#xA;&lt;p&gt;Ubuntuでsnapを使ってgo 1.10.xの最新版をインストールするには以下のコマンドを実行すればOKです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GNOME上でEmacsライクなキーバインディングを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/use-emacs-like-keybindings-on-gnome/</link>
      <pubDate>Sun, 06 May 2018 14:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/06/use-emacs-like-keybindings-on-gnome/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;元々macOSのChromeでURL欄を編集するときにEmacsライクなキーバインディングを使うのに慣れていたので、GNOMEのChromeもそう変更できないかと思って調べると以下の記事を見つけました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MacBook Pro上のUbuntu 18.04でサスペンドが動くようにする</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/make-suspend-working-in-ubuntu-18.04-on-macbook-pro/</link>
      <pubDate>Sun, 06 May 2018 09:45:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/06/make-suspend-working-in-ubuntu-18.04-on-macbook-pro/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;MacBook Pro 15-inch, Mid 2012 (機種ID: MacBookPro10,1)にUbuntu 18.04をインストールしてみたのですが、動かしたまま画面を閉じるとAppleマークのライトは消えるのですがファンは回り続け、その後画面を開いても復帰しない状態でした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GNOMEの端末でssh-addを自動実行</title>
      <link>https://hnakamur.github.io/blog/2018/05/05/run-ssh-add-on-gnome-terminal/</link>
      <pubDate>Sat, 05 May 2018 00:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/05/run-ssh-add-on-gnome-terminal/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;UbuntuのGNOME環境では「自動起動するアプリケーションの設定」でSSH鍵エージェントが設定されています。&#xA;端末を起動したときに自動的に &lt;code&gt;ssh-add&lt;/code&gt; で秘密鍵を追加して一度だけパスフレーズを入力すれば&#xA;後はパスフレーズ無しで行けるようにするための設定メモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GNOME Shellの時刻表示に日付や秒を表示</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/display-date-and-seconds-on-gnome-shell/</link>
      <pubDate>Fri, 04 May 2018 21:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/04/display-date-and-seconds-on-gnome-shell/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://askubuntu.com/questions/312138/how-do-i-change-the-date-format-in-gnome-3-shell?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&#34;&gt;How do I change the date format in Gnome 3 shell? - Ask Ubuntu&lt;/a&gt;&#xA;を参考にしました。&lt;/p&gt;&#xA;&lt;p&gt;日本語環境の場合デフォルトでは「金曜日 21 : 32」のようになっていました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;日付を表示&#34;&gt;日付を表示&lt;/h2&gt;&#xA;&lt;p&gt;以下のコマンドを実行すると「5月 4日 (金) 21 : 32」という形式で日付も表示されるようになります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>pbuilderで特定のディストリビューションのchroot環境を作成</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/create-pbuilder-chroot-of-specified-distribution/</link>
      <pubDate>Fri, 04 May 2018 21:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/04/create-pbuilder-chroot-of-specified-distribution/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 18.04上のpbuilderでUbuntu 16.04用のchroot環境を作成するというようにホストと違うディストリビューションのchroot環境を作成する手順のメモです。&#xA;といっても &lt;code&gt;pbuilder&lt;/code&gt; の &lt;code&gt;--distribution&lt;/code&gt; オプションを指定するだけです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>apt-markを使ってdebパッケージのバージョン固定</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</link>
      <pubDate>Fri, 04 May 2018 21:05:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt; にはmainline版とstable版がありますが、&#xA;&lt;a href=&#34;https://bokko.hatenablog.com/entry/2014/05/24/220554&#34;&gt;どのバージョンのnginxを使うべきか？ - 考える人、コードを書く人&lt;/a&gt; を参考に私はmainline版をベースにして &lt;a href=&#34;https://github.com/openresty/lua-nginx-module/&#34;&gt;openresty/lua-nginx-module&lt;/a&gt; などのモジュールを加えたカスタムdebパッケージを作っています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04でaptを使ってchromeをインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/install-chrome-using-apt-on-ubuntu-18.04/</link>
      <pubDate>Fri, 04 May 2018 21:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/04/install-chrome-using-apt-on-ubuntu-18.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ubuntu-18-04.blogspot.com/2017/12/how-to-install-google-chrome-on-ubuntu-18-04.html&#34;&gt;How to install google chrome on ubuntu 18.04 / 18.10&lt;/a&gt; を参考にUbuntu 18.04でaptを使ってchromeをインストールしたメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストール手順&#34;&gt;インストール手順&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;curl https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo &amp;#39;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&amp;#39; | sudo tee /etc/apt/sources.list.d/google-chrome.list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo apt update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo apt install google-chrome-stable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>macOS High SierraとUbuntu 18.04でVeraCryptを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/02/use-veracrypt-on-mac-os-high-sierra-and-ubuntu-18.04/</link>
      <pubDate>Wed, 02 May 2018 21:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/02/use-veracrypt-on-mac-os-high-sierra-and-ubuntu-18.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/04/22/use-VeraCrypt-for-data-partition/&#34;&gt;VeraCryptでデータパーティションを暗号化してみた&lt;/a&gt; ではWindows 10とUbuntu 17.10のデュアルブート環境でデータ用パーティションをマウントするというのを試しましたが、今回はmacOS High SierraとUbuntu 18.04のデュアルブート環境で試しました。前回と違うところだけメモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04でcopr-cliのdebパッケージを作ったときのメモ</title>
      <link>https://hnakamur.github.io/blog/2018/05/01/build-copr-cli-deb-package-for-ubuntu18.04/</link>
      <pubDate>Tue, 01 May 2018 12:35:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/01/build-copr-cli-deb-package-for-ubuntu18.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8000/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/&#34;&gt;Ubuntu16.04でrpmビルド用にmockとcopr-cliをセットアップ&lt;/a&gt; に書いた copr-cli パッケージのビルド手順をサボってメモしてなかったのですが、Ubuntu 18.04 用にビルドする時に手間取ったのでメモしておきます。と言いつつ作業後に思い出しながら書いているので適当です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04でgit-buildpackageとfreightを使うときのメモ</title>
      <link>https://hnakamur.github.io/blog/2018/05/01/ubuntu-18.04-git-buildpackage-freight/</link>
      <pubDate>Tue, 01 May 2018 12:35:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/01/ubuntu-18.04-git-buildpackage-freight/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/&#34;&gt;git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/08/05/create-private-deb-repository-with-freight/&#34;&gt;freightでプライベートdebレポジトリ作成&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/&#34;&gt;git-buildpacakgeとfreightでパスフレーズをファイルから入力させる&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;に書いた git-buildpackage と freight の環境を Ubuntu 18.04 でも作ったのですが、少し変更が必要だったのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;gbp-buildpacakgeには-dオプションを指定&#34;&gt;gbp buildpacakgeには-dオプションを指定&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 16.04 のときには以下のコマンドでソースパッケージをビルドしていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04上にUbuntu 18.04のPXEブートサーバをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/04/24/ubuntu18.04-pxe-boot-server-on-ubuntu16.04/</link>
      <pubDate>Tue, 24 Apr 2018 01:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/24/ubuntu18.04-pxe-boot-server-on-ubuntu16.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/04/23/setup-router-on-ubuntu16.04/&#34;&gt;Ubuntu 16.04をルーター化&lt;/a&gt; したところに&#xA;Ubuntu 18.04のPXEブートサーバをセットアップしたメモです。&lt;/p&gt;&#xA;&lt;p&gt;Ubuntu 18.04はリリース前の&#xA;&lt;a href=&#34;http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/20101020ubuntu538/&#34;&gt;2018-04-21版&lt;/a&gt;&#xA;を使いました。&lt;/p&gt;&#xA;&lt;p&gt;手順は&#xA;&lt;a href=&#34;https://www.hiroom2.com/2016/05/05/ubuntu-16-04-debian-8%E3%81%ABpxe%E3%83%96%E3%83%BC%E3%83%88%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%A6%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E3%81%88%E3%82%8B/&#34;&gt;Ubuntu 16.04 / Debian 8: PXEブートサーバをインストールしてネットワークインストール環境を整える - Narrow Escape&lt;/a&gt;&#xA;を参考にしましたが、preseedは今回は使わないようにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04をルーター化</title>
      <link>https://hnakamur.github.io/blog/2018/04/23/setup-router-on-ubuntu16.04/</link>
      <pubDate>Mon, 23 Apr 2018 00:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/23/setup-router-on-ubuntu16.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;LANポートが2つついているFUJITSU PRIMERGY TX1310 M1でUbuntu 16.04をルーター化したメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://qiita.com/koshilife/items/2fa1436248f1d4938861&#34;&gt;Ubuntu 14.04のルーター化 - Qiita&lt;/a&gt; を参考にしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VeraCryptでデータパーティションを暗号化してみた</title>
      <link>https://hnakamur.github.io/blog/2018/04/22/use-veracrypt-for-data-partition/</link>
      <pubDate>Sun, 22 Apr 2018 20:45:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/22/use-veracrypt-for-data-partition/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Windows 10とUbuntu 16.04のデュアルブート環境でデータ用のパーティションを &lt;a href=&#34;https://www.veracrypt.fr/en/Home.html&#34;&gt;VeraCrypt - Free Open source disk encryption with strong security for the Paranoid&lt;/a&gt; で暗号化して&#xA;両方からマウントするというのを試してみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu16.04でrpmビルド用にmockとcopr-cliをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/</link>
      <pubDate>Sat, 21 Apr 2018 21:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 16.04で &lt;a href=&#34;https://github.com/rpm-software-management/mock&#34;&gt;mock&lt;/a&gt; でローカルでrpmをビルドするための環境構築の手順メモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.fedoraproject.org/deployment/copr/about.html&#34;&gt;Copr Build Service&lt;/a&gt; でrpmをビルドする際に、ビルドが通ることを事前に確認するために mock を使ってローカルでrpmをビルドするようにしています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu16.04でセカンダリIPアドレス追加</title>
      <link>https://hnakamur.github.io/blog/2018/04/21/add-secondary-ip-address-on-ubuntu-16.04/</link>
      <pubDate>Sat, 21 Apr 2018 12:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/21/add-secondary-ip-address-on-ubuntu-16.04/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://askubuntu.com/questions/313877/how-do-i-add-an-additional-ip-address-to-etc-network-interfaces?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&#34;&gt;networking - How do I add an additional IP address to /etc/network/interfaces? - Ask Ubuntu&lt;/a&gt; とそこでコメントされていた&#xA;&lt;a href=&#34;https://wiki.debian.org/NetworkConfiguration#iproute2_method&#34;&gt;NetworkConfiguration - Debian Wiki の iproute2 method&lt;/a&gt;&#xA;を見て試してみたメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.debian.org/NetworkConfiguration#iproute2_method&#34;&gt;NetworkConfiguration - Debian Wiki の iproute2 method&lt;/a&gt; で書かれていたのは &lt;code&gt;/etc/network/interfaces&lt;/code&gt; で同じネットワークインタフェース名に対して &lt;code&gt;iface&lt;/code&gt; セクションを繰り返して複数書くという方式です。ドライバとハードウェアの組み合わせによっては正しく動かず危険とのことなので要注意です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>私のgoのrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/2018/04/05/building-my-golang-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 11:21:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/05/building-my-golang-rpm-and-deb/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;golangの非公式rpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている&#xA;手順をピックアップしながら毎度ビルドしているのは良くないので、自分用にまとめておきます。&#xA;なおこの手順は私の手元の環境と自作コマンドに依存しているので、他の環境でコピペしても動きません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>私のnginxのカスタムrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 08:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;nginxのカスタムrpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている&#xA;手順をピックアップしながら毎度ビルドしているのは良くないので、自分用にまとめておきます。&#xA;なおこの手順は私の手元の環境と自作コマンドに依存しているので、他の環境でコピペしても動きません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows10のパーティションを縮小するために移動できないファイルを消す</title>
      <link>https://hnakamur.github.io/blog/2018/04/02/delete-unmovable-files-to-shrink-windows10-partition/</link>
      <pubDate>Mon, 02 Apr 2018 00:16:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/02/delete-unmovable-files-to-shrink-windows10-partition/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;WindowsとUbuntuでデュアルブートするためにWindowsのパーティションを縮小&#xA;するのですが、前回試したときは移動できないファイルがあるというようなことを&#xA;言われてあまり縮小できませんでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10でスクリーンショットを作成してgimpで編集</title>
      <link>https://hnakamur.github.io/blog/2018/03/31/create-and-edit-screenshots-with-gimp-on-ubuntu-17.10/</link>
      <pubDate>Sat, 31 Mar 2018 10:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/31/create-and-edit-screenshots-with-gimp-on-ubuntu-17.10/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Ubuntu 17.10でスクリーンショットを作成してgimpで編集する際の手順メモです。&lt;/p&gt;&#xA;&lt;h1 id=&#34;スクリーンショット作成&#34;&gt;スクリーンショット作成&lt;/h1&gt;&#xA;&lt;p&gt;GNOMEのスクリーンショットのアプリケーションで作成しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10でL2TPのVPN接続を試してみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/31/l2tp-vpn-on-ubuntu-17.10/</link>
      <pubDate>Sat, 31 Mar 2018 08:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/31/l2tp-vpn-on-ubuntu-17.10/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Ubuntu 17.10でL2TPのVPN接続を試してみたのでメモです。&#xA;以下の手順の一部は接続先の設定に依存して変動がありえます。&lt;/p&gt;&#xA;&lt;h1 id=&#34;セットアップ&#34;&gt;セットアップ&lt;/h1&gt;&#xA;&lt;h2 id=&#34;必要なソフトウェアをインストール&#34;&gt;必要なソフトウェアをインストール&lt;/h2&gt;&#xA;&lt;p&gt;network-manager-l2tp-gnomeをインストール。依存関係でnetwork-manager-l2tpやxl2tpdも入ります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10とgnomeとIBus mozcのキーボードショートカットを自分好みに設定</title>
      <link>https://hnakamur.github.io/blog/2018/03/30/ubuntu-17.10-gnome-ibus-mozc-keyboard-shortcut/</link>
      <pubDate>Fri, 30 Mar 2018 16:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/30/ubuntu-17.10-gnome-ibus-mozc-keyboard-shortcut/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;私はThinkPadとMacBook ProでともにUSキーボードを使っています。&#xA;Windows、macOS、Ubuntuでウィンドウ切り替えと日本語入力切り替えのキーボードショートカットを設定したのでメモです。&#xA;日本語入力はWindowsとmacOSでは &lt;a href=&#34;https://www.google.co.jp/ime/&#34;&gt;Google 日本語入力 – Google&lt;/a&gt; 、&#xA;UbuntuではIBusと &lt;a href=&#34;https://github.com/google/mozc&#34;&gt;google/mozc: Mozc - a Japanese Input Method Editor designed for multi-platform&lt;/a&gt; です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10とWindows10でデュアルブート構成にしてみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-windows10-dual-boot/</link>
      <pubDate>Fri, 23 Mar 2018 20:15:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-windows10-dual-boot/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/&#34;&gt;Ubuntu 17.10とmacOS High Sierraでデュアルブート構成にしてみた&lt;/a&gt; の後、ThinkPad X260でUbuntu 17.10とWindows10でデュアルブート構成も試してみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10とmacOS High Sierraでデュアルブート構成にしてみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/</link>
      <pubDate>Fri, 23 Mar 2018 14:50:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;個人的にLinuxデスクトップの機運が高まってきたので、Ubuntu 17.10のデスクトップ環境を試してみました。&#xA;例によって自分用メモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EdgeRouter LiteでDuckDNSとCloudFlareでダイナミックDNSを試してみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/19/use-duckdns-and-cloudflare-dyndns-on-edgerouter/</link>
      <pubDate>Mon, 19 Mar 2018 17:26:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/19/use-duckdns-and-cloudflare-dyndns-on-edgerouter/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://yabe.jp/gadgets/edgerouter-x-05-ddns/&#34;&gt;EdgeRouter X - 5. ダイナミック DNS の設定 ( DDNS ) | yabe.jp&lt;/a&gt;&#xA;という素晴らしい記事を見つけて、試してみたメモです。&lt;/p&gt;&#xA;&lt;p&gt;私の環境では設定対象のネットワークインターフェースは &lt;code&gt;pppoe0&lt;/code&gt; です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>特定のドメインの証明書の有効期限をコマンドで確認する</title>
      <link>https://hnakamur.github.io/blog/2018/03/13/show-certificate-validity/</link>
      <pubDate>Tue, 13 Mar 2018 11:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/13/show-certificate-validity/</guid>
      <description>&lt;p&gt;職場で見かけたので、ちょっとアレンジしてメモ。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;openssl s_client -connect example.com:443 -showcerts &amp;lt; /dev/null 2&amp;gt; /dev/null \&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;   | openssl x509 -text | grep -A 2 Validity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実行例。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; openssl s_client -connect example.com:443 -showcerts &amp;lt; /dev/null 2&amp;gt; /dev/null &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; openssl x509 -text &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep -A &lt;span class=&#34;m&#34;&gt;2&lt;/span&gt; Validity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;        Validity&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;            Not Before: Nov  3 00:00:00 2015 GMT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;            Not After : Nov 28 12:00:00 2018 GMT&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>goで書いたコードがヒープ割り当てになるかを確認する方法</title>
      <link>https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/</link>
      <pubDate>Tue, 30 Jan 2018 06:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/&#34;&gt;Allocation Efficiency in High-Performance Go Services · Segment Blog&lt;/a&gt; という記事を読みました。素晴らしいのでぜひ一読をお勧めします。&lt;/p&gt;&#xA;&lt;p&gt;この記事は自分の理解と実際に試してみた結果のメモです。&lt;/p&gt;&#xA;&lt;p&gt;一番のポイントは &lt;code&gt;go build -gcflags &#39;-m&#39;&lt;/code&gt; のようにオプションを指定してビルドすればコードのどの箇所でヒープ割り当てが発生したかを確認できるということです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>rustのHTTPライブラリについて情報収集した</title>
      <link>https://hnakamur.github.io/blog/2018/01/29/rust-http-libraries/</link>
      <pubDate>Mon, 29 Jan 2018 05:08:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/01/29/rust-http-libraries/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;rustのHTTPライブラリの現状について検索して軽く情報収集したので、&#xA;HTTPに関連したIOライブラリも含めてメモしておきます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;非同期io関連の動向&#34;&gt;非同期IO関連の動向&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/tokio-rs/tokio-rfcs/pull/3&#34;&gt;RFC: Tokio reform, take 2 by aturon · Pull Request #3 · tokio-rs/tokio-rfcs&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/tokio-rs/tokio-proto/issues/202&#34;&gt;Question: What&amp;rsquo;s the future of tokio-proto and should new libraries depend on it? · Issue #202 · tokio-rs/tokio-proto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gist.github.com/sile/87f0732236e2ebc6d108ac95a2d444c6&#34;&gt;Rustの『RFC 2033: 実験的なコルーチン』の要約メモ&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RFCは2017-06-09にマージされてた。 &lt;a href=&#34;https://github.com/rust-lang/rfcs/pull/2033#issuecomment-309603972&#34;&gt;eRFC: Experimentally add coroutines to Rust by alexcrichton · Pull Request #2033 · rust-lang/rfcs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/alexcrichton/futures-await&#34;&gt;alexcrichton/futures-await&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Async/await syntax for Rust and the futures crate&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang-nursery/futures-rs&#34;&gt;rust-lang-nursery/futures-rs: Zero-cost futures and streams in Rust&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Zero-cost futures and streams in Rust&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpライブラリ&#34;&gt;HTTPライブラリ&lt;/h2&gt;&#xA;&lt;h4 id=&#34;http2&#34;&gt;HTTP/2&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/carllerche/h2&#34;&gt;https://github.com/carllerche/h2&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rustupでrustをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/01/29/setup-rust-with-rustup/</link>
      <pubDate>Mon, 29 Jan 2018 01:06:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/01/29/setup-rust-with-rustup/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 16.04の環境にrustをセットアップしたときのメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストール手順のドキュメント&#34;&gt;インストール手順のドキュメント&lt;/h2&gt;&#xA;&lt;p&gt;rustup の&#xA;&lt;a href=&#34;https://github.com/rust-lang-nursery/rustup.rs#installation&#34;&gt;Installation&lt;/a&gt; には&#xA;&lt;a href=&#34;https://www.rustup.rs/&#34;&gt;www.rustup.rs&lt;/a&gt; の手順に従うように書いてありますが、&#xA;Windowsで見るとWindows用の手順が表示されてLinux用の手順が見れないので、&#xA;&lt;a href=&#34;https://github.com/rust-lang-nursery/rustup.rs#other-installation-methods&#34;&gt;Other installation methods&lt;/a&gt; のほうを見ます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go1.10rc1のdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</link>
      <pubDate>Sun, 28 Jan 2018 21:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/08/05/built-golang-1.9rc1-deb-package/&#34;&gt;golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした&lt;/a&gt; 以降go1.9.xのdebパッケージを &lt;a href=&#34;https://honk.sigxcpu.org/piki/projects/git-buildpackage/&#34;&gt;git-buildpackage&lt;/a&gt; で作っていましたが、今回 go1.10rc1 のdebパッケージを作ってみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua-nginx-moduleのshared dictの空き容量について</title>
      <link>https://hnakamur.github.io/blog/2017/10/11/lua-nginx-shared-dict-free-space/</link>
      <pubDate>Wed, 11 Oct 2017 11:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/10/11/lua-nginx-shared-dict-free-space/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers&lt;/a&gt; の&#xA;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;&#xA;は複数ワーカープロセス間でデータを共有することができ、非常に便利です。&lt;/p&gt;&#xA;&lt;p&gt;使用する際は&#xA;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt; ディレクティブ&#xA;で以下のように shared dict の名称とサイズを指定する必要があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでcontext非対応の関数をcontext対応にするラッパ関数を書いた</title>
      <link>https://hnakamur.github.io/blog/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</link>
      <pubDate>Thu, 05 Oct 2017 20:32:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Goの &lt;a href=&#34;https://golang.org/pkg/net/http/#Server&#34;&gt;net/http.Server&lt;/a&gt; でグレースフルシャットダウンを行う際の注意点として&#xA;&lt;a href=&#34;https://shogo82148.github.io/blog/2017/01/21/golang-1-dot-8-graceful-shutdown/&#34;&gt;Go1.8のGraceful Shutdownとgo-gracedownの対応 - Shogo&amp;rsquo;s Blog&lt;/a&gt;&#xA;のブログ記事で以下の3点が紹介されていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua-nginx-moduleのshared dictのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/09/27/code-reading-lua-nginx-shared-dict/</link>
      <pubDate>Wed, 27 Sep 2017 08:57:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/27/code-reading-lua-nginx-shared-dict/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers&lt;/a&gt;&#xA;の&#xA;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;&#xA;を使う際&#xA;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt;&#xA;ディレクティブで&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    lua_shared_dict dogs 10m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のように dict のサイズを指定しますが、容量が足りているかを確認するため実際の使用量をモニタリングしたいと思いました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ChromeとFirefoxの拡張機能を書くのにasync/awaitを使ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/09/18/use-async-await-in-writing-chrome-and-firefox-extensions/</link>
      <pubDate>Mon, 18 Sep 2017 12:35:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/18/use-async-await-in-writing-chrome-and-firefox-extensions/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;私はChromeとFirefox用に以下の拡張機能を書いて使っています。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/FormatLink-Chrome&#34;&gt;FormatLink-Chrome&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/FormatLink-Firefox&#34;&gt;FormatLink-Firefox&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;今回UIを改変する際についでに async と await を使って書くように変更してみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのプロファイラを使ってメモリ割り当て回数を減らす</title>
      <link>https://hnakamur.github.io/blog/2017/09/14/reduce-memory-allocations-using-go-profiler/</link>
      <pubDate>Thu, 14 Sep 2017 22:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/14/reduce-memory-allocations-using-go-profiler/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Goのプロファイラを使ってメモリ割り当て回数を減らすように自分のプログラムを改善するのを試してみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;参考資料&#34;&gt;参考資料&lt;/h2&gt;&#xA;&lt;p&gt;プロファイラの基本的な使い方の公式ブログ記事。&lt;/p&gt;</description>
    </item>
    <item>
      <title>rtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2017/09/05/built-rtags-deb/</link>
      <pubDate>Tue, 05 Sep 2017 23:07:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/05/built-rtags-deb/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://qiita.com/kota65535/items/39aa4d6e8adf6ab5f98c&#34;&gt;最強のC/C++インデクサー &amp;ldquo;Rtags&amp;rdquo; を本気で使う - Qiita&lt;/a&gt; で&#xA;&lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;Andersbakken/rtags: A c/c++ client/server indexer for c/c++/objc[++] with integration for Emacs based on clang.&lt;/a&gt;&#xA;の存在を知り、deb パッケージを作ってみたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;rtags は emacs 連携が入っているのですが、私は vim ユーザで emacs 使って無くて動作確認するのが面倒なので、自作 deb パッケージでは emacs 連携は外しています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>terminal機能を有効にしたvim8のdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2017/09/05/built-terminal-enabled-vim8-deb/</link>
      <pubDate>Tue, 05 Sep 2017 22:38:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/05/built-terminal-enabled-vim8-deb/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;terminal機能を有効にしたvim8のdebパッケージを作成したのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストール方法&#34;&gt;インストール方法&lt;/h2&gt;&#xA;&lt;p&gt;ビルドしたパッケージは&#xA;&lt;a href=&#34;https://launchpad.net/~hnakamur/+archive/ubuntu/vim&#34;&gt;vim : Hiroaki Nakamura&lt;/a&gt;&#xA;で公開しています。&lt;/p&gt;&#xA;&lt;p&gt;以下の手順でインストール出来ます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>pbuilderのchroot環境にレポジトリを追加する</title>
      <link>https://hnakamur.github.io/blog/2017/09/02/add-repositories-to-pbuilder-chroot-images/</link>
      <pubDate>Sat, 02 Sep 2017 16:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/02/add-repositories-to-pbuilder-chroot-images/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pbuilder.alioth.debian.org/&#34;&gt;pbuilder&lt;/a&gt; を使っていくつかdebパッケージを作ってみて、chroot環境をカスタマイズするベストプラクティスが自分の中で出来たのでメモです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ubuntu Xenialと同じapt-lineを使いたい&lt;/li&gt;&#xA;&lt;li&gt;xenial-updates にあるパッケージを使いたい&lt;/li&gt;&#xA;&lt;li&gt;PPAにあるgcc 7を使いたい&lt;/li&gt;&#xA;&lt;li&gt;ローカルにある自作debパッケージを使いたい&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;というニーズを満たすためのものです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>add-apt-repositoryを使わずにPPAをapt-lineに追加する方法</title>
      <link>https://hnakamur.github.io/blog/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</link>
      <pubDate>Sat, 02 Sep 2017 11:47:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</guid>
      <description>&lt;h2 id=&#34;2022-05-17-追記代替スクリプトを書きました&#34;&gt;2022-05-17 追記：代替スクリプトを書きました&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/setup-my-ubuntu-desktop/blob/main/my-apt-add-repository&#34;&gt;https://github.com/hnakamur/setup-my-ubuntu-desktop/blob/main/my-apt-add-repository&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;事前に curl, gpg, coreutils パッケージがインストールされている必要があります。&lt;/p&gt;&#xA;&lt;p&gt;使用例&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;my-apt-add-repository ppa:hnakamur/nginx&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GPG公開鍵の登録は &lt;a href=&#34;https://gihyo.jp/admin/serial/01/ubuntu-recipe/0675&#34;&gt;第675回　apt-keyはなぜ廃止予定となったのか：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社&lt;/a&gt; で解説されている手順に沿っています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git-buildpackageとfreightでパスフレーズをファイルから入力させる</title>
      <link>https://hnakamur.github.io/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</link>
      <pubDate>Mon, 28 Aug 2017 22:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/&#34;&gt;git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順&lt;/a&gt;&#xA;の &lt;code&gt;gbp buildpackage&lt;/code&gt; でソースパッケージをビルドする時と&#xA;&lt;a href=&#34;https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/&#34;&gt;freightでプライベートdebレポジトリ作成&lt;/a&gt;&#xA;の &lt;code&gt;freight cache&lt;/code&gt; でレポジトリを更新する際にgpgのパスフレーズを入力する必要があります。&lt;/p&gt;&#xA;&lt;p&gt;何度も実行しているとパスワードマネージャからコピペするのが面倒になってきてファイルから入力する方法を調べたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ngx_http_limit_req_moduleのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/08/17/nginx-limit-req-code-reading/</link>
      <pubDate>Thu, 17 Aug 2017 09:38:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/17/nginx-limit-req-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_limit_req_module.html&#34;&gt;Module ngx_http_limit_req_module&lt;/a&gt;&#xA;を使おうと思ってコードを読んでみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;leaky-bucket&#34;&gt;leaky bucket&lt;/h2&gt;&#xA;&lt;p&gt;上記のドキュメントに &amp;ldquo;leaky bucket&amp;rdquo; を使ってリクエスト数の制御を行っていると書かれています。&lt;/p&gt;&#xA;&lt;p&gt;leaky bucketについては&#xA;&lt;a href=&#34;http://www.geeksforgeeks.org/leaky-bucket-algorithm/&#34;&gt;Leaky Bucket Algorithm| Computer Networks - GeeksforGeeks&lt;/a&gt;&#xA;の説明が具体例もあってわかりやすかったです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>freightでプライベートdebレポジトリ作成</title>
      <link>https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/</link>
      <pubDate>Sat, 05 Aug 2017 17:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;CentOS だとカスタムrpmを作って &lt;code&gt;yum install rpmファイル名&lt;/code&gt; で依存パッケージとともにインストールできますが、Ubuntuだと &lt;code&gt;dpkg -i debファイル名&lt;/code&gt; でインストールは出来ますが依存パッケージは入りません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</link>
      <pubDate>Sat, 05 Aug 2017 10:15:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/Ubuntu&#34;&gt;Ubuntu · golang/go Wiki&lt;/a&gt; で紹介されている&#xA;&lt;a href=&#34;https://launchpad.net/~longsleep/+archive/ubuntu/golang-backports&#34;&gt;Golang Backports : Simon Eisenmann&lt;/a&gt; を改変してgo 1.9rc1のUbuntu 16.04用debパッケージをビルドしたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://launchpad.net/~hnakamur/+archive/ubuntu/golang-1.9&#34;&gt;golang 1.9 : Hiroaki Nakamura&lt;/a&gt; というPPAで配布しています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>badgerのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/07/22/code-reading-of-badger/</link>
      <pubDate>Sat, 22 Jul 2017 21:57:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/22/code-reading-of-badger/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;約一年前に &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/06/20/lsm-tree-and-rocksdb/&#34;&gt;LSM-TreeとRocksDB、TiDB、CockroachDBが気になる&lt;/a&gt; を書いた後、結局RocksDB触ってなかったのですが、もっと良さそうなしかも pure Go のライブラリ&#xA;&lt;a href=&#34;https://github.com/dgraph-io/badger&#34;&gt;dgraph-io/badger: Fastest key-value store in Go.&lt;/a&gt;&#xA;がしばらく前に出てきてとても期待しています。上のページのREADMEやそこからリンクされているブログ記事を読んだ感じ素晴らしいです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginx&#43;luaのカスタムdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</link>
      <pubDate>Tue, 18 Jul 2017 15:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/&#34;&gt;ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた&lt;/a&gt; 、 &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/14/tried-git-buildpackage-patch-queue/&#34;&gt;git-buildpackageのpatch-queue機能を試してみた&lt;/a&gt; の続きです。&lt;/p&gt;&#xA;&lt;p&gt;私はCentOS 6と7用のnginx + luaのカスタムrpmを&#xA;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm&#34;&gt;hnakamur/nginx-rpm: A Dockerfile to build nginx rpm for CentOS 6 and 7 using fedora copr&lt;/a&gt;&#xA;で作っていましたが、それとほぼ同じ内容のdebパッケージを作ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git-buildpackageのpatch-queue機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</link>
      <pubDate>Fri, 14 Jul 2017 11:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/&#34;&gt;ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた&lt;/a&gt; で &lt;code&gt;quilt&lt;/code&gt; を使ったパッチ適用を経験してみて、不慣れなこともありちょっと面倒な気がしました。&lt;/p&gt;&#xA;&lt;p&gt;そこで、 &lt;code&gt;git-buildpackage&lt;/code&gt; の `Working with patches](&lt;a href=&#34;http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.patches.html&#34;&gt;http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.patches.html&lt;/a&gt;) を試してみることにしました。&lt;/p&gt;&#xA;&lt;p&gt;前回作業したgitのレポジトリで以下のコミットに戻してから、以下の手順を試しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</link>
      <pubDate>Fri, 14 Jul 2017 06:07:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://asnokaze.hatenablog.com/entry/2017/07/03/083530&#34;&gt;Nginxのリバースプロキシでバックエンドとhttp2通信する - ASnoKaze blog&lt;/a&gt; で紹介されていたngx_http_v2_upstreamモジュールを組み込んだnginxのdebianパッケージを作ってみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>グレースフルリスタートを支援するサーバ起動のGoライブラリを自作した</title>
      <link>https://hnakamur.github.io/blog/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</link>
      <pubDate>Sat, 08 Jul 2017 21:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;サーバプロセスを無停止で実行ファイルを更新し再起動できるグレースフルリスタートは&#xA;非常に便利な仕組みです。&lt;/p&gt;&#xA;&lt;p&gt;今までは &lt;a href=&#34;https://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/&#34;&gt;Go言語でGraceful Restartをする - Shogo&amp;rsquo;s Blog&lt;/a&gt; と一連の記事を参考に&#xA;&lt;a href=&#34;https://github.com/lestrrat/go-server-starter&#34;&gt;lestrrat/go-server-starter: Go port of start_server utility (Server::Starter)&lt;/a&gt; を使わせていただいていました。&#xA;ありがとうございます！&lt;/p&gt;</description>
    </item>
    <item>
      <title>git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順</title>
      <link>https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/</link>
      <pubDate>Wed, 05 Jul 2017 21:04:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://honk.sigxcpu.org/piki/projects/git-buildpackage/&#34;&gt;git-buildpackage&lt;/a&gt; を使ってカスタムdebパッケージをビルドして &lt;a href=&#34;https://launchpad.net/ubuntu/+ppas&#34;&gt;Personal Package Archives : Ubuntu&lt;/a&gt; (PPA) にアップロードする手順のメモです。&lt;/p&gt;&#xA;&lt;p&gt;自分で試行錯誤してまとめた手順なので、他のニーズには合わなかったり、改善の余地があるかもしれません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gpgで秘密鍵を作成する</title>
      <link>https://hnakamur.github.io/blog/2017/07/01/generate-secret-key-with-gpg/</link>
      <pubDate>Sat, 01 Jul 2017 17:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/01/generate-secret-key-with-gpg/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;gpgの秘密鍵はdebパッケージを署名するために以前作成していたのですが、ググって適当に済ませていたので手順をメモしておきます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://irtfweb.ifa.hawaii.edu/~lockhart/gpg/&#34;&gt;GPG Cheat Sheet&lt;/a&gt; のチートシートが便利です。他にも参考にしていたページがあったかもしれませんが忘れました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>zerologを参考にしてltsvlogを改良してみた</title>
      <link>https://hnakamur.github.io/blog/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</link>
      <pubDate>Sun, 28 May 2017 21:52:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;こちらも少し前の話なのですがブログに書いておきます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/mattn_jp/status/864993516149022720&#34;&gt;( ꒪⌓꒪)さんのツイート: &amp;ldquo;zero allocation をうたう logger #golang / “GitHub - rs/zerolog: Zero Allocation JSON Logger” https://t.co/3t2qt9Qgbm&amp;rdquo;&lt;/a&gt; というmattnさんのツイートを見かけて&#xA;&lt;a href=&#34;https://github.com/rs/zerolog&#34;&gt;rs/zerolog: Zero Allocation JSON Logger&lt;/a&gt;&#xA;zerologの仕組みを調べ、自作のLTSVログ出力ライブラリ&#xA;&lt;a href=&#34;https://github.com/hnakamur/ltsvlog&#34;&gt;hnakamur/ltsvlog: a minimalist LTSV logging library in Go&lt;/a&gt;&#xA;を改善してみたメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EdgeRouter LiteでIPv6の静的ルーティング設定</title>
      <link>https://hnakamur.github.io/blog/2017/05/28/edgerouter-lite-static-ipv6-routing/</link>
      <pubDate>Sun, 28 May 2017 12:04:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/05/28/edgerouter-lite-static-ipv6-routing/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/05/13/tried-ds-lite-with-iij-mio-hikari-and-edgerouter-lite/&#34;&gt;IIJmioひかりとEdgeRouter-LiteでDS-Liteを試してみた&lt;/a&gt; の後、多少調整して一旦自分の希望通りの動きで落ち着いた状態になっていましたが、ブログに書いておかないと忘れそうなのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ipv6の静的アドレスとルーティング設定&#34;&gt;IPv6の静的アドレスとルーティング設定&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://qiita.com/haccht/items/17ed2bed628d2fd17bea&#34;&gt;Edgerouter Lite-3でDS-Lite - Qiita&lt;/a&gt; では&lt;/p&gt;</description>
    </item>
    <item>
      <title>IIJmioひかりとEdgeRouter-LiteでDS-Liteを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/05/13/tried-ds-lite-with-iij-mio-hikari-and-edgerouter-lite/</link>
      <pubDate>Sat, 13 May 2017 16:23:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/05/13/tried-ds-lite-with-iij-mio-hikari-and-edgerouter-lite/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;会社の同僚と話していて、私もそろそろIPv6に触れる機会を作っておかないとまずいなと思い、IIJmioひかりとIPoEとひかり電話を契約してDS-Liteというのを試してみることにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EdgeOSのドキュメントのリンクまとめ</title>
      <link>https://hnakamur.github.io/blog/2017/05/13/edge-os-document-links/</link>
      <pubDate>Sat, 13 May 2017 15:35:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/05/13/edge-os-document-links/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/05/13/understanding-edge-os-config-hierarchy-structure/&#34;&gt;EdgeOSの設定項目の階層構造を理解する&lt;/a&gt; にも一部書きましたが、EdgeOSのドキュメントのリンクをまとめておきます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;公式ドキュメント&#34;&gt;公式ドキュメント&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://www.ubnt.com/download/edgemax/edgerouter-lite/erlite3&#34;&gt;Ubiquiti NetworksのERLite-3用のファームウェアとドキュメントのダウンロードページ&lt;/a&gt; の &amp;ldquo;EdgeOS(TM) User Guide&amp;rdquo;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Appendix AにCLIの使い方の説明があります。&lt;/li&gt;&#xA;&lt;li&gt;しかし、コマンドのレファレンスマニュアルは含まれていません。後述のようにfork元のVyattaのドキュメントを参照するのが現状では良さそうです。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://help.ubnt.com/hc/en-us/categories/200321064-EdgeMAX&#34;&gt;EdgeMAX – Ubiquiti Networks Support and Help Center&lt;/a&gt; にはGetting Standardや各種設定事例集や独自コマンドの作り方などいろいろなドキュメントがあります。まだほとんど見てないので、いつか必要になったら見ます。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;非公式ドキュメント&#34;&gt;非公式ドキュメント&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://edge-os.net/wiki/view/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8&#34;&gt;EdgeOS 日本語Wiki [非公式]&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;vyosのコミュニティによるドキュメント&#34;&gt;VyOSのコミュニティによるドキュメント&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://ja.wikipedia.org/wiki/VyOS&#34;&gt;VyOS - Wikipedia&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wiki.vyos.net/wiki/Main_Page&#34;&gt;VyOSの本家ページ(Wiki)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.vyos-users.jp/&#34;&gt;日本 VyOS ユーザー会&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://wiki.vyos-users.jp/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8&#34;&gt;VyOSの本家ページ(Wiki)の日本語版(翻訳中とのこと)&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;vyattaのドキュメント&#34;&gt;Vyattaのドキュメント&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.vyos.net/wiki/Main_Page&#34;&gt;VyOSの本家ページ(Wiki)&lt;/a&gt; のページ上部の囲みによるとVyatta 6.5のドキュメントが参考になるそうです。&#xA;また、&#xA;&lt;a href=&#34;https://community.ubnt.com/t5/EdgeMAX/Edgemax-CLI-Reference-Manual/td-p/1628869&#34;&gt;Edgemax CLI Reference Manual - Ubiquiti Networks Community&lt;/a&gt;&#xA;のスレッドのコメントによるとEdgeOSはVyatta 6.3からフォークしたそうなので、そちらのドキュメントも参照すると良いかもしれません。&#xA;このスレッド内に &lt;a href=&#34;https://dl.networklinx.com/vyatta/6.3/&#34;&gt;Index of /vyatta/6.3/&lt;/a&gt; と &lt;a href=&#34;https://dl.networklinx.com/vyatta/6.5/&#34;&gt;Index of /vyatta/6.5/&lt;/a&gt; のドキュメントへのリンクがあるので、そこからダウンロード可能です。&#xA;以下のコマンドでまとめてダウンロードしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EdgeOSの設定項目の階層構造を理解する</title>
      <link>https://hnakamur.github.io/blog/2017/05/13/understanding-edge-os-config-hierarchy-structure/</link>
      <pubDate>Sat, 13 May 2017 10:48:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/05/13/understanding-edge-os-config-hierarchy-structure/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;EdgeRouter Lite (ERLite-3)をCLI (Command Line Interface)で設定しているうちにようやく基本が理解できたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;edgeosとは&#34;&gt;EdgeOSとは&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://edge-os.net/wiki/view/%E3%83%A1%E3%82%A4%E3%83%B3%E3%83%9A%E3%83%BC%E3%82%B8&#34;&gt;EdgeOS 日本語Wiki [非公式]&lt;/a&gt; の「EdgeOS とは」と「VyOS・Vyatta との違い」の説明がわかりやすかったです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>自宅サーバExpress5800/S70タイプRBのCPUをCore i5 650に換装してみた</title>
      <link>https://hnakamur.github.io/blog/2017/05/03/replace-cpu-to-core-i5-in-express5800/</link>
      <pubDate>Wed, 03 May 2017 21:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/05/03/replace-cpu-to-core-i5-in-express5800/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;私は&#xA;&lt;a href=&#34;http://pc.usy.jp/wiki/378.html&#34;&gt;NEC Express5800／S70 タイプRB - usyWiki&lt;/a&gt;&#xA;を2011年に買って自宅サーバとして活用しています。一時期使って無い時期もありましたが、ここ2年ぐらいは使っています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EdgeRouter Lite (ERLite-3)のファームウェアアップデート</title>
      <link>https://hnakamur.github.io/blog/2017/05/03/update-edgerouter-lite-firmware/</link>
      <pubDate>Wed, 03 May 2017 07:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/05/03/update-edgerouter-lite-firmware/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://misc.mat2uken.net/blog/2015/11/09/edgerouter_lite3.html&#34;&gt;17,000円で買えるVyOSっぽいOSが動くルーター EdgeRouter Lite(ERLite-3)を使ってみる — どこか遠くでのんびり怠惰に暮らしたい&lt;/a&gt;&#xA;を読んで EdgeRouter Lite (ERLite-3)を買いました。&lt;/p&gt;&#xA;&lt;p&gt;ということで初期設定内容をメモしておきます。今回はファームウェアのアップデートです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go-whisperをコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/29/go-whisper-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 17:05:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/29/go-whisper-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/04/29/go-carbon-tcp-receiver-code-reading/&#34;&gt;go-carbonのTCPレシーバについてコードリーディングしてみた&lt;/a&gt; の続きです。&lt;/p&gt;&#xA;&lt;p&gt;go-whisperのレポジトリは&#xA;&lt;a href=&#34;https://github.com/lomik/go-whisper/&#34;&gt;lomik/go-whisper: A Go port of Graphite&amp;rsquo;s Whisper timeseries database&lt;/a&gt;&#xA;で、&#xA;対象のコミットは&#xA;&lt;a href=&#34;https://github.com/lomik/go-whisper/tree/6de93631b9853148a7e1a659f7805a89451368bf&#34;&gt;https://github.com/lomik/go-whisper/tree/6de93631b9853148a7e1a659f7805a89451368bf&lt;/a&gt;&#xA;です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;既存のwhisperファイルを開く&#34;&gt;既存のwhisperファイルを開く&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;whisper.Open&lt;/code&gt; の実装は以下の通りです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lomik/go-whisper/blob/6de93631b9853148a7e1a659f7805a89451368bf/whisper.go#L260-L322&#34;&gt;whisper.go#L260-L322&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;260&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;261&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;262&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;263&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;264&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;265&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;266&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;267&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;268&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;269&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;270&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;271&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;272&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;273&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;274&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;275&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;276&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;277&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;278&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;279&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;280&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;281&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;282&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;283&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;284&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;285&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;286&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;287&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;288&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;289&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;290&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;291&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;292&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;293&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;294&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;295&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;296&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;297&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;298&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;299&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;300&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;301&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;302&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;303&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;304&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;305&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;306&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;307&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;308&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;309&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;310&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;311&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;312&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;313&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;314&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;315&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;316&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;317&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;318&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;319&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;320&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;321&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;322&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;  Open an existing Whisper database and read it&amp;#39;s header&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;OpenFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;O_RDWR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;0666&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// read the metadata&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MetadataSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;readed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Unable to read header: %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MetadataSize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Unable to read header: EOF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// support very old format. File starts with lastUpdate and has only average aggregation method&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;aggregationMethod&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Average&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;aggregationMethod&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;AggregationMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxRetention&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xFilesFactor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackFloat32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FloatSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FloatSize&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;archiveCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// read the archive info&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ArchiveInfoSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;archives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;archiveInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;archiveCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;readed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ArchiveInfoSize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Unable to read archive %d metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;archives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;archives&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackArchiveInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;whisper構造体&#34;&gt;Whisper構造体&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Whisper&lt;/code&gt; 構造体の定義です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go-carbonのTCPレシーバについてコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/29/go-carbon-tcp-receiver-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 11:15:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/29/go-carbon-tcp-receiver-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lomik/go-carbon&#34;&gt;lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister&lt;/a&gt;&#xA;のTCPレシーバについてコードを読んでみたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;対象のコミットは&#xA;&lt;a href=&#34;https://github.com/lomik/go-carbon/tree/42b9832d13240ff044c86768e8d0dc1f356d9458&#34;&gt;https://github.com/lomik/go-carbon/tree/42b9832d13240ff044c86768e8d0dc1f356d9458&lt;/a&gt;&#xA;です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;tcpレシーバの生成&#34;&gt;TCPレシーバの生成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;(app *App) Start()&lt;/code&gt; というメソッドの中で &lt;code&gt;receiver.New&lt;/code&gt; を呼んでTCPレシーバを生成しています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MastodonのER図を生成してみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/24/mastodon-er-diagram/</link>
      <pubDate>Mon, 24 Apr 2017 00:28:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/24/mastodon-er-diagram/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/voormedia/rails-erd&#34;&gt;voormedia/rails-erd: Generate Entity-Relationship Diagrams for Rails applications&lt;/a&gt;&#xA;を使って&#xA;&lt;a href=&#34;https://github.com/tootsuite/mastodon/&#34;&gt;tootsuite/mastodon: A GNU Social-compatible microblogging server&lt;/a&gt;&#xA;のER図を生成してみました、というだけの記事です。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/tootsuite/mastodon/commit/0611209141d1dd446fcf2345084cef00538f6ee7&#34;&gt;Relax Ruby version requirement (#1901) · tootsuite/mastodon@0611209&lt;/a&gt; のコミットに対して&#xA;生成したPDFが&#xA;&lt;a href=&#34;%7Battach%7D/files/2017/04/24/mastodon-er-diagram.pdf&#34;&gt;mastodon-er-diagram.pdf&lt;/a&gt; です。&#xA;たぶん今後更新しないので新しいER図が欲しい方は自分で生成してください。&lt;/p&gt;</description>
    </item>
    <item>
      <title>github.com/deoxxa/donを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/21/tried-don/</link>
      <pubDate>Fri, 21 Apr 2017 02:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/21/tried-don/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deoxxa/don&#34;&gt;deoxxa/don: Less than half of mastodon.&lt;/a&gt; はGoによる&#xA;&lt;a href=&#34;https://github.com/tootsuite/mastodon/&#34;&gt;tootsuite/mastodon&lt;/a&gt; の実装です。&#xA;まだ開発中で、タイトルによるとmastodonの機能の半分以下らしいです。&lt;/p&gt;&#xA;&lt;p&gt;この記事はdonをとりあえず動かしてみたメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>github.com/facebookgo/graceパッケージでグレースフルリスタートを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</link>
      <pubDate>Thu, 13 Apr 2017 07:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/04/13/built-go-carbon-and-carbonapi-rpm/&#34;&gt;go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた&lt;/a&gt; でcarbonapiが&#xA;&lt;a href=&#34;https://github.com/facebookgo/grace/&#34;&gt;facebookgo/grace: Graceful restart &amp;amp; zero downtime deploy for Go servers.&lt;/a&gt;&#xA;を使っていることに気づいたので、それでグレースフルリスタートを試してみました。ということでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/13/built-go-carbon-and-carbonapi-rpm/</link>
      <pubDate>Thu, 13 Apr 2017 05:13:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/13/built-go-carbon-and-carbonapi-rpm/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;go, go-carbon, carbonapiのrpmをfedora coprでビルドしたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;goのrpmはCentOS 6と7、go-carbonとcarbonapiはCentOS 7用のrpmをビルドしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDのdnsmasqで名前解決するための設定</title>
      <link>https://hnakamur.github.io/blog/2017/03/26/modify-resolv-conf-for-lxd-dnsmasq/</link>
      <pubDate>Sun, 26 Mar 2017 09:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/03/26/modify-resolv-conf-for-lxd-dnsmasq/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 16.04のLXDでホストマシンでコンテナ名で名前解決するための設定メモです。&#xA;ブリッジを使ったネットワーク構成での話です。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; ip a show dev lxdbr0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;4: lxdbr0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default qlen 1000&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;    link/ether fe:47:a7:ef:13:80 brd ff:ff:ff:ff:ff:ff&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;    inet 10.155.92.1/24 scope global lxdbr0&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;       valid_lft forever preferred_lft forever&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;    inet6 fe80::fc47:a7ff:feef:1380/64 scope link&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;       valid_lft forever preferred_lft forever&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;h2 id=&#34;正しいと思われる方法&#34;&gt;正しいと思われる方法&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.hiroom2.com/2016/06/19/ubuntu-16-04-lxd-lxc%E3%81%A7%E3%82%B3%E3%83%B3%E3%83%86%E3%83%8A%E3%82%92%E7%AB%8B%E3%81%A1%E4%B8%8A%E3%81%92%E3%82%8B/&#34;&gt;Ubuntu 16.04: LXD/LXCでコンテナを立ち上げる - Narrow Escape&lt;/a&gt; にあるように&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDでネストした非特権コンテナを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/03/21/tried-nested-unprivileged-lxd-containers/</link>
      <pubDate>Tue, 21 Mar 2017 21:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/03/21/tried-nested-unprivileged-lxd-containers/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/ten_forward/status/844107303099932676&#34;&gt;https://twitter.com/ten_forward/status/844107303099932676&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/ten_forward/status/844142416282054658&#34;&gt;https://twitter.com/ten_forward/status/844142416282054658&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;というツイートを受けて自分でもLXDでネストした非特権コンテナを試してみました。&#xA;環境はUbuntu 16.04です。&#xA;lxdのバージョンは2.0.9です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>video.jsのHLSライブラリを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/03/21/tried-videojs-hls-library/</link>
      <pubDate>Tue, 21 Mar 2017 14:52:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/03/21/tried-videojs-hls-library/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://qiita.com/gabby-gred/items/c1a3dbe026f83dd7e1ff&#34;&gt;MPEG DASHを知る - Qiita&lt;/a&gt; を見て、HTML5のvideoタグでHLSと &lt;a href=&#34;https://github.com/Dash-Industry-Forum/dash.js&#34;&gt;Dash-Industry-Forum/dash.js: A reference client implementation for the playback of MPEG DASH via Javascript and compliant browsers.&lt;/a&gt; でMPEG DASHを試してみたところ、各ブラウザの対応状況は以下のような感じでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>WindowsでCtrlとCapsを入れ替えた状態でControl&#43;タップするためのSynapticsタッチパッドドライバの設定</title>
      <link>https://hnakamur.github.io/blog/2017/03/04/use-control-tap-with-control-caps-swapped-keyboard-and-synaptics-touchpad-driver/</link>
      <pubDate>Sat, 04 Mar 2017 10:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/03/04/use-control-tap-with-control-caps-swapped-keyboard-and-synaptics-touchpad-driver/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;英字キーボードのThinkpad X260でWindows 10を使っていてレジストリで左ControlキーとCapsLockを入れ替えると、Control+タップが効かないという事態になりました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iptables-saveのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/03/03/iptables-save-code-reading/</link>
      <pubDate>Fri, 03 Mar 2017 23:45:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/03/03/iptables-save-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/02/24/iptables-restore-code-reading/&#34;&gt;iptables-restoreのコードリーディング&lt;/a&gt; の続きです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;iptables-save&lt;/code&gt; でルールを出力する部分のコードリーディングのメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;iptables_save_main-関数からの流れ&#34;&gt;&lt;code&gt;iptables_save_main&lt;/code&gt; 関数からの流れ&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://git.netfilter.org/iptables/tree/iptables/iptables-save.c?id=482c6d3731e2681cb4baae835c294840300197e6#n120&#34;&gt;iptables/iptables-save.c#L120-#L168&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;120&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;121&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;122&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;123&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;124&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;125&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;126&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;127&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;128&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;129&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;130&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;131&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;132&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;133&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;134&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;135&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;136&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;137&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;138&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;139&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;140&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;141&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;142&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;143&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;144&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;145&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;146&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;147&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;148&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;149&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;150&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;151&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;152&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;153&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;154&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;155&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;156&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;157&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;158&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;159&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;160&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;161&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;162&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;163&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;164&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;165&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;166&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;167&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;168&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/* Format:&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * :Chain name POLICY packets bytes&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * rule&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nf&#34;&gt;iptables_save_main&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;const&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tablename&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;n&#34;&gt;iptables_globals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;program_name&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;iptables-save&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;xtables_init_all&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;iptables_globals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;NFPROTO_IPV4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;nf&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;%s/%s Failed to initialize xtables&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;n&#34;&gt;iptables_globals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;program_name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&#x9;&lt;span class=&#34;n&#34;&gt;iptables_globals&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;program_version&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#if defined(ALL_INCLUSIVE) || defined(NO_SHARED_LIBS)&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#x9;&lt;span class=&#34;nf&#34;&gt;init_extensions&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;nf&#34;&gt;init_extensions4&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;();&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;#endif&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cp&#34;&gt;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;getopt_long&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argv&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;bcdt:&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;options&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;-&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;c&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;c&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;n&#34;&gt;show_counters&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;t&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;cm&#34;&gt;/* Select specific table. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;n&#34;&gt;tablename&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optarg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;M&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;n&#34;&gt;xtables_modprobe_program&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;optarg&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;sc&#34;&gt;&amp;#39;d&amp;#39;&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;nf&#34;&gt;do_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tablename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&#x9;&lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;optind&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;argc&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;nf&#34;&gt;fprintf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;stderr&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;s&#34;&gt;&amp;#34;Unknown arguments found on commandline&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&#x9;&lt;span class=&#34;nf&#34;&gt;exit&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#x9;&lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;do_output&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;tablename&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; オプションを指定しない場合は &lt;code&gt;tablename = NULL&lt;/code&gt; で &lt;code&gt;do_output&lt;/code&gt; 関数を呼び出します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iptablesのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/26/iptables-code-reading/</link>
      <pubDate>Sun, 26 Feb 2017 11:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/26/iptables-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/02/24/iptables-restore-code-reading/&#34;&gt;iptables-restoreのコードリーディング&lt;/a&gt; の続きです。&lt;/p&gt;&#xA;&lt;p&gt;サーバ上の &lt;code&gt;iptables&lt;/code&gt; の現状の設定が、自分が意図した設定と一致しているか確認したいというニーズがあります。&#xA;シェルスクリプトで &lt;code&gt;iptables&lt;/code&gt; コマンドを順次実行する方式は大変すぎるので、 &lt;code&gt;iptables-restore&lt;/code&gt; に自分の設定ファイルを渡して設定を反映させ、現在の状態は &lt;code&gt;iptables-save&lt;/code&gt; で出力して、設定ファイルとこの出力を比較したらどうかと考えました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CentOS 7のepelでインストールしたpython3.4でvenvを使うとエラーになる件の回避策</title>
      <link>https://hnakamur.github.io/blog/2017/02/25/workaround-for-epel-python3.4-venv-on-centos7/</link>
      <pubDate>Sat, 25 Feb 2017 00:45:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/25/workaround-for-epel-python3.4-venv-on-centos7/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;CentOS 7のpythonパッケージは2.7.xなので、3系を使うには別途インストールする必要があります。&#xA;EPELの &lt;a href=&#34;https://f-o.org.uk/2016/python3-centos-and-pip.html&#34;&gt;&lt;code&gt;python34`` パッケージを使うと ``python3 -m venv venv`` でエラーになるという問題が起きたのですが、 &lt;/code&gt;Floating Octothorpe: Python3, CentOS and pip&lt;/a&gt; の記事で解決したのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>iptables-restoreのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/24/iptables-restore-code-reading/</link>
      <pubDate>Fri, 24 Feb 2017 00:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/24/iptables-restore-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;iptables-restore&lt;/code&gt; のコードリーディングをしてみました。&#xA;対象バージョンは CentOS 7 のパッケージに合わせて 1.4.21 です。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;$&lt;/span&gt; rpm -qf &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;which iptables-restore&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;iptables-1.4.21-17.el7.x86_64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;プロジェクトページは &lt;a href=&#34;http://www.netfilter.org/&#34;&gt;netfilter/iptables project homepage - The netfilter.org project&lt;/a&gt; で、&#xA;ブラウザで見られるレポジトリは &lt;a href=&#34;https://git.netfilter.org/iptables/&#34;&gt;iptables - iptables tree&lt;/a&gt; です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>procpsのpgrepのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/23/pgrep-in-procps-code-reading/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/23/pgrep-in-procps-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;blog/2017/02/23/pgrep-in-procps-ng-code-reading/&#34;&gt;procps-ngのpgrepのコードリーディング&lt;/a&gt; に続いて CentOS 6 の pgrep についてもコードリーディングしてみました。&#xA;&lt;code&gt;pgrep&lt;/code&gt; を含むパッケージは &lt;code&gt;procps&lt;/code&gt; でバージョンは3.2.8でした。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;[root@centos6 ~]#&lt;/span&gt; rpm -qf &lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;which pgrep&lt;span class=&#34;sb&#34;&gt;`&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;procps-3.2.8-36.el6.x86_64&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;&lt;a href=&#34;http://procps.sourceforge.net/&#34;&gt;&lt;code&gt;procps`` のプロジェクトページは &lt;/code&gt;procps - Home Page&lt;/a&gt; で、&#xA;&lt;a href=&#34;http://procps.cvs.sourceforge.net/viewvc/procps/&#34;&gt;SourceForge.net Repository - [procps] Index of /&lt;/a&gt; でソースコードが見られます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>procps-ngのpgrepのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/23/pgrep-in-procps-ng-code-reading/</link>
      <pubDate>Thu, 23 Feb 2017 00:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/23/pgrep-in-procps-ng-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;CentOS 7の環境でApache Traffic Server 7.0.0のサービスを起動すると &lt;code&gt;traffic_cop&lt;/code&gt;, &lt;code&gt;traffic_manager&lt;/code&gt;, &lt;code&gt;traffic_server&lt;/code&gt; という3つのプロセスが立ち上がります。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;gp&#34;&gt;[root@ats7 ~]#&lt;/span&gt; ps auxww &lt;span class=&#34;p&#34;&gt;|&lt;/span&gt; grep traffic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;root     20837  0.0  0.0 143076  6276 ?        Ssl  15:14   0:00 /opt/trafficserver/bin/traffic_cop&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;ats      20838  0.0  0.0 448784 11960 ?        Sl   15:14   0:00 /opt/trafficserver/bin/traffic_manager --bind_stdout /opt/trafficserver/var/logs/traffic.out --bind_stderr /opt/trafficserver/var/logs/traffic.out&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;ats      20877  0.0  0.3 1047868 55464 ?       Sl   15:14   0:00 /opt/trafficserver/bin/traffic_server -M --bind_stdout /opt/trafficserver/var/logs/traffic.out --bind_stderr /opt/trafficserver/var/logs/traffic.out --httpport 8080:fd=9,8080:fd=10:ipv6&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;root     20992  0.0  0.0   9040   852 ?        S+   15:15   0:00 grep --color=auto traffic&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;しかし &lt;code&gt;pgrep -a traffic&lt;/code&gt; で検索すると &lt;code&gt;traffic_cop&lt;/code&gt; と &lt;code&gt;traffic_manager&lt;/code&gt; のみが表示されました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>monitのhttpのタイムアウトのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/21/monit-http-timeout-code-reading/</link>
      <pubDate>Tue, 21 Feb 2017 11:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/21/monit-http-timeout-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/02/20/monit-event-loop-code-reading/&#34;&gt;monitのイベントループのコードリーディング&lt;/a&gt; からの続きです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;socket_create関数からの流れ&#34;&gt;socket_create関数からの流れ&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/02/20/monit-if-failed-url-code-reading/&#34;&gt;monitのif failed urlのコードリーディング&lt;/a&gt; の &lt;code&gt;check_connection&lt;/code&gt; 関数の156行目で呼ばれている &lt;code&gt;socket_create&lt;/code&gt; 関数の実装を追ってみます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;socket_create&lt;/code&gt; 関数の実装。&#xA;&lt;a href=&#34;https://bitbucket.org/tildeslash/monit/src/97641b51c99226fbf8862797c8f5ec16ac68a18b/src/socket.c?at=release-5-11-0&amp;amp;fileviewer=file-view-default#socket.c-146:183&#34;&gt;src/socket.c#L146-#L183&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;146&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;147&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;148&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;149&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;150&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;151&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;152&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;153&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;154&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;155&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;156&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;157&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;158&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;159&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;160&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;161&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;162&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;163&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;164&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;165&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;166&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;167&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;168&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;169&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;170&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;171&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;172&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;173&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;174&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;175&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;176&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;177&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;178&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;179&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;180&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;181&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;182&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;183&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;n&#34;&gt;Socket_T&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;socket_create&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;kt&#34;&gt;int&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Socket_T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;Port_T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;switch&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;family&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;AF_UNIX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_unix_socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;pathname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;case&lt;/span&gt; &lt;span class=&#34;nl&#34;&gt;AF_INET&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;create_socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;default&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;:&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;nf&#34;&gt;LogError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Invalid Port Protocol family&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nf&#34;&gt;LogError&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;socket_create: Could not create socket -- %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STRERROR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;nf&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;socket&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;timeout&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;connection_type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;TYPE_LOCAL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;family&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;AF_UNIX&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Str_dup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;LOCALHOST&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;host&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Str_dup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;hostname&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SSL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;use_ssl&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;socket_switch2ssl&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;p&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;SSL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;nf&#34;&gt;socket_free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;                &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Port&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;port&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;S&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;&lt;code&gt;create_socket&lt;/code&gt; 関数の実装。&#xA;&lt;a href=&#34;https://bitbucket.org/tildeslash/monit/src/97641b51c99226fbf8862797c8f5ec16ac68a18b/src/net.c?at=release-5-11-0&amp;amp;fileviewer=file-view-default#net.c-267:306&#34;&gt;src/net.c#L267-#L306&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>monitのイベントループのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/20/monit-event-loop-code-reading/</link>
      <pubDate>Mon, 20 Feb 2017 16:46:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/20/monit-event-loop-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/02/20/monit-if-failed-url-code-reading/&#34;&gt;monitのif failed urlのコードリーディング&lt;/a&gt; からの続きです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;event_post関数の実装&#34;&gt;Event_post関数の実装&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://bitbucket.org/tildeslash/monit/src/97641b51c99226fbf8862797c8f5ec16ac68a18b/src/event.c?at=release-5-11-0&amp;amp;fileviewer=file-view-default#event.c-123:222&#34;&gt;src/event.c#L123-L222&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;123&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;124&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;125&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;126&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;127&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;128&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;129&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;130&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;131&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;132&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;133&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;134&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;135&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;136&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;137&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;138&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;139&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;140&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;141&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;142&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;143&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;144&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;145&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;146&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;147&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;148&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;149&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;150&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;151&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;152&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;153&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;154&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;155&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;156&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;157&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;158&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;159&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;160&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;161&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;162&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;163&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;164&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;165&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;166&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;167&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;168&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;169&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;170&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;171&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;172&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;173&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;174&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;175&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;176&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;177&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;178&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;179&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;180&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;181&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;182&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;183&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;184&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;185&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;186&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;187&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;188&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;189&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;190&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;191&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;192&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;193&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;194&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;195&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;196&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;197&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;198&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;199&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;200&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;201&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;202&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;203&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;204&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;205&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;206&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;207&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;208&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;209&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;210&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;211&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;212&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;213&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;214&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;215&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;216&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;217&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;218&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;219&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;220&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;221&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;222&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-c&#34; data-lang=&#34;c&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/**&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * Post a new Event&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param service The Service the event belongs to&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param id The event identification&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param state The event state&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param action Description of the event action&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; * @param s Optional message describing the event&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt; */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kt&#34;&gt;void&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Event_post&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;Service_T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;long&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;short&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;EventAction_T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;...)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;ASSERT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_FAILED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_SUCCEEDED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_CHANGED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_CHANGEDNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;va_list&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;va_start&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;kt&#34;&gt;char&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Str_vcat&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;s&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;ap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;va_end&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;ap&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;Event_T&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/* Only first failed/changed event can initialize the queue for given event type, thus succeeded events are ignored until first error. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_SUCCEEDED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_CHANGEDNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;%s&amp;#39; %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/* Initialize event list and add first event. The manadatory informations&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * are cloned so the event is as standalone as possible and may be saved&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * to the queue without the dependency on the original service, thus&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;     * persistent and managable across monit restarts */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nf&#34;&gt;gettimeofday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;collected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Str_dup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_INIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state_map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventlist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;cm&#34;&gt;/* Try to find the event with the same origin and type identification. Each service and each test have its own custom actions object, so we share actions object address to identify event source. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;do&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;amp;&amp;amp;&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;gettimeofday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;collected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;cm&#34;&gt;/* Shift the existing event flags to the left and set the first bit based on actual state */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state_map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;&amp;lt;&amp;lt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state_map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;|=&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;((&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_SUCCEEDED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_CHANGEDNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;?&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;cm&#34;&gt;/* Update the message */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;FREE&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;break&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;while&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;!&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;cm&#34;&gt;/* Only first failed/changed event can initialize the queue for given event type, thus succeeded events are ignored until first error. */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_SUCCEEDED&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;==&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_CHANGEDNOT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;DEBUG&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&amp;#39;%s&amp;#39; %s&lt;/span&gt;&lt;span class=&#34;se&#34;&gt;\n&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nf&#34;&gt;free&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;cm&#34;&gt;/* Event was not found in the pending events list, we will add it.&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;       * The manadatory informations are cloned so the event is as standalone&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;       * as possible and may be saved to the queue without the dependency on&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;       * the original service, thus persistent and managable across monit&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;       * restarts */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;NEW&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;id&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;id&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;nf&#34;&gt;gettimeofday&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;&amp;amp;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;collected&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;NULL&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;source&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Str_dup&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;name&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;mode&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;type&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;STATE_INIT&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state_map&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;action&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;action&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;message&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;message&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;next&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventlist&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      &lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;eventlist&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state_changed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Event_check_state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;cm&#34;&gt;/* In the case that the state changed, update it and reset the counter */&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state_changed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;state&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;state&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;-&amp;gt;&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;count&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;  &lt;span class=&#34;nf&#34;&gt;handle_event&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;n&#34;&gt;service&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;n&#34;&gt;e&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;);&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;p&gt;&lt;code&gt;handle_event&lt;/code&gt; 関数の実装。&#xA;&lt;a href=&#34;https://bitbucket.org/tildeslash/monit/src/97641b51c99226fbf8862797c8f5ec16ac68a18b/src/event.c?at=release-5-11-0&amp;amp;fileviewer=file-view-default#event.c-605:655&#34;&gt;src/event.c#L605-L655&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>monitのif failed urlのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/20/monit-if-failed-url-code-reading/</link>
      <pubDate>Mon, 20 Feb 2017 11:14:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/20/monit-if-failed-url-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;以下のページで紹介されているような &lt;code&gt;if failed url ...&lt;/code&gt; の挙動をコードリーディングしてみたメモです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://fak3r.com/2010/04/10/howto-use-monit-to-monitor-sites-and-alert-users/&#34;&gt;HOWTO use monit to monitor sites and alert users · fak3r&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/akishin999/20121030/1351555542&#34;&gt;Monit でお手軽に外部のサーバを監視する - akishin999の日記&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;check host fak3r.com with address fak3r.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;if failed url http://fak3r.com&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;timeout 10 seconds for 1 cycles then alert&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;then alert&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;コードリーディングの対象のmonitのバージョンは5.11.0です。&#xA;&lt;a href=&#34;https://bitbucket.org/tildeslash/monit/src/97641b51c99226fbf8862797c8f5ec16ac68a18b/?at=release-5-11-0&#34;&gt;monit 5.11.0のソースコード&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>ブログのソフトウェアをHugoからPelicanに切り替えた</title>
      <link>https://hnakamur.github.io/blog/2017/02/19/switch-from-hugo-to-pelican-for-blog-software/</link>
      <pubDate>Sun, 19 Feb 2017 23:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/19/switch-from-hugo-to-pelican-for-blog-software/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://gohugo.io/&#34;&gt;Hugo&lt;/a&gt; はビルドも速くて快適に使わせてもらっていました。ただ、コードブロックのシンタクスハイライトを使いたいと思って &lt;a href=&#34;https://gohugo.io/extras/highlighting/&#34;&gt;Syntax Highlighting&lt;/a&gt; を読んだときにHugo独自の記法に依存するのが好ましくないなと思いました。Markdownには拡張の仕組みがないので仕方ないのですが。以前から &lt;a href=&#34;http://docutils.sourceforge.net/rst.html&#34;&gt;reStructuredText&lt;/a&gt; を使うようにしたいと思いつつ使えてなかったので、この機会に reStructuredText を使ってブログを書くようにしたいと思いました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Facebookの時系列データベースGorillaのデータ圧縮方式を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/02/12/tried-facebook-gorilla-time-series-database-compression/</link>
      <pubDate>Sun, 12 Feb 2017 23:00:03 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/12/tried-facebook-gorilla-time-series-database-compression/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://code.facebook.com/posts/952820474848503/beringei-a-high-performance-time-series-storage-engine/&#34;&gt;Beringei: A high-performance time series storage engine | Engineering Blog | Facebook Code&lt;/a&gt; という記事を読んで、Facebookが2015年に &lt;a href=&#34;http://www.vldb.org/pvldb/vol8/p1816-teller.pdf&#34;&gt;&amp;ldquo;Gorilla: A Fast, Scalable, In-Memory Time Series Database&amp;rdquo;&lt;/a&gt; という論文でGorillaという時系列データベースについて発表したものを&lt;a href=&#34;https://github.com/facebookincubator/beringei&#34;&gt;Beringei&lt;/a&gt;としてオープンソースで公開したのを知りました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>さくらのクラウドでPackerとTerraformを使ってContainer Linuxの環境構築をしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/02/use-container-linux-on-sakura-cloud-using-packer-and-terraform/</link>
      <pubDate>Mon, 02 Jan 2017 15:34:23 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/01/02/use-container-linux-on-sakura-cloud-using-packer-and-terraform/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;さくらのクラウドでPackerとTerraformを使って&lt;a href=&#34;https://coreos.com/os/docs/latest/&#34;&gt;CoreOS Container Linux&lt;/a&gt;の環境構築をしてみたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://cloud-news.sakura.ad.jp/public_archive_iso/&#34;&gt;パブリックアーカイブ・ISOイメージ&lt;/a&gt;にCoreOSはあるのですが、現状では残念ながらバージョンが 367.1.0 (stable) とかなり古い状態です。&lt;/p&gt;&#xA;&lt;p&gt;そこで &lt;a href=&#34;https://stable.release.core-os.net/amd64-usr/&#34;&gt;https://stable.release.core-os.net/amd64-usr/&lt;/a&gt; 以下にある安定版公式ISOイメージの現時点の最新版である 1185.5.0 を使ってPackerでさくらのクラウド上にマイアーカイブを作成し、それを元にサーバで使用するディスクとサーバを作成します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>KubernetesのSecrets機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/01/tried-kubernetes-secrets/</link>
      <pubDate>Sun, 01 Jan 2017 16:31:08 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/01/01/tried-kubernetes-secrets/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/tutorials/stateful-application/run-stateful-application/&#34;&gt;Running a Single-Instance Stateful Application - Kubernetes&lt;/a&gt; ではMySQLのrootユーザのパスワードを設定のyamlファイルに直接書いていましたが、 安全に管理するためには&lt;a href=&#34;http://kubernetes.io/docs/user-guide/secrets/&#34;&gt;Secrets - Kubernetes&lt;/a&gt; を使うべきとのことなので試してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Kuberntesでデータ領域をNFSマウントしてMySQLを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/01/tried-mysql-and-nfs-on-kubernetes/</link>
      <pubDate>Sun, 01 Jan 2017 12:38:24 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/01/01/tried-mysql-and-nfs-on-kubernetes/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/01/01/use-nfs-persistent-volume-on-minikube-virtualbox/&#34;&gt;minikubeとVirtualBoxでNFSのpersistent volumeを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の結果を踏まえて、 &lt;a href=&#34;http://kubernetes.io/docs/tutorials/stateful-application/run-stateful-application/&#34;&gt;Running a Single-Instance Stateful Application - Kubernetes&lt;/a&gt; のチュートリアルを試してみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;設定ファイル&#34;&gt;設定ファイル&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat persistent-volume-nfs.yml&#xA;kind: PersistentVolume&#xA;apiVersion: v1&#xA;metadata:&#xA;  name: pv-nfs&#xA;  labels:&#xA;    type: nfs&#xA;spec:&#xA;  capacity:&#xA;    storage: 30Gi&#xA;  accessModes:&#xA;    - ReadWriteMany&#xA;  persistentVolumeReclaimPolicy: Retain&#xA;  nfs:&#xA;    # TODO: modify path and server appropriately&#xA;    path: /Users/hnakamur/kube-data/mysql&#xA;    server: 192.168.99.1&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat mysql-pvc.yml&#xA;kind: PersistentVolumeClaim&#xA;apiVersion: v1&#xA;metadata:&#xA;  name: mysql-pvc&#xA;spec:&#xA;  accessModes:&#xA;    - ReadWriteMany&#xA;  resources:&#xA;    requests:&#xA;      storage: 15Gi&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat mysql-deploy.yml&#xA;apiVersion: extensions/v1beta1&#xA;kind: Deployment&#xA;metadata:&#xA;  name: mysql&#xA;spec:&#xA;  strategy:&#xA;    type: Recreate&#xA;  template:&#xA;    metadata:&#xA;      labels:&#xA;        app: mysql&#xA;    spec:&#xA;      containers:&#xA;      - image: mysql:5.6&#xA;        name: mysql&#xA;        env:&#xA;          # Use secret in real usage&#xA;        - name: MYSQL_ROOT_PASSWORD&#xA;          value: password&#xA;        ports:&#xA;        - containerPort: 3306&#xA;          name: mysql&#xA;        volumeMounts:&#xA;        - name: mysql-persistent-storage&#xA;          mountPath: /var/lib/mysql&#xA;      volumes:&#xA;      - name: mysql-persistent-storage&#xA;        persistentVolumeClaim:&#xA;          claimName: mysql-pvc&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ cat mysql-svc.yml&#xA;apiVersion: v1&#xA;kind: Service&#xA;metadata:&#xA;  name: mysql&#xA;spec:&#xA;  ports:&#xA;    - port: 3306&#xA;  selector:&#xA;    app: mysql&#xA;  clusterIP: None&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ハマった点としては、persistent volumeとpersistent volume claimのaccessModesは合わせないとうまく行きませんでした。具体的には &lt;code&gt;kubectl describe pvc mysql-pvc&lt;/code&gt; で確認したときにStatusがPendingになっていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>minikubeとVirtualBoxでNFSのpersistent volumeを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/01/use-nfs-persistent-volume-on-minikube-virtualbox/</link>
      <pubDate>Sun, 01 Jan 2017 09:40:35 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/01/01/use-nfs-persistent-volume-on-minikube-virtualbox/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/tutorials/&#34;&gt;Tutorials - Kubernetes&lt;/a&gt;のStateful Applicationsを試そうと思って少し読んだ所、 persistent volume というものを用意する必要があることがわかりました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>minikubeでKubernetesのチュートリアルをやってみた</title>
      <link>https://hnakamur.github.io/blog/2016/12/31/tried-kubernetes-tutorial-with-minikube/</link>
      <pubDate>Sat, 31 Dec 2016 16:24:33 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/12/31/tried-kubernetes-tutorial-with-minikube/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;検索してたら &lt;a href=&#34;https://news.ycombinator.com/item?id=12462261&#34;&gt;Why Kubernetes is winning the container war | Hacker News&lt;/a&gt; というHacker Newsのスレッドを見つけました。&lt;/p&gt;&#xA;&lt;p&gt;実際に勝つどうかはともかく、実際に使っている人やMesosphereやRed Hatの人のコメントがあり、非常に参考になりそうです。このブログ記事を書くまで私は Kubernetes はろくに触ったことが無かったので内容はよくわからないですが、後日また見直してみたいところです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXD で privileged な CentOS 7コンテナを作る</title>
      <link>https://hnakamur.github.io/blog/2016/10/22/lxd-privileged-centos-container/</link>
      <pubDate>Sat, 22 Oct 2016 18:54:49 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/10/22/lxd-privileged-centos-container/</guid>
      <description>&lt;p&gt;小ネタのメモです。&lt;/p&gt;&#xA;&lt;p&gt;先日 LXD 2.0.5 で CentOS 7 コンテナを起動して &lt;code&gt;journalctl -xe&lt;/code&gt; を実行すると以下のようなエラーが出ていました。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Oct 22 09:53:58 centos systemd-sysctl[36]: Failed to write &amp;#39;16&amp;#39; to &amp;#39;/proc/sys/kernel/sysrq&amp;#39;: Permission denied&#xA;Oct 22 09:53:58 centos systemd-sysctl[36]: Failed to write &amp;#39;1&amp;#39; to &amp;#39;/proc/sys/fs/protected_hardlinks&amp;#39;: Permission denied&#xA;Oct 22 09:53:58 centos systemd-sysctl[36]: Failed to write &amp;#39;1&amp;#39; to &amp;#39;/proc/sys/kernel/core_uses_pid&amp;#39;: Permission denied&#xA;Oct 22 09:53:58 centos systemd-sysctl[36]: Failed to write &amp;#39;1&amp;#39; to &amp;#39;/proc/sys/fs/protected_symlinks&amp;#39;: Permission denied&#xA;Oct 22 09:53:58 centos systemd-remount-fs[35]: /bin/mount for / exited with exit status 32.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;コンテナ作成時に以下のように config で &lt;code&gt;security.privileged&lt;/code&gt; を true に設定しておけば出なくなりました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go言語のos.Chtimesで設定可能な最大日時は 2262-04-11 23:47:16.854775807 &#43;0000 UTC</title>
      <link>https://hnakamur.github.io/blog/2016/10/22/max-time-for-golang-os-chtimes/</link>
      <pubDate>Sat, 22 Oct 2016 18:32:50 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/10/22/max-time-for-golang-os-chtimes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/os/#Chtimes&#34;&gt;os.Chtimes&lt;/a&gt; のソース&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/src/os/file_posix.go?s=3693:3758#L123&#34;&gt;src/os/file_posix.go - The Go Programming Language&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.7.3/src/os/file_posix.go#L133-L141&#34;&gt;go/file_posix.go at go1.7.3 · golang/go&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を見ると、引数は &lt;code&gt;time.Time&lt;/code&gt; なのですが、 &lt;code&gt;syscall.Timespec&lt;/code&gt; に変換するときに &lt;code&gt;time&lt;/code&gt; の &lt;code&gt;UnixNano()&lt;/code&gt; を使っています。 &lt;code&gt;UnixNano()&lt;/code&gt; は 1970-01-01T00:00:00Z からの通算ミリ秒です。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;UnixNano()&lt;/code&gt; で int64 の最大値を設定したときと、 &lt;code&gt;time.Time&lt;/code&gt; で表現可能な最大の日時を調べてみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LocaleOverlaySwaggerというgoaプラグインを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/10/22/localeoverlayswagger-goa-plugin/</link>
      <pubDate>Sat, 22 Oct 2016 16:52:02 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/10/22/localeoverlayswagger-goa-plugin/</guid>
      <description>&lt;h2 id=&#34;まず-swagger-仕様を複数ファイル出力する-goa-プラグイン-multiswagger-を試してみました&#34;&gt;まず Swagger 仕様を複数ファイル出力する goa プラグイン Multiswagger を試してみました&lt;/h2&gt;&#xA;&lt;p&gt;まずは &lt;a href=&#34;http://tchssk.hatenablog.com/entry/2016/10/18/122215&#34;&gt;Swagger 仕様を複数ファイル出力する goa プラグイン Multiswagger を作った - tchsskのブログ&lt;/a&gt; を読んで試してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>pgpool-IIを使ってPostgreSQLのアクティブ・スタンバイ(1&#43;1構成)を試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/09/15/experiment-postgresql-active-standby-using-pgpool-ii/</link>
      <pubDate>Thu, 15 Sep 2016 06:28:34 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/09/15/experiment-postgresql-active-standby-using-pgpool-ii/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;pgool-IIを使ってPostgreSQLのアクティブ・スタンバイ(1+1構成)を試したのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;以下のページを参考にしました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.pgpool.net/docs/latest/pgpool-ja.html&#34;&gt;pgpool-II ユーザマニュアル&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.pgpool.net/pgpool-web/contrib_docs/watchdog_master_slave_3.3/ja.html&#34;&gt;pgpool-II watchdog チュートリアル（master-slave mode）&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://lets.postgresql.jp/documents/technical/pgpool-II-3.3-watchdog/1&#34;&gt;pgpool-II 3.3 の watchdog 機能 — Let&amp;rsquo;s Postgres&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;テスト用のansible-playbook&#34;&gt;テスト用のAnsible playbook&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/postgresql-pgpool2-failover-example-playbook&#34;&gt;https://github.com/hnakamur/postgresql-pgpool2-failover-example-playbook&lt;/a&gt; に置きました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Pacemakerを使ってPostgreSQLのアクティブ・スタンバイ(1&#43;1構成)を試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/08/21/experiment-postgresql-active-standby-cluster-using-pacemaker/</link>
      <pubDate>Sun, 21 Aug 2016 11:23:01 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/08/21/experiment-postgresql-active-standby-cluster-using-pacemaker/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;STONITH無し、quorum無しのアクティブ・スタンバイ(1+1構成)がとりあえず動くところまでは来たので、一旦メモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;参考資料&#34;&gt;参考資料&lt;/h2&gt;&#xA;&lt;p&gt;以下の資料と連載記事がわかりやすくて非常に参考になりました。ありがとうございます！&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDコンテナ上でPacemakerを使って仮想IPとApacheのアクティブ・パッシブ・クラスタを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/08/12/experiment-vip-and-apache-with-pacemaker-on-lxd-containers/</link>
      <pubDate>Fri, 12 Aug 2016 18:54:27 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/08/12/experiment-vip-and-apache-with-pacemaker-on-lxd-containers/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://clusterlabs.org/doc/&#34;&gt;Cluster Labs - Pacemaker Documentation&lt;/a&gt; の &amp;ldquo;Pacemaker 1.1 for Corosync 2.x and pcs&amp;rdquo; の &amp;ldquo;Clusters from Scratch (en-US)&amp;rdquo; を参考にしつつ、多少手順を変更して試してみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;実験用コンテナの環境構築&#34;&gt;実験用コンテナの環境構築&lt;/h2&gt;&#xA;&lt;h3 id=&#34;コンテナの作成&#34;&gt;コンテナの作成&lt;/h3&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/08/12/update-lxd-dnsmasq-dhcp-hosts-config-with-sighup/&#34;&gt;LXDのdnsmasqの固定IP設定をSIGHUPで更新する · hnakamur&amp;rsquo;s blog at github&lt;/a&gt; の手法を使って、2つのコンテナ用のIPアドレスを設定しておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDのdnsmasqの固定IP設定をSIGHUPで更新する</title>
      <link>https://hnakamur.github.io/blog/2016/08/12/update-lxd-dnsmasq-dhcp-hosts-config-with-sighup/</link>
      <pubDate>Fri, 12 Aug 2016 06:38:18 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/08/12/update-lxd-dnsmasq-dhcp-hosts-config-with-sighup/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/05/07/how-to-use-fixed-ip-address-for-a-lxd-container/&#34;&gt;LXDコンテナで固定IPアドレスを使うための設定 · hnakamur&amp;rsquo;s blog at github&lt;/a&gt; では &lt;code&gt;/etc/dnsmasq.conf&lt;/code&gt; に直接 &lt;code&gt;dhcp-host&lt;/code&gt; で設定を書いていましたが、変更するためには &lt;code&gt;lxd-bridge&lt;/code&gt; の再起動が必要でした。&lt;/p&gt;&#xA;&lt;p&gt;その後 &lt;a href=&#34;http://manpages.ubuntu.com/manpages/xenial/en/man8/dnsmasq.8.html&#34;&gt;Ubuntu Manpage: dnsmasq - A lightweight DHCP and caching DNS server.&lt;/a&gt; を見て &lt;code&gt;--dhcp-hostsfile=&amp;lt;path&amp;gt;&lt;/code&gt; または &lt;code&gt;--dhcp-hostsdir=&amp;lt;path&amp;gt;&lt;/code&gt; を使っておけば &lt;code&gt;lxd-bridge&lt;/code&gt; を再起動しなくても &lt;code&gt;dnsmasq&lt;/code&gt; に &lt;code&gt;SIGHUP&lt;/code&gt; を送れば更新できることを知りました。 &lt;code&gt;--dhcp-hostsdir=&amp;lt;path&amp;gt;&lt;/code&gt; の場合は、指定したディレクトリ以下のファイルを追加・更新する場合は SIGHUP すら不要で、ファイルを削除した後に反映するときだけ SIGHUP が必要です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDのDHCPで使っていないIPアドレスを一括で解放するスクリプトを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/08/11/release-all-unused-addresses-of-lxd-bridge/</link>
      <pubDate>Thu, 11 Aug 2016 22:58:21 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/08/11/release-all-unused-addresses-of-lxd-bridge/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/05/07/how-to-use-fixed-ip-address-for-a-lxd-container/&#34;&gt;LXDコンテナで固定IPアドレスを使うための設定 · hnakamur&amp;rsquo;s blog at github&lt;/a&gt; の設定を行ってもIPアドレスが指定通りにならないことがありました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;journal -xe&lt;/code&gt; で見てみると&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;Aug 11 22:46:55 bai1b7faf04 dnsmasq-dhcp[11082]: not using configured address 10.155.92.102 because it is leased to 00:16:3e:1e:08:8a&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;というメッセージが出ていて、他のMACアドレスに貸出中になっています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ブログ記事「Go言語(Golang) はまりどころと解決策」についてのコメント</title>
      <link>https://hnakamur.github.io/blog/2016/08/02/about-go-pitfalls/</link>
      <pubDate>Tue, 02 Aug 2016 05:57:52 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/08/02/about-go-pitfalls/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.yunabe.jp/docs/golang_pitfall.html&#34;&gt;Go言語(Golang) はまりどころと解決策&lt;/a&gt;の記事についてのコメント記事を誰かが書くだろうと思ってスルーしてましたが、見かけないので書いてみます。&lt;/p&gt;&#xA;&lt;p&gt;ただし私はGo言語を使って開発していますが、言語自体を詳細に知るエキスパートでは無いです。Go言語にかぎらず個人的にはややこしいところにはなるべく近づかないスタンスなので、詳しい方から見ると物足りないかもしれません。そう感じた方は是非ブログ記事なりを書いていただけると嬉しいです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDコンテナでPostgreSQLの非同期リプリケーションを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/07/23/tried-postgresql-async-replication-in-lxd-containers/</link>
      <pubDate>Sat, 23 Jul 2016 21:13:52 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/07/23/tried-postgresql-async-replication-in-lxd-containers/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://lets.postgresql.jp/documents/technical/replication/1/&#34;&gt;ストリーミング・レプリケーションの構築 — Let&amp;rsquo;s Postgres&lt;/a&gt; と &lt;a href=&#34;http://d.hatena.ne.jp/hiroe_orz17/20111113/1321180635&#34;&gt;PostgreSQL9.1ためしてみた【非同期レプリケーション編】 - ごろねこ日記&lt;/a&gt; を読んで、2台のLXDコンテナを使ってPostgreSQLの非同期リプリケーションを試してみたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;また&lt;a href=&#34;https://www.packtpub.com/big-data-and-business-intelligence/postgresql-replication-second-edition&#34;&gt;PostgreSQL Replication - Second Edition | PACKT Books&lt;/a&gt;が $10 と安かったので、買って非同期レプリケーションの章まで読みました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>私のソースコードの書き方</title>
      <link>https://hnakamur.github.io/blog/2016/07/16/my-way-of-writing-source-codes/</link>
      <pubDate>Sat, 16 Jul 2016 01:37:48 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/07/16/my-way-of-writing-source-codes/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://note.mu/ruiu/n/n1083b2a5d547&#34;&gt;ソースコードって実際のところどういうふうに書いていますか？｜Rui Ueyama｜note&lt;/a&gt; を読んで参考になるなーと思ったのですが、はてブ見ても、みんなだいたい同じですみたいなコメントばかりで面白くないので、「上手い人」では無いかもしれませんが、私の書き方をまとめてみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>1台のサーバに異なる設定でApache Traffic Serverを複数立ち上げるためのビルド設定</title>
      <link>https://hnakamur.github.io/blog/2016/07/02/config-for-multiple-installations-of-apache-traffic-server/</link>
      <pubDate>Sat, 02 Jul 2016 01:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/07/02/config-for-multiple-installations-of-apache-traffic-server/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Apache Traffic Serverには&lt;a href=&#34;https://docs.trafficserver.apache.org/en/latest/admin-guide/configuration/hierachical-caching.en.html&#34;&gt;Hierarchical Caching&lt;/a&gt;という機能があって、キャッシュを親と子の2階層にすることが出来ます。&lt;/p&gt;&#xA;&lt;p&gt;CentOSで1つのサーバに親と子の2つのTraffic Server 6.1.1を異なる設定で起動するような構成にしたかったのですが、本家のrpmでは出来ないようでした。&#xA;ソースを見ていたらconfigureオプションをうまく指定すれば可能だとわかり、カスタムrpmを作りました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lxd_containerというAnsibleモジュールを書いたときに学んだtips</title>
      <link>https://hnakamur.github.io/blog/2016/07/01/tips_for_writing_ansible_module/</link>
      <pubDate>Fri, 01 Jul 2016 22:44:12 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/07/01/tips_for_writing_ansible_module/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;lxd_containerというAnsibleのモジュールを書いたときに学んだtipsのメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;モジュールでデバッグ出力は出来ないのでデバッグ情報は戻り値のjsonに入れる&#34;&gt;モジュールでデバッグ出力は出来ないのでデバッグ情報は戻り値のJSONに入れる&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://groups.google.com/d/msg/ansible-devel/s0iSb7phnqY/UB9vaLFJAwAJ&#34;&gt;ansible-dev MLでの投稿&lt;/a&gt;によるとモジュールは何も出力できないとのことなので、デバッグ情報は戻り値のJSONに入れる必要があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>分散SQLデータベースCockroachDBのキーバリューストレージのデバッグコマンドを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/30/experiment-cockroachdb-key-value-store/</link>
      <pubDate>Thu, 30 Jun 2016 06:40:12 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/30/experiment-cockroachdb-key-value-store/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;h/blog/2016/06/20/lsm-tree-and-rocksdb/&#34;&gt;LSM-TreeとRocksDB、TiDB、CockroachDBが気になる&lt;/a&gt; で紹介した &lt;a href=&#34;https://github.com/cockroachdb/cockroach#client-drivers&#34;&gt;CockroachDB&lt;/a&gt; は &lt;a href=&#34;https://github.com/cockroachdb/cockroach#what-is-cockroachdb&#34;&gt;What is CockroachDB?&lt;/a&gt; によるとスケールアウトできる分散SQLデータベースです。 &lt;a href=&#34;https://github.com/cockroachdb/cockroach#client-drivers&#34;&gt;PostgreSQLのワイヤープロトコルをサポート&lt;/a&gt; していて、 &lt;a href=&#34;https://github.com/cockroachdb/cockroach#quickstart&#34;&gt;Quickstart&lt;/a&gt; の例のようにPostgreSQLで扱えるSQLのサブセットが使えます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>連番ファイル名の命名規則について実験してみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/22/experimented_with_naming_for_many_sequential_numbered_files/</link>
      <pubDate>Wed, 22 Jun 2016 23:40:27 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/22/experimented_with_naming_for_many_sequential_numbered_files/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;0〜1,000,000といった連番のファイルを作るときに、1つのディレクトリに全てのファイルを入れると、遅くなるとか取り扱いが面倒になるという懸念があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LSM-TreeとRocksDB、TiDB、CockroachDBが気になる</title>
      <link>https://hnakamur.github.io/blog/2016/06/20/lsm-tree-and-rocksdb/</link>
      <pubDate>Mon, 20 Jun 2016 22:23:54 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/20/lsm-tree-and-rocksdb/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;キーバリューストアについて調べていたらLSM-Treeというデータ構造とRocksDBが気になったということで調査メモです。ただし、それぞれの技術詳細を調査したり自分で検証してみたというメモではないです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>sleuthというGoのライブラリでサービスディスカバリを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/15/tried-service-discovery-with-sleuth/</link>
      <pubDate>Wed, 15 Jun 2016 06:56:10 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/15/tried-service-discovery-with-sleuth/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://darian.af/post/master-less-peer-to-peer-micro-service-autodiscovery-in-golang-with-sleuth/&#34;&gt;Service autodiscovery in Go with sleuth - darian.af&lt;/a&gt;という記事を見かけて試してみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;githubcomursiformsleuthのセットアップ&#34;&gt;github.com/ursiform/sleuthのセットアップ&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/ursiform/sleuth#installation&#34;&gt;Installation&lt;/a&gt;を見ながらセットアップします。&lt;/p&gt;&#xA;&lt;p&gt;いきなりgo getでインストールしてみるとZeroMQ version 4が必要というエラーメッセージが出ました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>gistを作成するGoのCLIを見つけた</title>
      <link>https://hnakamur.github.io/blog/2016/06/14/go_cli_to_create_a_gist/</link>
      <pubDate>Tue, 14 Jun 2016 00:52:22 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/14/go_cli_to_create_a_gist/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://github.com/delta24/gist&#34;&gt;delta24/gist: A command line gister in Go&lt;/a&gt;です。期待通りに動かない点があったのでプルリクエストを送ったら、すぐにマージされました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;&#xA;&lt;p&gt;Goはインストール済みという前提で、以下のコマンドを実行します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのシリアライゼーションのベンチマークを自分でも試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/13/tried_go_serialization_benchmarks/</link>
      <pubDate>Mon, 13 Jun 2016 23:34:16 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/13/tried_go_serialization_benchmarks/</guid>
      <description>&lt;p&gt;2015年12月の記事ですが&lt;a href=&#34;http://qiita.com/shibukawa/items/878c5fe8ec09935fccd2&#34;&gt;最速という噂のFlatbuffersの速度のヒミツと、導入方法の紹介(Go) - Qiita&lt;/a&gt;を読んで、「gobは遅いのかー、残念」、「一方Flatbuffersは面倒そうだなー」と思っていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoでLTSV形式でログ出力するライブラリを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/06/13/wrote_go_ltsvlog_library/</link>
      <pubDate>Mon, 13 Jun 2016 21:42:53 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/13/wrote_go_ltsvlog_library/</guid>
      <description>&lt;h2 id=&#34;なぜ書いたか&#34;&gt;なぜ書いたか&lt;/h2&gt;&#xA;&lt;p&gt;Goで高機能なサードパーティのログ出力ライブラリと言えば&lt;a href=&#34;https://github.com/Sirupsen/logrus&#34;&gt;Sirupsen/logrus&lt;/a&gt;が有名です。私も&lt;a href=&#34;https://github.com/doloopwhile/logrusltsv&#34;&gt;doloopwhile/logrusltsv&lt;/a&gt;と組み合わせてLTSV形式のログ出力するのに使っていました。&lt;/p&gt;&#xA;&lt;p&gt;しかし、&lt;a href=&#34;http://methane.hatenablog.jp/entry/2015/09/17/logger_%E3%81%AE%E3%83%91%E3%83%95%E3%82%A9%E3%83%BC%E3%83%9E%E3%83%B3%E3%82%B9%E3%81%AB%E3%81%A4%E3%81%84%E3%81%A6_%5BGo%5D&#34;&gt;logger のパフォーマンスについて [Go] - methaneのブログ&lt;/a&gt;にも書かれていますが、&lt;a href=&#34;https://godoc.org/github.com/Sirupsen/logrus#WithFields&#34;&gt;logrus.WithFields&lt;/a&gt;は&lt;a href=&#34;https://godoc.org/github.com/Sirupsen/logrus#Fields&#34;&gt;Fields&lt;/a&gt;、つまり &lt;code&gt;map[string]interface{}&lt;/code&gt; の値を渡す必要があります。これはGCに負荷をかけそうというのも気になりますが、Goのmapは順不同なのでログ出力の際にキーの順番がソースに書いた順番と必ずしも一致しないというのがイマイチだよなーと思っていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goで複数のリモートのワーカーにジョブを実行させるremoteworkersというパッケージを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/06/12/wrote_remoteworkers_go_pacakge/</link>
      <pubDate>Sun, 12 Jun 2016 21:53:35 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/12/wrote_remoteworkers_go_pacakge/</guid>
      <description>&lt;h2 id=&#34;なぜ書いたか&#34;&gt;なぜ書いたか&lt;/h2&gt;&#xA;&lt;p&gt;仕事で複数のサーバで同じ処理を実行して結果を集めたいというニーズがあって、各サーバをgRPCのサーバにするという実装でとりあえず実現していました。でも、出来れば処理を実行するワーカーサーバから制御サーバに接続して繋ぎっぱなしにしておいて、制御サーバからジョブを送り込む方式にしたいなーと思っていて、家で実装を進めていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goで複数のリモートのワーカーにジョブを実行させるremoteworkersというパッケージを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/06/12/wrote_remoteworkers_go_package/</link>
      <pubDate>Sun, 12 Jun 2016 21:53:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/12/wrote_remoteworkers_go_package/</guid>
      <description>&lt;h2 id=&#34;なぜ書いたか&#34;&gt;なぜ書いたか&lt;/h2&gt;&#xA;&lt;p&gt;仕事で複数のサーバで同じ処理を実行して結果を集めたいというニーズがあって、各サーバをgRPCのサーバにするという実装でとりあえず実現していました。でも、出来れば処理を実行するワーカーサーバから制御サーバに接続して繋ぎっぱなしにしておいて、制御サーバからジョブを送り込む方式にしたいなーと思っていて、家で実装を進めていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GoのMessagePackのライブラリのベンチマークをしてみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/04/benchmark_go_msgpack_libraries/</link>
      <pubDate>Sat, 04 Jun 2016 22:17:52 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/06/04/benchmark_go_msgpack_libraries/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://qiita.com/yosisa/items/f21d3476bc8d368d7494&#34;&gt;Go の msgpack ライブラリ比較 - Qiita&lt;/a&gt;の記事が最終更新日から1年以上経過しているとのことなので、現在の最新のコミットで試してみました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;github.com/vmihailenco/msgpack&lt;/code&gt; を &lt;code&gt;go get&lt;/code&gt; すると&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ go get github.com/vmihailenco/msgpack&#xA;package github.com/vmihailenco/msgpack: code in directory /home/hnakamur/gocode/src/github.com/vmihailenco/msgpack expects import &amp;#34;gopkg.in/vmihailenco/msgpack.v2&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;と言われたので &lt;code&gt;go get gopkg.in/vmihailenco/msgpack.v2&lt;/code&gt; で取得し、この記事のコードの &lt;code&gt;&amp;quot;github.com/vmihailenco/msgpack&amp;quot;&lt;/code&gt; を &lt;code&gt;&amp;quot;gopkg.in/vmihailenco/msgpack.v2&amp;quot;&lt;/code&gt; に書き換え &lt;code&gt;msgpack_test.go&lt;/code&gt; という名前で保存して試しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDのREST APIクライアントライブラリpylxdを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/tried-pylxd/</link>
      <pubDate>Sat, 07 May 2016 21:17:35 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/07/tried-pylxd/</guid>
      <description>&lt;p&gt;Python Package Index (PyPI)の &lt;a href=&#34;https://pypi.python.org/pypi/pylxd/2.0.0&#34;&gt;pylxd 2.0.0&lt;/a&gt;のページにインストール方法と使い方の例が書いてあるので、これに沿って試しました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストール&#34;&gt;インストール&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 16.04だとaptでインストール可能なのでそちらでインストールしました。Python3用のpython3-pylxdパッケージとPython2用のpython-pylxdパッケージがありますが、今後Ansibleのモジュールを作ることを想定してPython2用のパッケージをインストールして試してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDのREST APIをcurlで試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-rest-api-with-curl/</link>
      <pubDate>Sat, 07 May 2016 21:17:34 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-rest-api-with-curl/</guid>
      <description>&lt;h2 id=&#34;lxdのrest-api&#34;&gt;LXDのREST API&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://linuxcontainers.org/ja/lxd/rest-api/&#34;&gt;Linux Containers - LXD - REST API&lt;/a&gt;と&lt;a href=&#34;https://github.com/lxc/lxd/blob/master/doc/rest-api.md&#34;&gt;lxd/rest-api.md at master · lxc/lxd&lt;/a&gt;にLXDのREST APIについて説明があります。&lt;/p&gt;&#xA;&lt;p&gt;また&lt;a href=&#34;https://github.com/lxc/lxd#using-the-rest-api&#34;&gt;Using the REST API&lt;/a&gt;に &lt;code&gt;curl&lt;/code&gt; コマンドでのAPI呼び出し例が書かれていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>AnsibleのLXDコネクションプラグインを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/tried-ansible-lxd-connection-plugin/</link>
      <pubDate>Sat, 07 May 2016 20:32:13 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/07/tried-ansible-lxd-connection-plugin/</guid>
      <description>&lt;p&gt;LXDを使うとなるとAnsibleのLXDコネクションプラグインが欲しいなと思って&lt;a href=&#34;https://github.com/ansible/ansible&#34;&gt;ansible/ansibleのgithubのレポジトリ&lt;/a&gt;を眺めていたら &lt;a href=&#34;https://github.com/ansible/ansible/blob/fca5ba153e9258d6a9a28c418d8339d507eee81c/lib/ansible/plugins/connection/lxd.py&#34;&gt;lib/ansible/plugins/connection/lxd.py&lt;/a&gt; に既に作られていることに気付きました。&lt;/p&gt;&#xA;&lt;p&gt;ソースを見ると &lt;code&gt;lxc&lt;/code&gt; コマンドを使った実装になっていました。aptでインストールしたansible 2.0.0.2にこのファイルだけ追加して使えないか試してみたのですが、 &lt;code&gt;AttributeError: &#39;PlayContext&#39; object has no attribute &#39;executable&#39;&lt;/code&gt; というエラーが出て使えませんでした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDコンテナで固定IPアドレスを使うための設定</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/how-to-use-fixed-ip-address-for-a-lxd-container/</link>
      <pubDate>Sat, 07 May 2016 18:01:51 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/07/how-to-use-fixed-ip-address-for-a-lxd-container/</guid>
      <description>&lt;h2 id=&#34;2016-08-12-追記&#34;&gt;2016-08-12 追記&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;lxd-bridge&lt;/code&gt; サービスを再起動せずに固定IPアドレス設定を更新できるようにするための設定方法を &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/08/12/update-lxd-dnsmasq-dhcp-hosts-config-with-sighup/&#34;&gt;LXDのdnsmasqの固定IP設定をSIGHUPで更新する · hnakamur&amp;rsquo;s blog at github&lt;/a&gt; に書きました。こちらのほうがお勧めです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;設定まとめ&#34;&gt;設定まとめ&lt;/h2&gt;&#xA;&lt;p&gt;自分が後から参照することを想定して先に設定方法をまとめます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXCの特定の1つのコンテナの起動状態をシェルスクリプトで確認したいときのお勧めの方法</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/script-to-check-running-status-of-lxd-container/</link>
      <pubDate>Sat, 07 May 2016 14:12:49 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/07/script-to-check-running-status-of-lxd-container/</guid>
      <description>&lt;h2 id=&#34;イマイチな方法1-lxc-listの出力をawkで加工&#34;&gt;イマイチな方法1: lxc listの出力をawkで加工&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;lxc list -h&lt;/code&gt; を見ると &lt;code&gt;lxc list [resource] [filters] [--format table|json] [-c columns] [--fast]&lt;/code&gt; というコマンドラインになっていて、 &lt;code&gt;-c&lt;/code&gt; オプションで表示するカラムを指定可能です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04 LTSでLXD 2.0をセットアップして使ってみる</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/start-using-lxd-2.0-on-ubuntu-16.04/</link>
      <pubDate>Sat, 07 May 2016 14:12:49 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/07/start-using-lxd-2.0-on-ubuntu-16.04/</guid>
      <description>&lt;h2 id=&#34;参考記事&#34;&gt;参考記事&lt;/h2&gt;&#xA;&lt;p&gt;公式ドキュメントの&lt;a href=&#34;https://linuxcontainers.org/ja/lxd/getting-started-cli/&#34;&gt;Linux Containers - LXD - はじめに - コマンドライン&lt;/a&gt;によくまとまっているのですが、より詳細には &lt;a href=&#34;http://insights.ubuntu.com/2016/03/14/the-lxd-2-0-story-prologue/&#34;&gt;The LXD 2.0 Story (Prologue) | Ubuntu Insights&lt;/a&gt; にリストアップされている記事がわかりやすかったです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04 LTSでLXD 2.0を試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-2.0-on-ubuntu-16.04/</link>
      <pubDate>Sat, 07 May 2016 14:12:49 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-2.0-on-ubuntu-16.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/04/19/run_centos7_containers_on_lxc2/&#34;&gt;LXC 2.0でCentOS 7のコンテナを動かしてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;でLXC 2.0を試しましたが、今度はLXD 2.0を試してみました。&lt;/p&gt;&#xA;&lt;p&gt;実は私は、コンテナをローカルホストでしか動かさないならLXC、リモートホストでも動かすならLXDという使い分けなのかなと漠然と思っていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntuでホームディレクトリを暗号化するのを止めた</title>
      <link>https://hnakamur.github.io/blog/2016/05/02/uninstall-encrypted-home-on-ubuntu/</link>
      <pubDate>Mon, 02 May 2016 12:28:08 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/02/uninstall-encrypted-home-on-ubuntu/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/&#34;&gt;MacをPXEサーバにしてExpress5800/S70タイプRBにUbuntu16.04をインストールしてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;でホームディレクトリを暗号化してみたのですが、OS起動後に鍵認証でsshしようとすると鍵は正しく指定しているのに &lt;code&gt;Permission denied (publickey).&lt;/code&gt; と拒否されてしまうケースがありました。コンソールで一度ログインするとsshでもログイン出来るようになります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04でNo-IPのダイナミックDNSサービスを使ってみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/02/use-no-ip-dynamic-dns-on-ubuntu-16.04/</link>
      <pubDate>Mon, 02 May 2016 09:39:31 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/02/use-no-ip-dynamic-dns-on-ubuntu-16.04/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/&#34;&gt;MacをPXEサーバにしてExpress5800/S70タイプRBにUbuntu16.04をインストールしてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;で自宅サーバを起動したのですが、固定グローバルIPアドレスは持っていないので、ダイナミックDNS (DDNS) サービスを使うことにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MacをPXEサーバにしてExpress5800/S70タイプRBにUbuntu16.04をインストールしてみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/</link>
      <pubDate>Sun, 01 May 2016 22:36:19 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;Goで書いたプログラムをMacBook Pro上で負荷試験をしていたら、ビーチボールカーソルが回りっぱなしになって大変でした。そういえば、負荷試験するときは極力余計なプロセスを止めて外界の影響を受けない状態でやるべきという話を思い出しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go-daemonとgoのos.StartProcess()のコードを読んでみた</title>
      <link>https://hnakamur.github.io/blog/2016/04/23/go-daemon-and-golang-os-startprocess-code-reading/</link>
      <pubDate>Sat, 23 Apr 2016 16:45:09 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/04/23/go-daemon-and-golang-os-startprocess-code-reading/</guid>
      <description>&lt;h2 id=&#34;発端-goでデーモンを書くのは無理と思っていたら実は出来るらしい&#34;&gt;発端: Goでデーモンを書くのは無理と思っていたら実は出来るらしい&lt;/h2&gt;&#xA;&lt;p&gt;Goでデーモンを書くのは無理と以前どこかで読んだ気がします。&#xA;ところが、Pythonで書かれた&lt;a href=&#34;https://github.com/graphite-project&#34;&gt;Graphite Project&lt;/a&gt;の&lt;a href=&#34;https://github.com/graphite-project/carbon&#34;&gt;carbon&lt;/a&gt;をGo言語で実装した&lt;a href=&#34;https://github.com/lomik/go-carbon&#34;&gt;lomik/go-carbon&lt;/a&gt;の Features に Run as daemon と書かれていました。どうやって実現しているのか気になって調べてみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXC 2.0でCentOS 7のコンテナを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2016/04/19/run_centos7_containers_on_lxc2/</link>
      <pubDate>Tue, 19 Apr 2016 06:37:15 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/04/19/run_centos7_containers_on_lxc2/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;h3 id=&#34;なぜdockerではなくlxcを使うのか&#34;&gt;なぜDockerではなくLXCを使うのか&lt;/h3&gt;&#xA;&lt;p&gt;コンテナと言えばDockerが有名です。Docker 1.9からネットワーク機能が大幅に良くなっていて、Docker Composeでコンテナを作成するとコンテナ名で名前解決できるようになっています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>「サーバ/インフラエンジニア養成読本 DevOps編」の献本を頂きました</title>
      <link>https://hnakamur.github.io/blog/2016/02/22/software_design_plus_devops_review/</link>
      <pubDate>Mon, 22 Feb 2016 21:30:52 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/02/22/software_design_plus_devops_review/</guid>
      <description>&lt;p&gt;「最速攻略！ Ansible 2によるサーバ構築」という特集を書かれた新原 雅司さんから「サーバ/インフラエンジニア養成読本 DevOps編」の献本を頂きました。ありがとうございます！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Traffic Server を GDB で動かす</title>
      <link>https://hnakamur.github.io/blog/2016/02/12/run-apache-traffic-server-with-gdb/</link>
      <pubDate>Fri, 12 Feb 2016 00:02:11 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/02/12/run-apache-traffic-server-with-gdb/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://gihyo.jp/magazine/wdpress/archive/2012/vol69&#34;&gt;WEB+DB PRESS Vol.69｜技術評論社&lt;/a&gt; にあった &lt;a href=&#34;http://dev.ariel-networks.com/wp/archives/author/inoue&#34;&gt;アリエル・ネットワーク㈱の井上さん&lt;/a&gt;による「大規模コードリーディング」の特集を読んで、静的解析 (コードを読んで理解する手法) と動的解析 (実行時の動作を予測しながら構造を理解する方法) を行ったり来たり繰り返すのが良いと理解しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Apache Traffic Server のコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2016/02/11/apache-traffic-server-code-reading/</link>
      <pubDate>Thu, 11 Feb 2016 23:11:50 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/02/11/apache-traffic-server-code-reading/</guid>
      <description>&lt;p&gt;Apache Traffic Server のコードリーディングを少しやってみたので、将来の自分に向けてメモ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;コードリーディングの方法についての参考文献&#34;&gt;コードリーディングの方法についての参考文献&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/magazine/wdpress/archive/2012/vol69&#34;&gt;WEB+DB PRESS Vol.69｜技術評論社&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://dev.ariel-networks.com/wp/archives/author/inoue&#34;&gt;アリエル・ネットワーク㈱の井上さん&lt;/a&gt;による「大規模コードリーディング」の特集&lt;/li&gt;&#xA;&lt;li&gt;私は&lt;a href=&#34;http://gihyo.jp/book/2013/978-4-7741-5783-2&#34;&gt;WEB+DB PRESS総集編［Vol.1～72］：書籍案内｜技術評論社&lt;/a&gt;を買ってたので、これに入っています。&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/book/2015/978-4-7741-7538-6&#34;&gt;WEB+DB PRESS総集編［Vol.1～84］：書籍案内｜技術評論社&lt;/a&gt;というのも出ていました。将来チェックするときはより新しい総集編が出ているかチェックしましょう。&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/satorutakeuchi18/viewing-source-code&#34;&gt;大規模ソースコードの読み方&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ツール&#34;&gt;ツール&lt;/h2&gt;&#xA;&lt;p&gt;以下の 2 つのツールを使ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>rsyslogで信頼性のあるログ転送について調べたメモ</title>
      <link>https://hnakamur.github.io/blog/2016/01/08/reliable_log_forward_with_rsyslog/</link>
      <pubDate>Fri, 08 Jan 2016 01:12:13 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/01/08/reliable_log_forward_with_rsyslog/</guid>
      <description>&lt;p&gt;事の発端は fluentd を使ってみようかと思って &lt;a href=&#34;http://changineer.info/server/logging/fluentd-td-agent.html&#34;&gt;fluentd(td-agent)のインストールと設定&lt;/a&gt; を読んだことで す。fluentd のデメリットのところを読んで、ちょっと気になりました。&lt;/p&gt;&#xA;&lt;p&gt;Goで書かれた&lt;a href=&#34;https://github.com/moriyoshi/ik&#34;&gt;moriyoshi/ik&lt;/a&gt;も気になったのですが、最近話聞かないし最終コミットも3ヶ月前だったので、今回は見送りました。&lt;/p&gt;&#xA;&lt;p&gt;そこで、rsyslogでのログ転送について調査してみようと思いました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ambiguous width cjk patchを当てたhomebrew用tmux</title>
      <link>https://hnakamur.github.io/blog/2015/12/29/homebrew-tmux-ambiguous-width-cjk-patch/</link>
      <pubDate>Tue, 29 Dec 2015 00:53:53 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/29/homebrew-tmux-ambiguous-width-cjk-patch/</guid>
      <description>&lt;p&gt;ほぼ&lt;a href=&#34;http://qiita.com/macoshita/items/2ee3c15f362103d1e373&#34;&gt;Homebrewでサクッとpatchを当てる - Qiita&lt;/a&gt;のそのままですが、tmuxのバージョンを2.1に上げたものを&lt;a href=&#34;https://github.com/hnakamur/homebrew-custom&#34;&gt;hnakamur/homebrew-custom&lt;/a&gt;に置きました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;パッチ適用版tmuxのインストール&#34;&gt;パッチ適用版tmuxのインストール&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;brew tap hnakamur/custom&#xA;brew install tmux-patched&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;tmuxconfへの設定追加&#34;&gt;tmux.confへの設定追加&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://qiita.com/macoshita/items/2ee3c15f362103d1e373#comment-ab2f10f09aefe1f3d8b6&#34;&gt;Homebrewでサクッとpatchを当てる - Qiitaのコメント&lt;/a&gt;にある通り、 &lt;code&gt;~/.tmux.conf&lt;/code&gt; に以下の設定が必要でした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CentOS 7用にPython2最新版のrpmを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2015/12/19/build_latest_python2_rpm_for_centos7/</link>
      <pubDate>Sat, 19 Dec 2015 11:51:30 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/19/build_latest_python2_rpm_for_centos7/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/12/16/calling_copr_api_with_curl/&#34;&gt;coprのAPIをcurlで呼び出す · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;にも書きましたが、CentOS 7のPythonは古くてhttps通信時にInsecurePlatformWarningが出てしまいます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>direnvでgo1.5.2とgo1.6beta1を切り替える設定</title>
      <link>https://hnakamur.github.io/blog/2015/12/19/switch_go1.5.2_and_go1.6beta1_with_direnv/</link>
      <pubDate>Sat, 19 Dec 2015 01:45:25 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/19/switch_go1.5.2_and_go1.6beta1_with_direnv/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;go1.6beta1がリリースされました。go1.5.2と切り替えて使いたいので、&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv/direnv&lt;/a&gt;用の設定を書きました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;設定内容&#34;&gt;設定内容&lt;/h2&gt;&#xA;&lt;p&gt;以下の様な配置で使うことにしました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;go1.5.2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;goのインストールディレクトリ: /usr/local/go&lt;/li&gt;&#xA;&lt;li&gt;GOPATH: ~/gocode&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;go1.6beta1&#xA;&lt;ul&gt;&#xA;&lt;li&gt;goのインストールディレクトリ: /usr/local/go1.6beta1&lt;/li&gt;&#xA;&lt;li&gt;GOPATH: ~/gocode1.6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;まず、&lt;del&gt;/.bash_profileや&lt;/del&gt;/.bashからはgoへのPATH設定やGOPATHの設定は削除します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Mockやcoprでrpmをビルドする際にサードパーティのレポジトリを追加する方法</title>
      <link>https://hnakamur.github.io/blog/2015/12/18/add_third_party_to_build_on_mock_and_copr/</link>
      <pubDate>Fri, 18 Dec 2015 01:43:28 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/18/add_third_party_to_build_on_mock_and_copr/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://fedoraproject.org/wiki/Mock&#34;&gt;Mock&lt;/a&gt;や&lt;a href=&#34;https://copr.fedoraproject.org/&#34;&gt;copr&lt;/a&gt;でrpmをビルドする際にCentOS標準のレポジトリ以外のサードパーティのレポジトリのrpmに依存したい場合があります。この記事ではサードパーティのレポジトリの追加方法を説明します。&lt;/p&gt;&#xA;&lt;p&gt;この記事では&lt;a href=&#34;https://www.varnish-cache.org/vmod/header-manipulation&#34;&gt;libvmod-header&lt;/a&gt;をビルドするために&lt;a href=&#34;https://www.varnish-cache.org/installation/redhat&#34;&gt;varnish-cache.orgのRedHat用インストール手順&lt;/a&gt;で提供されているEL7用のレポジトリを追加する例で説明します。&lt;/p&gt;&#xA;&lt;p&gt;ビルドするために私が作成したDockerfileとシェルスクリプトは&lt;a href=&#34;https://github.com/hnakamur/libvmod-header-rpm&#34;&gt;hnakamur/libvmod-header-rpm&lt;/a&gt;にあります。&lt;/p&gt;&#xA;&lt;h2 id=&#34;mockでのrpmビルド時にサードパーティのレポジトリを追加する方法&#34;&gt;Mockでのrpmビルド時にサードパーティのレポジトリを追加する方法&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://lists.fedorahosted.org/pipermail/softwarecollections/2012-November/000018.html&#34;&gt;Building SCL packages with mock&lt;/a&gt;で紹介されていた方法です。&lt;/p&gt;&#xA;&lt;p&gt;CentOS 7用のrpmをビルドする場合 &lt;code&gt;/etc/mock/epel-7-x86_64.cfg&lt;/code&gt; をコピーして &lt;code&gt;/etc/mock/epel-7-varnish-x86_64.cfg&lt;/code&gt; のように別名で保存します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mockを使ったrpmビルドが失敗した時の調査方法</title>
      <link>https://hnakamur.github.io/blog/2015/12/16/how_to_debug_errors_in_rpm_build_using_mock/</link>
      <pubDate>Wed, 16 Dec 2015 01:10:33 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/16/how_to_debug_errors_in_rpm_build_using_mock/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/&#34;&gt;nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;でspecファイルを書いている最中はmockでのrpmのビルドに失敗することがよくあります。&lt;/p&gt;&#xA;&lt;p&gt;私は「なんとなくこんな感じか？」と書いて動かしてみてエラーを見て修正していくスタイルなので、失敗時の調査は重要です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>coprのAPIをcurlで呼び出す</title>
      <link>https://hnakamur.github.io/blog/2015/12/16/calling_copr_api_with_curl/</link>
      <pubDate>Wed, 16 Dec 2015 00:06:39 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/16/calling_copr_api_with_curl/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://fedorahosted.org/copr/&#34;&gt;copr&lt;/a&gt;を利用するには以下の3つの手段があります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;ウェブ管理画面を使う&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://fedorahosted.org/copr/wiki/ScreenshotsTutorial&#34;&gt;スクリーンショットつきのチュートリアル&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://apps.fedoraproject.org/packages/copr-cli&#34;&gt;copr-cli&lt;/a&gt;というコマンドラインツールを使う&#xA;&lt;ul&gt;&#xA;&lt;li&gt;内部的に下記の&lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;を呼び出しています&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;を使う&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;copr-cliを使わずにcurlでapiを呼ぶ理由&#34;&gt;copr-cliを使わずにcurlでAPIを呼ぶ理由&lt;/h2&gt;&#xA;&lt;p&gt;折角copr-cliというコマンドラインツールが用意されているのでそれを活用すれば良いのですが、以下のような問題に遭遇したのでAPIをcurlで呼ぶようにしてみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました</title>
      <link>https://hnakamur.github.io/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</link>
      <pubDate>Tue, 15 Dec 2015 04:19:16 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/&#34;&gt;Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;と&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/12/05/build_rpm_with_mock/&#34;&gt;mockコマンドでrpmをビルドする · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の環境でいくつかrpmをビルド・配布してみたのですが、手元の環境でビルドを成功させるまでに試行錯誤するのと、coprにsrpmをアップロードしてビルド・配布するのが別の環境だと面倒なことに気付きました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>rpmのspecファイルのSourceにGitHubの任意のコミットのtarballのURLを指定するときの良い書き方</title>
      <link>https://hnakamur.github.io/blog/2015/12/06/good_rpm_spec_source_url_syntax_for_tarball_on_github/</link>
      <pubDate>Sun, 06 Dec 2015 00:07:23 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/06/good_rpm_spec_source_url_syntax_for_tarball_on_github/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://fedoraproject.org/wiki/Packaging:SourceURL?rd=Packaging/SourceURL#Commit_Revision&#34;&gt;Packaging:SourceURL - FedoraProject&lt;/a&gt;で知ったtipsの紹介です。&lt;/p&gt;&#xA;&lt;p&gt;GitHubでプロジェクトの[Download ZIP]ボタンを押すと、ソースをZIP形式でダウンロードできます。&#xA;コミット数が多いプロジェクトだと &lt;code&gt;git clone&lt;/code&gt; するよりも高速に取得できるので履歴が不要な場合には便利な方法です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mockコマンドでrpmをビルドする</title>
      <link>https://hnakamur.github.io/blog/2015/12/05/build_rpm_with_mock/</link>
      <pubDate>Sat, 05 Dec 2015 22:10:26 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/05/build_rpm_with_mock/</guid>
      <description>&lt;h2 id=&#34;2015-12-15-追記&#34;&gt;2015-12-15 追記&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/&#34;&gt;nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;という記事を書きましたのでそちらもご参照ください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;以下元記事です&#34;&gt;以下元記事です&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/&#34;&gt;Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;でrpmを外部のサーバでビルドできるようになりましたが、試行錯誤中はこの手順だと時間がかかりますので、手元の環境でビルドしたいところです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/</link>
      <pubDate>Thu, 26 Nov 2015 22:33:57 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/</guid>
      <description>&lt;h2 id=&#34;2015-12-15-追記&#34;&gt;2015-12-15 追記&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/&#34;&gt;nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;という記事を書きましたのでそちらもご参照ください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;CentOSを使っていると、パッケージのバージョンが古いのでspecファイルを改変してrpmをビルドすることがちょくちょくあります。&#xA;一度ビルドした後は、自作rpmのレポジトリサーバを立ててそこに置いておくのが本来は良いんだろうなと思います。&#xA;ですが、サーバの運用の手間を考えると面倒だなと思って、AnsibleやDockerでのプロビジョニング中にビルドするようにしていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mattn/gomにGoのvendoringサポートが追加されました</title>
      <link>https://hnakamur.github.io/blog/2015/10/22/gom_got_go_vendoring_support/</link>
      <pubDate>Thu, 22 Oct 2015 01:22:10 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/10/22/gom_got_go_vendoring_support/</guid>
      <description>&lt;p&gt;以前&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;を読んだのですが、その時は様子見にしていました。&lt;/p&gt;&#xA;&lt;p&gt;しかし、仕事でGoを書くとなるとやはりVendoringは必要だろうと思い、遅ればせながら今回&lt;a href=&#34;https://getgb.io/examples/getting-started/&#34;&gt;gb&lt;/a&gt;, &lt;a href=&#34;https://github.com/tools/godep&#34;&gt;tools/godep&lt;/a&gt;, &lt;a href=&#34;https://github.com/mattn/gom&#34;&gt;mattn/gom&lt;/a&gt;を試してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MySQL APT repositoryからMySQL 5.7.xをインストールするスクリプト</title>
      <link>https://hnakamur.github.io/blog/2015/09/22/noninteractive_install_from_mysql_apt_repository_on_ubuntu_trusty/</link>
      <pubDate>Tue, 22 Sep 2015 22:35:21 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/09/22/noninteractive_install_from_mysql_apt_repository_on_ubuntu_trusty/</guid>
      <description>&lt;p&gt;Ubuntu 14.04 (Trusty)に&lt;a href=&#34;http://dev.mysql.com/downloads/repo/apt/&#34;&gt;MySQL APT Repository&lt;/a&gt;からMySQL 5.7 (Development Release)を&#xA;インストールするスクリプトを書きました。&lt;/p&gt;&#xA;&lt;p&gt;Vagrantfileと共に&lt;a href=&#34;https://github.com/hnakamur/noninteractive_install_mysql_from_apt_repository_to_ubuntu_trusty&#34;&gt;hnakamur/noninteractive_install_mysql_from_apt_repository_to_ubuntu_trusty&lt;/a&gt;に置いてあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでグローバルなバッファを使いまわしてスタックトレースを取得するライブラリを書いてみた</title>
      <link>https://hnakamur.github.io/blog/2015/08/31/go_stacktrace_library_with_global_buffer/</link>
      <pubDate>Mon, 31 Aug 2015 00:43:56 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/08/31/go_stacktrace_library_with_global_buffer/</guid>
      <description>&lt;h2 id=&#34;背景と経緯&#34;&gt;背景と経緯&lt;/h2&gt;&#xA;&lt;p&gt;Goでもエラー処理にpanicを使えばスタックトレースが出力されます。でも、ライブラリでは &lt;code&gt;panic&lt;/code&gt; するとエラー処理して続行したいときに困るのでpanicではなく &lt;code&gt;return err&lt;/code&gt; を使うのが普通です。すると今度はスタックトレースが取れないのが残念だと思っていました。エラーが出た箇所でログ出力はするとして、やはりスタックトレースがあるほうがその関数までの呼出経路がわかってデバッグが捗ります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>自分のグローバルアドレスをOpenDNSとdigコマンドで調べる方法を試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/08/12/get_my_global_ip_address_with_opendns/</link>
      <pubDate>Wed, 12 Aug 2015 07:14:59 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/08/12/get_my_global_ip_address_with_opendns/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://unix.stackexchange.com/questions/22615/how-can-i-get-my-external-ip-address-in-bash/81699&#34;&gt;linux - How can I get my external IP address in bash? - Unix &amp;amp; Linux Stack Exchange&lt;/a&gt;を読んで試してみたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;この記事を読むまでは &lt;code&gt;curl -s http://ifconfig.me&lt;/code&gt; しか知りませんでした。&lt;/p&gt;&#xA;&lt;p&gt;処理時間を比べてみました（出力結果のIPアドレスは伏せ字XXX.XXX.XXX.XXXにしています）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 14.04のPython3でvenvを使う手順のメモ</title>
      <link>https://hnakamur.github.io/blog/2015/07/26/use_python3_venv_on_ubuntu_14.04/</link>
      <pubDate>Sun, 26 Jul 2015 23:09:17 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/26/use_python3_venv_on_ubuntu_14.04/</guid>
      <description>&lt;p&gt;Ubuntu 14.04のPython3でvenv環境をつくろうとしたらエラーになったのですが、&lt;a href=&#34;http://www.thefourtheye.in/2014/12/Python-venv-problem-with-ensurepip-in-Ubuntu.html&#34;&gt;thefourtheye&amp;rsquo;s Tech Blog: Python&amp;rsquo;s venv problem with ensurepip in Ubuntu&lt;/a&gt;に回避方法が紹介されていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>HomebrewのPython2とPython3でvirtualenv環境を作成する手順メモ</title>
      <link>https://hnakamur.github.io/blog/2015/07/26/how_to_use_venv_with_homebrew_python2_and_3/</link>
      <pubDate>Sun, 26 Jul 2015 02:28:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/26/how_to_use_venv_with_homebrew_python2_and_3/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;ここしばらく&lt;a href=&#34;https://github.com/riywo/anyenv&#34;&gt;riywo/anyenv&lt;/a&gt;と&lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;yyuu/pyenv&lt;/a&gt;でPython 2.7.10をPython 3.4.3を使い分けてきたのですが、私の用途だと2系と3系の最新だけ使えればいいことがわかりました。&lt;/p&gt;&#xA;&lt;p&gt;そこで、pyenvを止めてhomebrewのpython2と3を使うことにしました。自分用にPython2のvirtualenvとPython3のvenvで仮想環境を作る手順のメモを書いておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GeForce搭載の旧モデルMacBook ProでCaffeをビルドする手順メモ</title>
      <link>https://hnakamur.github.io/blog/2015/07/26/build_caffe_on_macbook_with_geforce/</link>
      <pubDate>Sun, 26 Jul 2015 00:53:52 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/26/build_caffe_on_macbook_with_geforce/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/07/25/setup_cuda_on_macbook_pro_with_geforce/&#34;&gt;GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ&lt;/a&gt;でCUDA 7.0.29をインストールしたMacBook Proで&lt;a href=&#34;http://caffe.berkeleyvision.org/&#34;&gt;Caffe | Deep Learning Framework&lt;/a&gt;をビルドしてみた手順メモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GeForce搭載の旧モデルMacBook ProでPyCUDAを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/07/25/setup_pycuda_on_macbook_pro_with_geforce/</link>
      <pubDate>Sat, 25 Jul 2015 18:31:56 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/25/setup_pycuda_on_macbook_pro_with_geforce/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;../setup_cuda_on_macbook_pro_with_geforce/&#34;&gt;GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ&lt;/a&gt;でCUDAをセットアップした後、&lt;a href=&#34;http://mathema.tician.de/software/pycuda/&#34;&gt;PyCUDA&lt;/a&gt;も試してみたのでメモしておきます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://mathema.tician.de/software/pycuda/&#34;&gt;PyCUDA&lt;/a&gt;のページの &lt;code&gt;Prerequisites&lt;/code&gt; に &lt;code&gt;Boost&lt;/code&gt;, &lt;code&gt;CUDA&lt;/code&gt;, &lt;code&gt;Numpy&lt;/code&gt; が書かれています。&lt;/p&gt;&#xA;&lt;p&gt;CUDAは&lt;a href=&#34;../setup_cuda_on_macbook_pro_with_geforce/&#34;&gt;GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ&lt;/a&gt;でセットアップ済みです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ</title>
      <link>https://hnakamur.github.io/blog/2015/07/25/setup_cuda_on_macbook_pro_with_geforce/</link>
      <pubDate>Sat, 25 Jul 2015 17:37:59 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/25/setup_cuda_on_macbook_pro_with_geforce/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.apple.com/jp/macbook-pro/specs-retina/&#34;&gt;MacBook Pro現行モデルの技術仕様&lt;/a&gt;を見ると最上位機種のグラフィックスチップはIntel Iris Pro GraphicsとAMD Radeon R9 M370Xとなっており、NVIDIA GeForceは搭載されていません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OSX上でmultirustを使ったrustfmtのインストール手順</title>
      <link>https://hnakamur.github.io/blog/2015/07/19/install_rustfmt/</link>
      <pubDate>Sun, 19 Jul 2015 00:33:15 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/19/install_rustfmt/</guid>
      <description>&lt;p&gt;OSXでは&lt;a href=&#34;https://github.com/brson/multirust/issues/43&#34;&gt;building cargo atop multirust fails, dyn link problems (Mac OS X) · Issue #43 · brson/multirust&lt;/a&gt;のイシューの&lt;a href=&#34;https://github.com/brson/multirust/issues/43#issuecomment-106758695&#34;&gt;コメント106758695&lt;/a&gt;にあるように &lt;code&gt;rustfmt&lt;/code&gt; の実行時に環境変数 &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; を設定する必要があります。&lt;/p&gt;&#xA;&lt;p&gt;そこで、 &lt;code&gt;rustfmt&lt;/code&gt; の実行ファイルを &lt;code&gt;~/bin/rustfmt.bin&lt;/code&gt; と別の名前にして、起動用のスクリプトを &lt;code&gt;~/bin/rustfmt&lt;/code&gt; として作成します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>manyrustという複数バージョンのrustインストールスクリプトを書いた</title>
      <link>https://hnakamur.github.io/blog/2015/07/18/manyrust/</link>
      <pubDate>Sat, 18 Jul 2015 23:13:32 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/18/manyrust/</guid>
      <description>&lt;h2 id=&#34;multirustがあるのになぜ新たに書いたのか&#34;&gt;multirustがあるのに、なぜ新たに書いたのか&lt;/h2&gt;&#xA;&lt;p&gt;rustのインストールは&lt;a href=&#34;http://www.rust-lang.org/install.html&#34;&gt;Install · The Rust Programming Language&lt;/a&gt;にあるように複数のチャネルから選んでインストールします。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;stable (安定版)チャネル&lt;/li&gt;&#xA;&lt;li&gt;beta (ベータ版)チャネル&lt;/li&gt;&#xA;&lt;li&gt;nightly (毎晩ビルドされる)チャネル&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;rustでunstableなAPIを使うにはnightlyを使う必要があるので、たいていはstableとnightlyの両方をインストールして使い分けたくなるはずです。&#xA;その用途には定番のスクリプトとして&lt;a href=&#34;https://github.com/brson/multirust&#34;&gt;brson/multirust&lt;/a&gt;があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>xhyveでFreeBSDを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2015/07/12/running_freebsd_on_xhyve/</link>
      <pubDate>Sun, 12 Jul 2015 06:34:46 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/12/running_freebsd_on_xhyve/</guid>
      <description>&lt;p&gt;下記の記事を参考に動かしただけですが、後々使うときに手順を忘れているはずなのでメモ。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blog.holidayworking.org/entry/2015/06/27/xhyve_%E3%81%A7_FreeBSD_%E3%82%92%E5%8B%95%E3%81%8B%E3%81%97%E3%81%A6%E3%81%BF%E3%81%9F&#34;&gt;xhyve で FreeBSD を動かしてみた - blog.holidayworking.org&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://blog.holidayworking.org/entry/2015/07/05/FreeBSD_on_xhyve_%E3%81%A7%E3%83%87%E3%82%A3%E3%82%B9%E3%82%AF%E3%82%92%E3%83%9E%E3%82%A6%E3%83%B3%E3%83%88%E3%81%99%E3%82%8B%E3%81%93%E3%81%A8%E3%81%8C%E3%81%A7%E3%81%8D%E3%81%9F&#34;&gt;FreeBSD on xhyve でディスクをマウントすることができた - blog.holidayworking.org&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;なお、FreeBSD対応のプルリクエストは既に本家のmasterにマージ済みです。&#xA;また、今回使ったスクリプトは &lt;a href=&#34;https://github.com/hnakamur/xhyve/tree/add_scripts_for_freebsd&#34;&gt;hnakamur/xhyveのadd_scripts_for_freebsdブランチ&lt;/a&gt; に上げています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cybozu Garoon APIのファイル管理の部分だけのgoライブラリを書いた</title>
      <link>https://hnakamur.github.io/blog/2015/06/15/garoon_go_client/</link>
      <pubDate>Mon, 15 Jun 2015 20:24:16 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/15/garoon_go_client/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Cybozu &lt;a href=&#34;https://cybozudev.zendesk.com/hc/ja/categories/200157760-Garoon-API&#34;&gt;Garoon API&lt;/a&gt;のファイル管理のうち、フォルダ一覧取得、フォルダ内のファイル一覧取得、ファイルダウンロードのAPIを呼び出すライブラリをGoで書いてみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mecab-ipadicでconfigure実行したらmatrix.defが無いというエラー</title>
      <link>https://hnakamur.github.io/blog/2015/06/14/mecab-ipadic-matrix.def-missing/</link>
      <pubDate>Sun, 14 Jun 2015 16:40:05 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/14/mecab-ipadic-matrix.def-missing/</guid>
      <description>&lt;h2 id=&#34;tldr&#34;&gt;TL;DR&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/taku910/mecab/tree/master/mecab-ipadic&#34;&gt;https://github.com/taku910/mecab/tree/master/mecab-ipadic&lt;/a&gt; を取得して&#xA;&lt;code&gt;./configure --with-charset=&amp;quot;utf-8&amp;quot;&lt;/code&gt; と実行したら&#xA;&lt;code&gt;configure: error: cannot find sources (matrix.def) in . or ..&lt;/code&gt; というエラーが出て困ってます。解決策を知っている方ぜひ教えてください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;経緯と詳細な手順&#34;&gt;経緯と詳細な手順&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://sites.google.com/site/rmecab/&#34;&gt;rmecab&lt;/a&gt;をインストールしたくて、&lt;a href=&#34;http://rmecab.jp/wiki/index.php?RMeCab&#34;&gt;RMeCab - RとLinuxと&amp;hellip;&lt;/a&gt;に沿ってまずはMeCabをインストールしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Homebrewを辞めてMacPorts 2.3.3を入れてpkgngをビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2015/06/11/tried_macports/</link>
      <pubDate>Thu, 11 Jun 2015 01:09:08 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/11/tried_macports/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/shibu_jp/status/598332736638582785&#34;&gt;https://twitter.com/shibu_jp/status/598332736638582785&lt;/a&gt; と &lt;a href=&#34;http://gihyo.jp/admin/serial/01/bsd-yomoyama/0002&#34;&gt;第2回　パッケージ管理システム「pkg 1.5」と基本的な使い方：BSD界隈四方山話｜gihyo.jp … 技術評論社&lt;/a&gt;で、実験段階ですがOS Xもサポート対象となったという話を見て &lt;code&gt;pkg&lt;/code&gt; と &lt;code&gt;MacPorts&lt;/code&gt; をシームレスに組み合わせて使えるかが気になっていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>xhyveを試してみました</title>
      <link>https://hnakamur.github.io/blog/2015/06/11/tried_xhyve/</link>
      <pubDate>Thu, 11 Jun 2015 00:45:38 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/11/tried_xhyve/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.pagetable.com/?p=831&#34;&gt;xhyve – Lightweight Virtualization on OS X Based on bhyve | pagetable.com&lt;/a&gt;に沿って試してみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;確認した環境&#34;&gt;確認した環境&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;MacBook Pro (Retina, Mid 2012)&lt;/li&gt;&#xA;&lt;li&gt;OS X Yosemite 10.10.3&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;ソースからビルド&#34;&gt;ソースからビルド&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd お好みの作業ディレクトリ&#xA;git clone https://github.com/mist64/xhyve&#xA;cd xhyve&#xA;make&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;tiny-core-linuxを起動&#34;&gt;Tiny Core Linuxを起動&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;./xhyverun.sh&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;起動メッセージが流れた後、画面がクリアされて以下のように表示されたら起動完了です。ここまで3〜4秒です。速い！&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go言語用のメモリマップトファイルのライブラリを探してみた</title>
      <link>https://hnakamur.github.io/blog/2015/06/03/go_mmap_libraries/</link>
      <pubDate>Wed, 03 Jun 2015 06:29:01 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/03/go_mmap_libraries/</guid>
      <description>&lt;p&gt;ふとGo言語でメモリマップトファイルを扱えるライブラリってあるのかなと気になったので探してみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;標準ライブラリ&#34;&gt;標準ライブラリ&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://golang.org/&#34;&gt;Goのホームページ&lt;/a&gt;で&lt;a href=&#34;http://golang.org/search?q=mmap&#34;&gt;mmapで検索してみる&lt;/a&gt;とUnix系では実装があるみたいです。&lt;/p&gt;&#xA;&lt;p&gt;Did you mean: &lt;a href=&#34;http://golang.org/search?q=Mmap&#34;&gt;Mmap&lt;/a&gt; と表示されているのでクリックしてみるとsyscallパッケージに&lt;a href=&#34;http://golang.org/pkg/syscall/#Mmap&#34;&gt;Mmap&lt;/a&gt;があることがわかりました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LuaのGo実装GopherLuaを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/06/03/tried_gopher_lua/</link>
      <pubDate>Wed, 03 Jun 2015 05:29:03 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/03/tried_gopher_lua/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://inforno.net/articles/2015/02/15/gopher-lua-released&#34;&gt;inforno :: LuaのGo言語実装を公開しました&lt;/a&gt;を以前読んでましたが、試してなかったので試しました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.lua.org/about.html&#34;&gt;Lua: about&lt;/a&gt;の&amp;quot;What is Lua?&amp;ldquo;に&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;making it ideal for configuration, scripting, and rapid prototyping.&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vagrant &#43; Virtualboxでのディスク追加</title>
      <link>https://hnakamur.github.io/blog/2015/06/01/add_secondary_disk_to_vagrant_virtualbox/</link>
      <pubDate>Mon, 01 Jun 2015 06:04:04 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/01/add_secondary_disk_to_vagrant_virtualbox/</guid>
      <description>&lt;p&gt;Vagrant + Virtualboxでのディスク追加についてのメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ディスク追加の設定&#34;&gt;ディスク追加の設定&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://stackoverflow.com/questions/21050496/vagrant-virtualbox-second-disk-path/26743144#26743144&#34;&gt;http://stackoverflow.com/questions/21050496/vagrant-virtualbox-second-disk-path/26743144#26743144&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gist.github.com/leifg/4713995#comment-1206250&#34;&gt;https://gist.github.com/leifg/4713995#comment-1206250&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を参考に以下のようにしました。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# -*- mode: ruby -*-&#xA;# vi: set ft=ruby :&#xA;&#xA;Vagrant.configure(2) do |config|&#xA;  config.vm.box = &amp;#39;base&amp;#39;&#xA;&#xA;  config.vm.provider &amp;#34;virtualbox&amp;#34; do |p|&#xA;    vagrant_root = File.dirname(File.expand_path(__FILE__))&#xA;    file_to_disk = File.join(vagrant_root, &amp;#39;ad1.vdi&amp;#39;)&#xA;    unless File.exist?(file_to_disk)&#xA;      vb.customize [&amp;#39;createhd&amp;#39;, &amp;#39;--filename&amp;#39;, file_to_disk, &amp;#39;--size&amp;#39;, 500 * 1024]&#xA;    end&#xA;    vb.customize [&amp;#39;storageattach&amp;#39;, :id, &amp;#39;--storagectl&amp;#39;, &amp;#39;SATA Controller&amp;#39;, &amp;#39;--port&amp;#39;, 1, &amp;#39;--device&amp;#39;, 0, &amp;#39;--type&amp;#39;, &amp;#39;hdd&amp;#39;, &amp;#39;--medium&amp;#39;, file_to_disk]&#xA;  end&#xA;end&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;上記の後者のリンク先では &lt;code&gt;Vagrantfile&lt;/code&gt; のあるディレクトリを &lt;code&gt;VAGRANT_ROOT&lt;/code&gt; と大文字で定数に設定していますが、私は &lt;code&gt;vagrant_root&lt;/code&gt; と小文字で変数にしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>goでglogを使うときのメモ</title>
      <link>https://hnakamur.github.io/blog/2015/05/31/how_to_use_glog/</link>
      <pubDate>Sun, 31 May 2015 02:30:02 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/05/31/how_to_use_glog/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.satotaichi.info/logging-frameworks-for-go/&#34;&gt;go言語におけるロギングについて&lt;/a&gt;の記事と&lt;a href=&#34;http://godoc.org/github.com/golang/glog&#34;&gt;glog - GoDoc&lt;/a&gt;を読んで試してみました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;flag.Parse()&lt;/code&gt; を呼ぶ必要があり、最後に &lt;code&gt;glog.Flush()&lt;/code&gt; を呼ぶ必要があるので &lt;code&gt;main&lt;/code&gt; で &lt;code&gt;defer&lt;/code&gt; で書いておきます。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&amp;#34;flag&amp;#34;&#xA;&#xA;&#x9;&amp;#34;github.com/golang/glog&amp;#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;flag.Parse()&#xA;&#x9;defer glog.Flush()&#xA;&#xA;&#x9;if glog.V(0) {&#xA;&#x9;&#x9;glog.Info(&amp;#34;Hello, glog&amp;#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;glog.V(0).Info(&amp;#34;exiting&amp;#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ログレベルは &lt;code&gt;-v&lt;/code&gt; オプションで指定できるのですがデフォルト値は0なので、デフォルトで出力したいログはレベル0で書くようにします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FreeBSD 10.1 amd64でRustをビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2015/05/17/build_rust_on_freebsd/</link>
      <pubDate>Sun, 17 May 2015 07:51:14 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/05/17/build_rust_on_freebsd/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.rust-lang.org/install.html&#34;&gt;Install · The Rust Programming Language&lt;/a&gt;&#xA;を見ると現在のところRustのバイナリが提供されているのはLinux, Mac, Windowsのみです。&lt;/p&gt;&#xA;&lt;p&gt;FreeBSD 10.1 amd64でソースからビルドしてみました。&#xA;&lt;a href=&#34;https://github.com/rust-lang/rust#building-from-source&#34;&gt;Building from Source&lt;/a&gt;に従ってビルドするとすんなり行けました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>さくらのVPSにFreeBSD 10.1をクリーンインストールした時のメモ</title>
      <link>https://hnakamur.github.io/blog/2015/05/16/install_freebsd10.1_on_sakura_vps/</link>
      <pubDate>Sat, 16 May 2015 11:39:29 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/05/16/install_freebsd10.1_on_sakura_vps/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;さくらのVPSにFreeBSD 10.1をクリーンインストールしてみましたので、手順をメモしておきます。作業した環境は MacBook Pro (USキーボード) です。&#xA;インストール後以下の設定を行います。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mithril.jsを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/05/12/tried_mithril_js/</link>
      <pubDate>Tue, 12 May 2015 22:02:03 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/05/12/tried_mithril_js/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/&#34;&gt;groongaのgoバインディングでWikipedia全文検索のサンプルウェブアプリを作ってみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;のフロントエンドを&lt;a href=&#34;https://lhorie.github.io/mithril/&#34;&gt;Mithril&lt;/a&gt;で書いてみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;参考にした記事&#34;&gt;参考にした記事&lt;/h2&gt;&#xA;&lt;p&gt;mithril.jsについてはまず以下の記事&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/890d24874655439932ec&#34;&gt;最速MVCフレームワークMithril.jsの速度の秘密 - Qiita&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://qiita.com/mmyoji/items/211679de86f567e741f4&#34;&gt;JavaScript - 速くて軽いらしいMithril.jsを試してみた - Qiita&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を読み、その後本家の&lt;a href=&#34;https://lhorie.github.io/mithril/getting-started.html&#34;&gt;Guide&lt;/a&gt;の左のリンクから辿れる記事と&lt;a href=&#34;http://lhorie.github.io/mithril-blog/&#34;&gt;Learn Mithril&lt;/a&gt;の記事をひと通り読みました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>groongaのgoバインディングでWikipedia全文検索のサンプルウェブアプリを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</link>
      <pubDate>Tue, 12 May 2015 21:24:11 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.io/blog/2015/04/27/cgoroonga/&#34;&gt;データ登録用にgroongaのC APIのgoバインディングを書いてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の続きで、APIを追加実装し、Wikipedia全文検索のサンプルウェブアプリを作ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでdeferの処理中のエラーを返す書き方を工夫してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/27/write_function_for_go_defer/</link>
      <pubDate>Mon, 27 Apr 2015 02:06:02 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/27/write_function_for_go_defer/</guid>
      <description>&lt;p&gt;go-nutsのメーリングリストの記事&#xA;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/Y4MCVZZ3c5sJ&#34;&gt;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/Y4MCVZZ3c5sJ&lt;/a&gt;&#xA;によるとdeferで呼ばれた関数の戻り値は捨てられるそうです。&#xA;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/UlI77BM2PUkJ&#34;&gt;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/UlI77BM2PUkJ&lt;/a&gt;&#xA;で戻り値の変数に代入するという方法が紹介されていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>データ登録用にgroongaのC APIのgoバインディングを書いてみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/27/cgoroonga/</link>
      <pubDate>Mon, 27 Apr 2015 00:44:23 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/27/cgoroonga/</guid>
      <description>&lt;h2 id=&#34;groongaで大量のデータを登録する方法を調べてみた&#34;&gt;groongaで大量のデータを登録する方法を調べてみた&lt;/h2&gt;&#xA;&lt;h3 id=&#34;方法1-loadコマンドの文字列を組み立ててgroongaコマンドの標準入力に流し込む&#34;&gt;方法1: loadコマンドの文字列を組み立ててgroongaコマンドの標準入力に流し込む&lt;/h3&gt;&#xA;&lt;p&gt;groongaのデータの登録はチュートリアルの&lt;a href=&#34;http://groonga.org/ja/docs/tutorial/introduction.html#load-records&#34;&gt;データのロード&lt;/a&gt;にあるように&lt;a href=&#34;http://groonga.org/ja/docs/reference/commands/load.html&#34;&gt;loadコマンド&lt;/a&gt;を使えば出来ます。&lt;/p&gt;&#xA;&lt;p&gt;外部ファイルから大量のデータを登録するときはどうするのかなと思って調べてみると、 groongaのソースの examples/dictionary/eijiro/ の例では &lt;code&gt;load&lt;/code&gt; コマンドの文字列を組み立てて &lt;code&gt;groonga&lt;/code&gt; コマンドの標準入力に流し込んでいました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Groongaのチュートリアルを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/26/tried_groonga_tutorial/</link>
      <pubDate>Sun, 26 Apr 2015 23:53:06 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/26/tried_groonga_tutorial/</guid>
      <description>&lt;p&gt;Groongaのチュートリアルを試してみたメモです。&#xA;試した環境は Groonga 5.0.2, Ubuntu 14.04.2 です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;セットアップ手順&#34;&gt;セットアップ手順&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://groonga.org/ja/docs/install/ubuntu.html#ppa-personal-package-archive&#34;&gt;2.4. Ubuntu — Groonga v5.0.2ドキュメント&lt;/a&gt;にそってセットアップしました。&lt;/p&gt;&#xA;&lt;p&gt;セットアップ手順は&lt;a href=&#34;https://github.com/hnakamur/groonga-dockerfiles/blob/b4d64e23eaf9afda47c31bc34794eb2e56b7614d/dockerfiles/trusty/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;にまとめておきました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>vagrant box updateでboxファイルをアップグレードする</title>
      <link>https://hnakamur.github.io/blog/2015/04/25/vagrant-box-update/</link>
      <pubDate>Sat, 25 Apr 2015 21:55:31 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/25/vagrant-box-update/</guid>
      <description>&lt;p&gt;Vagrant Cloudに上がっているUbuntu trustyのオフィシャルイメージ&lt;a href=&#34;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&#34;&gt;ubuntu/trusty64 | Atlas by HashiCorp&lt;/a&gt;をVagrantfileで参照していたら、 &lt;code&gt;vagrant up&lt;/code&gt; の際に以下の様なメッセージが表示される時がありました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>jetpackを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/23/try-jetpack/</link>
      <pubDate>Thu, 23 Apr 2015 01:27:57 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/23/try-jetpack/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/3ofcoins/jetpack#using-jetpack&#34;&gt;3ofcoins/jetpack&lt;/a&gt;はFreeBSD, Jail, ZFSを使った&lt;a href=&#34;https://github.com/appc/spec&#34;&gt;App Container Spec&lt;/a&gt;の実装です。まだプロトタイプレベルとのことです。Go言語で実装されています。&lt;/p&gt;&#xA;&lt;p&gt;masterの最新を試しました。今後のためにコミットハッシュをメモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXD 0.7ではlxc execでシェルの対話操作もできるようになっていました</title>
      <link>https://hnakamur.github.io/blog/2015/04/23/try-lxd-0.7-with-vagrant/</link>
      <pubDate>Thu, 23 Apr 2015 00:08:30 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/23/try-lxd-0.7-with-vagrant/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2014/12/01/lxd-the-linux-container-daemon/&#34;&gt;LXDを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の記事を書いて以来、LXD触る時間を作れてなかったのですが、久々に試してみました。&lt;/p&gt;&#xA;&lt;p&gt;今では&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxc/lxd&lt;/a&gt;にVagrantfileが同梱されているので、それを使うだけで簡単に試せます。&lt;/p&gt;&#xA;&lt;p&gt;VirtualBox 4.3.26, Vagrant 1.7.2, OS X Yosemiteという環境で試しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>curlでダウンロードを中断後再開するときは-Cオプションが便利</title>
      <link>https://hnakamur.github.io/blog/2015/04/19/use_curl_c_option_to_resume_download/</link>
      <pubDate>Sun, 19 Apr 2015 01:07:35 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/19/use_curl_c_option_to_resume_download/</guid>
      <description>&lt;p&gt;ISOイメージのようなサイズが大きなファイルを &lt;code&gt;curl&lt;/code&gt; でダウンロードしようとして途中で中断してしまって再開するときに、 &lt;code&gt;-C&lt;/code&gt; オプションが便利だったのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>サイズが大きなファイルのコピーにはrsyncの-Pオプションが便利</title>
      <link>https://hnakamur.github.io/blog/2015/04/19/use_rsync_p_option_to_copy_large_file/</link>
      <pubDate>Sun, 19 Apr 2015 00:56:31 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/19/use_rsync_p_option_to_copy_large_file/</guid>
      <description>&lt;p&gt;Vagrantの自作boxファイルをインターネット上のサーバにアップロードするときなどに、 &lt;code&gt;rsync&lt;/code&gt; の &lt;code&gt;-P&lt;/code&gt; オプションが便利だったのでメモ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://manpages.ubuntu.com/manpages/utopic/en/man1/rsync.1.html&#34;&gt;rsyncのマニュアル&lt;/a&gt; によると &lt;code&gt;-P&lt;/code&gt; オプションは &lt;code&gt;--partial --progress&lt;/code&gt; と同じとのこと。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Hugoに移行した私のブログの記事追加手順</title>
      <link>https://hnakamur.github.io/blog/2015/04/19/my_hugo_blog_workflow/</link>
      <pubDate>Sun, 19 Apr 2015 00:17:59 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/19/my_hugo_blog_workflow/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した | SOTA&lt;/a&gt;を参考に私のブログもしばらく前にHugoに移行しました。deeeetさん、ありがとうございます！&lt;/p&gt;&#xA;&lt;p&gt;で、ブログ書く間隔が開くと手順を忘れて、毎回hugoのドキュメントを読むのが面倒なので、自分用メモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>JXA (JavaScript for Automation)を使ってOSXの初期設定を半自動化してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/06/jxa-osx-automation-with-javascript/</link>
      <pubDate>Mon, 06 Apr 2015 04:40:43 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/06/jxa-osx-automation-with-javascript/</guid>
      <description>&lt;h2 id=&#34;概要&#34;&gt;概要&lt;/h2&gt;&#xA;&lt;p&gt;OSXを再インストールしたときなどキーボードやトラックパッドの設定を行いますが、&#xA;設定する項目が意外と多くて時間がかかります。&lt;/p&gt;&#xA;&lt;p&gt;そこでJXA (JavaScript for Automation)で自動化してみました。&#xA;全自動ではなく半自動化と書いているのはパスワードの入力などは手動で行う必要があるからです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Homebrew Caskを使わずにdmgファイルのアプリをコマンドでインストールする</title>
      <link>https://hnakamur.github.io/blog/2015/04/06/install-apps-without-homebrew-cask/</link>
      <pubDate>Mon, 06 Apr 2015 00:45:50 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/06/install-apps-without-homebrew-cask/</guid>
      <description>&lt;h2 id=&#34;なぜhomebrew-caskをやめたか&#34;&gt;なぜHomebrew Caskをやめたか&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://t-wada.hatenablog.jp/entry/mac-provisioning-by-ansible&#34;&gt;Mac の開発環境構築を自動化する (2015 年初旬編) - t-wadaのブログ&lt;/a&gt;でもHomebrew Caskの不安な点について書かれていますが、私もHomebrew Caskは便利と思いつつも止めたいなと思っていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Riot.jsでタグエディターのサンプルを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2015/02/28/riot-tag-editor-example/</link>
      <pubDate>Sat, 28 Feb 2015 21:12:37 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/02/28/riot-tag-editor-example/</guid>
      <description>&lt;h2 id=&#34;riotjs&#34;&gt;Riot.js&lt;/h2&gt;&#xA;&lt;p&gt;Riot.jsについては&lt;a href=&#34;http://qiita.com/cognitom/items/54ae38c9a50dbbe28367&#34;&gt;Riot.js 2.0 情報まとめ - Qiita&lt;/a&gt;に良いまとめがありますのでそちらをどうぞ。良いまとめをありがとうございます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;本家が提供しているtodoアプリをgoemonでライブリロードして開発を高速化するサンプル&#34;&gt;本家が提供しているToDoアプリをgoemonでライブリロードして開発を高速化するサンプル&lt;/h2&gt;&#xA;&lt;p&gt;今回のタグエディターの前に、環境整備ということで本家が提供しているToDoアプリをgoemonでライブリロードして開発を高速化するサンプルを作ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Windows UI Automation APIを使うためのGoライブラリw32uiautomationを書いた</title>
      <link>https://hnakamur.github.io/blog/2015/02/22/w32uiautomation/</link>
      <pubDate>Sun, 22 Feb 2015 00:09:24 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/02/22/w32uiautomation/</guid>
      <description>&lt;h1 id=&#34;なぜ&#34;&gt;なぜ&lt;/h1&gt;&#xA;&lt;p&gt;ウェブアプリ開発をしているとInternet Explorerでの動作確認のため&lt;a href=&#34;https://www.modern.ie/ja-jp&#34;&gt;modern.IE&lt;/a&gt;が欠かせません。が、インストール直後は英語環境になっているので、日本語環境での動作確認のためにはセットアップが必要です。&lt;/p&gt;&#xA;&lt;p&gt;セットアップ手順は以下のQiitaの記事に書いたのですが、手数が多くて面倒でした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Build UIAutomation samples in Windows SDK 7.1</title>
      <link>https://hnakamur.github.io/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</guid>
      <description>&lt;h2 id=&#34;windows-sdk-71-をインストール&#34;&gt;Windows SDK 7.1 をインストール&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=8279&#34;&gt;Download Microsoft Windows SDK for Windows 7 and .NET Framework 4 from Official Microsoft Download Center&lt;/a&gt;からダウンロード、インストールします。後でMSBuild.exeを使うため、Installation Optionsのツリーでは.NET Developmentを外さずに入れるようにしてください。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LXDを試してみた</title>
      <link>https://hnakamur.github.io/blog/2014/12/01/lxd-the-linux-container-daemon/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2014/12/01/lxd-the-linux-container-daemon/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;LXDに関するページをいくつか紹介します。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://lists.linuxcontainers.org/pipermail/lxc-users/2014-November/007978.html&#34;&gt;[lxc-users] LXD an &amp;ldquo;hypervisor&amp;rdquo; for containers (based on liblxc)&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LXCメーリングリストに投稿されたLXDのアナウンスメール&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;LXDのホームページ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxc/lxd githubレポジトリ&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://insights.ubuntu.com/2014/11/04/lxd-the-linux-container-daemon/&#34;&gt;Dustin KirklandさんによるLXDの紹介 (2分7秒)&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;LXDの発音は&lt;a href=&#34;https://www.youtube.com/watch?v=U-lXf85Mhno&amp;amp;t=1m18s&#34;&gt;1分18秒あたり&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.zdnet.com/ubuntu-lxd-not-a-docker-replacement-a-docker-enhancement-7000035463/&#34;&gt;Ubuntu LXD: Not a Docker replacement, a Docker enhancement | ZDNet&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;「LXDはdockerを置き換えるものではなく強化するもの」というタイトルの解説記事&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;目指しているのは以下の様なものらしいです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Diagram as a Code</title>
      <link>https://hnakamur.github.io/blog/2014/09/07/diagram-as-a-code/</link>
      <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2014/09/07/diagram-as-a-code/</guid>
      <description>&lt;p&gt;この記事はpplogに書いた記事 &lt;a href=&#34;https://www.pplog.net/u/hnakamur2&#34;&gt;https://www.pplog.net/u/hnakamur2&lt;/a&gt; の転載です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;プログラマである私は、既存の作図ツールやシステムに不満があります。こうなってたらいいのにという点を整理してみます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OSX上でPythonのPILの代わりにPillowをインストールする</title>
      <link>https://hnakamur.github.io/blog/2014/06/10/install-python-pillow-on-osx/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2014/06/10/install-python-pillow-on-osx/</guid>
      <description>&lt;p&gt;試したバージョン&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Python: 2.7.7&lt;/li&gt;&#xA;&lt;li&gt;OSX: 10.8.5&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;以前作った&lt;a href=&#34;https://github.com/hnakamur/gae-oauth2-sample/&#34;&gt;Google App Engine OAuth 2.0 sample&lt;/a&gt;について問合せを受けたので、動作確認しようと思ったらPILのインストールでエラーになってしまいました。&#xA;とりあえず、このサンプルではPIL無くても問題なかったので、&lt;a href=&#34;https://github.com/hnakamur/gae-oauth2-sample/blob/master/pip_install&#34;&gt;pip_install&lt;/a&gt;からPILを外して試しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>久々にoctopressをアップデート</title>
      <link>https://hnakamur.github.io/blog/2014/06/10/upgrade-octopress/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2014/06/10/upgrade-octopress/</guid>
      <description>&lt;p&gt;octopressをアップデートした時にハマったのでメモ。&#xA;アップデート手順は&lt;a href=&#34;http://blog.n-z.jp/blog/2013-12-21-update-octopress.html&#34;&gt;octopressをアップデートしてisolateを使い始めた - @znz blog&lt;/a&gt;の「octopress のアップデート」の部分を参考にしました。ありがとうございます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Chef-soloとAnsibleとFabricを試した感想</title>
      <link>https://hnakamur.github.io/blog/2013/09/01/tried-chef-ansible-fabric/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2013/09/01/tried-chef-ansible-fabric/</guid>
      <description>&lt;p&gt;Chef-soloとAnsibleとFabricを試してみたので感想をメモ。どれもそんなに深くは使い込んではいない。&lt;/p&gt;&#xA;&lt;p&gt;このメモは自分の脳内の考えを整理するためのもので、人が使うことについてどうこう言うつもりはないです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Vagrant 1.1.5とSaharaを試した</title>
      <link>https://hnakamur.github.io/blog/2013/04/03/how-to-setup-vagrant-1-dot-1-5-and-sahara/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2013/04/03/how-to-setup-vagrant-1-dot-1-5-and-sahara/</guid>
      <description>&lt;h2 id=&#34;vagrantと10xと11xについて&#34;&gt;Vagrantと1.0.xと1.1.xについて&lt;/h2&gt;&#xA;&lt;p&gt;バージョン1.1.xの位置づけについては以下の記事を参照。&#xA;&lt;a href=&#34;http://www.hashicorp.com/blog/vagrant-1-1-and-vmware.html&#34;&gt;Vagrant 1.1, VMware Fusion - HashiCorp&lt;/a&gt;&#xA;変更履歴は &lt;a href=&#34;https://github.com/mitchellh/vagrant/blob/master/CHANGELOG.md&#34;&gt;vagrant/CHANGELOG.md at master · mitchellh/vagrant · GitHub&lt;/a&gt;。&lt;/p&gt;&#xA;&lt;p&gt;gem installで入れられるのは1.0.x系のみ。現在は1.0.7。&#xA;&lt;a href=&#34;http://rubygems.org/search?utf8=%E2%9C%93&amp;amp;query=vagrant&#34;&gt;search | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua, V8, ruby, mrubyでfib(39)の実行時間比較</title>
      <link>https://hnakamur.github.io/blog/2013/03/12/fib-39-benchmark-in-luajit/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2013/03/12/fib-39-benchmark-in-luajit/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.com/blog/2012/05/04/fib-39-benchmark-in-lua/&#34;&gt;lua, V8, ruby, mrubyでfib(39)の実行時間比較 - hnakamur&amp;rsquo;s blog at github&lt;/a&gt;が&lt;a href=&#34;https://twitter.com/yukihiro_matz&#34;&gt;@matz&lt;/a&gt;さんにツイートされたのを受けて、各処理系の最新版で再度試してみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;テスト環境その1前回とは違う環境です&#34;&gt;テスト環境その1（前回とは違う環境です）&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Model: MacBook Pro Retina, Mid 2012&lt;/li&gt;&#xA;&lt;li&gt;CPU: 2.6GHz Intel Core i7&lt;/li&gt;&#xA;&lt;li&gt;RAM: 16GB 1600MHz DDR3&lt;/li&gt;&#xA;&lt;li&gt;OS: Mac OS X 10.8.2&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h3 id=&#34;2013-03-24-追記&#34;&gt;2013-03-24 追記&lt;/h3&gt;&#xA;&lt;p&gt;goでも試してみました&lt;/p&gt;&#xA;&lt;h3 id=&#34;go-103&#34;&gt;go 1.0.3&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import &amp;#34;fmt&amp;#34;&#xA;&#xA;func fib(n int) int {&#xA;  if n &amp;lt; 2 {&#xA;    return n&#xA;  }&#xA;  return fib(n - 1) + fib(n - 2)&#xA;}&#xA;&#xA;func main() {&#xA;  fmt.Println(fib(39))&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ time fib39&#xA;63245986&#xA;&#xA;real    0m0.484s&#xA;user    0m0.481s&#xA;sys     0m0.002s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;lua&#34;&gt;lua&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function fib(n)&#xA;  if n &amp;lt; 2 then&#xA;    return n&#xA;  end&#xA;  return fib(n-2) + fib(n-1)&#xA;end&#xA;&#xA;print(fib(39))&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ luajit -v&#xA;LuaJIT 2.0.1 -- Copyright (C) 2005-2013 Mike Pall. http://luajit.org/&#xA;$ time luajit fib.lua&#xA;63245986&#xA;&#xA;real  0m0.906s&#xA;user  0m0.901s&#xA;sys 0m0.003s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ lua -v&#xA;Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio&#xA;$ time lua fib.lua&#xA;63245986&#xA;&#xA;real  0m12.278s&#xA;user  0m12.271s&#xA;sys 0m0.006s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ src/lua -v&#xA;Lua 5.2.1  Copyright (C) 1994-2012 Lua.org, PUC-Rio&#xA;$ time src/lua ~/bench/fib.lua&#xA;63245986&#xA;&#xA;real  0m13.971s&#xA;user  0m13.965s&#xA;sys 0m0.005s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;v8&#34;&gt;v8&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;function fib(n) {&#xA;  if (n &amp;lt; 2) return n;&#xA;  return fib(n-2) + fib(n-1);&#xA;}&#xA;&#xA;print(fib(39));&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ v8&#xA;V8 version 3.16.14 [sample shell]&#xA;&amp;gt; ^D&#xA;$ time v8 fib.js&#xA;63245986&#xA;&#xA;real  0m0.804s&#xA;user  0m0.798s&#xA;sys 0m0.008s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;ruby&#34;&gt;ruby&lt;/h3&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;def fib n&#xA;  return n if n &amp;lt; 2&#xA;  fib(n-2) + fib(n-1)&#xA;end&#xA;&#xA;puts fib(39)&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ git log -1 | grep commit&#xA;commit 46d8c51763bd13b69a4234f0d4be05cbfd8ae401&#xA;&#xA;$ time bin/mruby fib.rb&#xA;63245986&#xA;&#xA;real  0m16.357s&#xA;user  0m16.345s&#xA;sys 0m0.008s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rbenv version&#xA;1.9.3-p374 (set by /Users/hnakamur/.rbenv/version)&#xA;$ time ruby fib.rb&#xA;63245986&#xA;&#xA;real  0m16.225s&#xA;user  0m16.169s&#xA;sys 0m0.043s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rbenv version&#xA;1.9.3-p392 (set by /Users/hnakamur/.rbenv/version)&#xA;$ time ruby fib.rb&#xA;63245986&#xA;&#xA;real  0m36.813s&#xA;user  0m36.746s&#xA;sys 0m0.043s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;$ rbenv version&#xA;2.0.0-p0 (set by /Users/hnakamur/.rbenv/version)&#xA;$ time ruby fib.rb &#xA;63245986&#xA;&#xA;real  0m31.828s&#xA;user  0m31.743s&#xA;sys 0m0.045s&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h3 id=&#34;2013-03-12-2315-追記&#34;&gt;2013-03-12 23:15 追記&lt;/h3&gt;&#xA;&lt;p&gt;1.9.3-p374と1.9.3-p392でこんなに違うのは変だなと思って、1.9.3-p374を入れなおして再度測ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>d3.jsを使ったツールチップあり複数折れ線グラフのサンプルを作った</title>
      <link>https://hnakamur.github.io/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js - Data-Driven Documents&lt;/a&gt;を使ってツールチップあり複数折れ線グラフのサンプルを作ったのでメモ。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/downloads/code/2013-03-02-multi-series-line-chart-example-with-tooltip-using-d3-dot-js/3884955.html&#34;&gt;サンプル&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://bl.ocks.org/mbostock/3884955&#34;&gt;Multi-Series Line Chart&lt;/a&gt;のサンプルをベースに改良しました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;x軸のラベルを回転&#34;&gt;X軸のラベルを回転&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.d3noob.org/2013/01/how-to-rotate-text-labels-for-x-axis-of.html&#34;&gt;D3.js Tips and Tricks: How to rotate the text labels for the x Axis of a d3.js graph&lt;/a&gt;を参考にして回転させました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>EC2で同じリージョンの全ホストのプライベートIPを起動時にhostsに自動登録</title>
      <link>https://hnakamur.github.io/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region/</link>
      <pubDate>Sat, 16 Feb 2013 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region/</guid>
      <description>&lt;p&gt;Elastic IPの上限数にひっかかって使えない自体に遭遇したので作りました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/jp/contact-us/eip_limit_request/&#34;&gt;Elastic IP アドレス上限緩和申請 | アマゾン ウェブ サービス（AWS 日本語）&lt;/a&gt; から緩和申請できるようです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>IAM管理コンソールでAWSの管理画面用のユーザを作成</title>
      <link>https://hnakamur.github.io/blog/2013/02/09/create-aim-user/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2013/02/09/create-aim-user/</guid>
      <description>&lt;p&gt;AWS (Amazon Web Services)の管理コンソールを複数人で使う場合に大元のIDとパスワードを共有するのは避けたい場合、IAMでユーザを作成するのがよいと&lt;a href=&#34;https://twitter.com/fujiwara&#34;&gt;@fujiwara&lt;/a&gt;さんに教わりました。これは実際に試した時のメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>S3 error: Either the Signature query string parameter or the Authorization header should be specified</title>
      <link>https://hnakamur.github.io/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified/</guid>
      <description>&lt;h2 id=&#34;現象&#34;&gt;現象&lt;/h2&gt;&#xA;&lt;p&gt;ApacheからAmazon S3にmod_proxyでリクエストを送ったら、ステータスが400になり、&#xA;&amp;ldquo;Either the Signature query string parameter or the Authorization header should be specified, not both&amp;quot;というエラーメッセージが出てハマったときのメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Unboundで在宅時に自宅サーバの名前解決</title>
      <link>https://hnakamur.github.io/blog/2013/02/02/use-unbound-dns-server/</link>
      <pubDate>Sat, 02 Feb 2013 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2013/02/02/use-unbound-dns-server/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;私の自宅ではブロードバンドルータがグローバルIPを持っていて、DNSで自分のドメイン(以下ではexample.comとして説明します)のIPアドレスをそこにしています。ルータからLAN内のLinuxサーバ(CentOS 6.x)へはNATで繋いでいます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VirtualBox4でCentOS6.2をインストール</title>
      <link>https://hnakamur.github.io/blog/2012/07/03/virtualbox4decentos6-dot-2woinsutoru/</link>
      <pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/07/03/virtualbox4decentos6-dot-2woinsutoru/</guid>
      <description>&lt;h2 id=&#34;virtualboxのインストール&#34;&gt;VirtualBoxのインストール&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;Downloads – Oracle VM VirtualBox&lt;/a&gt;&#xA;からダウンロードしてインストールしてください。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ネットワークインストールのisoイメージをダウンロード&#34;&gt;ネットワークインストールのISOイメージをダウンロード&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://ftp.riken.jp/Linux/centos/6.2/isos/x86_64/CentOS-6.2-x86_64-netinstall.iso&#34;&gt;CentOS-6.2-x86_64-netinstall.iso&lt;/a&gt;&lt;/p&gt;&#xA;&lt;h2 id=&#34;ホストオンリーネットワークを作成&#34;&gt;ホストオンリーネットワークを作成&lt;/h2&gt;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;[VirualBox]/[環境設定&amp;hellip;]&lt;/li&gt;&#xA;&lt;li&gt;[ネットワーク]タブ&lt;/li&gt;&#xA;&lt;li&gt;[+]アイコンボタンを押してvboxnet0を作成&lt;/li&gt;&#xA;&lt;li&gt;ドライバーアイコンのボタン&lt;/li&gt;&#xA;&lt;li&gt;[アダプタ]タブでIPv4アドレスが「192.168.56.1」となっていることを確認&lt;/li&gt;&#xA;&lt;li&gt;[DHCPサーバー]タブ&lt;/li&gt;&#xA;&lt;li&gt;[サーバーを有効化]のチェックを外す&lt;/li&gt;&#xA;&lt;li&gt;[OK]&lt;/li&gt;&#xA;&lt;li&gt;[OK]&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&lt;h2 id=&#34;仮想マシンの作成&#34;&gt;仮想マシンの作成&lt;/h2&gt;&#xA;&lt;h3 id=&#34;仮想マシン名とosタイプ&#34;&gt;仮想マシン名とOSタイプ&lt;/h3&gt;&#xA;&lt;p&gt;名前は「CentOS6」&#xA;オペレーティングシステムは「Linux」&#xA;バージョンは「Linux 2.6 (64bit)」&lt;/p&gt;</description>
    </item>
    <item>
      <title>node-http-proxyでバーチャルホストで振り分けつつhttp/https-&gt;websocketリバースプロキシの実験</title>
      <link>https://hnakamur.github.io/blog/2012/06/27/node-http-proxy/</link>
      <pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/06/27/node-http-proxy/</guid>
      <description>&lt;p&gt;以下の2つのページを参考に、node-http-proxyでバーチャルホストで振り分けつつ&#xA;http/httpsからwebsocketにリバースプロキシする実験をしてみました。&#xA;環境はCentOS 6.2です。ソースは&lt;a href=&#34;https://github.com/hnakamur/node-http-proxy-websocket-sample&#34;&gt;hnakamur/node-http-proxy-websocket-sample&lt;/a&gt;にあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>node.jsのfs.watch()で設定ファイルが更新されたらリロード</title>
      <link>https://hnakamur.github.io/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo/</link>
      <pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1972242/auto-reload-of-files-in-node-js&#34;&gt;javascript - Auto-reload of files in Node.js - Stack Overflow&lt;/a&gt;によると、モジュールをリロードするには&lt;a href=&#34;https://github.com/isaacs/node-supervisor&#34;&gt;isaacs/node-supervisor&lt;/a&gt;がよさそうです。&lt;/p&gt;&#xA;&lt;p&gt;が、今回は設定ファイルのリロードなのでfs.watch(filename, [options], [listener]) で十分ということで試してみました。&#xA;&lt;a href=&#34;http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener&#34;&gt;File System Node.js v0.8.0 Manual &amp;amp; Documentation&lt;/a&gt;&#xA;によると環境によっては使えないそうなので注意が必要です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>daemontoolsのインストール手順</title>
      <link>https://hnakamur.github.io/blog/2012/06/21/how-to-install-daemontools/</link>
      <pubDate>Thu, 21 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/06/21/how-to-install-daemontools/</guid>
      <description>&lt;p&gt;CentOS6.2で確認。&lt;/p&gt;&#xA;&lt;p&gt;OS起動時にdaemontoolsを起動する設定は&lt;a href=&#34;http://cr.yp.to/daemontools/start.html&#34;&gt;How to start daemontools&lt;/a&gt;を参照。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;yum install -y make gcc rpm-build &amp;amp;&amp;amp;&#xA;rpm -ivh http://mirrors.qmailtoaster.com/daemontools-toaster-0.76-1.3.6.src.rpm &amp;amp;&amp;amp;&#xA;rpmbuild -ba /root/rpmbuild/SPECS/daemontools-toaster.spec &amp;amp;&amp;amp;&#xA;rpm -ivh /root/rpmbuild/RPMS/x86_64/daemontools-toaster-0.76-1.3.6.x86_64.rpm &amp;amp;&amp;amp;&#xA;cat &amp;gt; /etc/init/svscan.conf &amp;lt;&amp;lt;EOF &amp;amp;&amp;amp;&#xA;start on runlevel [12345]&#xA;stop on runlevel [^12345]&#xA;respawn&#xA;exec /command/svscanboot&#xA;EOF&#xA;/command/svscanboot &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title>daemontoolsの使い方</title>
      <link>https://hnakamur.github.io/blog/2012/06/21/how-to-use-daemontools/</link>
      <pubDate>Thu, 21 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/06/21/how-to-use-daemontools/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.nslabs.jp/daemontools.rhtml&#34;&gt;daemontoolsを使う | Netsphere Laboratories&lt;/a&gt;を参考にしました。ありがとうございます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;私的ルール&#34;&gt;私的ルール&lt;/h2&gt;&#xA;&lt;h3 id=&#34;無効化したサービスはservicedisabledに移動&#34;&gt;無効化したサービスは/service/.disabled/に移動&lt;/h3&gt;&#xA;&lt;p&gt;/service/以下に.で始まるフォルダ名にすると無視されるということですが、my_service_nameを.my_service_nameと変えるのはタイプが面倒なので、/service/.disabledというフォルダを作って無効化するときはその下に移動することにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>パスフレーズ無しの秘密鍵と自己証明書をコマンド一発で作る</title>
      <link>https://hnakamur.github.io/blog/2012/06/21/how-to-create-self-signed-certificate/</link>
      <pubDate>Thu, 21 Jun 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/06/21/how-to-create-self-signed-certificate/</guid>
      <description>&lt;p&gt;以下はワイルドカード証明書の例です。適宜変更して使います。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;openssl req -new -newkey rsa:2048 -x509 -nodes -days 365 -set_serial 0 \&#xA;  -subj &amp;#39;/C=JP/ST=Kanagawa/L=Yokohama City/CN=*.example.com&amp;#39; \&#xA;  -out wildcard.example.com.crt -keyout wildcard.example.com.key&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;証明書の内容確認&#34;&gt;証明書の内容確認&lt;/h2&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;# openssl x509 -in wildcard.example.com.crt -text&#xA;Certificate:&#xA;    Data:&#xA;        Version: 3 (0x2)&#xA;        Serial Number: 0 (0x0)&#xA;        Signature Algorithm: sha1WithRSAEncryption&#xA;        Issuer: C=JP, ST=Kanagawa, L=Yokohama City, CN=*.example.com&#xA;        Validity&#xA;            Not Before: Jun 21 10:52:07 2012 GMT&#xA;            Not After : Jun 21 10:52:07 2013 GMT&#xA;        Subject: C=JP, ST=Kanagawa, L=Yokohama City, CN=*.example.com&#xA;        Subject Public Key Info:&#xA;            Public Key Algorithm: rsaEncryption&#xA;                Public-Key: (512 bit)&#xA;                Modulus:&#xA;                    00:ba:ce:42:5a:26:10:97:8a:fa:e8:44:b6:d0:1a:&#xA;                    3c:4e:f6:80:7b:69:df:a7:cf:c1:64:26:79:0c:5e:&#xA;                    c9:2f:ba:03:08:d2:14:f8:f0:df:f6:bf:49:79:1e:&#xA;                    ec:6f:1b:04:79:65:c1:ba:14:7f:40:f7:52:bb:b8:&#xA;                    7d:f0:aa:fc:8d&#xA;                Exponent: 65537 (0x10001)&#xA;        X509v3 extensions:&#xA;            X509v3 Subject Key Identifier: &#xA;                49:83:EC:88:55:ED:E3:1E:61:E9:12:B6:52:9E:63:6F:D9:03:88:41&#xA;            X509v3 Authority Key Identifier: &#xA;                keyid:49:83:EC:88:55:ED:E3:1E:61:E9:12:B6:52:9E:63:6F:D9:03:88:41&#xA;&#xA;            X509v3 Basic Constraints: &#xA;                CA:TRUE&#xA;    Signature Algorithm: sha1WithRSAEncryption&#xA;        b9:92:5a:89:1e:9c:dc:fc:44:d3:55:10:06:af:43:e8:0d:30:&#xA;        4f:03:6c:10:c9:8e:68:16:28:7a:4c:a7:28:e8:73:04:c0:1b:&#xA;        ce:bd:82:e7:8f:d4:b9:0f:00:32:47:5a:d1:3e:65:01:3c:a9:&#xA;        23:e8:07:e0:03:48:24:dd:53:7c&#xA;-----BEGIN CERTIFICATE-----&#xA;MIIB3TCCAYegAwIBAgIBADANBgkqhkiG9w0BAQUFADBOMQswCQYDVQQGEwJKUDER&#xA;MA8GA1UECAwIS2FuYWdhd2ExFjAUBgNVBAcMDVlva29oYW1hIENpdHkxFDASBgNV&#xA;BAMMCyoubmFydWgubmV0MB4XDTEyMDYyMTEwNTIwN1oXDTEzMDYyMTEwNTIwN1ow&#xA;TjELMAkGA1UEBhMCSlAxETAPBgNVBAgMCEthbmFnYXdhMRYwFAYDVQQHDA1Zb2tv&#xA;aGFtYSBDaXR5MRQwEgYDVQQDDAsqLm5hcnVoLm5ldDBcMA0GCSqGSIb3DQEBAQUA&#xA;A0sAMEgCQQC6zkJaJhCXivroRLbQGjxO9oB7ad+nz8FkJnkMXskvugMI0hT48N/2&#xA;v0l5HuxvGwR5ZcG6FH9A91K7uH3wqvyNAgMBAAGjUDBOMB0GA1UdDgQWBBRJg+yI&#xA;Ve3jHmHpErZSnmNv2QOIQTAfBgNVHSMEGDAWgBRJg+yIVe3jHmHpErZSnmNv2QOI&#xA;QTAMBgNVHRMEBTADAQH/MA0GCSqGSIb3DQEBBQUAA0EAuZJaiR6c3PxE01UQBq9D&#xA;6A0wTwNsEMmOaBYoekynKOhzBMAbzr2C54/UuQ8AMkda0T5lATypI+gH4ANIJN1T&#xA;fA==&#xA;-----END CERTIFICATE-----&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h2 id=&#34;参考&#34;&gt;参考&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://gagravarr.org/writing/openssl-certs/ca.shtml&#34;&gt;Certificate Management and Generation with OpenSSL&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;http://www.nina.jp/server/slackware/openssl/openssl-command.html&#34;&gt;openssl コマンド&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;</description>
    </item>
    <item>
      <title>/etc/sudoers.d/を使う→やっぱり止め</title>
      <link>https://hnakamur.github.io/blog/2012/05/04/use-slash-etc-slash-sudoers-dot-d-slash/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/05/04/use-slash-etc-slash-sudoers-dot-d-slash/</guid>
      <description>&lt;p&gt;これまでいつも/etc/sudoersを編集していたのですが、よくみるとファイル末尾に&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;## Read drop-in files from /etc/sudoers.d (the # here does not mean a comment)&#xA;#includedir /etc/sudoers.d&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;と書いてあって、/etc/sudoers.d/にファイルを置けば/etc/sudoersを編集しなくても済むんですね。（しかしなんでincludedirには#をつける仕様なんだろ。今までずっとコメントアウトされていると思ってました。その上のコメント行に#ついててもコメントじゃないと書いてあるのに気づいたのが今日です）&lt;/p&gt;</description>
    </item>
    <item>
      <title>CentOS6でchef-soloとknife-soloをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2012/05/04/setup-chef-solo-and-knife-solo-on-centos6/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/05/04/setup-chef-solo-and-knife-solo-on-centos6/</guid>
      <description>&lt;h2 id=&#34;なぜ&#34;&gt;なぜ？&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://higelog.brassworks.jp/?p=654&#34;&gt;chef-soloで作業環境構築の自動化 | ひげろぐ&lt;/a&gt; を参考に、Chefサーバは使いたくないけど、chef-soloとknifeを使いたい！&#xA;ということで、そういう環境を作るためのスクリプトを作りました。&#xA;だいぶ前から試行錯誤してたけど、ようやくできたので公開。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua, V8, ruby, mrubyでfib(39)の実行時間比較 2013-03-12版</title>
      <link>https://hnakamur.github.io/blog/2012/05/04/fib-39-benchmark-in-lua/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/05/04/fib-39-benchmark-in-lua/</guid>
      <description>&lt;p&gt;2013-03-13追記&lt;/p&gt;&#xA;&lt;p&gt;この記事が&lt;a href=&#34;https://twitter.com/yukihiro_matz&#34;&gt;@matz&lt;/a&gt;さんにツイートされたのを受けて、各処理系の最新版で再度試してみました。&#xA;&lt;a href=&#34;http://hnakamur.github.com/blog/2013/03/12/fib-39-benchmark-in-luajit/&#34;&gt;lua, V8, ruby, mrubyでfib(39)の実行時間比較 2013-03-12版&lt;/a&gt;をご参照ください。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.quredo.net/2012/04/mruby-%E8%BB%BD%E9%87%8Fruby-%E3%82%BD%E3%83%BC%E3%82%B9%E5%85%AC%E9%96%8B/&#34;&gt;mruby (軽量ruby) ソース公開 | quredo-style&lt;/a&gt;を見て、自分の環境でlua, luajit, V8, ruby, mrubyで試してみた。&lt;/p&gt;</description>
    </item>
    <item>
      <title>macruby-nightly-2012-03-07をXcode 4.3.1で試す</title>
      <link>https://hnakamur.github.io/blog/2012/03/11/try-macruby-nightly-2012-03-07-with-xcode-4-dot-3-1/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/03/11/try-macruby-nightly-2012-03-07-with-xcode-4-dot-3-1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://d.hatena.ne.jp/seiunsky/20111225/1324740191&#34;&gt;おまいらもMacRubyでMacアプリ作ろう - @sugamasao.blog.title # =&amp;gt; ”コードで世界を変えたい”&lt;/a&gt;を見て、ファイルやプロジェクトのテンプレートを追加すればXcode 4.3.1も使えそうだと思い、&lt;a href=&#34;http://d.hatena.ne.jp/kouji0625/20090919/p1&#34;&gt;Snow LeopardのXcodeにRubyCocoaのテンプレートをインストール - 高尾宏治日記 on はてな&lt;/a&gt;を参考にコピーしてみようかと思ったのですが、&lt;a href=&#34;http://www.macruby.org/trac/ticket/1466&#34;&gt;#1466 (does not install MacRuby&amp;rsquo;s Templetes and rb_nibtool into Xcode 4.3) – MacRuby&lt;/a&gt;というページを見つけました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xcode 4.2.1でMacRuby 0.10を試す</title>
      <link>https://hnakamur.github.io/blog/2012/03/11/try-macruby-0-dot-10-with-xcode-4-dot-2-1/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/03/11/try-macruby-0-dot-10-with-xcode-4-dot-2-1/</guid>
      <description>&lt;h2 id=&#34;xcode-41やxcode-431ではうまくいかずxcode-421ならokだった&#34;&gt;Xcode 4.1やXcode 4.3.1ではうまくいかずXcode 4.2.1ならOKだった&lt;/h2&gt;&#xA;&lt;p&gt;最終的にうまく行ったバージョンの組み合わせは以下の通りです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Mac OS X 10.7.3&lt;/li&gt;&#xA;&lt;li&gt;Xcode 4.2.1&lt;/li&gt;&#xA;&lt;li&gt;MacRuby 0.10&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;最初は以下の環境でした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Xcode 4.3.1のファイルテンプレートをカスタマイズ</title>
      <link>https://hnakamur.github.io/blog/2012/03/11/custom-file-template-for-xcode-4-dot-3-1/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/03/11/custom-file-template-for-xcode-4-dot-3-1/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://meandmark.com/blog/2011/11/creating-custom-xcode-4-file-templates/&#34;&gt;Creating Custom Xcode 4 File Templates&lt;/a&gt;を参考に作成してみました。&lt;/p&gt;&#xA;&lt;p&gt;Apple提供のファイルテンプレートは&#xA;/Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates&#xA;にあるとのこと。ですが、Xcode 4.3.1からは/Developperではなく/Applications/Xcodeにインストールされるので、Xcode 4.3.1のみの環境ではここにはないかもしれません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mod_xsendfileでダウンロード後にサーバ上のファイル自動削除</title>
      <link>https://hnakamur.github.io/blog/2012/03/03/delete-on-close-using-mod-xsendfile/</link>
      <pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/03/03/delete-on-close-using-mod-xsendfile/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://tn123.org/mod_xsendfile/&#34;&gt;mod_xsendfile&lt;/a&gt;のホームページ上でリリースされているバージョン0.12には含まれていませんが、&lt;a href=&#34;https://github.com/nmaier/mod_xsendfile/commit/f6b853ce0e555b61f83f928d9f927349346018b4&#34;&gt;Githubのレポジトリのソース&lt;/a&gt;ではX-Sendfile-Temporaryという拡張ヘッダに対応しています。&lt;/p&gt;&#xA;&lt;p&gt;Scientific Linux 6.1で実験しました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;mod_xsendfileのインストール&#34;&gt;mod_xsendfileのインストール&lt;/h2&gt;&#xA;&lt;p&gt;以下の手順でインストールします。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-bash&#34; data-lang=&#34;bash&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;yum install -y httpd-devel&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;git clone https://github.com/nmaier/mod_xsendfile.git&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;nb&#34;&gt;cd&lt;/span&gt; mod_xsendfile&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;apxs -cia mod_xsendfile.c&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;実験スクリプト用にApacheの設定ファイルを作成します。&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;Directory /var/www/html/xsendfile&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    XSendFilePath /var/www/html/xsendfile/data AllowFileDelete&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;Files out.php&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;      XSendFile on&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &amp;lt;/Files&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&amp;lt;/Directory&amp;gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;Apache再起動。&lt;/p&gt;</description>
    </item>
    <item>
      <title>octopressでgithubにブログ開設</title>
      <link>https://hnakamur.github.io/blog/2012/03/03/how-to-setup-octopress/</link>
      <pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate>
      <guid>https://hnakamur.github.io/blog/2012/03/03/how-to-setup-octopress/</guid>
      <description>&lt;p&gt;rbenvとoctopressをインストールしてgithubにブログを作る手順のメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;rbenvをインストール&#34;&gt;rbenvをインストール&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/sstephenson/rbenv#section_2.1&#34;&gt;sstephenson/rbenv&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/sstephenson/ruby-build&#34;&gt;sstephenson/ruby-build&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を参考にインストールしました。&lt;/p&gt;&#xA;&lt;p&gt;インストール先は~/.rbenvとしました。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
