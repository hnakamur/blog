<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Ubuntu on hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/tags/ubuntu/</link>
    <description>Recent content in Ubuntu on hnakamur&#39;s blog</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Sun, 31 May 2020 15:33:00 +0900</lastBuildDate>
    <atom:link href="https://hnakamur.github.io/blog/tags/ubuntu/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>macOS→VagrantのUbuntu→LXDコンテナへのポートフォワーディング</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-macos-vagrant-lxd/</link>
      <pubDate>Thu, 05 Jul 2018 16:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-macos-vagrant-lxd/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/&#34;&gt;VagrantでUbuntu 18.04 LTSとLXDをインストールする手順&lt;/a&gt; で構築したLXDの環境で、macOS→VagrantのUbuntu→LXDコンテナへのポートフォワーディングをしたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VagrantでUbuntu 18.04 LTSとLXDをインストールする手順</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/</link>
      <pubDate>Thu, 05 Jul 2018 15:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;私自身は職場でも自宅でも Ubuntu MATE 18.04 LTS を使っていてVagrantはもう使っていません。&#xA;ですが職場の同僚が macOS を使っていてLXDの環境をセットアップするのに少々手間どったのでメモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go-carbonのdebパッケージをsbuildとPPAでビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</link>
      <pubDate>Fri, 15 Jun 2018 10:55:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lomik/go-carbon&#34;&gt;lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister&lt;/a&gt;&#xA;のdebパッケージをsbuildとPPAでビルドしたときのメモです。&lt;/p&gt;&#xA;&lt;p&gt;成果物は以下に有ります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PPA: &lt;a href=&#34;https://launchpad.net/~hnakamur/+archive/ubuntu/go-carbon&#34;&gt;go-carbon : Hiroaki Nakamura&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;debソースレポジトリ: &lt;a href=&#34;https://github.com/hnakamur/go-carbon-deb&#34;&gt;hnakamur/go-carbon-deb: go-carbon deb package for Ubuntu 18.04 LTS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;debianでのgoのパッケージング方針&#34;&gt;debianでのgoのパッケージング方針&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wiki.debian.org/MichaelStapelberg/GoPackaging&#34;&gt;MichaelStapelberg/GoPackaging - Debian Wiki&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://go-team.pages.debian.net/packaging.html&#34;&gt;Debian Go Packaging&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;に書いてあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>sbuildで外部レポジトリを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</link>
      <pubDate>Fri, 15 Jun 2018 10:12:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;外部レポジトリのdebパッケージに依存したdebパッケージをsbuildでビルドするための手順メモです。&lt;/p&gt;&#xA;&lt;p&gt;以下の2つの方法がありますが、別のchroot環境を作る必要がないので2つめのほうが良いです。1つめの方法は別の用途にも使えるかもしれないので一応メモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PPAでのビルドの予行演習にsbuildを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</link>
      <pubDate>Wed, 13 Jun 2018 18:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;PPAでビルドする前に手元でビルドが通ることを確認したくてpbuilderを使っていましたが、pbuilderではビルドが通るのにPPAでは通らないケースが何度か起きたのでsbuildを使い始めました。使い方がある程度わかってきたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>universal-ctagsのUbuntu 18.04 LTS用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Fri, 08 Jun 2018 00:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;ctagsというと Ubuntu 18.04 LTS には&#xA;&lt;a href=&#34;https://packages.ubuntu.com/bionic/exuberant-ctags&#34;&gt;exuberant-ctags (1:5.9~svn20110310-11)&lt;/a&gt;&#xA;というパッケージがあります。ですが、バージョン番号のsvnの後の日付が2011年とあるようにかなり古いです。&lt;/p&gt;&#xA;&lt;p&gt;検索してみると&#xA;&lt;a href=&#34;https://github.com/universal-ctags/ctags&#34;&gt;universal-ctags/ctags: A maintained ctags implementation&lt;/a&gt;&#xA;活発に開発されているので、こちらを使うことにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04 LTSでsbuildをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</link>
      <pubDate>Thu, 07 Jun 2018 21:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;手元でpbuilderでdebパッケージのビルドが通ってからPPAでビルドしたらテストの1つがエラーになるという問題が起きてしまい、ビルドログを見てみると以下のような行があって &lt;code&gt;sbuild&lt;/code&gt; を使っていることに気づきました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginxのコードリーディングにrtagsを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</link>
      <pubDate>Wed, 23 May 2018 22:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/&#34;&gt;Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した&lt;/a&gt; で作成したrtagsを使ってnginxのコードリーディングをするための手順メモです。&lt;/p&gt;&#xA;&lt;p&gt;configure で生成される &lt;code&gt;ngx_auto_config.h&lt;/code&gt; と &lt;code&gt;ngx_auto_headers.h&lt;/code&gt; も含めて読みたいというのと、rtagsのREADMEの &lt;code&gt;Setup](https://github.com/Andersbakken/rtags#setup) のうちnginxでは [Bear](https://github.com/rizsotto/Bear) を使って &lt;/code&gt;compile_commands.json&lt;code&gt;を生成するという関係もあり、&lt;/code&gt;debパッケージを使ってnginxモジュールをビルド・デバッグする](&lt;a href=&#34;https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/&#34;&gt;https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/&lt;/a&gt;) と似た感じでビルドしていくことになります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Wed, 23 May 2018 14:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/09/05/built-rtags-deb/&#34;&gt;rtagsのdebパッケージを作成した&lt;/a&gt; のときのメモを端折りすぎて、Ubuntu 18.04 LTS用に rtags 2.18のパッケージを作ろうと思ったら苦労したのでメモしておきます。&lt;/p&gt;&#xA;&lt;h1 id=&#34;ビルドのメモ&#34;&gt;ビルドのメモ&lt;/h1&gt;&#xA;&lt;h2 id=&#34;参考-gcc-8とllvm-60入りのpbuilderのchroot環境作成&#34;&gt;(参考) gcc-8とLLVM 6.0入りのpbuilderのchroot環境作成&lt;/h2&gt;&#xA;&lt;p&gt;よくよく考えたらこの手順は不要ですが、今後別件で使うかもしれないのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04 LTSにSlack 3.2.0-beta.2をインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/22/install-slack-3.2.0-beta.2-on-ubuntu-18.04-lts/</link>
      <pubDate>Tue, 22 May 2018 15:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/22/install-slack-3.2.0-beta.2-on-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Ubuntu MATE 18.04 LTSにSlack 3.2.0-beta.2をインストールしたときのメモです。&lt;/p&gt;&#xA;&lt;h1 id=&#34;snapパッケージでのインストール&#34;&gt;snapパッケージでのインストール&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://get.slack.help/hc/ja/articles/212924728-Linux%E7%89%88-Slack-%CE%B2%E7%89%88-&#34;&gt;Linux版 Slack  (β版) – Slack&lt;/a&gt; によると、snapパッケージが提供されていて以下のコマンドでインストールできます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntuのデスクトップ環境でsshのパスフレーズ入力を1回だけにする</title>
      <link>https://hnakamur.github.io/blog/2018/05/21/input-ssh-passphrase-only-once-on-ubuntu-desktop/</link>
      <pubDate>Mon, 21 May 2018 16:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/21/input-ssh-passphrase-only-once-on-ubuntu-desktop/</guid>
      <description>&lt;p&gt;Ubuntuのデスクトップ環境でssh-agentを使ってsshのパスフレーズ入力を1回だけで良いようにするための設定メモです。&lt;/p&gt;&#xA;&lt;p&gt;といっても、&#xA;&lt;a href=&#34;http://www.clear-code.com/blog/2017/11/8.html&#34;&gt;Windows 10のWindows Subsystem for Linux（WSL）を日常的に活用する - ククログ(2017-11-08)&lt;/a&gt;&#xA;に書かれていたスクリプトをほぼそのまま頂いただけです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ClamAVをUbuntu MATE 18.04 LTSにセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/05/21/setup-clamav-on-ubuntu-mate-18.04-lts/</link>
      <pubDate>Mon, 21 May 2018 15:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/21/setup-clamav-on-ubuntu-mate-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Ubuntu MATE 18.04 LTSの環境にオープンソースのアンチウィルスソフト &lt;a href=&#34;https://www.clamav.net/&#34;&gt;ClamAV&lt;/a&gt; をセットアップしてみたメモです。例によっていろいろ試行錯誤した後に思い出しながら書いているので、多少抜けがあるかも。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu MATE 18.04 LTSの私用設定メモ</title>
      <link>https://hnakamur.github.io/blog/2018/05/21/my-settings-on-ubunt-mate/</link>
      <pubDate>Mon, 21 May 2018 12:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/21/my-settings-on-ubunt-mate/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;USキーボードのThinkPad T480sとThinkPad X260にUbuntu MATE 18.04 LTSをセットアップしました。ということで自分用の設定メモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04でVPN切断後にホスト名解決が動くようにするための回避策</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/workaround-to-get-dns-working-after-vpn-disconnection-on-ubuntu-18.04/</link>
      <pubDate>Sun, 06 May 2018 20:35:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/06/workaround-to-get-dns-working-after-vpn-disconnection-on-ubuntu-18.04/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/03/31/l2tp-vpn-on-ubuntu-17.10/&#34;&gt;Ubuntu 17.10でL2TPのVPN接続を試してみた&lt;/a&gt; でVPN切断後にホスト名解決が動かなくなるのでWifiを一旦オフにしてオンにしていたのですが、それよりはマシな回避策を見つけたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntuでsnapを使って最新バージョンのgoをインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</link>
      <pubDate>Sun, 06 May 2018 15:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</guid>
      <description>&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;&#xA;&lt;p&gt;私が今後あちこちの環境でインストールすることになるので結論を先にメモしておきます。&lt;/p&gt;&#xA;&lt;p&gt;Ubuntuでsnapを使ってgo 1.10.xの最新版をインストールするには以下のコマンドを実行すればOKです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GNOME上でEmacsライクなキーバインディングを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/use-emacs-like-keybindings-on-gnome/</link>
      <pubDate>Sun, 06 May 2018 14:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/06/use-emacs-like-keybindings-on-gnome/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;元々macOSのChromeでURL欄を編集するときにEmacsライクなキーバインディングを使うのに慣れていたので、GNOMEのChromeもそう変更できないかと思って調べると以下の記事を見つけました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MacBook Pro上のUbuntu 18.04でサスペンドが動くようにする</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/make-suspend-working-in-ubuntu-18.04-on-macbook-pro/</link>
      <pubDate>Sun, 06 May 2018 09:45:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/06/make-suspend-working-in-ubuntu-18.04-on-macbook-pro/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;MacBook Pro 15-inch, Mid 2012 (機種ID: MacBookPro10,1)にUbuntu 18.04をインストールしてみたのですが、動かしたまま画面を閉じるとAppleマークのライトは消えるのですがファンは回り続け、その後画面を開いても復帰しない状態でした。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GNOMEの端末でssh-addを自動実行</title>
      <link>https://hnakamur.github.io/blog/2018/05/05/run-ssh-add-on-gnome-terminal/</link>
      <pubDate>Sat, 05 May 2018 00:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/05/run-ssh-add-on-gnome-terminal/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;UbuntuのGNOME環境では「自動起動するアプリケーションの設定」でSSH鍵エージェントが設定されています。&#xA;端末を起動したときに自動的に &lt;code&gt;ssh-add&lt;/code&gt; で秘密鍵を追加して一度だけパスフレーズを入力すれば&#xA;後はパスフレーズ無しで行けるようにするための設定メモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>GNOME Shellの時刻表示に日付や秒を表示</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/display-date-and-seconds-on-gnome-shell/</link>
      <pubDate>Fri, 04 May 2018 21:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/04/display-date-and-seconds-on-gnome-shell/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://askubuntu.com/questions/312138/how-do-i-change-the-date-format-in-gnome-3-shell?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&#34;&gt;How do I change the date format in Gnome 3 shell? - Ask Ubuntu&lt;/a&gt;&#xA;を参考にしました。&lt;/p&gt;&#xA;&lt;p&gt;日本語環境の場合デフォルトでは「金曜日 21 : 32」のようになっていました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;日付を表示&#34;&gt;日付を表示&lt;/h2&gt;&#xA;&lt;p&gt;以下のコマンドを実行すると「5月 4日 (金) 21 : 32」という形式で日付も表示されるようになります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>pbuilderで特定のディストリビューションのchroot環境を作成</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/create-pbuilder-chroot-of-specified-distribution/</link>
      <pubDate>Fri, 04 May 2018 21:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/04/create-pbuilder-chroot-of-specified-distribution/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 18.04上のpbuilderでUbuntu 16.04用のchroot環境を作成するというようにホストと違うディストリビューションのchroot環境を作成する手順のメモです。&#xA;といっても &lt;code&gt;pbuilder&lt;/code&gt; の &lt;code&gt;--distribution&lt;/code&gt; オプションを指定するだけです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>apt-markを使ってdebパッケージのバージョン固定</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</link>
      <pubDate>Fri, 04 May 2018 21:05:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt; にはmainline版とstable版がありますが、&#xA;&lt;a href=&#34;https://bokko.hatenablog.com/entry/2014/05/24/220554&#34;&gt;どのバージョンのnginxを使うべきか？ - 考える人、コードを書く人&lt;/a&gt; を参考に私はmainline版をベースにして &lt;a href=&#34;https://github.com/openresty/lua-nginx-module/&#34;&gt;openresty/lua-nginx-module&lt;/a&gt; などのモジュールを加えたカスタムdebパッケージを作っています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04でaptを使ってchromeをインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/install-chrome-using-apt-on-ubuntu-18.04/</link>
      <pubDate>Fri, 04 May 2018 21:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/04/install-chrome-using-apt-on-ubuntu-18.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://ubuntu-18-04.blogspot.com/2017/12/how-to-install-google-chrome-on-ubuntu-18-04.html&#34;&gt;How to install google chrome on ubuntu 18.04 / 18.10&lt;/a&gt; を参考にUbuntu 18.04でaptを使ってchromeをインストールしたメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストール手順&#34;&gt;インストール手順&lt;/h2&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-console&#34; data-lang=&#34;console&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;curl https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key add -&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;echo &amp;#39;deb [arch=amd64] http://dl.google.com/linux/chrome/deb/ stable main&amp;#39; | sudo tee /etc/apt/sources.list.d/google-chrome.list&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo apt update&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;go&#34;&gt;sudo apt install google-chrome-stable&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
    </item>
    <item>
      <title>macOS High SierraとUbuntu 18.04でVeraCryptを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/02/use-veracrypt-on-mac-os-high-sierra-and-ubuntu-18.04/</link>
      <pubDate>Wed, 02 May 2018 21:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/02/use-veracrypt-on-mac-os-high-sierra-and-ubuntu-18.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/04/22/use-VeraCrypt-for-data-partition/&#34;&gt;VeraCryptでデータパーティションを暗号化してみた&lt;/a&gt; ではWindows 10とUbuntu 17.10のデュアルブート環境でデータ用パーティションをマウントするというのを試しましたが、今回はmacOS High SierraとUbuntu 18.04のデュアルブート環境で試しました。前回と違うところだけメモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04でcopr-cliのdebパッケージを作ったときのメモ</title>
      <link>https://hnakamur.github.io/blog/2018/05/01/build-copr-cli-deb-package-for-ubuntu18.04/</link>
      <pubDate>Tue, 01 May 2018 12:35:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/01/build-copr-cli-deb-package-for-ubuntu18.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://localhost:8000/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/&#34;&gt;Ubuntu16.04でrpmビルド用にmockとcopr-cliをセットアップ&lt;/a&gt; に書いた copr-cli パッケージのビルド手順をサボってメモしてなかったのですが、Ubuntu 18.04 用にビルドする時に手間取ったのでメモしておきます。と言いつつ作業後に思い出しながら書いているので適当です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04でgit-buildpackageとfreightを使うときのメモ</title>
      <link>https://hnakamur.github.io/blog/2018/05/01/ubuntu-18.04-git-buildpackage-freight/</link>
      <pubDate>Tue, 01 May 2018 12:35:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/01/ubuntu-18.04-git-buildpackage-freight/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/&#34;&gt;git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/08/05/create-private-deb-repository-with-freight/&#34;&gt;freightでプライベートdebレポジトリ作成&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/&#34;&gt;git-buildpacakgeとfreightでパスフレーズをファイルから入力させる&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;に書いた git-buildpackage と freight の環境を Ubuntu 18.04 でも作ったのですが、少し変更が必要だったのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;gbp-buildpacakgeには-dオプションを指定&#34;&gt;gbp buildpacakgeには-dオプションを指定&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 16.04 のときには以下のコマンドでソースパッケージをビルドしていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04上にUbuntu 18.04のPXEブートサーバをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/04/24/ubuntu18.04-pxe-boot-server-on-ubuntu16.04/</link>
      <pubDate>Tue, 24 Apr 2018 01:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/24/ubuntu18.04-pxe-boot-server-on-ubuntu16.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/04/23/setup-router-on-ubuntu16.04/&#34;&gt;Ubuntu 16.04をルーター化&lt;/a&gt; したところに&#xA;Ubuntu 18.04のPXEブートサーバをセットアップしたメモです。&lt;/p&gt;&#xA;&lt;p&gt;Ubuntu 18.04はリリース前の&#xA;&lt;a href=&#34;http://archive.ubuntu.com/ubuntu/dists/bionic/main/installer-amd64/20101020ubuntu538/&#34;&gt;2018-04-21版&lt;/a&gt;&#xA;を使いました。&lt;/p&gt;&#xA;&lt;p&gt;手順は&#xA;&lt;a href=&#34;https://www.hiroom2.com/2016/05/05/ubuntu-16-04-debian-8%E3%81%ABpxe%E3%83%96%E3%83%BC%E3%83%88%E3%82%B5%E3%83%BC%E3%83%90%E3%82%92%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E3%81%97%E3%81%A6%E3%83%8D%E3%83%83%E3%83%88%E3%83%AF%E3%83%BC%E3%82%AF%E3%82%A4%E3%83%B3%E3%82%B9%E3%83%88%E3%83%BC%E3%83%AB%E7%92%B0%E5%A2%83%E3%82%92%E6%95%B4%E3%81%88%E3%82%8B/&#34;&gt;Ubuntu 16.04 / Debian 8: PXEブートサーバをインストールしてネットワークインストール環境を整える - Narrow Escape&lt;/a&gt;&#xA;を参考にしましたが、preseedは今回は使わないようにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04をルーター化</title>
      <link>https://hnakamur.github.io/blog/2018/04/23/setup-router-on-ubuntu16.04/</link>
      <pubDate>Mon, 23 Apr 2018 00:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/23/setup-router-on-ubuntu16.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;LANポートが2つついているFUJITSU PRIMERGY TX1310 M1でUbuntu 16.04をルーター化したメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://qiita.com/koshilife/items/2fa1436248f1d4938861&#34;&gt;Ubuntu 14.04のルーター化 - Qiita&lt;/a&gt; を参考にしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VeraCryptでデータパーティションを暗号化してみた</title>
      <link>https://hnakamur.github.io/blog/2018/04/22/use-veracrypt-for-data-partition/</link>
      <pubDate>Sun, 22 Apr 2018 20:45:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/22/use-veracrypt-for-data-partition/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Windows 10とUbuntu 16.04のデュアルブート環境でデータ用のパーティションを &lt;a href=&#34;https://www.veracrypt.fr/en/Home.html&#34;&gt;VeraCrypt - Free Open source disk encryption with strong security for the Paranoid&lt;/a&gt; で暗号化して&#xA;両方からマウントするというのを試してみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu16.04でrpmビルド用にmockとcopr-cliをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/</link>
      <pubDate>Sat, 21 Apr 2018 21:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 16.04で &lt;a href=&#34;https://github.com/rpm-software-management/mock&#34;&gt;mock&lt;/a&gt; でローカルでrpmをビルドするための環境構築の手順メモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://developer.fedoraproject.org/deployment/copr/about.html&#34;&gt;Copr Build Service&lt;/a&gt; でrpmをビルドする際に、ビルドが通ることを事前に確認するために mock を使ってローカルでrpmをビルドするようにしています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu16.04でセカンダリIPアドレス追加</title>
      <link>https://hnakamur.github.io/blog/2018/04/21/add-secondary-ip-address-on-ubuntu-16.04/</link>
      <pubDate>Sat, 21 Apr 2018 12:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/21/add-secondary-ip-address-on-ubuntu-16.04/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://askubuntu.com/questions/313877/how-do-i-add-an-additional-ip-address-to-etc-network-interfaces?utm_medium=organic&amp;amp;utm_source=google_rich_qa&amp;amp;utm_campaign=google_rich_qa&#34;&gt;networking - How do I add an additional IP address to /etc/network/interfaces? - Ask Ubuntu&lt;/a&gt; とそこでコメントされていた&#xA;&lt;a href=&#34;https://wiki.debian.org/NetworkConfiguration#iproute2_method&#34;&gt;NetworkConfiguration - Debian Wiki の iproute2 method&lt;/a&gt;&#xA;を見て試してみたメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://wiki.debian.org/NetworkConfiguration#iproute2_method&#34;&gt;NetworkConfiguration - Debian Wiki の iproute2 method&lt;/a&gt; で書かれていたのは &lt;code&gt;/etc/network/interfaces&lt;/code&gt; で同じネットワークインタフェース名に対して &lt;code&gt;iface&lt;/code&gt; セクションを繰り返して複数書くという方式です。ドライバとハードウェアの組み合わせによっては正しく動かず危険とのことなので要注意です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10でスクリーンショットを作成してgimpで編集</title>
      <link>https://hnakamur.github.io/blog/2018/03/31/create-and-edit-screenshots-with-gimp-on-ubuntu-17.10/</link>
      <pubDate>Sat, 31 Mar 2018 10:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/31/create-and-edit-screenshots-with-gimp-on-ubuntu-17.10/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Ubuntu 17.10でスクリーンショットを作成してgimpで編集する際の手順メモです。&lt;/p&gt;&#xA;&lt;h1 id=&#34;スクリーンショット作成&#34;&gt;スクリーンショット作成&lt;/h1&gt;&#xA;&lt;p&gt;GNOMEのスクリーンショットのアプリケーションで作成しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10でL2TPのVPN接続を試してみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/31/l2tp-vpn-on-ubuntu-17.10/</link>
      <pubDate>Sat, 31 Mar 2018 08:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/31/l2tp-vpn-on-ubuntu-17.10/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Ubuntu 17.10でL2TPのVPN接続を試してみたのでメモです。&#xA;以下の手順の一部は接続先の設定に依存して変動がありえます。&lt;/p&gt;&#xA;&lt;h1 id=&#34;セットアップ&#34;&gt;セットアップ&lt;/h1&gt;&#xA;&lt;h2 id=&#34;必要なソフトウェアをインストール&#34;&gt;必要なソフトウェアをインストール&lt;/h2&gt;&#xA;&lt;p&gt;network-manager-l2tp-gnomeをインストール。依存関係でnetwork-manager-l2tpやxl2tpdも入ります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10とgnomeとIBus mozcのキーボードショートカットを自分好みに設定</title>
      <link>https://hnakamur.github.io/blog/2018/03/30/ubuntu-17.10-gnome-ibus-mozc-keyboard-shortcut/</link>
      <pubDate>Fri, 30 Mar 2018 16:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/30/ubuntu-17.10-gnome-ibus-mozc-keyboard-shortcut/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;私はThinkPadとMacBook ProでともにUSキーボードを使っています。&#xA;Windows、macOS、Ubuntuでウィンドウ切り替えと日本語入力切り替えのキーボードショートカットを設定したのでメモです。&#xA;日本語入力はWindowsとmacOSでは &lt;a href=&#34;https://www.google.co.jp/ime/&#34;&gt;Google 日本語入力 – Google&lt;/a&gt; 、&#xA;UbuntuではIBusと &lt;a href=&#34;https://github.com/google/mozc&#34;&gt;google/mozc: Mozc - a Japanese Input Method Editor designed for multi-platform&lt;/a&gt; です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10とWindows10でデュアルブート構成にしてみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-windows10-dual-boot/</link>
      <pubDate>Fri, 23 Mar 2018 20:15:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-windows10-dual-boot/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/&#34;&gt;Ubuntu 17.10とmacOS High Sierraでデュアルブート構成にしてみた&lt;/a&gt; の後、ThinkPad X260でUbuntu 17.10とWindows10でデュアルブート構成も試してみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 17.10とmacOS High Sierraでデュアルブート構成にしてみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/</link>
      <pubDate>Fri, 23 Mar 2018 14:50:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;個人的にLinuxデスクトップの機運が高まってきたので、Ubuntu 17.10のデスクトップ環境を試してみました。&#xA;例によって自分用メモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04 LTSでLXD 2.0をセットアップして使ってみる</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/start-using-lxd-2.0-on-ubuntu-16.04/</link>
      <pubDate>Sat, 07 May 2016 14:12:49 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/07/start-using-lxd-2.0-on-ubuntu-16.04/</guid>
      <description>&lt;h2 id=&#34;参考記事&#34;&gt;参考記事&lt;/h2&gt;&#xA;&lt;p&gt;公式ドキュメントの&lt;a href=&#34;https://linuxcontainers.org/ja/lxd/getting-started-cli/&#34;&gt;Linux Containers - LXD - はじめに - コマンドライン&lt;/a&gt;によくまとまっているのですが、より詳細には &lt;a href=&#34;http://insights.ubuntu.com/2016/03/14/the-lxd-2-0-story-prologue/&#34;&gt;The LXD 2.0 Story (Prologue) | Ubuntu Insights&lt;/a&gt; にリストアップされている記事がわかりやすかったです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04 LTSでLXD 2.0を試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-2.0-on-ubuntu-16.04/</link>
      <pubDate>Sat, 07 May 2016 14:12:49 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-2.0-on-ubuntu-16.04/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/04/19/run_centos7_containers_on_lxc2/&#34;&gt;LXC 2.0でCentOS 7のコンテナを動かしてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;でLXC 2.0を試しましたが、今度はLXD 2.0を試してみました。&lt;/p&gt;&#xA;&lt;p&gt;実は私は、コンテナをローカルホストでしか動かさないならLXC、リモートホストでも動かすならLXDという使い分けなのかなと漠然と思っていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntuでホームディレクトリを暗号化するのを止めた</title>
      <link>https://hnakamur.github.io/blog/2016/05/02/uninstall-encrypted-home-on-ubuntu/</link>
      <pubDate>Mon, 02 May 2016 12:28:08 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/02/uninstall-encrypted-home-on-ubuntu/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/&#34;&gt;MacをPXEサーバにしてExpress5800/S70タイプRBにUbuntu16.04をインストールしてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;でホームディレクトリを暗号化してみたのですが、OS起動後に鍵認証でsshしようとすると鍵は正しく指定しているのに &lt;code&gt;Permission denied (publickey).&lt;/code&gt; と拒否されてしまうケースがありました。コンソールで一度ログインするとsshでもログイン出来るようになります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 16.04でNo-IPのダイナミックDNSサービスを使ってみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/02/use-no-ip-dynamic-dns-on-ubuntu-16.04/</link>
      <pubDate>Mon, 02 May 2016 09:39:31 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/02/use-no-ip-dynamic-dns-on-ubuntu-16.04/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/&#34;&gt;MacをPXEサーバにしてExpress5800/S70タイプRBにUbuntu16.04をインストールしてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;で自宅サーバを起動したのですが、固定グローバルIPアドレスは持っていないので、ダイナミックDNS (DDNS) サービスを使うことにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>MacをPXEサーバにしてExpress5800/S70タイプRBにUbuntu16.04をインストールしてみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/</link>
      <pubDate>Sun, 01 May 2016 22:36:19 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;Goで書いたプログラムをMacBook Pro上で負荷試験をしていたら、ビーチボールカーソルが回りっぱなしになって大変でした。そういえば、負荷試験するときは極力余計なプロセスを止めて外界の影響を受けない状態でやるべきという話を思い出しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 14.04のPython3でvenvを使う手順のメモ</title>
      <link>https://hnakamur.github.io/blog/2015/07/26/use_python3_venv_on_ubuntu_14.04/</link>
      <pubDate>Sun, 26 Jul 2015 23:09:17 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/26/use_python3_venv_on_ubuntu_14.04/</guid>
      <description>&lt;p&gt;Ubuntu 14.04のPython3でvenv環境をつくろうとしたらエラーになったのですが、&lt;a href=&#34;http://www.thefourtheye.in/2014/12/Python-venv-problem-with-ensurepip-in-Ubuntu.html&#34;&gt;thefourtheye&amp;rsquo;s Tech Blog: Python&amp;rsquo;s venv problem with ensurepip in Ubuntu&lt;/a&gt;に回避方法が紹介されていました。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
