<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>go on hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/tags/go/</link>
    <description>Recent content in go on hnakamur&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 30 Oct 2019 15:25:00 +0900</lastBuildDate>
    
	<atom:link href="https://hnakamur.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>CoreDNSをWindowsのサービスとして登録するためのラッパをGoで書いてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</link>
      <pubDate>Wed, 30 Oct 2019 15:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</guid>
      <description>はじめに Windows の Hyper-V の Linux 上でサーバサイドの開発をしていると Windows 上のウェブブラウザや Windows Subsystem for Linux の curl からアクセスする際に好みの FQDN でアクセスできるようにした</description>
    </item>
    
    <item>
      <title>Goで書き込み中のファイルをHTTPレスポンスとして返す</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/01/31/serve-file-as-http-response-while-writing-in-go/</link>
      <pubDate>Thu, 31 Jan 2019 11:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/01/31/serve-file-as-http-response-while-writing-in-go/</guid>
      <description>はじめに Goで別のgoroutineで書き込み中のファイルをHTTPレスポンスとして返せないかなと思って試行錯誤してみたところ、出来たのでメ</description>
    </item>
    
    <item>
      <title>Ubuntuでsnapを使って最新バージョンのgoをインストール</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</link>
      <pubDate>Sun, 06 May 2018 15:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</guid>
      <description>結論 私が今後あちこちの環境でインストールすることになるので結論を先にメモしておきます。 Ubuntuでsnapを使ってgo 1.10.xの最新版</description>
    </item>
    
    <item>
      <title>私のgoのrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/04/05/building-my-golang-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 11:21:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/04/05/building-my-golang-rpm-and-deb/</guid>
      <description>はじめに golangの非公式rpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている 手順をピックアップしながら</description>
    </item>
    
    <item>
      <title>goで書いたコードがヒープ割り当てになるかを確認する方法</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/01/30/go-heap-allocations/</link>
      <pubDate>Tue, 30 Jan 2018 06:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/01/30/go-heap-allocations/</guid>
      <description>はじめに Allocation Efficiency in High-Performance Go Services · Segment Blog という記事を読みました。素晴らしいのでぜひ一読をお勧めします。 この記事は自分の理解と実際に試してみた結果のメモです</description>
    </item>
    
    <item>
      <title>go1.10rc1のdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/01/28/build-go-1.10rc1-deb/</link>
      <pubDate>Sun, 28 Jan 2018 21:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/01/28/build-go-1.10rc1-deb/</guid>
      <description>はじめに golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした 以降go1.9.xのdebパッケージを git-buildpackage で作っていましたが、今回</description>
    </item>
    
    <item>
      <title>Goでcontext非対応の関数をcontext対応にするラッパ関数を書いた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</link>
      <pubDate>Thu, 05 Oct 2017 20:32:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</guid>
      <description>はじめに Goの net/http.Server でグレースフルシャットダウンを行う際の注意点として Go1.8のGraceful Shutdownとgo-gracedownの対</description>
    </item>
    
    <item>
      <title>Goのプロファイラを使ってメモリ割り当て回数を減らす</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/09/14/reduce-memory-allocations-using-go-profiler/</link>
      <pubDate>Thu, 14 Sep 2017 22:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/09/14/reduce-memory-allocations-using-go-profiler/</guid>
      <description>はじめに Goのプロファイラを使ってメモリ割り当て回数を減らすように自分のプログラムを改善するのを試してみたのでメモです。 参考資料 プロファイラ</description>
    </item>
    
    <item>
      <title>golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/08/05/built-golang-1.9rc1-deb-package/</link>
      <pubDate>Sat, 05 Aug 2017 10:15:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/08/05/built-golang-1.9rc1-deb-package/</guid>
      <description>はじめに Ubuntu · golang/go Wiki で紹介されている Golang Backports : Simon Eisenmann を改変してgo 1.9rc1のUbuntu 16.04用debパッケージをビルドしたのでメモです。 golang 1.9</description>
    </item>
    
    <item>
      <title>badgerのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/07/22/code-reading-of-badger/</link>
      <pubDate>Sat, 22 Jul 2017 21:57:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/07/22/code-reading-of-badger/</guid>
      <description>はじめに 約一年前に LSM-TreeとRocksDB、TiDB、CockroachDBが気になる を書いた後、結局RocksDB触ってなかったの</description>
    </item>
    
    <item>
      <title>グレースフルリスタートを支援するサーバ起動のGoライブラリを自作した</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</link>
      <pubDate>Sat, 08 Jul 2017 21:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</guid>
      <description>はじめに サーバプロセスを無停止で実行ファイルを更新し再起動できるグレースフルリスタートは 非常に便利な仕組みです。 今までは Go言語でGrace</description>
    </item>
    
    <item>
      <title>zerologを参考にしてltsvlogを改良してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</link>
      <pubDate>Sun, 28 May 2017 21:52:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</guid>
      <description>はじめに こちらも少し前の話なのですがブログに書いておきます。 ( ꒪⌓꒪)さんのツイート: &amp;ldquo;zero allocation をうたう logger #golang / “GitHub - rs/zerolog: Zero Allocation JSON Logger</description>
    </item>
    
    <item>
      <title>go-whisperをコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/29/go-whisper-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 17:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/29/go-whisper-code-reading/</guid>
      <description>はじめに go-carbonのTCPレシーバについてコードリーディングしてみた の続きです。 go-whisperのレポジトリは lomik/go-whisper: A Go port of Graphite&#39;s Whisper timeseries database</description>
    </item>
    
    <item>
      <title>go-carbonのTCPレシーバについてコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/29/go-carbon-tcp-receiver-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 11:15:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/29/go-carbon-tcp-receiver-code-reading/</guid>
      <description>はじめに lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister のTCPレシーバについてコードを読んでみたのでメモです。 対象のコミットは https://github.com/lomik/go-carbon/tree/42b9832d13240ff044c86768e8d0dc1f356d9458 です。 TCPレシーバの生成 (app *App)</description>
    </item>
    
    <item>
      <title>github.com/deoxxa/donを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/21/tried-don/</link>
      <pubDate>Fri, 21 Apr 2017 02:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/21/tried-don/</guid>
      <description>はじめに deoxxa/don: Less than half of mastodon. はGoによる tootsuite/mastodon の実装です。 まだ開発中で、タイトルによるとmastodonの機能の半分以下らしいです。 この記事はdonをと</description>
    </item>
    
    <item>
      <title>github.com/facebookgo/graceパッケージでグレースフルリスタートを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</link>
      <pubDate>Thu, 13 Apr 2017 07:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</guid>
      <description>はじめに go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた でcarbonapiが facebookgo/grace: Graceful restart &amp;amp; zero downtime deploy for Go servers. を使っていることに気づ</description>
    </item>
    
    <item>
      <title>go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/13/built-go-carbon-and-carbonapi-rpm/</link>
      <pubDate>Thu, 13 Apr 2017 05:13:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/13/built-go-carbon-and-carbonapi-rpm/</guid>
      <description>はじめに go, go-carbon, carbonapiのrpmをfedora coprでビルドしたのでメモです。 goのrpmはCentOS 6と7、go-carbonと</description>
    </item>
    
    <item>
      <title>Facebookの時系列データベースGorillaのデータ圧縮方式を試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/02/12/tried-facebook-gorilla-time-series-database-compression/</link>
      <pubDate>Sun, 12 Feb 2017 23:00:03 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/02/12/tried-facebook-gorilla-time-series-database-compression/</guid>
      <description>はじめに Beringei: A high-performance time series storage engine | Engineering Blog | Facebook Code という記事を読んで、Facebookが2015年に &amp;ldquo;Gorilla: A Fast, Scalable, In-Memory Time Series Database&amp;rdquo; という論文でGorillaという時系列デ</description>
    </item>
    
    <item>
      <title>Go言語のos.Chtimesで設定可能な最大日時は 2262-04-11 23:47:16.854775807 &#43;0000 UTC</title>
      <link>https://hnakamur.github.io/blog/content/post/2016/10/22/max-time-for-golang-os-chtimes/</link>
      <pubDate>Sat, 22 Oct 2016 18:32:50 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2016/10/22/max-time-for-golang-os-chtimes/</guid>
      <description>os.Chtimes のソース src/os/file_posix.go - The Go Programming Language go/file_posix.go at go1.7.3 · golang/go を見ると、引数は time.Time なのですが、 syscall.Timespec に変換するときに time の UnixNano() を使っています。 UnixNano() は 1970-01-01T00:00:00Z からの通算ミリ秒です。 UnixNano() で int64 の最</description>
    </item>
    
    <item>
      <title>direnvでgo1.5.2とgo1.6beta1を切り替える設定</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/12/19/switch_go1.5.2_and_go1.6beta1_with_direnv/</link>
      <pubDate>Sat, 19 Dec 2015 01:45:25 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/12/19/switch_go1.5.2_and_go1.6beta1_with_direnv/</guid>
      <description>はじめに go1.6beta1がリリースされました。go1.5.2と切り替えて使いたいので、direnv/direnv用の設定を書きました。 設</description>
    </item>
    
    <item>
      <title>mattn/gomにGoのvendoringサポートが追加されました</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/10/22/gom_got_go_vendoring_support/</link>
      <pubDate>Thu, 22 Oct 2015 01:22:10 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/10/22/gom_got_go_vendoring_support/</guid>
      <description>以前Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTAを読んだのですが、その時は様子見にしてい</description>
    </item>
    
    <item>
      <title>Goでグローバルなバッファを使いまわしてスタックトレースを取得するライブラリを書いてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/08/31/go_stacktrace_library_with_global_buffer/</link>
      <pubDate>Mon, 31 Aug 2015 00:43:56 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/08/31/go_stacktrace_library_with_global_buffer/</guid>
      <description>背景と経緯 Goでもエラー処理にpanicを使えばスタックトレースが出力されます。でも、ライブラリでは panic するとエラー処理して続行したいときに困</description>
    </item>
    
    <item>
      <title>Cybozu Garoon APIのファイル管理の部分だけのgoライブラリを書いた</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/06/15/garoon_go_client/</link>
      <pubDate>Mon, 15 Jun 2015 20:24:16 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/06/15/garoon_go_client/</guid>
      <description>はじめに Cybozu Garoon APIのファイル管理のうち、フォルダ一覧取得、フォルダ内のファイル一覧取得、ファイルダウンロードのAPIを呼び出すライブラリをG</description>
    </item>
    
    <item>
      <title>Go言語用のメモリマップトファイルのライブラリを探してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/06/03/go_mmap_libraries/</link>
      <pubDate>Wed, 03 Jun 2015 06:29:01 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/06/03/go_mmap_libraries/</guid>
      <description>ふとGo言語でメモリマップトファイルを扱えるライブラリってあるのかなと気になったので探してみました。 標準ライブラリ Goのホームページでmma</description>
    </item>
    
    <item>
      <title>LuaのGo実装GopherLuaを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/06/03/tried_gopher_lua/</link>
      <pubDate>Wed, 03 Jun 2015 05:29:03 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/06/03/tried_gopher_lua/</guid>
      <description>はじめに inforno :: LuaのGo言語実装を公開しましたを以前読んでましたが、試してなかったので試しました。 Lua: aboutの&amp;quot;What is Lua</description>
    </item>
    
    <item>
      <title>goでglogを使うときのメモ</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/05/31/how_to_use_glog/</link>
      <pubDate>Sun, 31 May 2015 02:30:02 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/05/31/how_to_use_glog/</guid>
      <description>go言語におけるロギングについての記事とglog - GoDocを読んで試してみました。 flag.Parse() を呼ぶ必要があり、最後に glog.Flush() を呼ぶ必要があるので main で defer で</description>
    </item>
    
    <item>
      <title>groongaのgoバインディングでWikipedia全文検索のサンプルウェブアプリを作ってみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/05/12/cgoroonga_wikipedia_search_webapp/</link>
      <pubDate>Tue, 12 May 2015 21:24:11 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/05/12/cgoroonga_wikipedia_search_webapp/</guid>
      <description>データ登録用にgroongaのC APIのgoバインディングを書いてみた · hnakamur&#39;s blog at githubの続きで、APIを追加実装し、Wikipedia全</description>
    </item>
    
    <item>
      <title>Goでdeferの処理中のエラーを返す書き方を工夫してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/04/27/write_function_for_go_defer/</link>
      <pubDate>Mon, 27 Apr 2015 02:06:02 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/04/27/write_function_for_go_defer/</guid>
      <description>go-nutsのメーリングリストの記事 https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/Y4MCVZZ3c5sJ によるとdeferで呼ばれた関数の戻り値は捨てられるそうです。 https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/UlI77BM2PUkJ で戻り値の変数に代入するという方法が</description>
    </item>
    
  </channel>
</rss>