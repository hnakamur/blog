<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Go on hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/tags/go/</link>
    <description>Recent content in Go on hnakamur&#39;s blog</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 30 Dec 2019 01:20:00 +0900</lastBuildDate>
    <atom:link href="https://hnakamur.github.io/blog/tags/go/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>VictoriaMetrics/fastcacheのコードリーディングその1</title>
      <link>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part1/</link>
      <pubDate>Mon, 30 Dec 2019 01:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part1/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache&#34;&gt;VictoriaMetrics/fastcache&lt;/a&gt; のコードリーディングのメモです。対象バージョンはこの記事を書いた時点の最新コミット &lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache/commit/c9a5939fd508ba790b708b23929feea13623d735&#34;&gt;c9a5939&lt;/a&gt; です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;仕様&#34;&gt;仕様&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache&#34;&gt;VictoriaMetrics/fastcache&lt;/a&gt; は &lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;VictoriaMetrics/VictoriaMetrics&lt;/a&gt; のメトリクス名の管理に使っているキーバリューストアを切り出したものなので、 VictoriaMetrics での要件に沿った仕様となっています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>VictoriMetrics/fastcacheによるGoのGC負荷の回避方法</title>
      <link>https://hnakamur.github.io/blog/2019/12/29/victoriametrics-fastcache/</link>
      <pubDate>Sun, 29 Dec 2019 16:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/29/victoriametrics-fastcache/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/VictoriaMetrics/VictoriaMetrics&#34;&gt;VictoriaMetrics&lt;/a&gt; で &lt;code&gt;foo.bar.baz&lt;/code&gt; といったメトリクス名からIDへのマッピングは&#xA;&lt;a href=&#34;https://github.com/VictoriaMetrics/fastcache&#34;&gt;VictoriaMetrics/fastcache&lt;/a&gt; というキーバリューストアで保管されています。ということで調査したメモ。&lt;/p&gt;&#xA;&lt;h2 id=&#34;ベンチマーク&#34;&gt;ベンチマーク&lt;/h2&gt;&#xA;&lt;p&gt;ベンチマークがついているので自分のサーバでも試してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>cgoとunsafeについてのメモ</title>
      <link>https://hnakamur.github.io/blog/2019/12/29/cgo-and-unsafe/</link>
      <pubDate>Sun, 29 Dec 2019 03:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/12/29/cgo-and-unsafe/</guid>
      <description>&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;&#xA;&lt;p&gt;まず大前提として cgo や unsafe を使ったプログラムは Go の将来のバージョンで動く保証がないので極力避けるべきです（unsafeについては&lt;a href=&#34;https://golang.org/doc/go1compat&#34;&gt;Go 1 and the Future of Go Programs - The Go Programming Language&lt;/a&gt;で明示的に互換性保証の対象外と書かれています。cgo は &lt;a href=&#34;https://golang.org/doc/go1.12#cgo&#34;&gt;Go 1.12 Release Notes - The Go Programming Language&lt;/a&gt; に変更された実例があります）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>CoreDNSをWindowsのサービスとして登録するためのラッパをGoで書いてみた</title>
      <link>https://hnakamur.github.io/blog/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</link>
      <pubDate>Wed, 30 Oct 2019 15:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Windows の Hyper-V の Linux 上でサーバサイドの開発をしていると Windows 上のウェブブラウザや Windows Subsystem for Linux の curl からアクセスする際に好みの FQDN でアクセスできるようにしたいというニーズがあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goで書き込み中のファイルをHTTPレスポンスとして返す</title>
      <link>https://hnakamur.github.io/blog/2019/01/31/serve-file-as-http-response-while-writing-in-go/</link>
      <pubDate>Thu, 31 Jan 2019 11:50:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2019/01/31/serve-file-as-http-response-while-writing-in-go/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Goで別のgoroutineで書き込み中のファイルをHTTPレスポンスとして返せないかなと思って試行錯誤してみたところ、出来たのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntuでsnapを使って最新バージョンのgoをインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</link>
      <pubDate>Sun, 06 May 2018 15:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</guid>
      <description>&lt;h1 id=&#34;結論&#34;&gt;結論&lt;/h1&gt;&#xA;&lt;p&gt;私が今後あちこちの環境でインストールすることになるので結論を先にメモしておきます。&lt;/p&gt;&#xA;&lt;p&gt;Ubuntuでsnapを使ってgo 1.10.xの最新版をインストールするには以下のコマンドを実行すればOKです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>私のgoのrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/2018/04/05/building-my-golang-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 11:21:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/05/building-my-golang-rpm-and-deb/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;golangの非公式rpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている&#xA;手順をピックアップしながら毎度ビルドしているのは良くないので、自分用にまとめておきます。&#xA;なおこの手順は私の手元の環境と自作コマンドに依存しているので、他の環境でコピペしても動きません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>goで書いたコードがヒープ割り当てになるかを確認する方法</title>
      <link>https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/</link>
      <pubDate>Tue, 30 Jan 2018 06:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://segment.com/blog/allocation-efficiency-in-high-performance-go-services/&#34;&gt;Allocation Efficiency in High-Performance Go Services · Segment Blog&lt;/a&gt; という記事を読みました。素晴らしいのでぜひ一読をお勧めします。&lt;/p&gt;&#xA;&lt;p&gt;この記事は自分の理解と実際に試してみた結果のメモです。&lt;/p&gt;&#xA;&lt;p&gt;一番のポイントは &lt;code&gt;go build -gcflags &#39;-m&#39;&lt;/code&gt; のようにオプションを指定してビルドすればコードのどの箇所でヒープ割り当てが発生したかを確認できるということです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go1.10rc1のdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</link>
      <pubDate>Sun, 28 Jan 2018 21:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/08/05/built-golang-1.9rc1-deb-package/&#34;&gt;golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした&lt;/a&gt; 以降go1.9.xのdebパッケージを &lt;a href=&#34;https://honk.sigxcpu.org/piki/projects/git-buildpackage/&#34;&gt;git-buildpackage&lt;/a&gt; で作っていましたが、今回 go1.10rc1 のdebパッケージを作ってみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでcontext非対応の関数をcontext対応にするラッパ関数を書いた</title>
      <link>https://hnakamur.github.io/blog/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</link>
      <pubDate>Thu, 05 Oct 2017 20:32:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Goの &lt;a href=&#34;https://golang.org/pkg/net/http/#Server&#34;&gt;net/http.Server&lt;/a&gt; でグレースフルシャットダウンを行う際の注意点として&#xA;&lt;a href=&#34;https://shogo82148.github.io/blog/2017/01/21/golang-1-dot-8-graceful-shutdown/&#34;&gt;Go1.8のGraceful Shutdownとgo-gracedownの対応 - Shogo&amp;rsquo;s Blog&lt;/a&gt;&#xA;のブログ記事で以下の3点が紹介されていました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goのプロファイラを使ってメモリ割り当て回数を減らす</title>
      <link>https://hnakamur.github.io/blog/2017/09/14/reduce-memory-allocations-using-go-profiler/</link>
      <pubDate>Thu, 14 Sep 2017 22:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/14/reduce-memory-allocations-using-go-profiler/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Goのプロファイラを使ってメモリ割り当て回数を減らすように自分のプログラムを改善するのを試してみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;参考資料&#34;&gt;参考資料&lt;/h2&gt;&#xA;&lt;p&gt;プロファイラの基本的な使い方の公式ブログ記事。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</link>
      <pubDate>Sat, 05 Aug 2017 10:15:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/Ubuntu&#34;&gt;Ubuntu · golang/go Wiki&lt;/a&gt; で紹介されている&#xA;&lt;a href=&#34;https://launchpad.net/~longsleep/+archive/ubuntu/golang-backports&#34;&gt;Golang Backports : Simon Eisenmann&lt;/a&gt; を改変してgo 1.9rc1のUbuntu 16.04用debパッケージをビルドしたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://launchpad.net/~hnakamur/+archive/ubuntu/golang-1.9&#34;&gt;golang 1.9 : Hiroaki Nakamura&lt;/a&gt; というPPAで配布しています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>badgerのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/07/22/code-reading-of-badger/</link>
      <pubDate>Sat, 22 Jul 2017 21:57:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/22/code-reading-of-badger/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;約一年前に &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/06/20/lsm-tree-and-rocksdb/&#34;&gt;LSM-TreeとRocksDB、TiDB、CockroachDBが気になる&lt;/a&gt; を書いた後、結局RocksDB触ってなかったのですが、もっと良さそうなしかも pure Go のライブラリ&#xA;&lt;a href=&#34;https://github.com/dgraph-io/badger&#34;&gt;dgraph-io/badger: Fastest key-value store in Go.&lt;/a&gt;&#xA;がしばらく前に出てきてとても期待しています。上のページのREADMEやそこからリンクされているブログ記事を読んだ感じ素晴らしいです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>グレースフルリスタートを支援するサーバ起動のGoライブラリを自作した</title>
      <link>https://hnakamur.github.io/blog/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</link>
      <pubDate>Sat, 08 Jul 2017 21:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;サーバプロセスを無停止で実行ファイルを更新し再起動できるグレースフルリスタートは&#xA;非常に便利な仕組みです。&lt;/p&gt;&#xA;&lt;p&gt;今までは &lt;a href=&#34;https://shogo82148.github.io/blog/2015/05/03/golang-graceful-restart/&#34;&gt;Go言語でGraceful Restartをする - Shogo&amp;rsquo;s Blog&lt;/a&gt; と一連の記事を参考に&#xA;&lt;a href=&#34;https://github.com/lestrrat/go-server-starter&#34;&gt;lestrrat/go-server-starter: Go port of start_server utility (Server::Starter)&lt;/a&gt; を使わせていただいていました。&#xA;ありがとうございます！&lt;/p&gt;</description>
    </item>
    <item>
      <title>zerologを参考にしてltsvlogを改良してみた</title>
      <link>https://hnakamur.github.io/blog/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</link>
      <pubDate>Sun, 28 May 2017 21:52:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;こちらも少し前の話なのですがブログに書いておきます。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://twitter.com/mattn_jp/status/864993516149022720&#34;&gt;( ꒪⌓꒪)さんのツイート: &amp;ldquo;zero allocation をうたう logger #golang / “GitHub - rs/zerolog: Zero Allocation JSON Logger” https://t.co/3t2qt9Qgbm&amp;rdquo;&lt;/a&gt; というmattnさんのツイートを見かけて&#xA;&lt;a href=&#34;https://github.com/rs/zerolog&#34;&gt;rs/zerolog: Zero Allocation JSON Logger&lt;/a&gt;&#xA;zerologの仕組みを調べ、自作のLTSVログ出力ライブラリ&#xA;&lt;a href=&#34;https://github.com/hnakamur/ltsvlog&#34;&gt;hnakamur/ltsvlog: a minimalist LTSV logging library in Go&lt;/a&gt;&#xA;を改善してみたメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go-whisperをコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/29/go-whisper-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 17:05:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/29/go-whisper-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/04/29/go-carbon-tcp-receiver-code-reading/&#34;&gt;go-carbonのTCPレシーバについてコードリーディングしてみた&lt;/a&gt; の続きです。&lt;/p&gt;&#xA;&lt;p&gt;go-whisperのレポジトリは&#xA;&lt;a href=&#34;https://github.com/lomik/go-whisper/&#34;&gt;lomik/go-whisper: A Go port of Graphite&amp;rsquo;s Whisper timeseries database&lt;/a&gt;&#xA;で、&#xA;対象のコミットは&#xA;&lt;a href=&#34;https://github.com/lomik/go-whisper/tree/6de93631b9853148a7e1a659f7805a89451368bf&#34;&gt;https://github.com/lomik/go-whisper/tree/6de93631b9853148a7e1a659f7805a89451368bf&lt;/a&gt;&#xA;です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;既存のwhisperファイルを開く&#34;&gt;既存のwhisperファイルを開く&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;whisper.Open&lt;/code&gt; の実装は以下の通りです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lomik/go-whisper/blob/6de93631b9853148a7e1a659f7805a89451368bf/whisper.go#L260-L322&#34;&gt;whisper.go#L260-L322&lt;/a&gt;&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;div class=&#34;chroma&#34;&gt;&#xA;&lt;table class=&#34;lntable&#34;&gt;&lt;tr&gt;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code&gt;&lt;span class=&#34;lnt&#34;&gt;260&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;261&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;262&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;263&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;264&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;265&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;266&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;267&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;268&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;269&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;270&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;271&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;272&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;273&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;274&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;275&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;276&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;277&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;278&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;279&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;280&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;281&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;282&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;283&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;284&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;285&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;286&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;287&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;288&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;289&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;290&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;291&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;292&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;293&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;294&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;295&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;296&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;297&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;298&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;299&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;300&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;301&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;302&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;303&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;304&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;305&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;306&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;307&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;308&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;309&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;310&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;311&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;312&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;313&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;314&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;315&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;316&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;317&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;318&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;319&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;320&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;321&#xA;&lt;/span&gt;&lt;span class=&#34;lnt&#34;&gt;322&#xA;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&#xA;&lt;td class=&#34;lntd&#34;&gt;&#xA;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-go&#34; data-lang=&#34;go&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;/*&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;  Open an existing Whisper database and read it&amp;#39;s header&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;cm&#34;&gt;*/&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;Open&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;string&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;kt&#34;&gt;error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;OpenFile&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;path&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;os&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;O_RDWR&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mo&#34;&gt;0666&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;defer&lt;/span&gt; &lt;span class=&#34;kd&#34;&gt;func&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Close&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}()&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;new&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;Whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// read the metadata&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MetadataSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;readed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Unable to read header: %s&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Error&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;())&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;MetadataSize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Unable to read header: EOF&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;gt;&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;1024&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt; &lt;span class=&#34;c1&#34;&gt;// support very old format. File starts with lastUpdate and has only average aggregation method&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;        &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;aggregationMethod&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;Average&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt; &lt;span class=&#34;k&#34;&gt;else&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;aggregationMethod&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;AggregationMethod&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;a&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;maxRetention&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;xFilesFactor&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackFloat32&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;FloatSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;FloatSize&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;archiveCount&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackInt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;[&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;:&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;+&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;])&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;offset&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;+=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;IntSize&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;c1&#34;&gt;// read the archive info&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;c1&#34;&gt;&lt;/span&gt;    &lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;kt&#34;&gt;byte&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ArchiveInfoSize&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;archives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;make&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;([]&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;*&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;archiveInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;for&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;:=&lt;/span&gt; &lt;span class=&#34;mi&#34;&gt;0&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;&amp;lt;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;archiveCount&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;;&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;o&#34;&gt;++&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;readed&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;file&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Read&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;k&#34;&gt;if&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;||&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;readed&lt;/span&gt; &lt;span class=&#34;o&#34;&gt;!=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;ArchiveInfoSize&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;{&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;nx&#34;&gt;err&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;fmt&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nf&#34;&gt;Errorf&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;s&#34;&gt;&amp;#34;Unable to read archive %d metadata&amp;#34;&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;i&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;)&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;            &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;        &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;archives&lt;/span&gt; &lt;span class=&#34;p&#34;&gt;=&lt;/span&gt; &lt;span class=&#34;nb&#34;&gt;append&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;.&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;archives&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;nf&#34;&gt;unpackArchiveInfo&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;(&lt;/span&gt;&lt;span class=&#34;nx&#34;&gt;b&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;))&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    &lt;span class=&#34;k&#34;&gt;return&lt;/span&gt; &lt;span class=&#34;nx&#34;&gt;whisper&lt;/span&gt;&lt;span class=&#34;p&#34;&gt;,&lt;/span&gt; &lt;span class=&#34;kc&#34;&gt;nil&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;&lt;span class=&#34;p&#34;&gt;}&lt;/span&gt;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&#xA;&lt;/div&gt;&#xA;&lt;/div&gt;&lt;h2 id=&#34;whisper構造体&#34;&gt;Whisper構造体&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;Whisper&lt;/code&gt; 構造体の定義です。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go-carbonのTCPレシーバについてコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/29/go-carbon-tcp-receiver-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 11:15:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/29/go-carbon-tcp-receiver-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lomik/go-carbon&#34;&gt;lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister&lt;/a&gt;&#xA;のTCPレシーバについてコードを読んでみたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;対象のコミットは&#xA;&lt;a href=&#34;https://github.com/lomik/go-carbon/tree/42b9832d13240ff044c86768e8d0dc1f356d9458&#34;&gt;https://github.com/lomik/go-carbon/tree/42b9832d13240ff044c86768e8d0dc1f356d9458&lt;/a&gt;&#xA;です。&lt;/p&gt;&#xA;&lt;h2 id=&#34;tcpレシーバの生成&#34;&gt;TCPレシーバの生成&lt;/h2&gt;&#xA;&lt;p&gt;&lt;code&gt;(app *App) Start()&lt;/code&gt; というメソッドの中で &lt;code&gt;receiver.New&lt;/code&gt; を呼んでTCPレシーバを生成しています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>github.com/deoxxa/donを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/21/tried-don/</link>
      <pubDate>Fri, 21 Apr 2017 02:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/21/tried-don/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/deoxxa/don&#34;&gt;deoxxa/don: Less than half of mastodon.&lt;/a&gt; はGoによる&#xA;&lt;a href=&#34;https://github.com/tootsuite/mastodon/&#34;&gt;tootsuite/mastodon&lt;/a&gt; の実装です。&#xA;まだ開発中で、タイトルによるとmastodonの機能の半分以下らしいです。&lt;/p&gt;&#xA;&lt;p&gt;この記事はdonをとりあえず動かしてみたメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>github.com/facebookgo/graceパッケージでグレースフルリスタートを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</link>
      <pubDate>Thu, 13 Apr 2017 07:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/04/13/built-go-carbon-and-carbonapi-rpm/&#34;&gt;go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた&lt;/a&gt; でcarbonapiが&#xA;&lt;a href=&#34;https://github.com/facebookgo/grace/&#34;&gt;facebookgo/grace: Graceful restart &amp;amp; zero downtime deploy for Go servers.&lt;/a&gt;&#xA;を使っていることに気づいたので、それでグレースフルリスタートを試してみました。ということでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/13/built-go-carbon-and-carbonapi-rpm/</link>
      <pubDate>Thu, 13 Apr 2017 05:13:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/04/13/built-go-carbon-and-carbonapi-rpm/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;go, go-carbon, carbonapiのrpmをfedora coprでビルドしたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;goのrpmはCentOS 6と7、go-carbonとcarbonapiはCentOS 7用のrpmをビルドしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Facebookの時系列データベースGorillaのデータ圧縮方式を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/02/12/tried-facebook-gorilla-time-series-database-compression/</link>
      <pubDate>Sun, 12 Feb 2017 23:00:03 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/02/12/tried-facebook-gorilla-time-series-database-compression/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://code.facebook.com/posts/952820474848503/beringei-a-high-performance-time-series-storage-engine/&#34;&gt;Beringei: A high-performance time series storage engine | Engineering Blog | Facebook Code&lt;/a&gt; という記事を読んで、Facebookが2015年に &lt;a href=&#34;http://www.vldb.org/pvldb/vol8/p1816-teller.pdf&#34;&gt;&amp;ldquo;Gorilla: A Fast, Scalable, In-Memory Time Series Database&amp;rdquo;&lt;/a&gt; という論文でGorillaという時系列データベースについて発表したものを&lt;a href=&#34;https://github.com/facebookincubator/beringei&#34;&gt;Beringei&lt;/a&gt;としてオープンソースで公開したのを知りました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go言語のos.Chtimesで設定可能な最大日時は 2262-04-11 23:47:16.854775807 &#43;0000 UTC</title>
      <link>https://hnakamur.github.io/blog/2016/10/22/max-time-for-golang-os-chtimes/</link>
      <pubDate>Sat, 22 Oct 2016 18:32:50 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2016/10/22/max-time-for-golang-os-chtimes/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://golang.org/pkg/os/#Chtimes&#34;&gt;os.Chtimes&lt;/a&gt; のソース&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://golang.org/src/os/file_posix.go?s=3693:3758#L123&#34;&gt;src/os/file_posix.go - The Go Programming Language&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/blob/go1.7.3/src/os/file_posix.go#L133-L141&#34;&gt;go/file_posix.go at go1.7.3 · golang/go&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;を見ると、引数は &lt;code&gt;time.Time&lt;/code&gt; なのですが、 &lt;code&gt;syscall.Timespec&lt;/code&gt; に変換するときに &lt;code&gt;time&lt;/code&gt; の &lt;code&gt;UnixNano()&lt;/code&gt; を使っています。 &lt;code&gt;UnixNano()&lt;/code&gt; は 1970-01-01T00:00:00Z からの通算ミリ秒です。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;UnixNano()&lt;/code&gt; で int64 の最大値を設定したときと、 &lt;code&gt;time.Time&lt;/code&gt; で表現可能な最大の日時を調べてみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>direnvでgo1.5.2とgo1.6beta1を切り替える設定</title>
      <link>https://hnakamur.github.io/blog/2015/12/19/switch_go1.5.2_and_go1.6beta1_with_direnv/</link>
      <pubDate>Sat, 19 Dec 2015 01:45:25 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/19/switch_go1.5.2_and_go1.6beta1_with_direnv/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;go1.6beta1がリリースされました。go1.5.2と切り替えて使いたいので、&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv/direnv&lt;/a&gt;用の設定を書きました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;設定内容&#34;&gt;設定内容&lt;/h2&gt;&#xA;&lt;p&gt;以下の様な配置で使うことにしました。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;go1.5.2&#xA;&lt;ul&gt;&#xA;&lt;li&gt;goのインストールディレクトリ: /usr/local/go&lt;/li&gt;&#xA;&lt;li&gt;GOPATH: ~/gocode&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;go1.6beta1&#xA;&lt;ul&gt;&#xA;&lt;li&gt;goのインストールディレクトリ: /usr/local/go1.6beta1&lt;/li&gt;&#xA;&lt;li&gt;GOPATH: ~/gocode1.6&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;まず、&lt;del&gt;/.bash_profileや&lt;/del&gt;/.bashからはgoへのPATH設定やGOPATHの設定は削除します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>mattn/gomにGoのvendoringサポートが追加されました</title>
      <link>https://hnakamur.github.io/blog/2015/10/22/gom_got_go_vendoring_support/</link>
      <pubDate>Thu, 22 Oct 2015 01:22:10 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/10/22/gom_got_go_vendoring_support/</guid>
      <description>&lt;p&gt;以前&lt;a href=&#34;http://deeeet.com/writing/2015/06/26/golang-dependency-vendoring/&#34;&gt;Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTA&lt;/a&gt;を読んだのですが、その時は様子見にしていました。&lt;/p&gt;&#xA;&lt;p&gt;しかし、仕事でGoを書くとなるとやはりVendoringは必要だろうと思い、遅ればせながら今回&lt;a href=&#34;https://getgb.io/examples/getting-started/&#34;&gt;gb&lt;/a&gt;, &lt;a href=&#34;https://github.com/tools/godep&#34;&gt;tools/godep&lt;/a&gt;, &lt;a href=&#34;https://github.com/mattn/gom&#34;&gt;mattn/gom&lt;/a&gt;を試してみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでグローバルなバッファを使いまわしてスタックトレースを取得するライブラリを書いてみた</title>
      <link>https://hnakamur.github.io/blog/2015/08/31/go_stacktrace_library_with_global_buffer/</link>
      <pubDate>Mon, 31 Aug 2015 00:43:56 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/08/31/go_stacktrace_library_with_global_buffer/</guid>
      <description>&lt;h2 id=&#34;背景と経緯&#34;&gt;背景と経緯&lt;/h2&gt;&#xA;&lt;p&gt;Goでもエラー処理にpanicを使えばスタックトレースが出力されます。でも、ライブラリでは &lt;code&gt;panic&lt;/code&gt; するとエラー処理して続行したいときに困るのでpanicではなく &lt;code&gt;return err&lt;/code&gt; を使うのが普通です。すると今度はスタックトレースが取れないのが残念だと思っていました。エラーが出た箇所でログ出力はするとして、やはりスタックトレースがあるほうがその関数までの呼出経路がわかってデバッグが捗ります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Cybozu Garoon APIのファイル管理の部分だけのgoライブラリを書いた</title>
      <link>https://hnakamur.github.io/blog/2015/06/15/garoon_go_client/</link>
      <pubDate>Mon, 15 Jun 2015 20:24:16 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/15/garoon_go_client/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;Cybozu &lt;a href=&#34;https://cybozudev.zendesk.com/hc/ja/categories/200157760-Garoon-API&#34;&gt;Garoon API&lt;/a&gt;のファイル管理のうち、フォルダ一覧取得、フォルダ内のファイル一覧取得、ファイルダウンロードのAPIを呼び出すライブラリをGoで書いてみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Go言語用のメモリマップトファイルのライブラリを探してみた</title>
      <link>https://hnakamur.github.io/blog/2015/06/03/go_mmap_libraries/</link>
      <pubDate>Wed, 03 Jun 2015 06:29:01 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/03/go_mmap_libraries/</guid>
      <description>&lt;p&gt;ふとGo言語でメモリマップトファイルを扱えるライブラリってあるのかなと気になったので探してみました。&lt;/p&gt;&#xA;&lt;h2 id=&#34;標準ライブラリ&#34;&gt;標準ライブラリ&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://golang.org/&#34;&gt;Goのホームページ&lt;/a&gt;で&lt;a href=&#34;http://golang.org/search?q=mmap&#34;&gt;mmapで検索してみる&lt;/a&gt;とUnix系では実装があるみたいです。&lt;/p&gt;&#xA;&lt;p&gt;Did you mean: &lt;a href=&#34;http://golang.org/search?q=Mmap&#34;&gt;Mmap&lt;/a&gt; と表示されているのでクリックしてみるとsyscallパッケージに&lt;a href=&#34;http://golang.org/pkg/syscall/#Mmap&#34;&gt;Mmap&lt;/a&gt;があることがわかりました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>LuaのGo実装GopherLuaを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/06/03/tried_gopher_lua/</link>
      <pubDate>Wed, 03 Jun 2015 05:29:03 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/06/03/tried_gopher_lua/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://inforno.net/articles/2015/02/15/gopher-lua-released&#34;&gt;inforno :: LuaのGo言語実装を公開しました&lt;/a&gt;を以前読んでましたが、試してなかったので試しました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.lua.org/about.html&#34;&gt;Lua: about&lt;/a&gt;の&amp;quot;What is Lua?&amp;ldquo;に&lt;/p&gt;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;making it ideal for configuration, scripting, and rapid prototyping.&lt;/p&gt;</description>
    </item>
    <item>
      <title>goでglogを使うときのメモ</title>
      <link>https://hnakamur.github.io/blog/2015/05/31/how_to_use_glog/</link>
      <pubDate>Sun, 31 May 2015 02:30:02 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/05/31/how_to_use_glog/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.satotaichi.info/logging-frameworks-for-go/&#34;&gt;go言語におけるロギングについて&lt;/a&gt;の記事と&lt;a href=&#34;http://godoc.org/github.com/golang/glog&#34;&gt;glog - GoDoc&lt;/a&gt;を読んで試してみました。&lt;/p&gt;&#xA;&lt;p&gt;&lt;code&gt;flag.Parse()&lt;/code&gt; を呼ぶ必要があり、最後に &lt;code&gt;glog.Flush()&lt;/code&gt; を呼ぶ必要があるので &lt;code&gt;main&lt;/code&gt; で &lt;code&gt;defer&lt;/code&gt; で書いておきます。&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;&#x9;&amp;#34;flag&amp;#34;&#xA;&#xA;&#x9;&amp;#34;github.com/golang/glog&amp;#34;&#xA;)&#xA;&#xA;func main() {&#xA;&#x9;flag.Parse()&#xA;&#x9;defer glog.Flush()&#xA;&#xA;&#x9;if glog.V(0) {&#xA;&#x9;&#x9;glog.Info(&amp;#34;Hello, glog&amp;#34;)&#xA;&#x9;}&#xA;&#xA;&#x9;glog.V(0).Info(&amp;#34;exiting&amp;#34;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;ログレベルは &lt;code&gt;-v&lt;/code&gt; オプションで指定できるのですがデフォルト値は0なので、デフォルトで出力したいログはレベル0で書くようにします。&lt;/p&gt;</description>
    </item>
    <item>
      <title>groongaのgoバインディングでWikipedia全文検索のサンプルウェブアプリを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</link>
      <pubDate>Tue, 12 May 2015 21:24:11 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.io/blog/2015/04/27/cgoroonga/&#34;&gt;データ登録用にgroongaのC APIのgoバインディングを書いてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の続きで、APIを追加実装し、Wikipedia全文検索のサンプルウェブアプリを作ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Goでdeferの処理中のエラーを返す書き方を工夫してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/27/write_function_for_go_defer/</link>
      <pubDate>Mon, 27 Apr 2015 02:06:02 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/04/27/write_function_for_go_defer/</guid>
      <description>&lt;p&gt;go-nutsのメーリングリストの記事&#xA;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/Y4MCVZZ3c5sJ&#34;&gt;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/Y4MCVZZ3c5sJ&lt;/a&gt;&#xA;によるとdeferで呼ばれた関数の戻り値は捨てられるそうです。&#xA;&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/UlI77BM2PUkJ&#34;&gt;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/UlI77BM2PUkJ&lt;/a&gt;&#xA;で戻り値の変数に代入するという方法が紹介されていました。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
