<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Postgresql on hnakamur&#39;s blog at github</title>
    <link>/blog/tags/postgresql/</link>
    <description>Recent content in Postgresql on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 23 Jul 2016 21:13:52 +0900</lastBuildDate>
    <atom:link href="/blog/tags/postgresql/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LXDコンテナでPostgreSQLの非同期リプリケーションを試してみた</title>
      <link>/blog/2016/07/23/tried-postgresql-async-replication-in-lxd-containers/</link>
      <pubDate>Sat, 23 Jul 2016 21:13:52 +0900</pubDate>
      
      <guid>/blog/2016/07/23/tried-postgresql-async-replication-in-lxd-containers/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://lets.postgresql.jp/documents/technical/replication/1/&#34;&gt;ストリーミング・レプリケーションの構築 — Let&amp;rsquo;s Postgres&lt;/a&gt; と &lt;a href=&#34;http://d.hatena.ne.jp/hiroe_orz17/20111113/1321180635&#34;&gt;PostgreSQL9.1ためしてみた【非同期レプリケーション編】 - ごろねこ日記&lt;/a&gt; を読んで、2台のLXDコンテナを使ってPostgreSQLの非同期リプリケーションを試してみたのでメモです。&lt;/p&gt;

&lt;p&gt;また&lt;a href=&#34;https://www.packtpub.com/big-data-and-business-intelligence/postgresql-replication-second-edition&#34;&gt;PostgreSQL Replication - Second Edition | PACKT Books&lt;/a&gt;が $10 と安かったので、買って非同期レプリケーションの章まで読みました。&lt;/p&gt;

&lt;p&gt;手順はAnsible playbookとしてまとめました。 &lt;a href=&#34;https://github.com/hnakamur/postgresql-async-replication-example-playbook&#34;&gt;hnakamur/postgresql-async-replication-example-playbook&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;code&gt;ansible.cfg&lt;/code&gt; で &lt;code&gt;ask_vault_pass = True&lt;/code&gt; と指定しているので、プレイブック実行時に &lt;code&gt;Vault password:&lt;/code&gt; と聞かれます。パスワードは &lt;code&gt;password&lt;/code&gt; です。サンプルなので単純なパスワードにしていますが、実案件でのプレイブックはきちんとしたパスワードをつけています。&lt;/p&gt;

&lt;h2 id=&#34;テスト環境構築:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;テスト環境構築&lt;/h2&gt;

&lt;p&gt;ホストマシンのディストリビューションはUbuntu 16.04でLXD 2.0.3, curl, jqをインストール済みの状態で試しました。&lt;/p&gt;

&lt;p&gt;作業ディレクトリを作って、そこに移動し上記のプレイブックを取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/hnakamur/postgresql-async-replication-example-playbook
cd postgresql-async-replication-example-playbook
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lxd_container&lt;/code&gt; モジュールを使うため、 github から最新のAnsibleをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;virtualenv venv
source venv/bin/activate
pip install git+https://github.com/ansible/ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;masterとstandbyのコンテナを作成:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;masterとstandbyのコンテナを作成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;ansible-playbook launch_containers.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると &lt;code&gt;development&lt;/code&gt; というインベントリファイルを生成します。初期状態ではコンテナ &lt;code&gt;pgsql1&lt;/code&gt; が master, コンテナ &lt;code&gt;pgsql2&lt;/code&gt; が standby になります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[development]
pgsql1 postgresql_peer_ipaddr=10.155.92.234 postgressql_master_standby_type=master
pgsql2 postgresql_peer_ipaddr=10.155.92.202 postgressql_master_standby_type=standby

[development:vars]
ansible_connection=lxd
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コンテナ内にpostgresqlの非同期レプリケーションの環境設定:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;コンテナ内にPostgreSQLの非同期レプリケーションの環境設定&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行してセットアップを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-playbook initial_setup.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;完了したら、2つ端末を開いて片方で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lxc exec pgsql1 bash
sudo -u postgres -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行し、もう片方で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lxc exec pgsql2 bash
sudo -u postgres -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行し、データベースを作ったり pgbench を動かしたりして変更が同期されるのを確認します。&lt;/p&gt;

&lt;p&gt;test というデータベースを作ってpgbenchを実行する手順は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;createdb test
/usr/pgsql-9.5/bin/pgbench -i test
/usr/pgsql-9.5/bin/pgbench -T 180 test
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の手順を1歩ずつ試し、 test データベースを作る前は pgsql2 では &lt;code&gt;psql test&lt;/code&gt; が失敗しますが作った後は成功するなどで同期が確認できます。&lt;/p&gt;

&lt;h2 id=&#34;レプリケーションの状態確認:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;レプリケーションの状態確認&lt;/h2&gt;

&lt;h3 id=&#34;master側での確認:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;master側での確認&lt;/h3&gt;

&lt;p&gt;以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;watch -n 0.5 &#39;psql -x -c &amp;quot;SELECT * FROM pg_stat_replication&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Every 0.5s: psql -x -c &amp;quot;SELECT * FROM pg_stat_replication&amp;quot;         Sat Jul 23 12:47:27 2016

-[ RECORD 1 ]----+------------------------------
pid              | 2160
usesysid         | 16384
usename          | repl_user
application_name | walreceiver
client_addr      | 10.155.92.234
client_hostname  |
client_port      | 44822
backend_start    | 2016-07-23 08:34:43.696331+00
backend_xmin     |
state            | streaming
sent_location    | 0/30031E0
write_location   | 0/30031E0
flush_location   | 0/30031E0
replay_location  | 0/30031E0
sync_priority    | 0
sync_state       | async
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;standby側での確認:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;standby側での確認&lt;/h3&gt;

&lt;p&gt;以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;watch -n 0.5 &#39;ps auxww | grep &amp;quot;[p]ostgres:&amp;quot;&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Every 0.5s: ps auxww | grep &amp;quot;[p]ostgres:&amp;quot;                                   Sat Jul 23 12:49:30 2016
ailabl
postgres  2051  0.0  0.0  86736  3420 ?        Ss   08:34   0:00 postgres: logger process
postgres  2052  0.0  0.0 233948  5996 ?        Ss   08:34   0:00 postgres: startup process   recover
ing 000000010000000000000003
postgres  2071  0.0  0.0 234012  7016 ?        Ss   08:34   0:00 postgres: checkpointer process
postgres  2072  0.0  0.0 233912  5916 ?        Ss   08:34   0:00 postgres: writer processl
postgres  2073  0.0  0.0  88856  3444 ?        Ss   08:34   0:00 postgres: stats collector process

postgres  2078  0.0  0.0 240632  7016 ?        Ss   08:34   0:05 postgres: wal receiver process   st
reaming 0/30031E0
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;フェイルオーバー:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;フェイルオーバー&lt;/h2&gt;

&lt;p&gt;masterのPostgreSQLを停止し、 standbyをmasterにpromote (昇格)させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-playbook failover.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;旧masterを新standbyとして稼働再開:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;旧masterを新standbyとして稼働再開&lt;/h2&gt;

&lt;p&gt;ここでインベントリファイル &lt;code&gt;development&lt;/code&gt; 内の &lt;code&gt;postgressql_master_standby_type&lt;/code&gt; 変数の &lt;code&gt;master&lt;/code&gt; と &lt;code&gt;standby&lt;/code&gt; を入れ替えます。&lt;/p&gt;

&lt;p&gt;その後、新standbyのPostgreSQLを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-playbook start_new_standby.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;もし復旧できない自体になった場合は、今のstandbyであるpgsql1 のデータディレクトリを退避して一からリプリケーション環境を構築します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lxc exec pgsql1 -- mv /var/lib/pgsql/9.5/data /var/lib/pgsql/9.5/data.bak
ansible-playbook initial_setup.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;フェイルバック:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;フェイルバック&lt;/h2&gt;

&lt;p&gt;masterとstandbyを入れ替えているので、フェイルバックの手順はフェイルオーバーと同じです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-playbook failover.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コンテナの削除:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;コンテナの削除&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;ansible-playbook delete_containers.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ansible-vaultを使う際の変数命名規則のtips:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;Ansible vaultを使う際の変数命名規則のtips&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;ansible-vault encrypt&lt;/code&gt; で暗号化したファイルの内容を確認するには &lt;code&gt;ansible-vault decrypt&lt;/code&gt; で復号化する必要があります。どんな変数があったかを確認する度に行うのは面倒なので、以下のように暗号化するファイル内で定義する変数を一旦別の変数で受け取ってplaybookではそれを参照するようにしました。&lt;/p&gt;

&lt;p&gt;playbookの構成として環境ごとに development, production のようにグループを分けるようにしています（このサンプルでは development だけです）。暗号化するファイルとしないファイルを以下のような配置で作っています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;group_vars/development/secrets.yml
group_vars/development/vars.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;group_vars/development/secrets.yml&lt;/code&gt; では&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;development:
  secrets:
    postgresql_replication_password: _YOUR_PASSWORD_HERE_
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように定義します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;group_vars/development/vars.yml&lt;/code&gt; では&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;postgresql_replication_password: &amp;quot;{{ development.secrets.postgresql_replication_password }}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにその変数を参照するようにするという具合です。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:d1a3148f1e3eab3f266598e4a5977fd4&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;LXDを使えば複数サーバ構成のテスト環境も簡単に作れてとても便利です！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>