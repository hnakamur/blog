<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>deb on hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/tags/deb/</link>
    <description>Recent content in deb on hnakamur&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Fri, 15 Jun 2018 10:55:00 +0900</lastBuildDate><atom:link href="https://hnakamur.github.io/blog/tags/deb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go-carbonのdebパッケージをsbuildとPPAでビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</link>
      <pubDate>Fri, 15 Jun 2018 10:55:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</guid>
      <description>はじめに lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister のdebパッケージをsbuildとPPAでビルドしたときのメモです。 成果物は以下に有ります。 PPA: go-carbon : Hiroaki Nakamura d</description>
    </item>
    
    <item>
      <title>sbuildで外部レポジトリを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</link>
      <pubDate>Fri, 15 Jun 2018 10:12:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</guid>
      <description>はじめに 外部レポジトリのdebパッケージに依存したdebパッケージをsbuildでビルドするための手順メモです。 以下の2つの方法がありますが</description>
    </item>
    
    <item>
      <title>PPAでのビルドの予行演習にsbuildを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</link>
      <pubDate>Wed, 13 Jun 2018 18:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</guid>
      <description>はじめに PPAでビルドする前に手元でビルドが通ることを確認したくてpbuilderを使っていましたが、pbuilderではビルドが通るのにP</description>
    </item>
    
    <item>
      <title>universal-ctagsのUbuntu 18.04 LTS用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Fri, 08 Jun 2018 00:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</guid>
      <description>はじめに ctagsというと Ubuntu 18.04 LTS には exuberant-ctags (1:5.9~svn20110310-11) というパッケージがあります。ですが、バージョン番号のsvnの後の日付が2011年とあるようにかなり古</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTSでsbuildをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</link>
      <pubDate>Thu, 07 Jun 2018 21:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</guid>
      <description>はじめに 手元でpbuilderでdebパッケージのビルドが通ってからPPAでビルドしたらテストの1つがエラーになるという問題が起きてしまい、</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Wed, 23 May 2018 14:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</guid>
      <description>はじめに rtagsのdebパッケージを作成した のときのメモを端折りすぎて、Ubuntu 18.04 LTS用に rtags 2.18のパッケージを作ろうと思ったら苦</description>
    </item>
    
    <item>
      <title>debパッケージを使ってnginxモジュールをビルド・デバッグする</title>
      <link>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</link>
      <pubDate>Thu, 10 May 2018 09:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</guid>
      <description>はじめに 私は 私のnginxのカスタムrpmとdebをビルドする手順 でサードパーティモジュールを含んだnginxのパッケージをビルドしています</description>
    </item>
    
    <item>
      <title>apt-markを使ってdebパッケージのバージョン固定</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</link>
      <pubDate>Fri, 04 May 2018 21:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</guid>
      <description>はじめに nginx にはmainline版とstable版がありますが、 どのバージョンのnginxを使うべきか？ - 考える人、コードを書く人 を参考に私は</description>
    </item>
    
    <item>
      <title>go1.10rc1のdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</link>
      <pubDate>Sun, 28 Jan 2018 21:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</guid>
      <description>はじめに golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした 以降go1.9.xのdebパッケージを git-buildpackage で作っていましたが、今回</description>
    </item>
    
    <item>
      <title>rtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2017/09/05/built-rtags-deb/</link>
      <pubDate>Tue, 05 Sep 2017 23:07:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/05/built-rtags-deb/</guid>
      <description>はじめに 最強のC/C++インデクサー &amp;ldquo;Rtags&amp;rdquo; を本気で使う - Qiita で Andersbakken/rtags: A c/c++ client/server indexer for c/c++/objc[++] with integration for Emacs based on clang. の存在を知り、deb パッケージを作ってみたのでメモです。</description>
    </item>
    
    <item>
      <title>terminal機能を有効にしたvim8のdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2017/09/05/built-terminal-enabled-vim8-deb/</link>
      <pubDate>Tue, 05 Sep 2017 22:38:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/05/built-terminal-enabled-vim8-deb/</guid>
      <description>はじめに terminal機能を有効にしたvim8のdebパッケージを作成したのでメモです。 インストール方法 ビルドしたパッケージは vim : Hiroaki Nakamura で公</description>
    </item>
    
    <item>
      <title>pbuilderのchroot環境にレポジトリを追加する</title>
      <link>https://hnakamur.github.io/blog/2017/09/02/add-repositories-to-pbuilder-chroot-images/</link>
      <pubDate>Sat, 02 Sep 2017 16:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/02/add-repositories-to-pbuilder-chroot-images/</guid>
      <description>はじめに pbuilder を使っていくつかdebパッケージを作ってみて、chroot環境をカスタマイズするベストプラクティスが自分の中で出来たのでメモです。</description>
    </item>
    
    <item>
      <title>add-apt-repositoryを使わずにPPAをapt-lineに追加する方法</title>
      <link>https://hnakamur.github.io/blog/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</link>
      <pubDate>Sat, 02 Sep 2017 11:47:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</guid>
      <description>2022-05-17 追記：代替スクリプトを書きました https://github.com/hnakamur/setup-my-ubuntu-desktop/blob/main/my-apt-add-repository 事前に curl, gpg, coreutils パッケージがインストールされている必要があります。 使用例 my-apt-add-repository ppa:hnakamur/nginx GPG公開鍵の登録は 第675回 a</description>
    </item>
    
    <item>
      <title>git-buildpackageとfreightでパスフレーズをファイルから入力させる</title>
      <link>https://hnakamur.github.io/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</link>
      <pubDate>Mon, 28 Aug 2017 22:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</guid>
      <description>はじめに git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順 の gbp buildpackage でソースパッケージをビルドする時と f</description>
    </item>
    
    <item>
      <title>freightでプライベートdebレポジトリ作成</title>
      <link>https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/</link>
      <pubDate>Sat, 05 Aug 2017 17:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/</guid>
      <description>はじめに CentOS だとカスタムrpmを作って yum install rpmファイル名 で依存パッケージとともにインストールできますが、Ubuntuだと dpkg -i debファイル名</description>
    </item>
    
    <item>
      <title>golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</link>
      <pubDate>Sat, 05 Aug 2017 10:15:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</guid>
      <description>はじめに Ubuntu · golang/go Wiki で紹介されている Golang Backports : Simon Eisenmann を改変してgo 1.9rc1のUbuntu 16.04用debパッケージをビルドしたのでメモです。 golang 1.9</description>
    </item>
    
    <item>
      <title>nginx&#43;luaのカスタムdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</link>
      <pubDate>Tue, 18 Jul 2017 15:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</guid>
      <description>はじめに ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた 、 git-buildpackag</description>
    </item>
    
    <item>
      <title>git-buildpackageのpatch-queue機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</link>
      <pubDate>Fri, 14 Jul 2017 11:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</guid>
      <description>はじめに ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた で quilt を使ったパッチ適用を経験して</description>
    </item>
    
    <item>
      <title>ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</link>
      <pubDate>Fri, 14 Jul 2017 06:07:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</guid>
      <description>はじめに Nginxのリバースプロキシでバックエンドとhttp2通信する - ASnoKaze blog で紹介されていたngx_http_v2_upstreamモジュー</description>
    </item>
    
    <item>
      <title>git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順</title>
      <link>https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/</link>
      <pubDate>Wed, 05 Jul 2017 21:04:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/</guid>
      <description>はじめに git-buildpackage を使ってカスタムdebパッケージをビルドして Personal Package Archives : Ubuntu (PPA) にアップロードする手順のメモです。 自分で試行錯誤してまとめた手順なので、他</description>
    </item>
    
  </channel>
</rss>
