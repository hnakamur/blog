<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Deb on hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/tags/deb/</link>
    <description>Recent content in Deb on hnakamur&#39;s blog</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 17 May 2022 21:50:00 +0900</lastBuildDate>
    <atom:link href="https://hnakamur.github.io/blog/tags/deb/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>go-carbonのdebパッケージをsbuildとPPAでビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</link>
      <pubDate>Fri, 15 Jun 2018 10:55:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/lomik/go-carbon&#34;&gt;lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister&lt;/a&gt;&#xA;のdebパッケージをsbuildとPPAでビルドしたときのメモです。&lt;/p&gt;&#xA;&lt;p&gt;成果物は以下に有ります。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;PPA: &lt;a href=&#34;https://launchpad.net/~hnakamur/+archive/ubuntu/go-carbon&#34;&gt;go-carbon : Hiroaki Nakamura&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;debソースレポジトリ: &lt;a href=&#34;https://github.com/hnakamur/go-carbon-deb&#34;&gt;hnakamur/go-carbon-deb: go-carbon deb package for Ubuntu 18.04 LTS&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h1 id=&#34;debianでのgoのパッケージング方針&#34;&gt;debianでのgoのパッケージング方針&lt;/h1&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://wiki.debian.org/MichaelStapelberg/GoPackaging&#34;&gt;MichaelStapelberg/GoPackaging - Debian Wiki&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://go-team.pages.debian.net/packaging.html&#34;&gt;Debian Go Packaging&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;に書いてあります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>sbuildで外部レポジトリを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</link>
      <pubDate>Fri, 15 Jun 2018 10:12:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;外部レポジトリのdebパッケージに依存したdebパッケージをsbuildでビルドするための手順メモです。&lt;/p&gt;&#xA;&lt;p&gt;以下の2つの方法がありますが、別のchroot環境を作る必要がないので2つめのほうが良いです。1つめの方法は別の用途にも使えるかもしれないので一応メモしておきます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>PPAでのビルドの予行演習にsbuildを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</link>
      <pubDate>Wed, 13 Jun 2018 18:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;PPAでビルドする前に手元でビルドが通ることを確認したくてpbuilderを使っていましたが、pbuilderではビルドが通るのにPPAでは通らないケースが何度か起きたのでsbuildを使い始めました。使い方がある程度わかってきたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>universal-ctagsのUbuntu 18.04 LTS用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Fri, 08 Jun 2018 00:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;ctagsというと Ubuntu 18.04 LTS には&#xA;&lt;a href=&#34;https://packages.ubuntu.com/bionic/exuberant-ctags&#34;&gt;exuberant-ctags (1:5.9~svn20110310-11)&lt;/a&gt;&#xA;というパッケージがあります。ですが、バージョン番号のsvnの後の日付が2011年とあるようにかなり古いです。&lt;/p&gt;&#xA;&lt;p&gt;検索してみると&#xA;&lt;a href=&#34;https://github.com/universal-ctags/ctags&#34;&gt;universal-ctags/ctags: A maintained ctags implementation&lt;/a&gt;&#xA;活発に開発されているので、こちらを使うことにしました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04 LTSでsbuildをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</link>
      <pubDate>Thu, 07 Jun 2018 21:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;手元でpbuilderでdebパッケージのビルドが通ってからPPAでビルドしたらテストの1つがエラーになるという問題が起きてしまい、ビルドログを見てみると以下のような行があって &lt;code&gt;sbuild&lt;/code&gt; を使っていることに気づきました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Wed, 23 May 2018 14:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/09/05/built-rtags-deb/&#34;&gt;rtagsのdebパッケージを作成した&lt;/a&gt; のときのメモを端折りすぎて、Ubuntu 18.04 LTS用に rtags 2.18のパッケージを作ろうと思ったら苦労したのでメモしておきます。&lt;/p&gt;&#xA;&lt;h1 id=&#34;ビルドのメモ&#34;&gt;ビルドのメモ&lt;/h1&gt;&#xA;&lt;h2 id=&#34;参考-gcc-8とllvm-60入りのpbuilderのchroot環境作成&#34;&gt;(参考) gcc-8とLLVM 6.0入りのpbuilderのchroot環境作成&lt;/h2&gt;&#xA;&lt;p&gt;よくよく考えたらこの手順は不要ですが、今後別件で使うかもしれないのでメモ。&lt;/p&gt;</description>
    </item>
    <item>
      <title>debパッケージを使ってnginxモジュールをビルド・デバッグする</title>
      <link>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</link>
      <pubDate>Thu, 10 May 2018 09:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;私は &lt;a href=&#34;https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/&#34;&gt;私のnginxのカスタムrpmとdebをビルドする手順&lt;/a&gt; でサードパーティモジュールを含んだnginxのパッケージをビルドしています。&lt;/p&gt;&#xA;&lt;p&gt;このパッケージに自作モジュールを追加して開発するためのビルド手順を考えてみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>apt-markを使ってdebパッケージのバージョン固定</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</link>
      <pubDate>Fri, 04 May 2018 21:05:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://nginx.org/&#34;&gt;nginx&lt;/a&gt; にはmainline版とstable版がありますが、&#xA;&lt;a href=&#34;https://bokko.hatenablog.com/entry/2014/05/24/220554&#34;&gt;どのバージョンのnginxを使うべきか？ - 考える人、コードを書く人&lt;/a&gt; を参考に私はmainline版をベースにして &lt;a href=&#34;https://github.com/openresty/lua-nginx-module/&#34;&gt;openresty/lua-nginx-module&lt;/a&gt; などのモジュールを加えたカスタムdebパッケージを作っています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>go1.10rc1のdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</link>
      <pubDate>Sun, 28 Jan 2018 21:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/08/05/built-golang-1.9rc1-deb-package/&#34;&gt;golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした&lt;/a&gt; 以降go1.9.xのdebパッケージを &lt;a href=&#34;https://honk.sigxcpu.org/piki/projects/git-buildpackage/&#34;&gt;git-buildpackage&lt;/a&gt; で作っていましたが、今回 go1.10rc1 のdebパッケージを作ってみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>rtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2017/09/05/built-rtags-deb/</link>
      <pubDate>Tue, 05 Sep 2017 23:07:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/05/built-rtags-deb/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://qiita.com/kota65535/items/39aa4d6e8adf6ab5f98c&#34;&gt;最強のC/C++インデクサー &amp;ldquo;Rtags&amp;rdquo; を本気で使う - Qiita&lt;/a&gt; で&#xA;&lt;a href=&#34;https://github.com/Andersbakken/rtags&#34;&gt;Andersbakken/rtags: A c/c++ client/server indexer for c/c++/objc[++] with integration for Emacs based on clang.&lt;/a&gt;&#xA;の存在を知り、deb パッケージを作ってみたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;rtags は emacs 連携が入っているのですが、私は vim ユーザで emacs 使って無くて動作確認するのが面倒なので、自作 deb パッケージでは emacs 連携は外しています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>terminal機能を有効にしたvim8のdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2017/09/05/built-terminal-enabled-vim8-deb/</link>
      <pubDate>Tue, 05 Sep 2017 22:38:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/05/built-terminal-enabled-vim8-deb/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;terminal機能を有効にしたvim8のdebパッケージを作成したのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストール方法&#34;&gt;インストール方法&lt;/h2&gt;&#xA;&lt;p&gt;ビルドしたパッケージは&#xA;&lt;a href=&#34;https://launchpad.net/~hnakamur/+archive/ubuntu/vim&#34;&gt;vim : Hiroaki Nakamura&lt;/a&gt;&#xA;で公開しています。&lt;/p&gt;&#xA;&lt;p&gt;以下の手順でインストール出来ます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>pbuilderのchroot環境にレポジトリを追加する</title>
      <link>https://hnakamur.github.io/blog/2017/09/02/add-repositories-to-pbuilder-chroot-images/</link>
      <pubDate>Sat, 02 Sep 2017 16:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/02/add-repositories-to-pbuilder-chroot-images/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://pbuilder.alioth.debian.org/&#34;&gt;pbuilder&lt;/a&gt; を使っていくつかdebパッケージを作ってみて、chroot環境をカスタマイズするベストプラクティスが自分の中で出来たのでメモです。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Ubuntu Xenialと同じapt-lineを使いたい&lt;/li&gt;&#xA;&lt;li&gt;xenial-updates にあるパッケージを使いたい&lt;/li&gt;&#xA;&lt;li&gt;PPAにあるgcc 7を使いたい&lt;/li&gt;&#xA;&lt;li&gt;ローカルにある自作debパッケージを使いたい&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;というニーズを満たすためのものです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>add-apt-repositoryを使わずにPPAをapt-lineに追加する方法</title>
      <link>https://hnakamur.github.io/blog/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</link>
      <pubDate>Sat, 02 Sep 2017 11:47:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</guid>
      <description>&lt;h2 id=&#34;2022-05-17-追記代替スクリプトを書きました&#34;&gt;2022-05-17 追記：代替スクリプトを書きました&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/setup-my-ubuntu-desktop/blob/main/my-apt-add-repository&#34;&gt;https://github.com/hnakamur/setup-my-ubuntu-desktop/blob/main/my-apt-add-repository&lt;/a&gt;&lt;/p&gt;&#xA;&lt;p&gt;事前に curl, gpg, coreutils パッケージがインストールされている必要があります。&lt;/p&gt;&#xA;&lt;p&gt;使用例&lt;/p&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;my-apt-add-repository ppa:hnakamur/nginx&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;p&gt;GPG公開鍵の登録は &lt;a href=&#34;https://gihyo.jp/admin/serial/01/ubuntu-recipe/0675&#34;&gt;第675回　apt-keyはなぜ廃止予定となったのか：Ubuntu Weekly Recipe｜gihyo.jp … 技術評論社&lt;/a&gt; で解説されている手順に沿っています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git-buildpackageとfreightでパスフレーズをファイルから入力させる</title>
      <link>https://hnakamur.github.io/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</link>
      <pubDate>Mon, 28 Aug 2017 22:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/&#34;&gt;git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順&lt;/a&gt;&#xA;の &lt;code&gt;gbp buildpackage&lt;/code&gt; でソースパッケージをビルドする時と&#xA;&lt;a href=&#34;https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/&#34;&gt;freightでプライベートdebレポジトリ作成&lt;/a&gt;&#xA;の &lt;code&gt;freight cache&lt;/code&gt; でレポジトリを更新する際にgpgのパスフレーズを入力する必要があります。&lt;/p&gt;&#xA;&lt;p&gt;何度も実行しているとパスワードマネージャからコピペするのが面倒になってきてファイルから入力する方法を調べたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>freightでプライベートdebレポジトリ作成</title>
      <link>https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/</link>
      <pubDate>Sat, 05 Aug 2017 17:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;CentOS だとカスタムrpmを作って &lt;code&gt;yum install rpmファイル名&lt;/code&gt; で依存パッケージとともにインストールできますが、Ubuntuだと &lt;code&gt;dpkg -i debファイル名&lt;/code&gt; でインストールは出来ますが依存パッケージは入りません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</link>
      <pubDate>Sat, 05 Aug 2017 10:15:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/Ubuntu&#34;&gt;Ubuntu · golang/go Wiki&lt;/a&gt; で紹介されている&#xA;&lt;a href=&#34;https://launchpad.net/~longsleep/+archive/ubuntu/golang-backports&#34;&gt;Golang Backports : Simon Eisenmann&lt;/a&gt; を改変してgo 1.9rc1のUbuntu 16.04用debパッケージをビルドしたのでメモです。&lt;/p&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://launchpad.net/~hnakamur/+archive/ubuntu/golang-1.9&#34;&gt;golang 1.9 : Hiroaki Nakamura&lt;/a&gt; というPPAで配布しています。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginx&#43;luaのカスタムdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</link>
      <pubDate>Tue, 18 Jul 2017 15:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/&#34;&gt;ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた&lt;/a&gt; 、 &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/14/tried-git-buildpackage-patch-queue/&#34;&gt;git-buildpackageのpatch-queue機能を試してみた&lt;/a&gt; の続きです。&lt;/p&gt;&#xA;&lt;p&gt;私はCentOS 6と7用のnginx + luaのカスタムrpmを&#xA;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm&#34;&gt;hnakamur/nginx-rpm: A Dockerfile to build nginx rpm for CentOS 6 and 7 using fedora copr&lt;/a&gt;&#xA;で作っていましたが、それとほぼ同じ内容のdebパッケージを作ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git-buildpackageのpatch-queue機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</link>
      <pubDate>Fri, 14 Jul 2017 11:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/&#34;&gt;ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた&lt;/a&gt; で &lt;code&gt;quilt&lt;/code&gt; を使ったパッチ適用を経験してみて、不慣れなこともありちょっと面倒な気がしました。&lt;/p&gt;&#xA;&lt;p&gt;そこで、 &lt;code&gt;git-buildpackage&lt;/code&gt; の `Working with patches](&lt;a href=&#34;http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.patches.html&#34;&gt;http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.patches.html&lt;/a&gt;) を試してみることにしました。&lt;/p&gt;&#xA;&lt;p&gt;前回作業したgitのレポジトリで以下のコミットに戻してから、以下の手順を試しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</link>
      <pubDate>Fri, 14 Jul 2017 06:07:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://asnokaze.hatenablog.com/entry/2017/07/03/083530&#34;&gt;Nginxのリバースプロキシでバックエンドとhttp2通信する - ASnoKaze blog&lt;/a&gt; で紹介されていたngx_http_v2_upstreamモジュールを組み込んだnginxのdebianパッケージを作ってみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順</title>
      <link>https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/</link>
      <pubDate>Wed, 05 Jul 2017 21:04:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://honk.sigxcpu.org/piki/projects/git-buildpackage/&#34;&gt;git-buildpackage&lt;/a&gt; を使ってカスタムdebパッケージをビルドして &lt;a href=&#34;https://launchpad.net/ubuntu/+ppas&#34;&gt;Personal Package Archives : Ubuntu&lt;/a&gt; (PPA) にアップロードする手順のメモです。&lt;/p&gt;&#xA;&lt;p&gt;自分で試行錯誤してまとめた手順なので、他のニーズには合わなかったり、改善の余地があるかもしれません。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
