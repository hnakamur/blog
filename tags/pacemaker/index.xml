<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Pacemaker on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/pacemaker/index.xml</link>
    <description>Recent content in Pacemaker on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/tags/pacemaker/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Pacemakerを使ってPostgreSQLのアクティブ・スタンバイ(1&#43;1構成)を試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/08/21/experiment-postgresql-active-standby-cluster-using-pacemaker/</link>
      <pubDate>Sun, 21 Aug 2016 11:23:01 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/08/21/experiment-postgresql-active-standby-cluster-using-pacemaker/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;STONITH無し、quorum無しのアクティブ・スタンバイ(1+1構成)がとりあえず動くところまでは来たので、一旦メモです。&lt;/p&gt;

&lt;h2 id=&#34;参考資料&#34;&gt;参考資料&lt;/h2&gt;

&lt;p&gt;以下の資料と連載記事がわかりやすくて非常に参考になりました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linux-ha.osdn.jp/wp/archives/3244&#34;&gt;JPUG 第23回しくみ+アプリケーション勉強会 セミナー資料公開 « Linux-HA Japan&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://linux-ha.osdn.jp/wp/wp-content/uploads/pacemaker_20120526JPUG.pdf&#34;&gt;HAクラスタでPostgreSQLを高可用化(前編) ～Pacemaker入門編～(PDF)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linux-ha.osdn.jp/wp/wp-content/uploads/b754c737d835c2546415009387407b7b.pdf&#34;&gt;PostgreSQLを高可用化(後編) 〜レプリケーション編〜(PDF)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://linux-ha.osdn.jp/wp/archives/3589&#34;&gt;OSC 2013 Tokyo/Spring 講演資料公開 « Linux-HA Japan&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://www.slideshare.net/takmatsuo/osc-tokyospring2013-16694861&#34;&gt;Pacemaker+PostgreSQLレプリケーションで共有ディスクレス高信頼クラスタの構築＠OSC 2013 Tokyo/Spring&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://gihyo.jp/admin/serial/01/pacemaker&#34;&gt;Pacemakerでかんたんクラスタリング体験してみよう！：連載｜gihyo.jp … 技術評論社&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;さらに以下の記事と電子書籍も参考にしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://clusterlabs.org/wiki/PgSQL_Replicated_Cluster&#34;&gt;PgSQL Replicated Cluster - ClusterLabs&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://shop.oreilly.com/product/9781783550609.do&#34;&gt;PostgreSQL Replication, 2nd Edition - O&amp;rsquo;Reilly Media&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;テスト用のansible-playbook&#34;&gt;テスト用のAnsible playbook&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/postgresql-pacemaker-example-playbook&#34;&gt;https://github.com/hnakamur/postgresql-pacemaker-example-playbook&lt;/a&gt;
に置きました。&lt;/p&gt;

&lt;p&gt;LXD をセットアップ済みの Ubuntu 16.04 上で試しました。&lt;/p&gt;

&lt;h2 id=&#34;セットアップの事前準備&#34;&gt;セットアップの事前準備&lt;/h2&gt;

&lt;p&gt;上記のplaybookを取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/hnakamur/postgresql-pacemaker-example-playbook
cd postgresql-pacemaker-example-playbook
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Ansibleの &lt;code&gt;lxd_container&lt;/code&gt; モジュールを使うので、virtualenvで仮想環境を作ってAnsibleのmaster版をインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;virtualenv venv
source venv/bin/activate
pip install git+https://github.com/ansible/ansible
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今回はコンテナのIPアドレスをDHCPではなく静的アドレスを使うようにしてみました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/default/lxd-bridge&lt;/code&gt; の &lt;code&gt;LXD_IPV4_DHCP_RANGE&lt;/code&gt; に DHCP のアドレス範囲が設定されているので、ファイルを編集して範囲を狭めます。私の環境では以下のようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;## IPv4 network (e.g. 10.0.8.0/24)
LXD_IPV4_NETWORK=&amp;quot;10.155.92.1/24&amp;quot;

## IPv4 DHCP range (e.g. 10.0.8.2,10.0.8.254)
LXD_IPV4_DHCP_RANGE=&amp;quot;10.155.92.200,10.155.92.254&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LXDをインストールしたときに &lt;code&gt;LXD_IPV4_NETWORK&lt;/code&gt; はランダムなアドレスになるかあるいは自分で指定しますので、それに応じた値に適宜変更してください。&lt;/p&gt;

&lt;p&gt;変更したら &lt;code&gt;lxd-bridge&lt;/code&gt; を再起動して変更を反映します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo systemctl restart lxd-bridge
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;group_vars/development/vars.yml&lt;/code&gt; ファイル内のIPアドレスも適宜変更します。&lt;/p&gt;

&lt;p&gt;また、 &lt;code&gt;group_vars/development/secrets.yml&lt;/code&gt; 内にパスワードやsshの鍵ペアなどが含まれています。これを違う値に変更したい場合は以下のようにします。&lt;/p&gt;

&lt;p&gt;まず、以下のコマンドを実行して一旦復号化します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-vault decrypt group_vars/development/secrets.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vaultのパスワードを聞かれますので入力します。この例では &lt;code&gt;password&lt;/code&gt; としています。これはあくまで例なのでこういう弱いパスワードにしていますが、実際の案件で使うときは、もっと強いパスワードを指定してください。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;group_vars/development/secrets.yml&lt;/code&gt; 内の変数を適宜変更したら、以下のコマンドを実行して暗号化します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ansible-vault encrypt group_vars/development/secrets.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vaultの新しいパスワードを聞かれますので入力してください。&lt;/p&gt;

&lt;h2 id=&#34;コンテナの作成&#34;&gt;コンテナの作成&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行して &lt;code&gt;node1&lt;/code&gt; と &lt;code&gt;node2&lt;/code&gt; という2つのコンテナを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ansible-playbook launch_containers.yml -D -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;vaultのパスワードを聞かれますので入力してください。&lt;/p&gt;

&lt;h2 id=&#34;コンテナ内にpostgresqlとpacemakerをセットアップ&#34;&gt;コンテナ内にPostgreSQLとPacemakerをセットアップ&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行して、コンテナ内にPostgreSQLとPacemakerをセットアップします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ansible-playbook setup_containers.yml -D -v
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは、セットアップ完了後、アクティブスタンバイ構成が開始するまでの時間を図りたいので、以下のように &lt;code&gt;date -u&lt;/code&gt; コマンドも実行するようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ansible-playbook setup_containers.yml -D -v; date -u
…(略)…
Sun Aug 21 13:51:21 UTC 2016
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドを実行して &lt;code&gt;node2&lt;/code&gt; コンテナに入ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc exec node2 bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドを実行して、クラスタの状態をモニターします。
&lt;code&gt;node1&lt;/code&gt;, &lt;code&gt;node2&lt;/code&gt; が両方 Slaves の状態を経て、 &lt;code&gt;node1&lt;/code&gt; が Master になり master-ip が &lt;code&gt;node1&lt;/code&gt; につくまで待ちます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Last updated: Sun Aug 21 13:52:07 2016          Last change: Sun Aug 21 13:52:03 2016 by root via crm_attribute on node1
Stack: corosync
Current DC: node1 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 3 resources configured

Online: [ node1 node2 ]

 Master/Slave Set: pgsql-master [pgsql]
     Masters: [ node1 ]
     Slaves: [ node2 ]
master-ip       (ocf::heartbeat:IPaddr2):       Started node1

Node Attributes:
* Node node1:
    + master-pgsql                      : 1000
    + pgsql-data-status                 : LATEST
    + pgsql-master-baseline             : 0000000003000098
    + pgsql-status                      : PRI
    + pgsql-xlog-loc                    : 0000000003000098
* Node node2:
    + master-pgsql                      : -INFINITY
    + pgsql-data-status                 : STREAMING|ASYNC
    + pgsql-status                      : HS:async
    + pgsql-xlog-loc                    : 0000000003000000

Migration Summary:
* Node node2:
* Node node1:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この端末は開いたままにしておきます。&lt;/p&gt;

&lt;h2 id=&#34;node1-コンテナを強制停止してフェールオーバのテスト&#34;&gt;node1 コンテナを強制停止してフェールオーバのテスト&lt;/h2&gt;

&lt;p&gt;別の端末を開いて以下のコマンドを実行し、 &lt;code&gt;node1&lt;/code&gt; コンテナを強制停止し時刻を記録します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc stop -f node1; date -u
Sun Aug 21 13:52:57 UTC 2016
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しばらくすると　&lt;code&gt;crm_mon -fA&lt;/code&gt; の出力が以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Last updated: Sun Aug 21 13:53:11 2016          Last change: Sun Aug 21 13:53:05 2016 by root via crm_attribute on node2
Stack: corosync
Current DC: node2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 3 resources configured

Online: [ node2 ]
OFFLINE: [ node1 ]

 Master/Slave Set: pgsql-master [pgsql]
     Masters: [ node2 ]
master-ip       (ocf::heartbeat:IPaddr2):       Started node2

Node Attributes:
* Node node2:
    + master-pgsql                      : 1000
    + pgsql-data-status                 : LATEST
    + pgsql-master-baseline             : 00000000030001A8
    + pgsql-status                      : PRI
    + pgsql-xlog-loc                    : 0000000003000000

Migration Summary:
* Node node2:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;LXDホストで以下のコマンドを実行して &lt;code&gt;node1&lt;/code&gt; を起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc start node1; date -u
Sun Aug 21 13:53:58 UTC 2016
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動後しばらくしても &lt;code&gt;node1&lt;/code&gt; はオフラインのままですが、これは意図した挙動です。実際のケースではディスク障害などが起きているかもしれないので、マシンの状況を確認してから手動でクラスタに復帰させることになるためです。&lt;/p&gt;

&lt;p&gt;以下のコマンドで &lt;code&gt;node1&lt;/code&gt; コンテナに入ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc exec node1 bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PacemakerがPostgreSQLのロックファイルを作っているのでそれを削除します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@node1 ~]# ll /var/run/postgresql/
total 4
-rw-r----- 1 root     root      0 Aug 21 13:52 PGSQL.lock
-rw-r----- 1 postgres postgres 36 Aug 21 13:52 rep_mode.conf
[root@node1 ~]# rm /var/run/postgresql/PGSQL.lock
rm: remove regular empty file &#39;/var/run/postgresql/PGSQL.lock&#39;? y
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドで &lt;code&gt;node1&lt;/code&gt; をクラスタに復帰させ、時刻を記録します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@node1 ~]# pcs cluster start node1; date -u
node1: Starting Cluster...
Sun Aug 21 13:55:30 UTC 2016
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;15秒後、 &lt;code&gt;crm_mon -fA&lt;/code&gt; の画面で &lt;code&gt;node1&lt;/code&gt; の PostgreSQL が Slaves に追加されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Last updated: Sun Aug 21 13:55:45 2016          Last change: Sun Aug 21 13:55:42 2016 by root via crm_attribute on node2
Stack: corosync
Current DC: node2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 3 resources configured

Online: [ node1 node2 ]

 Master/Slave Set: pgsql-master [pgsql]
     Masters: [ node2 ]
     Slaves: [ node1 ]
master-ip       (ocf::heartbeat:IPaddr2):       Started node2

Node Attributes:
* Node node1:
    + master-pgsql                      : 100
    + pgsql-data-status                 : STREAMING|SYNC
    + pgsql-status                      : HS:sync
* Node node2:
    + master-pgsql                      : 1000
    + pgsql-data-status                 : LATEST
    + pgsql-master-baseline             : 00000000030001A8
    + pgsql-status                      : PRI
    + pgsql-xlog-loc                    : 0000000003000000

Migration Summary:
* Node node2:
* Node node1:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここで、 &lt;code&gt;node2&lt;/code&gt; で &lt;code&gt;crm_mon -fA&lt;/code&gt; を実行していた端末で Control-C を入力してモニターを終了します。&lt;/p&gt;

&lt;h2 id=&#34;postgresqlのプロセスを強制終了してフェールオーバのテスト&#34;&gt;PostgreSQLのプロセスを強制終了してフェールオーバのテスト&lt;/h2&gt;

&lt;p&gt;今度は &lt;code&gt;node2&lt;/code&gt; の PostgreSQL のプロセスを強制終了してフェールオーバしてみます。&lt;/p&gt;

&lt;p&gt;経過を見るために &lt;code&gt;node1&lt;/code&gt; で以下のコマンドを実行して、その端末を開いたままにしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@node1 ~]# crm_mon -fA
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;開始時点では以下のような出力になっていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Last updated: Sun Aug 21 13:57:17 2016          Last change: Sun Aug 21 13:55:42 2016 by root via crm_attribute on node2
Stack: corosync
Current DC: node2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 3 resources configured

Online: [ node1 node2 ]

 Master/Slave Set: pgsql-master [pgsql]
     Masters: [ node2 ]
     Slaves: [ node1 ]
master-ip       (ocf::heartbeat:IPaddr2):       Started node2

Node Attributes:
* Node node1:
    + master-pgsql                      : 100
    + pgsql-data-status                 : STREAMING|SYNC
    + pgsql-status                      : HS:sync
* Node node2:
    + master-pgsql                      : 1000
    + pgsql-data-status                 : LATEST
    + pgsql-master-baseline             : 00000000030001A8
    + pgsql-status                      : PRI
    + pgsql-xlog-loc                    : 0000000003000000

Migration Summary:
* Node node2:
* Node node1:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;node2&lt;/code&gt; で以下のコマンドを実行して PostgreSQL のプロセスを強制終了し、時刻を記録します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@node2 ~]# kill -KILL `head -1 /var/lib/pgsql/9.5/data/postmaster.pid`; date -u
Sun Aug 21 13:58:20 UTC 2016
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;11秒後 &lt;code&gt;node1&lt;/code&gt; の PostgreSQL が Masterに昇格されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Last updated: Sun Aug 21 13:58:31 2016          Last change: Sun Aug 21 13:58:27 2016 by root via crm_attribute on node1
Stack: corosync
Current DC: node2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 3 resources configured

Online: [ node1 node2 ]

 Master/Slave Set: pgsql-master [pgsql]
     Masters: [ node1 ]
master-ip       (ocf::heartbeat:IPaddr2):       Started node1

Node Attributes:
* Node node1:
    + master-pgsql                      : 1000
    + pgsql-data-status                 : LATEST
    + pgsql-master-baseline             : 0000000003000398
    + pgsql-status                      : PRI
* Node node2:
    + master-pgsql                      : -INFINITY
    + pgsql-data-status                 : DISCONNECT
    + pgsql-status                      : STOP

Migration Summary:
* Node node2:
   pgsql: migration-threshold=2 fail-count=1000000 last-failure=&#39;Sun Aug 21 13:58:23 2016&#39;
* Node node1:

Failed Actions:
* pgsql_start_0 on node2 &#39;unknown error&#39; (1): call=23, status=complete, exitreason=&#39;My data may be inconsistent. You have to remove /va
r/run/postgresql/PGSQL.lock file to force start.&#39;,
    last-rc-change=&#39;Sun Aug 21 13:58:23 2016&#39;, queued=0ms, exec=383ms
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に、 &lt;code&gt;node2&lt;/code&gt; の PostgreSQL を再び稼働してスタンバイにさせてみます。&lt;/p&gt;

&lt;p&gt;まず Pacemaker が作成した PostgreSQL のロックファイル &lt;code&gt;/var/run/postgresql/PGSQL.lock&lt;/code&gt; を削除します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@node2 ~]# ll /var/run/postgresql/
total 4
-rw-r----- 1 root     root      0 Aug 21 13:53 PGSQL.lock
-rw-r----- 1 postgres postgres 31 Aug 21 13:58 rep_mode.conf
[root@node2 ~]# \rm /var/run/postgresql/PGSQL.lock
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に以下のコマンドを実行して &lt;code&gt;node2&lt;/code&gt; のPostgreSQL の failcount をリセットし、時刻を記録します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@node2 ~]# pcs resource failcount reset pgsql node2; date -u
Sun Aug 21 14:00:04 UTC 2016
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;9秒後、 &lt;code&gt;node1&lt;/code&gt; での &lt;code&gt;crm_mon -fA&lt;/code&gt; の出力を見ると &lt;code&gt;node2&lt;/code&gt; がスタンバイになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Last updated: Sun Aug 21 14:00:13 2016          Last change: Sun Aug 21 14:00:10 2016 by root via crm_attribute on node1
Stack: corosync
Current DC: node2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 3 resources configured

Online: [ node1 node2 ]

 Master/Slave Set: pgsql-master [pgsql]
     Masters: [ node1 ]
     Slaves: [ node2 ]
master-ip       (ocf::heartbeat:IPaddr2):       Started node1

Node Attributes:
* Node node1:
    + master-pgsql                      : 1000
    + pgsql-data-status                 : LATEST
    + pgsql-master-baseline             : 0000000003000398
    + pgsql-status                      : PRI
* Node node2:
    + master-pgsql                      : 100
    + pgsql-data-status                 : STREAMING|SYNC
    + pgsql-status                      : HS:sync

Migration Summary:
* Node node2:
* Node node1:

Failed Actions:
* pgsql_start_0 on node2 &#39;unknown error&#39; (1): call=23, status=complete, exitreason=&#39;My data may be inconsistent. You have to remove /va
r/run/postgresql/PGSQL.lock file to force start.&#39;,
    last-rc-change=&#39;Sun Aug 21 13:58:23 2016&#39;, queued=0ms, exec=383ms
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;STONITH無し、quorum無しという簡易構成ですが、アクティブ・スタンバイ(1+1構成)でフフェールオーバする検証ができました。本番運用するにはSTONITHやquorumも重要そうなので、そちらも調べて行きたいです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LXDコンテナ上でPacemakerを使って仮想IPとApacheのアクティブ・パッシブ・クラスタを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/08/12/experiment-vip-and-apache-with-pacemaker-on-lxd-containers/</link>
      <pubDate>Fri, 12 Aug 2016 18:54:27 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/08/12/experiment-vip-and-apache-with-pacemaker-on-lxd-containers/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://clusterlabs.org/doc/&#34;&gt;Cluster Labs - Pacemaker Documentation&lt;/a&gt; の &amp;ldquo;Pacemaker 1.1 for Corosync 2.x and pcs&amp;rdquo; の &amp;ldquo;Clusters from Scratch (en-US)&amp;rdquo; を参考にしつつ、多少手順を変更して試してみました。&lt;/p&gt;

&lt;h2 id=&#34;実験用コンテナの環境構築&#34;&gt;実験用コンテナの環境構築&lt;/h2&gt;

&lt;h3 id=&#34;コンテナの作成&#34;&gt;コンテナの作成&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2016/08/12/update-lxd-dnsmasq-dhcp-hosts-config-with-sighup/&#34;&gt;LXDのdnsmasqの固定IP設定をSIGHUPで更新する · hnakamur&amp;rsquo;s blog at github&lt;/a&gt; の手法を使って、2つのコンテナ用のIPアドレスを設定しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lxdhost:~$ cat /var/lib/lxd-bridge/dhcp-hosts 
pcmk-1,10.155.92.101
pcmk-2,10.155.92.102
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;また、仮想IPとして &lt;code&gt;10.155.92.100&lt;/code&gt; を使用しますので、 &lt;code&gt;/var/lib/lxd-bridge/dnsmasq.lxdbr0.leases&lt;/code&gt; で使われていないことを確認しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo kill -HUP `cat /var/run/lxd-bridge/dnsmasq.pid`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で設定を dnsmasq に反映します。&lt;/p&gt;

&lt;p&gt;なお、  &lt;a href=&#34;http://clusterlabs.org/doc/en-US/Pacemaker/1.1-pcs/html/Clusters_from_Scratch/ch02.html#_configure_network&#34;&gt;2.1.3. Configure Network&lt;/a&gt; の &amp;ldquo;Important&amp;rdquo; の囲み部分によるとDHCPはcorosyncと干渉するので、 &lt;strong&gt;クラスタのマシンはDHCPを決して使うべきではない&lt;/strong&gt; そうです。この記事はあくまでPacemakerの使い方を把握するために試してみるだけなので気にしないことにしますが、実運用の際には DHCP を使わない構成にする必要があります。&lt;/p&gt;

&lt;p&gt;以下のコマンドでコンテナ &lt;code&gt;pcmk-1&lt;/code&gt; と &lt;code&gt;pcmk-2&lt;/code&gt; を作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lxdhost:~$ lxc launch images:centos/7/amd64 pcmk-1
lxdhost:~$ lxc launch images:centos/7/amd64 pcmk-2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;コンテナ内の-etc-hosts-設定&#34;&gt;コンテナ内の /etc/hosts 設定&lt;/h3&gt;

&lt;p&gt;端末を2つ開いて &lt;code&gt;lxc exec pcmk-1 bash&lt;/code&gt; と &lt;code&gt;lxc exec pcmk-2 bash&lt;/code&gt; を実行し、それぞれ環境構築していきます。&lt;/p&gt;

&lt;p&gt;まず、コンテナ作成直後の &lt;code&gt;pcmk-1&lt;/code&gt; の &lt;code&gt;/etc/hosts&lt;/code&gt; を確認すると以下のようになっていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1   localhost
127.0.1.1   pcmk-1

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;当初 &lt;code&gt;pcmk-1&lt;/code&gt; ではIPv4の部分を&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1   localhost
127.0.1.1   pcmk-1
10.155.92.102 pcmk-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と変更し、 &lt;code&gt;pcmk-2&lt;/code&gt; では&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1   localhost
127.0.1.1   pcmk-2
10.155.92.101 pcmk-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と変更してみたのですが、Pacemakerがうまく動かなかったようです（要追試）。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pcmk-1&lt;/code&gt; と &lt;code&gt;pcmk-2&lt;/code&gt; で &lt;code&gt;/etc/hosts&lt;/code&gt; の IPv4 部分を以下のコマンドで変更したら、うまくいったので、とりあえずこれで試しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# cat &amp;gt; /etc/hosts &amp;lt;&amp;lt;&#39;EOF&#39;
127.0.0.1   localhost

10.155.92.101   pcmk-1
10.155.92.102   pcmk-2

# The following lines are desirable for IPv6 capable hosts
::1     ip6-localhost ip6-loopback
fe00::0 ip6-localnet
ff00::0 ip6-mcastprefix
ff02::1 ip6-allnodes
ff02::2 ip6-allrouters
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pacemakerのインストール&#34;&gt;Pacemakerのインストール&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pcmk-1&lt;/code&gt; と &lt;code&gt;pcmk-2&lt;/code&gt; で以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# yum -y update
# yum -y install pacemaker pcs psmisc policycoreutils-python which
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;whichは仮想IPを使うための ocf:heartbeat:IPaddr2 のリソース用の resource agent スクリプト &lt;code&gt;/usr/lib/ocf/resource.d/heartbeat/IPaddr2&lt;/code&gt; で必要となります。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;pcsd&lt;/code&gt; サービスを起動し、OS起動時に自動起動するようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# systemctl start pcsd
# systemctl enable pcsd
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;クラスタを作成して仮想ipの作成-移動実験&#34;&gt;クラスタを作成して仮想IPの作成・移動実験&lt;/h2&gt;

&lt;h3 id=&#34;クラスタの作成と開始&#34;&gt;クラスタの作成と開始&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;hacluster&lt;/code&gt; のパスワードを設定します。ここでは &lt;code&gt;password&lt;/code&gt; という値にしていますが適宜変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# echo password | passwd --stdin hacluster
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここから先は &lt;code&gt;pcmk-1&lt;/code&gt; だけでコマンドを実行します。 &lt;code&gt;-p&lt;/code&gt; の値は上で設定したパスワードに合わせてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs cluster auth pcmk-1 pcmk-2 -u hacluster -p password
# pcs cluster setup --name mycluster pcmk-1 pcmk-2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この時点で &lt;code&gt;/etc/corosync/corosync.conf&lt;/code&gt; が作られます。&lt;/p&gt;

&lt;p&gt;以下のコマンドでクラスタを開始します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs cluster start --all
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動してすぐにステータスを確認すると Node の行が UNCLEAN (offline) になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# pcs status
Cluster name: mycluster
WARNING: no stonith devices and stonith-enabled is not false
Last updated: Thu Aug 11 15:55:17 2016          Last change: Thu Aug 11 15:55:16 2016 by hacluster via crmd on pcmk-1
Stack: unknown
Current DC: NONE
2 nodes and 0 resources configured

Node pcmk-1: UNCLEAN (offline)
Node pcmk-2: UNCLEAN (offline)

Full list of resources:


PCSD Status:
  pcmk-1: Online
  pcmk-2: Online

Daemon Status:
  corosync: active/disabled
  pacemaker: active/disabled
  pcsd: active/enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しばらくしてから再度ステータスを確認すると pcmk-1 も pcmk-2 も Online になっていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs status
Cluster name: mycluster
WARNING: no stonith devices and stonith-enabled is not false
Last updated: Thu Aug 11 15:56:41 2016          Last change: Thu Aug 11 15:55:37 2016 by hacluster via crmd on pcmk-2
Stack: corosync
Current DC: pcmk-2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 0 resources configured

Online: [ pcmk-1 pcmk-2 ]

Full list of resources:


PCSD Status:
  pcmk-1: Online
  pcmk-2: Online

Daemon Status:
  corosync: active/disabled
  pacemaker: active/disabled
  pcsd: active/enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;stonithを無効化&#34;&gt;STONITHを無効化&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://clusterlabs.org/doc/en-US/Pacemaker/1.1-pcs/html/Clusters_from_Scratch/ch05.html&#34;&gt;Chapter 5. Create an Active/Passive Cluster&lt;/a&gt;の手順でクラスタの設定エラーを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# crm_verify -L -V
   error: unpack_resources:     Resource start-up disabled since no STONITH resources have been defined
   error: unpack_resources:     Either configure some or disable STONITH with the stonith-enabled option
   error: unpack_resources:     NOTE: Clusters with shared data need STONITH to ensure data integrity
Errors found during check: config not valid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここでは簡単に Pacemaker を試すために STONITH を無効にします。無効にしたあと設定エラーを再度確認すると、今度はエラーが無くなりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs property set stonith-enabled=false
# crm_verify -L -V
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、 &lt;a href=&#34;http://clusterlabs.org/doc/en-US/Pacemaker/1.1-pcs/html/Clusters_from_Scratch/ch05.html&#34;&gt;Chapter 5. Create an Active/Passive Cluster&lt;/a&gt; の最後の Warning にもある通り、 &lt;strong&gt;実運用では STONITH を無効にするのは全く不適切&lt;/strong&gt; とのことなので、きちんと設定する必要があります。 STONITH についての説明は上記の Warning の囲み内からもリンクされている &lt;a href=&#34;http://clusterlabs.org/doc/en-US/Pacemaker/1.1-pcs/html/Clusters_from_Scratch/ch08.html#_what_is_stonith&#34;&gt;Chapter 8. Configure STONITH&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;仮想ipアドレス用のリソース作成&#34;&gt;仮想IPアドレス用のリソース作成&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pcmk-1&lt;/code&gt; で以下のコマンドを実行して、仮想IPアドレス &lt;code&gt;10.155.92.100&lt;/code&gt; 用のリソースを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs resource create ClusterIP ocf:heartbeat:IPaddr2 \
    ip=10.155.92.100 cidr_netmask=32 op monitor interval=30s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数秒してから状態を確認してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs status
Cluster name: mycluster
Last updated: Thu Aug 11 16:04:50 2016          Last change: Thu Aug 11 16:04:47 2016 by root via cibadmin on pcmk-1
Stack: corosync
Current DC: pcmk-2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 1 resource configured

Online: [ pcmk-1 pcmk-2 ]

Full list of resources:

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-1

PCSD Status:
  pcmk-1: Online
  pcmk-2: Online

Daemon Status:
  corosync: active/disabled
  pacemaker: active/disabled
  pcsd: active/enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;# pcs resource --full
 Resource: ClusterIP (class=ocf provider=heartbeat type=IPaddr2)
  Attributes: ip=10.155.92.100 cidr_netmask=32 
  Operations: start interval=0s timeout=20s (ClusterIP-start-interval-0s)
              stop interval=0s timeout=20s (ClusterIP-stop-interval-0s)
              monitor interval=30s (ClusterIP-monitor-interval-30s)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ip&lt;/code&gt; コマンドを実行して、仮想IPアドレスが &lt;code&gt;pcmk-1&lt;/code&gt; 側についており &lt;code&gt;pcmk-2&lt;/code&gt; 側にはついていないことを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# ip a s eth0
120: eth0@if121: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP qlen 1000
    link/ether 00:16:3e:e6:fb:ab brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 10.155.92.101/24 brd 10.155.92.255 scope global dynamic eth0
       valid_lft 3203sec preferred_lft 3203sec
    inet 10.155.92.100/32 brd 10.155.92.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::216:3eff:fee6:fbab/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-2 ~]# ip a s eth0
122: eth0@if123: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP qlen 1000
    link/ether 00:16:3e:4b:6d:b1 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 10.155.92.102/24 brd 10.155.92.255 scope global dynamic eth0
       valid_lft 3560sec preferred_lft 3560sec
    inet6 fe80::216:3eff:fe4b:6db1/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pcmk-1-をクラスタから離脱させて仮想ipアドレスが-pcmk-2-に移動するか確認&#34;&gt;&lt;code&gt;pcmk-1&lt;/code&gt; をクラスタから離脱させて仮想IPアドレスが &lt;code&gt;pcmk-2&lt;/code&gt; に移動するか確認&lt;/h3&gt;

&lt;p&gt;以下のコマンドで &lt;code&gt;pcmk-1&lt;/code&gt; をクラスタから離脱させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# pcs cluster stop pcmk-1
pcmk-1: Stopping Cluster (pacemaker)...
pcmk-1: Stopping Cluster (corosync)...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pcmk-1&lt;/code&gt; で状態を確認すると以下のようになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# pcs status
Error: cluster is not currently running on this node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pcmk-2&lt;/code&gt; で状態を確認すると以下のようになります。 &lt;code&gt;pcmk-1&lt;/code&gt; は &lt;code&gt;OFFLINE&lt;/code&gt; となっていますが、 &lt;code&gt;pcsd&lt;/code&gt; は動いているので &lt;code&gt;PCSD Status&lt;/code&gt; のほうは &lt;code&gt;Online&lt;/code&gt; のままです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-2 ~]# pcs status
Cluster name: mycluster
Last updated: Thu Aug 11 16:10:04 2016          Last change: Thu Aug 11 16:04:47 2016 by root via cibadmin on pcmk-1
Stack: corosync
Current DC: pcmk-2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 1 resource configured

Online: [ pcmk-2 ]
OFFLINE: [ pcmk-1 ]

Full list of resources:

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-2

PCSD Status:
  pcmk-1: Online
  pcmk-2: Online

Daemon Status:
  corosync: active/disabled
  pacemaker: active/disabled
  pcsd: active/enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ip&lt;/code&gt; コマンドを実行して、仮想IPアドレスが &lt;code&gt;pcmk-2&lt;/code&gt; 側についており &lt;code&gt;pcmk-1&lt;/code&gt; 側にはついていないことを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# ip a s eth0
120: eth0@if121: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP qlen 1000
    link/ether 00:16:3e:e6:fb:ab brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 10.155.92.101/24 brd 10.155.92.255 scope global dynamic eth0
       valid_lft 3024sec preferred_lft 3024sec
    inet6 fe80::216:3eff:fee6:fbab/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-2 ~]# ip a s eth0
122: eth0@if123: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP qlen 1000
    link/ether 00:16:3e:4b:6d:b1 brd ff:ff:ff:ff:ff:ff link-netnsid 0
    inet 10.155.92.102/24 brd 10.155.92.255 scope global dynamic eth0
       valid_lft 3385sec preferred_lft 3385sec
    inet 10.155.92.100/32 brd 10.155.92.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::216:3eff:fe4b:6db1/64 scope link 
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pcmk-1-をクラスタに復帰させる&#34;&gt;&lt;code&gt;pcmk-1&lt;/code&gt; をクラスタに復帰させる&lt;/h3&gt;

&lt;p&gt;以下のコマンドで &lt;code&gt;pcmk-1&lt;/code&gt; をクラスタに復帰させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# pcs cluster start pcmk-1
pcmk-1: Starting Cluster...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;状態を確認してみると、仮想IP は &lt;code&gt;pcmk-2&lt;/code&gt; のほうについたままです。
&lt;a href=&#34;http://clusterlabs.org/doc/en-US/Pacemaker/1.1-pcs/html/Clusters_from_Scratch/_perform_a_failover.html&#34;&gt;5.3. Perform a Failover&lt;/a&gt; の最後の Note によると Pacemakerのより古いバージョンでは &lt;code&gt;pcmk-1&lt;/code&gt; のほうに切り替わっていたそうですが、挙動が変更されたとのことです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# pcs status
Cluster name: mycluster
Last updated: Thu Aug 11 16:12:35 2016          Last change: Thu Aug 11 16:04:47 2016 by root via cibadmin on pcmk-1
Stack: corosync
Current DC: pcmk-2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 1 resource configured

Online: [ pcmk-1 pcmk-2 ]

Full list of resources:

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-2

PCSD Status:
  pcmk-1: Online
  pcmk-2: Online

Daemon Status:
  corosync: active/disabled
  pacemaker: active/disabled
  pcsd: active/enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドを実行して、仮想IPを &lt;code&gt;pcmk-1&lt;/code&gt; のほうに移動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pcs cluster stop pcmk-2 &amp;amp;&amp;amp; pcs cluster start pcmk-2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;apacheのactive-passiveクラスタを作って仮想ipと連動させる&#34;&gt;ApacheのActive/Passiveクラスタを作って仮想IPと連動させる&lt;/h2&gt;

&lt;h3 id=&#34;リソースのスティッキネスのデフォルト値を設定&#34;&gt;リソースのスティッキネスのデフォルト値を設定&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://clusterlabs.org/doc/en-US/Pacemaker/1.1-pcs/html/Clusters_from_Scratch/_prevent_resources_from_moving_after_recovery.html&#34;&gt;5.4. Prevent Resources from Moving after Recovery&lt;/a&gt; を見て設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# pcs resource defaults resource-stickiness=100
[root@pcmk-1 ~]# pcs resource defaults 
resource-stickiness: 100
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;apache-のインストールと設定&#34;&gt;Apache のインストールと設定&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pcmk-1&lt;/code&gt; と &lt;code&gt;pcmk-2&lt;/code&gt; で以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# yum -y install httpd wget
# mkdir -p /var/www/html /var/log/httpd
# cat &amp;gt; /var/www/html/index.html &amp;lt;&amp;lt;EOF
&amp;lt;html&amp;gt;
&amp;lt;body&amp;gt;My Test Site - $(hostname)&amp;lt;/body&amp;gt;
&amp;lt;/html&amp;gt;
EOF
# cat &amp;gt; /etc/httpd/conf.d/status.conf &amp;lt;&amp;lt;&#39;EOF&#39;
&amp;lt;Location /server-status&amp;gt;
  SetHandler server-status
  Require ip 127.0.0.1
&amp;lt;/Location&amp;gt;
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;apache-の-active-passive-クラスタ作成&#34;&gt;Apache の Active/Passive クラスタ作成&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;pcmk-1&lt;/code&gt; か &lt;code&gt;pcmk-2&lt;/code&gt; のどちらか一方で以下のコマンドを実行します。
公式のドキュメントでは、 &lt;code&gt;pcmk-2&lt;/code&gt; で開始した後、制約を追加しただけでは &lt;code&gt;pcmk-1&lt;/code&gt; に移動しないというデモをしていますが、ここでは &lt;code&gt;--disabled&lt;/code&gt; つきでリソースを作成後、制約を追加してから有効化することで最初から &lt;code&gt;pcmk-1&lt;/code&gt; で開始させています。&lt;/p&gt;

&lt;p&gt;また、制約を追加するごとに &lt;code&gt;crm_simulate -sL&lt;/code&gt; を実行してリソースをどのノードに割り当てるかのスコアを確認しています。&lt;/p&gt;

&lt;p&gt;まず WebSite という名前のリソースを &lt;code&gt;disabled&lt;/code&gt; 状態で作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs resource create WebSite ocf:heartbeat:apache \
    configfile=/etc/httpd/conf/httpd.conf \
    statusurl=&amp;quot;http://localhost/server-status&amp;quot; \
    op monitor interval=3s on-fail=restart \
    --disabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebSite リソースは ClusterIP リソースと同じノードで動かすという制約を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs constraint colocation add WebSite with ClusterIP INFINITY
# crm_simulate -sL

Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-1
 WebSite        (ocf::heartbeat:apache):        (target-role:Stopped) Stopped

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 100
native_color: ClusterIP allocation score on pcmk-2: 0
native_color: WebSite allocation score on pcmk-1: -INFINITY
native_color: WebSite allocation score on pcmk-2: -INFINITY

Transition Summary:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;リソースの開始順序を ClusterIP、 WebSite にする制約を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs constraint order ClusterIP then WebSite
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebSite のリソースをなるべく &lt;code&gt;pcmk-1&lt;/code&gt; 側で動かすようにする制約を追加します。 &lt;code&gt;250&lt;/code&gt; という値はこの後の操作を一度試行錯誤してみて適当に選びましたが、希望通りの動作が実現できさえすれば違う値でも構いません。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs constraint location WebSite prefers pcmk-1=250
# crm_simulate -sL

Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-1
 WebSite        (ocf::heartbeat:apache):        (target-role:Stopped) Stopped

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 350
native_color: ClusterIP allocation score on pcmk-2: 0
native_color: WebSite allocation score on pcmk-1: -INFINITY
native_color: WebSite allocation score on pcmk-2: -INFINITY

Transition Summary:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;希望する制約を一通り追加したので、 WebSite リソースを稼働開始します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs resource enable WebSite
# crm_simulate -sL

Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-1
 WebSite        (ocf::heartbeat:apache):        Started pcmk-1

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 450
native_color: ClusterIP allocation score on pcmk-2: 0
native_color: WebSite allocation score on pcmk-1: 350
native_color: WebSite allocation score on pcmk-2: -INFINITY

Transition Summary:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pcmk-1&lt;/code&gt; と &lt;code&gt;pcmk-2&lt;/code&gt; で &lt;code&gt;ps auxww | grep httpd&lt;/code&gt; すると &lt;code&gt;pcmk-1&lt;/code&gt; 側で Apache が稼働して &lt;code&gt;pcmk-2&lt;/code&gt; 側では稼働していないことを確認できます。&lt;/p&gt;

&lt;h3 id=&#34;手動で制約を調整して仮想ipとapacheを-pcmk-2-に移動する&#34;&gt;手動で制約を調整して仮想IPとApacheを &lt;code&gt;pcmk-2&lt;/code&gt; に移動する&lt;/h3&gt;

&lt;p&gt;以下のコマンドで制約を調整し、移動が完了するまでのスコアの変遷を確認します。 &lt;code&gt;500&lt;/code&gt; という値は前項の最後の &lt;code&gt;pcmk-1&lt;/code&gt; の ClusterIP のスコアを上回る値として選びました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs constraint location WebSite prefers pcmk-2=500 \
  &amp;amp;&amp;amp; for i in `seq 1 20`; do crm_simulate -sL; sleep 0.1; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力結果のうち変化があったものだけを抜粋します。
まず開始直後の状態。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-1
 WebSite        (ocf::heartbeat:apache):        Started pcmk-1

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 450
native_color: ClusterIP allocation score on pcmk-2: 500
native_color: WebSite allocation score on pcmk-1: -INFINITY
native_color: WebSite allocation score on pcmk-2: 500

Transition Summary:
 * Move    ClusterIP    (Started pcmk-1 -&amp;gt; pcmk-2)
 * Move    WebSite      (Started pcmk-1 -&amp;gt; pcmk-2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebSiteが停止した状態。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-1
 WebSite        (ocf::heartbeat:apache):        Stopped

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 350
native_color: ClusterIP allocation score on pcmk-2: 500
native_color: WebSite allocation score on pcmk-1: -INFINITY
native_color: WebSite allocation score on pcmk-2: 500

Transition Summary:
 * Move    ClusterIP    (Started pcmk-1 -&amp;gt; pcmk-2)
 * Start   WebSite      (pcmk-2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClusterIPがpcmk-2に移った状態。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-2
 WebSite        (ocf::heartbeat:apache):        Stopped

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 250
native_color: ClusterIP allocation score on pcmk-2: 600
native_color: WebSite allocation score on pcmk-1: -INFINITY
native_color: WebSite allocation score on pcmk-2: 500

Transition Summary:
 * Start   WebSite      (pcmk-2)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebSiteが &lt;code&gt;pcmk-2&lt;/code&gt; で稼働開始した状態。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-2
 WebSite        (ocf::heartbeat:apache):        Started pcmk-2

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 250
native_color: ClusterIP allocation score on pcmk-2: 700
native_color: WebSite allocation score on pcmk-1: -INFINITY
native_color: WebSite allocation score on pcmk-2: 600

Transition Summary:
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;手動で制約を調整して仮想ipとapacheを-pcmk-1-に戻す&#34;&gt;手動で制約を調整して仮想IPとApacheを &lt;code&gt;pcmk-1&lt;/code&gt; に戻す&lt;/h3&gt;

&lt;p&gt;次に &lt;code&gt;pcmk-2&lt;/code&gt; から &lt;code&gt;pcmk-1&lt;/code&gt; に戻してみます。
以下のコマンドで制約のIDを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# pcs constraint --full
Location Constraints:
  Resource: WebSite
    Enabled on: pcmk-1 (score:250) (id:location-WebSite-pcmk-1-250)
    Enabled on: pcmk-2 (score:500) (id:location-WebSite-pcmk-2-500)
Ordering Constraints:
  start ClusterIP then start WebSite (kind:Mandatory) (id:order-ClusterIP-WebSite-mandatory)
Colocation Constraints:
  WebSite with ClusterIP (score:INFINITY) (id:colocation-WebSite-ClusterIP-INFINITY)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドで &lt;code&gt;pcmk-2&lt;/code&gt; 側の制約を削除し、 &lt;code&gt;pcmk-1&lt;/code&gt; 側に戻るまでのスコアの動きを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# pcs constraint remove location-WebSite-pcmk-2-500 \
  &amp;amp;&amp;amp; for i in `seq 1 20`; do crm_simulate -sL; sleep 0.1; done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;開始直後の状態。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-2
 WebSite        (ocf::heartbeat:apache):        Started pcmk-2

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 250
native_color: ClusterIP allocation score on pcmk-2: 200
native_color: WebSite allocation score on pcmk-1: 250
native_color: WebSite allocation score on pcmk-2: -INFINITY

Transition Summary:
 * Move    ClusterIP    (Started pcmk-2 -&amp;gt; pcmk-1)
 * Move    WebSite      (Started pcmk-2 -&amp;gt; pcmk-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebSiteが停止した状態。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-2
 WebSite        (ocf::heartbeat:apache):        Stopped

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 250
native_color: ClusterIP allocation score on pcmk-2: 100
native_color: WebSite allocation score on pcmk-1: 250
native_color: WebSite allocation score on pcmk-2: -INFINITY

Transition Summary:
 * Move    ClusterIP    (Started pcmk-2 -&amp;gt; pcmk-1)
 * Start   WebSite      (pcmk-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ClusterIPが &lt;code&gt;pcmk-1&lt;/code&gt; に移動した状態。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-1
 WebSite        (ocf::heartbeat:apache):        Stopped

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 350
native_color: ClusterIP allocation score on pcmk-2: 0
native_color: WebSite allocation score on pcmk-1: 250
native_color: WebSite allocation score on pcmk-2: -INFINITY

Transition Summary:
 * Start   WebSite      (pcmk-1)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;WebSiteが &lt;code&gt;pcmk-1&lt;/code&gt; で稼働開始した状態。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Current cluster status:
Online: [ pcmk-1 pcmk-2 ]

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-1
 WebSite        (ocf::heartbeat:apache):        Started pcmk-1

Allocation scores:
native_color: ClusterIP allocation score on pcmk-1: 450
native_color: ClusterIP allocation score on pcmk-2: 0
native_color: WebSite allocation score on pcmk-1: 350
native_color: WebSite allocation score on pcmk-2: -INFINITY

Transition Summary:
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;active側のコンテナに障害が発生してコンテナごと落ちるケースの模擬実験&#34;&gt;Active側のコンテナに障害が発生してコンテナごと落ちるケースの模擬実験&lt;/h2&gt;

&lt;h3 id=&#34;active側-pcmk-1-のコンテナを停止させたときの挙動を確認&#34;&gt;Active側 &lt;code&gt;pcmk-1&lt;/code&gt; のコンテナを停止させたときの挙動を確認&lt;/h3&gt;

&lt;p&gt;LXDホストで以下のコマンドを実行して &lt;code&gt;pcmk-1&lt;/code&gt; を停止させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc stop -f pcmk-1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pcmk-2&lt;/code&gt; で &lt;code&gt;pcs status&lt;/code&gt; を実行すると &lt;code&gt;pcmk-1&lt;/code&gt; が OFFLINE になったことがわかりますが、 &lt;code&gt;PCSD Status:&lt;/code&gt; の後を表示するところでブロックしたので Ctrl-C で止めました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-2 ~]# pcs status
Cluster name: mycluster
Last updated: Fri Aug 12 13:13:37 2016          Last change: Fri Aug 12 09:34:39 2016 by root via cibadmin on pcmk-1
Stack: corosync
Current DC: pcmk-2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 2 resources configured

Online: [ pcmk-2 ]
OFFLINE: [ pcmk-1 ]

Full list of resources:

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-2
 WebSite        (ocf::heartbeat:apache):        Started pcmk-2

PCSD Status:
^C
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ip a s eth0&lt;/code&gt; と &lt;code&gt;ps auxww | grep httpd&lt;/code&gt; で仮想IPとApacheが &lt;code&gt;pcmk-2&lt;/code&gt; で動いていることが確認できました。&lt;/p&gt;

&lt;h3 id=&#34;pcmk-1-のコンテナを起動させた時の挙動を確認&#34;&gt;&lt;code&gt;pcmk-1&lt;/code&gt; のコンテナを起動させた時の挙動を確認&lt;/h3&gt;

&lt;p&gt;LXDホストで以下のコマンドを実行して &lt;code&gt;pcmk-1&lt;/code&gt; を起動し、コンテナ内に入ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ lxc satrt pcmk-1
$ lxc exec pcmk-1 bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pcmk-1&lt;/code&gt; 側は &lt;code&gt;pcsd&lt;/code&gt; は起動していますが、クラスタには所属していない状態です。&lt;/p&gt;

&lt;p&gt;理由は &lt;a href=&#34;http://clusterlabs.org/doc/en-US/Pacemaker/1.1-pcs/html/Clusters_from_Scratch/ch04.html#_start_the_cluster&#34;&gt;Chapter 4. Start and Verify Cluster&lt;/a&gt; に説明があります。 &lt;code&gt;pcsd&lt;/code&gt; は &lt;code&gt;systemctl enable&lt;/code&gt; でOS起動時の自動起動を有効にしていますが &lt;code&gt;corosync&lt;/code&gt; と &lt;code&gt;pacemaker&lt;/code&gt; はしていないからです。&lt;/p&gt;

&lt;p&gt;実運用時に物理的な障害などで &lt;code&gt;pcmk-1&lt;/code&gt; がクラスタから外れた場合、その後電源をいれて起動できたとしても、障害の原因を調査して、正常にサービスを稼働できるかを確認してからクラスタに復帰させたいので、この設定で良いと思います。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# pcs status
Error: cluster is not currently running on this node
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;pcmk-2&lt;/code&gt; で &lt;code&gt;pcs status&lt;/code&gt; は今度はブロックせずに完了します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-2 ~]# pcs status
Cluster name: mycluster
Last updated: Fri Aug 12 13:18:22 2016          Last change: Fri Aug 12 09:34:39 2016 by root via cibadmin on pcmk-1
Stack: corosync
Current DC: pcmk-2 (version 1.1.13-10.el7_2.4-44eb2dd) - partition with quorum
2 nodes and 2 resources configured

Online: [ pcmk-2 ]
OFFLINE: [ pcmk-1 ]

Full list of resources:

 ClusterIP      (ocf::heartbeat:IPaddr2):       Started pcmk-2
 WebSite        (ocf::heartbeat:apache):        Started pcmk-2

PCSD Status:
  pcmk-1: Online
  pcmk-2: Online

Daemon Status:
  corosync: active/disabled
  pacemaker: active/disabled
  pcsd: active/enabled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドを実行して &lt;code&gt;pcmk-1&lt;/code&gt; をクラスタに復帰させます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[root@pcmk-1 ~]# pcs cluster start pcmk-1
pcmk-1: Starting Cluster...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;しばらくして &lt;code&gt;pcs status&lt;/code&gt; を確認すると &lt;code&gt;pcmk-1&lt;/code&gt; がオンラインになり、 ClusterIP と WebSite リソースが &lt;code&gt;pcmk-1&lt;/code&gt; に移動することが確認できました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>