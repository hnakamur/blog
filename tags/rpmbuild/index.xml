<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rpmbuild on hnakamur&#39;s blog at github</title>
    <link>/blog/tags/rpmbuild/</link>
    <description>Recent content in Rpmbuild on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Fri, 18 Dec 2015 01:43:28 +0900</lastBuildDate>
    <atom:link href="/blog/tags/rpmbuild/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Mockやcoprでrpmをビルドする際にサードパーティのレポジトリを追加する方法</title>
      <link>/blog/2015/12/18/add_third_party_to_build_on_mock_and_copr/</link>
      <pubDate>Fri, 18 Dec 2015 01:43:28 +0900</pubDate>
      
      <guid>/blog/2015/12/18/add_third_party_to_build_on_mock_and_copr/</guid>
      <description>

&lt;h2 id=&#34;はじめに:10b0aafa200b57354ec517996e32ab18&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://fedoraproject.org/wiki/Mock&#34;&gt;Mock&lt;/a&gt;や&lt;a href=&#34;https://copr.fedoraproject.org/&#34;&gt;copr&lt;/a&gt;でrpmをビルドする際にCentOS標準のレポジトリ以外のサードパーティのレポジトリのrpmに依存したい場合があります。この記事ではサードパーティのレポジトリの追加方法を説明します。&lt;/p&gt;

&lt;p&gt;この記事では&lt;a href=&#34;https://www.varnish-cache.org/vmod/header-manipulation&#34;&gt;libvmod-header&lt;/a&gt;をビルドするために&lt;a href=&#34;https://www.varnish-cache.org/installation/redhat&#34;&gt;varnish-cache.orgのRedHat用インストール手順&lt;/a&gt;で提供されているEL7用のレポジトリを追加する例で説明します。&lt;/p&gt;

&lt;p&gt;ビルドするために私が作成したDockerfileとシェルスクリプトは&lt;a href=&#34;https://github.com/hnakamur/libvmod-header-rpm&#34;&gt;hnakamur/libvmod-header-rpm&lt;/a&gt;にあります。&lt;/p&gt;

&lt;h2 id=&#34;mockでのrpmビルド時にサードパーティのレポジトリを追加する方法:10b0aafa200b57354ec517996e32ab18&#34;&gt;Mockでのrpmビルド時にサードパーティのレポジトリを追加する方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://lists.fedorahosted.org/pipermail/softwarecollections/2012-November/000018.html&#34;&gt;Building SCL packages with mock&lt;/a&gt;で紹介されていた方法です。&lt;/p&gt;

&lt;p&gt;CentOS 7用のrpmをビルドする場合 &lt;code&gt;/etc/mock/epel-7-x86_64.cfg&lt;/code&gt; をコピーして &lt;code&gt;/etc/mock/epel-7-varnish-x86_64.cfg&lt;/code&gt; のように別名で保存します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;/etc/mock/epel-7-varnish-x86_64.cfg&lt;/code&gt; の最後に &lt;code&gt;config_opts[&#39;yum.conf&#39;]&lt;/code&gt; の設定があります。変更前は以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;config_opts[&#39;root&#39;] = &#39;epel-7-x86_64&#39;
config_opts[&#39;target_arch&#39;] = &#39;x86_64&#39;
config_opts[&#39;legal_host_arches&#39;] = (&#39;x86_64&#39;,)
config_opts[&#39;chroot_setup_cmd&#39;] = &#39;install @buildsys-build&#39;
config_opts[&#39;dist&#39;] = &#39;el7&#39;  # only useful for --resultdir variable subst
config_opts[&#39;releasever&#39;] = &#39;7&#39;

config_opts[&#39;yum.conf&#39;] = &amp;quot;&amp;quot;&amp;quot;
[main]
keepcache=1
debuglevel=2
reposdir=/dev/null
logfile=/var/log/yum.log
retries=20
obsoletes=1
gpgcheck=0
assumeyes=1
syslog_ident=mock
syslog_device=

# repos
[base]
name=BaseOS
mirrorlist=http://mirrorlist.centos.org/?release=7&amp;amp;arch=x86_64&amp;amp;repo=os
failovermethod=priority
gpgkey=file:///etc/pki/mock/RPM-GPG-KEY-CentOS-7
gpgcheck=1

[updates]
name=updates
enabled=1
mirrorlist=http://mirrorlist.centos.org/?release=7&amp;amp;arch=x86_64&amp;amp;repo=updates
failovermethod=priority
gpgkey=file:///etc/pki/mock/RPM-GPG-KEY-CentOS-7
gpgcheck=1

[epel]
name=epel
mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=epel-7&amp;amp;arch=x86_64
failovermethod=priority
gpgkey=file:///etc/pki/mock/RPM-GPG-KEY-EPEL-7
gpgcheck=1

[extras]
name=extras
mirrorlist=http://mirrorlist.centos.org/?release=7&amp;amp;arch=x86_64&amp;amp;repo=extras
failovermethod=priority
gpgkey=file:///etc/pki/mock/RPM-GPG-KEY-EPEL-7
gpgcheck=1

[testing]
name=epel-testing
enabled=0
mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=testing-epel7&amp;amp;arch=x86_64
failovermethod=priority


[local]
name=local
baseurl=http://kojipkgs.fedoraproject.org/repos/epel7-build/latest/x86_64/
cost=2000
enabled=0

[epel-debug]
name=epel-debug
mirrorlist=http://mirrors.fedoraproject.org/mirrorlist?repo=epel-debug-7&amp;amp;arch=x86_64
failovermethod=priority
enabled=0
&amp;quot;&amp;quot;&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;失敗例1:10b0aafa200b57354ec517996e32ab18&#34;&gt;失敗例1&lt;/h3&gt;

&lt;p&gt;varnish-cache.orgではEL7用のレポジトリ定義が &lt;a href=&#34;https://repo.varnish-cache.org/redhat/varnish-4.1.el7.rpm&#34;&gt;https://repo.varnish-cache.org/redhat/varnish-4.1.el7.rpm&lt;/a&gt; で配布されています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config_opts[&#39;chroot_setup_cmd&#39;] = &#39;install @buildsys-build&#39;&lt;/code&gt; にこのrpmのURLを追加して
&lt;code&gt;config_opts[&#39;chroot_setup_cmd&#39;] = &#39;install @buildsys-build https://repo.varnish-cache.org/redhat/varnish-4.1.el7.rpm&#39;&lt;/code&gt; にするというのを試してみましたが、これは失敗でした。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sudo mock -r epel-7-varnish-x86_64 --init&lt;/code&gt; で &lt;code&gt;varnish-4.1&lt;/code&gt; というレポジトリのrpmがインストールされるところまではOKでした。
が、 &lt;code&gt;sudo mock -r epel-7-varnish-x86_64 --install varnish&lt;/code&gt; としてvarnishをインストールすると、このレポジトリからvarnish 4.1.0がインストールされずにepelから4.0.3がインストールされてしまいました。&lt;/p&gt;

&lt;h3 id=&#34;うまくいく方法:10b0aafa200b57354ec517996e32ab18&#34;&gt;うまくいく方法&lt;/h3&gt;

&lt;p&gt;ということでmockで作成するchroot環境では &lt;code&gt;config_opts[&#39;yum.conf&#39;]&lt;/code&gt; に予めレポジトリ定義を書いておく必要があるようです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://repo.varnish-cache.org/redhat/varnish-4.1.el7.rpm&#34;&gt;https://repo.varnish-cache.org/redhat/varnish-4.1.el7.rpm&lt;/a&gt; に含まれる &lt;code&gt;etc/yum.repos.d/varnish-4.1.repo&lt;/code&gt; には以下の様なレポジトリ定義が含まれています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[varnish-4.1]
name=Varnish Cache 4.1 for Enterprise Linux
baseurl=https://repo.varnish-cache.org/redhat/varnish-4.1/el7/$basearch
enabled=1
gpgcheck=1
gpgkey=file:///etc/pki/rpm-gpg/RPM-GPG-KEY-VARNISH
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;/etc/pki/rpm-gpg/RPM-GPG-KEY-VARNISH&lt;/code&gt; というgpgkeyが折角用意されているので使いたいのですが良い方法が思いつきませんでした。 &lt;code&gt;config_opts[&#39;chroot_setup_cmd&#39;]&lt;/code&gt; にセットアップ時に実行されるコマンドを書けるのですが、先頭に &lt;code&gt;yum&lt;/code&gt; を追加して実行されるので任意のコマンドを実行できるわけではないです。&lt;/p&gt;

&lt;p&gt;今回は諦めてgpgkeyを使うのは諦めて、下記の内容を &lt;code&gt;config_opts[&#39;yum.conf&#39;]&lt;/code&gt; の最後に追加するようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;[varnish-4.1]
name=Varnish Cache 4.1 for Enterprise Linux
baseurl=https://repo.varnish-cache.org/redhat/varnish-4.1/el7/$basearch
enabled=1
gpgcheck=0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スクリプトでは以下のようにしています。
&lt;a href=&#34;https://github.com/hnakamur/libvmod-header-rpm/blob/5d5b2e580b11944ee630c6fbc2bea81b9fa7bb9a/scripts/build.sh#L47-L75&#34;&gt;https://github.com/hnakamur/libvmod-header-rpm/blob/5d5b2e580b11944ee630c6fbc2bea81b9fa7bb9a/scripts/build.sh#L47-L75&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;create_varnish_repo_file() {
  varnish_repo_file=varnish-4.1.repo
  if [ ! -f $varnish_repo_file ]; then
    # NOTE: Although https://repo.varnish-cache.org/redhat/varnish-4.1.el7.rpm at https://www.varnish-cache.org/installation/redhat
    #       has the gpgkey in it, I don&#39;t use it since I don&#39;t know how to add it to /etc/mock/*.cfg
    cat &amp;gt; ${varnish_repo_file} &amp;lt;&amp;lt;EOF
[${varnish_repo_id}]
name=${varnish_repo_name}
baseurl=${varnish_repo_baseurl}
enabled=1
gpgcheck=0
EOF
  fi
}

create_mock_chroot_cfg() {
  create_varnish_repo_file

  # Insert ${scl_repo_file} before closing &amp;quot;&amp;quot;&amp;quot; of config_opts[&#39;yum.conf&#39;]
  # See: http://unix.stackexchange.com/a/193513/135274
  #
  # NOTE: Support of adding repository was added to mock,
  #       so you can use it in the future.
  # See: https://github.com/rpm-software-management/ci-dnf-stack/issues/30
  (cd ${topdir} \
    &amp;amp;&amp;amp; echo | sed -e &#39;$d;N;P;/\n&amp;quot;&amp;quot;&amp;quot;$/i\
&#39; -e &#39;/\n&amp;quot;&amp;quot;&amp;quot;$/r &#39;${varnish_repo_file} -e &#39;/\n&amp;quot;&amp;quot;&amp;quot;$/a\
&#39; -e D /etc/mock/${base_chroot}.cfg - | sudo sh -c &amp;quot;cat &amp;gt; /etc/mock/${mock_chroot}.cfg&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;sedでパターンにマッチした行の後にファイルを挿入するのは &lt;code&gt;/パターン/r ファイル名&lt;/code&gt;ですが、マッチした行の前に挿入するのはトリッキーです。
ここでは &lt;a href=&#34;http://unix.stackexchange.com/a/193513/135274&#34;&gt;http://unix.stackexchange.com/a/193513/135274&lt;/a&gt; で紹介されていた &lt;code&gt;echo | sed -e &#39;$d;N;P;/\nPointer/r file1&#39; -e D file2 -&lt;/code&gt; という手法を使っています。
ただし、ファイルを挿入する前後に改行を入れたかったので &lt;code&gt;i&lt;/code&gt; や &lt;code&gt;a&lt;/code&gt; も使っています。&lt;/p&gt;

&lt;p&gt;これで &lt;code&gt;sudo mock -r epel-7-varnish-x86_64 --rebuild ${SRPMのパス}&lt;/code&gt; でrpmをビルドできます。&lt;/p&gt;

&lt;h2 id=&#34;coprでのrpmビルド時にサードパーティのレポジトリを追加する方法:10b0aafa200b57354ec517996e32ab18&#34;&gt;coprでのrpmビルド時にサードパーティのレポジトリを追加する方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://copr.fedoraproject.org/api/&#34;&gt;API for Copr&lt;/a&gt;の&amp;rdquo;Create new project&amp;rdquo;のAPIにreposパラメータがありますので、ここに &lt;code&gt;*.repo&lt;/code&gt; ファイルの &lt;code&gt;baseurl&lt;/code&gt; の値、 &lt;code&gt;https://repo.varnish-cache.org/redhat/varnish-4.1/el7/$basearch&lt;/code&gt; を指定すればOKです。&lt;/p&gt;

&lt;p&gt;実際のスクリプトでは以下の箇所です。
&lt;a href=&#34;https://github.com/hnakamur/libvmod-header-rpm/blob/5d5b2e580b11944ee630c6fbc2bea81b9fa7bb9a/scripts/build.sh#L108-L119&#34;&gt;https://github.com/hnakamur/libvmod-header-rpm/blob/5d5b2e580b11944ee630c6fbc2bea81b9fa7bb9a/scripts/build.sh#L108-L119&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    # Create the project on copr.
    # We call copr APIs with curl to work around the InsecurePlatformWarning problem
    # since system python in CentOS 7 is old.
    # I read the source code of https://pypi.python.org/pypi/copr/1.62.1
    # since the API document at https://copr.fedoraproject.org/api/ is old.
    curl -s -X POST -u &amp;quot;${COPR_LOGIN}:${COPR_TOKEN}&amp;quot; \
      --data-urlencode &amp;quot;name=${project_name}&amp;quot; \
      --data-urlencode &amp;quot;${base_chroot}=y&amp;quot; \
      --data-urlencode &amp;quot;repos=${varnish_repo_baseurl}&amp;quot; \
      --data-urlencode &amp;quot;description=$copr_project_description&amp;quot; \
      --data-urlencode &amp;quot;instructions=$copr_project_instructions&amp;quot; \
      https://copr.fedoraproject.org/api/coprs/${COPR_USERNAME}/new/
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>mockを使ったrpmビルドが失敗した時の調査方法</title>
      <link>/blog/2015/12/16/how_to_debug_errors_in_rpm_build_using_mock/</link>
      <pubDate>Wed, 16 Dec 2015 01:10:33 +0900</pubDate>
      
      <guid>/blog/2015/12/16/how_to_debug_errors_in_rpm_build_using_mock/</guid>
      <description>

&lt;h2 id=&#34;はじめに:b171a244e2b9b7684f6e19368a4843b1&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/&#34;&gt;nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;でspecファイルを書いている最中はmockでのrpmのビルドに失敗することがよくあります。&lt;/p&gt;

&lt;p&gt;私は「なんとなくこんな感じか？」と書いて動かしてみてエラーを見て修正していくスタイルなので、失敗時の調査は重要です。&lt;/p&gt;

&lt;h2 id=&#34;ビルドログ:b171a244e2b9b7684f6e19368a4843b1&#34;&gt;ビルドログ&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;sudo mock -r epel-7-x86_64 --rebuild ${srpmファイル名}&lt;/code&gt; のように実行してビルドした場合、 &lt;code&gt;/var/lib/mock/epel-7-x86_64/result/&lt;/code&gt; に &lt;code&gt;build.log&lt;/code&gt; というファイルができるのでそれを見ます。&lt;/p&gt;

&lt;h2 id=&#34;mockコマンドでchroot環境内に入る:b171a244e2b9b7684f6e19368a4843b1&#34;&gt;mockコマンドでchroot環境内に入る&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://linux.die.net/man/1/mock&#34;&gt;mock(1)のmanページ&lt;/a&gt;によると &lt;code&gt;sudo mock -r epel-7-x86_64 --shell&lt;/code&gt; でchroot環境内に入ることが出来ます。 &lt;code&gt;exit&lt;/code&gt; で抜けます。&lt;/p&gt;

&lt;p&gt;mockで作られるchroot環境はビルドに必要な最低限のパッケージしかインストールされておらず、 &lt;code&gt;vim&lt;/code&gt; や &lt;code&gt;less&lt;/code&gt; も使えません。 &lt;code&gt;yum&lt;/code&gt; で入れようにも &lt;code&gt;yum&lt;/code&gt; も無いと言われてしまいます。&lt;/p&gt;

&lt;p&gt;chroot環境に入る前に &lt;code&gt;sudo mock -r epel-7-x86_64 --install vim less&lt;/code&gt; のようにしてインストールしておけばchroot内でvimやlessが使えます。&lt;/p&gt;

&lt;p&gt;あるいはchroot外で &lt;code&gt;/var/lib/mock/epel-7-x86_64/root/&lt;/code&gt; 配下のファイルをvimやlessで見るという手もあります。&lt;/p&gt;

&lt;h2 id=&#34;chroot環境内のrpmビルドディレクトリ:b171a244e2b9b7684f6e19368a4843b1&#34;&gt;chroot環境内のrpmビルドディレクトリ&lt;/h2&gt;

&lt;p&gt;chroot環境内では &lt;code&gt;/builddir/build/&lt;/code&gt; 以下に &lt;code&gt;BUILD&lt;/code&gt;, &lt;code&gt;BUILDDIR&lt;/code&gt;, &lt;code&gt;SOURCES&lt;/code&gt;, &lt;code&gt;SPECS&lt;/code&gt; などのディレクトリが作られているので、これらの中を見ればビルド失敗時の状況を調べられます。&lt;/p&gt;

&lt;h2 id=&#34;chroot環境内でファイルを修正してビルドを再実行:b171a244e2b9b7684f6e19368a4843b1&#34;&gt;chroot環境内でファイルを修正してビルドを再実行&lt;/h2&gt;

&lt;p&gt;mockを使ったrpmビルドはchroot環境を作成してその中で行われるのですが、毎回chroot環境を作るところからやっていると時間がかかって効率が悪いです。&lt;/p&gt;

&lt;p&gt;ですので、chroot環境内のspecファイルや &lt;code&gt;SOURCES&lt;/code&gt; ディレクトリ下のファイルを直接修正して、その後 &lt;code&gt;rpmbuild -bb ${specファイル名}&lt;/code&gt; でrpmのビルドを再度試します。&lt;/p&gt;

&lt;h2 id=&#34;修正したファイルをdockerコンテナ外に取り出す:b171a244e2b9b7684f6e19368a4843b1&#34;&gt;修正したファイルをdockerコンテナ外に取り出す&lt;/h2&gt;

&lt;p&gt;修正のきりが良い所で、chroot環境内の修正したファイルを &lt;code&gt;docker cp&lt;/code&gt; コマンドでdockerコンテナ内からコンテナ外に取り出します。&lt;/p&gt;

&lt;p&gt;まずdockerホストで &lt;code&gt;docker ps&lt;/code&gt; コマンドでコンテナIDかコンテナ名を調べます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker ps
CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES
363ad4f85fda        nginxrpm            &amp;quot;/bin/bash&amp;quot;         18 hours ago        Up 18 hours                             romantic_fermi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;docker cp&lt;/code&gt; コマンドでファイルをコピーします。例えばこんな感じです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ docker cp romantic_fermi:/var/lib/mock/epel-7-x86_64/root/builddir/build/SPECS/nginx.spec SPECS/nginx.spec
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;取り出した修正ファイルはgitにコミットして、さらに修正作業を続けていきます。&lt;/p&gt;

&lt;p&gt;修正が一通り終わったら、クリーンな状態からビルドが成功することを確認するため、dockerコンテナを一度破棄して&lt;a href=&#34;http://localhost:1313/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/&#34;&gt;nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました · hnakamur&amp;rsquo;s blog at github&lt;/a&gt; の手順で再度ビルドしてみます。これでエラーが出なければOKです。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:b171a244e2b9b7684f6e19368a4843b1&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;mockを使ったrpmのビルドが失敗した場合の調査方法を紹介しました。もっと良い方法などありましたら、ぜひ教えてください。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>rpmのspecファイルのSourceにGitHubの任意のコミットのtarballのURLを指定するときの良い書き方</title>
      <link>/blog/2015/12/06/good_rpm_spec_source_url_syntax_for_tarball_on_github/</link>
      <pubDate>Sun, 06 Dec 2015 00:07:23 +0900</pubDate>
      
      <guid>/blog/2015/12/06/good_rpm_spec_source_url_syntax_for_tarball_on_github/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;https://fedoraproject.org/wiki/Packaging:SourceURL?rd=Packaging/SourceURL#Commit_Revision&#34;&gt;Packaging:SourceURL - FedoraProject&lt;/a&gt;で知ったtipsの紹介です。&lt;/p&gt;

&lt;p&gt;GitHubでプロジェクトの[Download ZIP]ボタンを押すと、ソースをZIP形式でダウンロードできます。
コミット数が多いプロジェクトだと &lt;code&gt;git clone&lt;/code&gt; するよりも高速に取得できるので履歴が不要な場合には便利な方法です。&lt;/p&gt;

&lt;p&gt;例えば&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;openresty/lua-nginx-module&lt;/a&gt;なら &lt;code&gt;https://github.com/openresty/lua-nginx-module/archive/master.zip&lt;/code&gt; というURLになるのですが、 &lt;code&gt;.zip&lt;/code&gt; を &lt;code&gt;.tar.gz&lt;/code&gt; に変えればtar.gz形式でダウンロードできます。&lt;/p&gt;

&lt;p&gt;また、 &lt;code&gt;master&lt;/code&gt; の部分はブランチ名、タグ名、コミットハッシュを指定することも出来るので任意のコミットのソースを取得可能です。&lt;/p&gt;

&lt;p&gt;好みのファイル名でダウンロードするのは、通常ならダウンロードするツール側で対応すれば良い話です。例えば&lt;a href=&#34;http://linux.die.net/man/1/curl&#34;&gt;curl(1): transfer URL - Linux man page&lt;/a&gt;を使う場合は &lt;code&gt;-o&lt;/code&gt; オプションで &lt;code&gt;-o ファイル名&lt;/code&gt; のように指定すれば良いだけです。&lt;/p&gt;

&lt;p&gt;ただ、RPMのspecファイルの &lt;code&gt;Source:&lt;/code&gt; に指定するときはちょっと厄介です。
&lt;a href=&#34;https://fedoraproject.org/wiki/How_to_create_an_RPM_package#SPEC_file_overview&#34;&gt;SPEC file overview&lt;/a&gt;の &lt;code&gt;Source0&lt;/code&gt; の説明を読むと、URLのベースネーム (最後のスラッシュの後の部分) が &lt;code&gt;~/rpmbuild/SOURCES&lt;/code&gt; ディレクトリ配下に置くファイル名になるようにするべきとあります。&lt;/p&gt;

&lt;p&gt;しかし、上述のようにGitHubでソースのtarballのURLのベースネームは &lt;code&gt;コミットハッシュなど.tar.gz&lt;/code&gt; という形式となっています。これだと複数のソースをダウンロードした時に、どれがどれかわかりにくいですし、 &lt;code&gt;バージョン番号.tar.gz&lt;/code&gt; の場合だとファイル名が衝突する恐れもあります。&lt;/p&gt;

&lt;p&gt;解決策ですが、元のURLに &lt;code&gt;#/&lt;/code&gt; をつけてその後に好きなファイル名を指定すればOKです。具体的には &lt;code&gt;https://github.com/ユーザ名/プロジェクト名/archive/コミットハッシュなど.tar.gz#/プロジェクト名-コミットハッシュなど.tar.gz&lt;/code&gt; のように書きます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://fedoraproject.org/wiki/Packaging:SourceURL?rd=Packaging/SourceURL#Commit_Revision&#34;&gt;Packaging:SourceURL - FedoraProject&lt;/a&gt;にはbitbucket.orgとgitlab.comの場合の書き方も紹介されていますので、必要に応じてご参照ください。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>