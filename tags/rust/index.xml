<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Rust on hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/tags/rust/</link>
    <description>Recent content in Rust on hnakamur&#39;s blog</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Mon, 29 Jan 2018 05:08:00 +0900</lastBuildDate>
    <atom:link href="https://hnakamur.github.io/blog/tags/rust/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>rustのHTTPライブラリについて情報収集した</title>
      <link>https://hnakamur.github.io/blog/2018/01/29/rust-http-libraries/</link>
      <pubDate>Mon, 29 Jan 2018 05:08:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/01/29/rust-http-libraries/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;rustのHTTPライブラリの現状について検索して軽く情報収集したので、&#xA;HTTPに関連したIOライブラリも含めてメモしておきます。&lt;/p&gt;&#xA;&lt;h2 id=&#34;非同期io関連の動向&#34;&gt;非同期IO関連の動向&lt;/h2&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/tokio-rs/tokio-rfcs/pull/3&#34;&gt;RFC: Tokio reform, take 2 by aturon · Pull Request #3 · tokio-rs/tokio-rfcs&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/tokio-rs/tokio-proto/issues/202&#34;&gt;Question: What&amp;rsquo;s the future of tokio-proto and should new libraries depend on it? · Issue #202 · tokio-rs/tokio-proto&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://gist.github.com/sile/87f0732236e2ebc6d108ac95a2d444c6&#34;&gt;Rustの『RFC 2033: 実験的なコルーチン』の要約メモ&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;RFCは2017-06-09にマージされてた。 &lt;a href=&#34;https://github.com/rust-lang/rfcs/pull/2033#issuecomment-309603972&#34;&gt;eRFC: Experimentally add coroutines to Rust by alexcrichton · Pull Request #2033 · rust-lang/rfcs&lt;/a&gt;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/alexcrichton/futures-await&#34;&gt;alexcrichton/futures-await&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Async/await syntax for Rust and the futures crate&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;li&gt;&lt;a href=&#34;https://github.com/rust-lang-nursery/futures-rs&#34;&gt;rust-lang-nursery/futures-rs: Zero-cost futures and streams in Rust&lt;/a&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;Zero-cost futures and streams in Rust&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;h2 id=&#34;httpライブラリ&#34;&gt;HTTPライブラリ&lt;/h2&gt;&#xA;&lt;h4 id=&#34;http2&#34;&gt;HTTP/2&lt;/h4&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/carllerche/h2&#34;&gt;https://github.com/carllerche/h2&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    <item>
      <title>rustupでrustをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/01/29/setup-rust-with-rustup/</link>
      <pubDate>Mon, 29 Jan 2018 01:06:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/01/29/setup-rust-with-rustup/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;Ubuntu 16.04の環境にrustをセットアップしたときのメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;インストール手順のドキュメント&#34;&gt;インストール手順のドキュメント&lt;/h2&gt;&#xA;&lt;p&gt;rustup の&#xA;&lt;a href=&#34;https://github.com/rust-lang-nursery/rustup.rs#installation&#34;&gt;Installation&lt;/a&gt; には&#xA;&lt;a href=&#34;https://www.rustup.rs/&#34;&gt;www.rustup.rs&lt;/a&gt; の手順に従うように書いてありますが、&#xA;Windowsで見るとWindows用の手順が表示されてLinux用の手順が見れないので、&#xA;&lt;a href=&#34;https://github.com/rust-lang-nursery/rustup.rs#other-installation-methods&#34;&gt;Other installation methods&lt;/a&gt; のほうを見ます。&lt;/p&gt;</description>
    </item>
    <item>
      <title>OSX上でmultirustを使ったrustfmtのインストール手順</title>
      <link>https://hnakamur.github.io/blog/2015/07/19/install_rustfmt/</link>
      <pubDate>Sun, 19 Jul 2015 00:33:15 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/19/install_rustfmt/</guid>
      <description>&lt;p&gt;OSXでは&lt;a href=&#34;https://github.com/brson/multirust/issues/43&#34;&gt;building cargo atop multirust fails, dyn link problems (Mac OS X) · Issue #43 · brson/multirust&lt;/a&gt;のイシューの&lt;a href=&#34;https://github.com/brson/multirust/issues/43#issuecomment-106758695&#34;&gt;コメント106758695&lt;/a&gt;にあるように &lt;code&gt;rustfmt&lt;/code&gt; の実行時に環境変数 &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; を設定する必要があります。&lt;/p&gt;&#xA;&lt;p&gt;そこで、 &lt;code&gt;rustfmt&lt;/code&gt; の実行ファイルを &lt;code&gt;~/bin/rustfmt.bin&lt;/code&gt; と別の名前にして、起動用のスクリプトを &lt;code&gt;~/bin/rustfmt&lt;/code&gt; として作成します。&lt;/p&gt;</description>
    </item>
    <item>
      <title>manyrustという複数バージョンのrustインストールスクリプトを書いた</title>
      <link>https://hnakamur.github.io/blog/2015/07/18/manyrust/</link>
      <pubDate>Sat, 18 Jul 2015 23:13:32 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/07/18/manyrust/</guid>
      <description>&lt;h2 id=&#34;multirustがあるのになぜ新たに書いたのか&#34;&gt;multirustがあるのに、なぜ新たに書いたのか&lt;/h2&gt;&#xA;&lt;p&gt;rustのインストールは&lt;a href=&#34;http://www.rust-lang.org/install.html&#34;&gt;Install · The Rust Programming Language&lt;/a&gt;にあるように複数のチャネルから選んでインストールします。&lt;/p&gt;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;stable (安定版)チャネル&lt;/li&gt;&#xA;&lt;li&gt;beta (ベータ版)チャネル&lt;/li&gt;&#xA;&lt;li&gt;nightly (毎晩ビルドされる)チャネル&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&lt;p&gt;rustでunstableなAPIを使うにはnightlyを使う必要があるので、たいていはstableとnightlyの両方をインストールして使い分けたくなるはずです。&#xA;その用途には定番のスクリプトとして&lt;a href=&#34;https://github.com/brson/multirust&#34;&gt;brson/multirust&lt;/a&gt;があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>FreeBSD 10.1 amd64でRustをビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2015/05/17/build_rust_on_freebsd/</link>
      <pubDate>Sun, 17 May 2015 07:51:14 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/05/17/build_rust_on_freebsd/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.rust-lang.org/install.html&#34;&gt;Install · The Rust Programming Language&lt;/a&gt;&#xA;を見ると現在のところRustのバイナリが提供されているのはLinux, Mac, Windowsのみです。&lt;/p&gt;&#xA;&lt;p&gt;FreeBSD 10.1 amd64でソースからビルドしてみました。&#xA;&lt;a href=&#34;https://github.com/rust-lang/rust#building-from-source&#34;&gt;Building from Source&lt;/a&gt;に従ってビルドするとすんなり行けました。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
