<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cuda on hnakamur&#39;s blog at github</title>
    <link>/blog/tags/cuda/</link>
    <description>Recent content in Cuda on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 25 Jul 2015 18:31:56 +0900</lastBuildDate>
    <atom:link href="/blog/tags/cuda/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>GeForce搭載の旧モデルMacBook ProでPyCUDAを試してみた</title>
      <link>/blog/2015/07/25/setup_pycuda_on_macbook_pro_with_geforce/</link>
      <pubDate>Sat, 25 Jul 2015 18:31:56 +0900</pubDate>
      
      <guid>/blog/2015/07/25/setup_pycuda_on_macbook_pro_with_geforce/</guid>
      <description>

&lt;h2 id=&#34;はじめに:2e3483d036f73ae71cfba34bbe193b52&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;../setup_cuda_on_macbook_pro_with_geforce/&#34;&gt;GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ&lt;/a&gt;でCUDAをセットアップした後、&lt;a href=&#34;http://mathema.tician.de/software/pycuda/&#34;&gt;PyCUDA&lt;/a&gt;も試してみたのでメモしておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://mathema.tician.de/software/pycuda/&#34;&gt;PyCUDA&lt;/a&gt;のページの &lt;code&gt;Prerequisites&lt;/code&gt; に &lt;code&gt;Boost&lt;/code&gt;, &lt;code&gt;CUDA&lt;/code&gt;, &lt;code&gt;Numpy&lt;/code&gt; が書かれています。&lt;/p&gt;

&lt;p&gt;CUDAは&lt;a href=&#34;../setup_cuda_on_macbook_pro_with_geforce/&#34;&gt;GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ&lt;/a&gt;でセットアップ済みです。&lt;/p&gt;

&lt;h2 id=&#34;boostのインストール:2e3483d036f73ae71cfba34bbe193b52&#34;&gt;Boostのインストール&lt;/h2&gt;

&lt;p&gt;Boostは &lt;a href=&#34;http://brew.sh/&#34;&gt;Homebrew — The missing package manager for OS X&lt;/a&gt; でインストールしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew update
brew install boost
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;インストールされたboostのバージョンは以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ brew info boost
boost: stable 1.58.0 (bottled), HEAD
Collection of portable C++ source libraries
http://www.boost.org
/usr/local/Cellar/boost/1.58.0 (10718 files, 486M) *
  Poured from bottle
From: https://github.com/Homebrew/homebrew/blob/master/Library/Formula/boost.rb
==&amp;gt; Dependencies
Optional: icu4c ✘
==&amp;gt; Options
--c++11
	Build using C++11 mode
--universal
	Build a universal binary
--with-icu4c
	Build regexp engine with icu support
--with-mpi
	Build with MPI support
--without-single
	Disable building single-threading variant
--without-static
	Disable building static library variant
--HEAD
	Install HEAD version
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;numpyとpycudaをインストールして試してみる:2e3483d036f73ae71cfba34bbe193b52&#34;&gt;NumpyとPyCUDAをインストールして試してみる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/riywo/anyenv&#34;&gt;riywo/anyenv&lt;/a&gt;と&lt;a href=&#34;https://github.com/yyuu/pyenv&#34;&gt;yyuu/pyenv&lt;/a&gt;で入れたPython 3.4.3を使い、 &lt;code&gt;~/sandbox/pycuda&lt;/code&gt; という作業ディレクトリを作成してvenv環境を作って試しました。&lt;/p&gt;

&lt;p&gt;以下の手順でvenv環境を作って有効にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/sandbox/pycuda
cd !$
python -m venv venv
source venv/bin/activate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;(venv) $&lt;/code&gt; プロンプト内で以下のコマンドでNumPyとPyCUDAをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pip install numpy
pip install pycuda
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;PyCUDAのほうは以下のような警告が出ましたが、インストールは出来ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    /Users/hnakamur/sandbox/pycuda/venv/lib/python3.4/site-packages/numpy/core/include/numpy/npy_1_7_deprecated_api.h:15:2: warning: &amp;quot;Using deprecated NumPy API, disable it by &amp;quot;          &amp;quot;#defining NPY_NO_DEPRECATED_API NPY_1_7_API_VERSION&amp;quot; [-W#warnings]
    #warning &amp;quot;Using deprecated NumPy API, disable it by &amp;quot; \
     ^
    src/wrapper/_pvt_struct_v3.cpp:1047:30: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        static char *kwlist[] = {&amp;quot;format&amp;quot;, 0};
                                 ^
    src/wrapper/_pvt_struct_v3.cpp:1166:30: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        static char *kwlist[] = {&amp;quot;buffer&amp;quot;, &amp;quot;offset&amp;quot;, 0};
                                 ^
    src/wrapper/_pvt_struct_v3.cpp:1166:40: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        static char *kwlist[] = {&amp;quot;buffer&amp;quot;, &amp;quot;offset&amp;quot;, 0};
                                           ^
    src/wrapper/_pvt_struct_v3.cpp:1224:17: warning: unused variable &#39;isstring&#39; [-Wunused-variable]
                int isstring;
                    ^
    src/wrapper/_pvt_struct_v3.cpp:1430:6: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        {&amp;quot;format&amp;quot;, (getter)s_get_format, (setter)NULL, &amp;quot;struct format string&amp;quot;, NULL},
         ^
    src/wrapper/_pvt_struct_v3.cpp:1430:52: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        {&amp;quot;format&amp;quot;, (getter)s_get_format, (setter)NULL, &amp;quot;struct format string&amp;quot;, NULL},
                                                       ^
    src/wrapper/_pvt_struct_v3.cpp:1431:6: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        {&amp;quot;size&amp;quot;, (getter)s_get_size, (setter)NULL, &amp;quot;struct size in bytes&amp;quot;, NULL},
         ^
    src/wrapper/_pvt_struct_v3.cpp:1431:48: warning: conversion from string literal to &#39;char *&#39; is deprecated [-Wc++11-compat-deprecated-writable-strings]
        {&amp;quot;size&amp;quot;, (getter)s_get_size, (setter)NULL, &amp;quot;struct size in bytes&amp;quot;, NULL},
                                                   ^
    src/wrapper/_pvt_struct_v3.cpp:1720:1: warning: duplicate &#39;extern&#39; declaration specifier [-Wduplicate-decl-specifier]
    PyMODINIT_FUNC
    ^
    /Users/hnakamur/.anyenv/envs/pyenv/versions/3.4.3/include/python3.4m/pyport.h:778:39: note: expanded from macro &#39;PyMODINIT_FUNC&#39;
    #               define PyMODINIT_FUNC extern &amp;quot;C&amp;quot; PyObject*
                                          ^
    10 warnings generated.
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;pycudaのサンプルを試す:2e3483d036f73ae71cfba34bbe193b52&#34;&gt;PyCUDAのサンプルを試す&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://documen.tician.de/pycuda/tutorial.html&#34;&gt;Tutorial — PyCUDA 2015.1.2 documentation&lt;/a&gt;と&lt;a href=&#34;http://qiita.com/masato/items/713fa8876e50a65d575c&#34;&gt;Windows7 64bitにPyCUDAとTheanoをインストールしてGPU計算する - Qiita&lt;/a&gt;の&lt;a href=&#34;http://qiita.com/masato/items/713fa8876e50a65d575c#%E3%83%86%E3%82%B9%E3%83%88&#34;&gt;テスト&lt;/a&gt;を参考にして、以下の内容で &lt;code&gt;pycuda-test.py&lt;/code&gt; を作って実行してみました。&lt;/p&gt;

&lt;p&gt;Python 3.xを使っているので &lt;code&gt;print&lt;/code&gt; の引数は括弧で囲むように書き換えています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;import pycuda.gpuarray as gpuarray
import pycuda.driver as cuda
import pycuda.autoinit
import numpy

a_gpu = gpuarray.to_gpu(numpy.random.randn(4,4).astype(numpy.float32))
a_doubled = (2*a_gpu).get()
print(a_doubled)
print(a_gpu)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行してみると、以下のように出力されPyCUDAが無事動きました！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;(venv) $ python pycuda-test.py
[[-0.72795004 -0.16994514  0.02276878 -1.07509565]
 [ 0.20851769  2.08421874 -0.51877511 -1.27585149]
 [ 0.29300559 -0.40393201  3.15332532 -1.90199065]
 [ 2.87024021  0.64773476  2.65404892 -2.97092891]]
[[-0.36397502 -0.08497257  0.01138439 -0.53754783]
 [ 0.10425884  1.04210937 -0.25938755 -0.63792574]
 [ 0.14650279 -0.201966    1.57666266 -0.95099533]
 [ 1.43512011  0.32386738  1.32702446 -1.48546445]]
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ</title>
      <link>/blog/2015/07/25/setup_cuda_on_macbook_pro_with_geforce/</link>
      <pubDate>Sat, 25 Jul 2015 17:37:59 +0900</pubDate>
      
      <guid>/blog/2015/07/25/setup_cuda_on_macbook_pro_with_geforce/</guid>
      <description>

&lt;h2 id=&#34;はじめに:a311e6dec28847b69a9c104c237fbeb5&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.apple.com/jp/macbook-pro/specs-retina/&#34;&gt;MacBook Pro現行モデルの技術仕様&lt;/a&gt;を見ると最上位機種のグラフィックスチップはIntel Iris Pro GraphicsとAMD Radeon R9 M370Xとなっており、NVIDIA GeForceは搭載されていません。&lt;/p&gt;

&lt;p&gt;ですが、&lt;a href=&#34;https://support.apple.com/kb/SP694?locale=ja_JP&amp;amp;viewlocale=ja_JP&#34;&gt;MacBook Pro (15-inch, Mid 2012) - 技術仕様&lt;/a&gt;を見ると、私が持っているMacBook Proは15インチ2.6GHzモデルなのでNVIDIA GeForce GT 650M、1GB GDDR5メモリが搭載されています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nvidia.co.jp/object/geforce-gt-650m-jp.html#pdpContent=2&#34;&gt;GeForce GT 650M | NVIDIA&lt;/a&gt;には「プログラミング環境」の行に「CUDA」とあるのでCUDAが使えるようです。&lt;/p&gt;

&lt;p&gt;ということでCUDAを試してみたので、手順をメモしておきます。試した時のOS Xのバージョンは10.10.4、Xcodeのバージョンは6.4です。&lt;/p&gt;

&lt;h2 id=&#34;cudaドライバのインストールとアップデート:a311e6dec28847b69a9c104c237fbeb5&#34;&gt;CUDAドライバのインストールとアップデート&lt;/h2&gt;

&lt;p&gt;後述のCUDAツールキットのインストール中の画面にCUDAドライバも含まれているような記述があったので、この手順は不要かもしれません。が、今回はそれを知らずに先にCUDAドライバを単体でインストールしたので、一応書いておきます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nvidia.co.jp/object/mac-driver-archive-jp.html&#34;&gt;MAC アーカイブ用CUDA ドライバ | NVIDIA&lt;/a&gt;から最新のドライバをダウンロード、インストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://www.nvidia.co.jp/object/macosx-cuda-7.0.36-driver-jp.html&#34;&gt;NVIDIA DRIVERS 7.0.36&lt;/a&gt;の「リリースハイライト」によると、[システム環境設定]→[CUDA]でインストール済みのCUDAドライバのバージョンと最新バージョンの確認が出来て、アップデートもできるそうです。&lt;/p&gt;

&lt;p&gt;早速確認してみると、インストール済みのCUDA Driver Versionは7.0.29となっており、CUDA 7.0.52 Driver update is availableと表示されていました。&lt;/p&gt;

&lt;p&gt;7.0.36のドライバを単体でインストールしたのに7.0.29になっているのは後述のCUDAツールキットのインストールで上書きされたのだと思われます。ついでなので、[Install CUDA Update]ボタンを押してアップデートしておきました。&lt;/p&gt;

&lt;h2 id=&#34;cudaツールキットのインストール:a311e6dec28847b69a9c104c237fbeb5&#34;&gt;CUDAツールキットのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.nvidia.com/cuda/index.html#axzz3gt2fIbGh&#34;&gt;CUDA Toolkit Documentation&lt;/a&gt;のページから&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-mac-os-x/index.html#axzz3gt2fIbGh&#34;&gt;Getting Started Mac OS X&lt;/a&gt;に進み、&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-mac-os-x/index.html#installation&#34;&gt;3. Installation&lt;/a&gt;を参考にCUDAツールキットをインストールしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://developer.nvidia.com/cuda-downloads&#34;&gt;CUDA 7 Downloads&lt;/a&gt;で[Mac OSX]のタブに切り替えてインストーラをダウンロードします。最初Network Installerを試したのですが、ダウンロードしたdmgファイルを開いてCUDAMacOSXInstallerをダブルクリックしたら「“CUDAMacOSXInstaller”はこわれているため開けません。」というエラーが出たので、Local Installer (977MB)を試したら、こちらは無事インストール出来ました。&lt;/p&gt;

&lt;p&gt;その後、cuFFT Patchをダウンロードして、&lt;a href=&#34;http://developer.download.nvidia.com/compute/cuda/7_0/Prod/cufft_update/README_mac.txt&#34;&gt;README&lt;/a&gt;を参考にターミナルで以下のコマンドを実行してパッチを適用しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo tar zxf ~/Downloads/cufft_patch_mac.tar.gz -C /Developer/NVIDIA/CUDA-7.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cudaツールキット用の環境変数設定:a311e6dec28847b69a9c104c237fbeb5&#34;&gt;CUDAツールキット用の環境変数設定&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-mac-os-x/index.html#axzz3gt2fIbGh&#34;&gt;Getting Started Mac OS X&lt;/a&gt;の&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-mac-os-x/index.html#install&#34;&gt;3.2. Install&lt;/a&gt;で環境変数 &lt;code&gt;PATH&lt;/code&gt; と &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; の設定方法が書いてあるのですが、この通りだとあとでPyCUDAをインストールするときに &lt;code&gt;-lcuda&lt;/code&gt; が見つからずリンクエラーになりました。&lt;/p&gt;

&lt;p&gt;検索してみると&lt;a href=&#34;https://code.google.com/p/pyrit/issues/detail?id=248&#34;&gt;Issue 248 - pyrit - Build script can&amp;rsquo;t find CUDA library directory on OS X. - WPA/WPA2-PSK and a world of affordable many-core platforms - Google Project Hosting&lt;/a&gt; で &lt;code&gt;/usr/local/cuda&lt;/code&gt; というディレクトリがあることを知り、&lt;code&gt;/usr/local/cuda/lib&lt;/code&gt; と &lt;code&gt;/Developer/NVIDIA/CUDA-7.0/lib&lt;/code&gt; の中身を見てみると &lt;code&gt;libcuda.dylib&lt;/code&gt; だけは前者にしか無いことが判明しました。&lt;/p&gt;

&lt;p&gt;結局以下のように設定する必要がありました (bash以外の場合は適宜変更してください)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;lt;&amp;lt;&#39;EOF&#39; &amp;gt;&amp;gt; ~/.bash_profile
# CUDA
export CUDA_ROOT=/usr/local/cuda
export PATH=$CUDA_ROOT/bin:$PATH
export DYLD_LIBRARY_PATH=$CUDA_ROOT/lib:$PATH
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;設定ファイルを書き換えたら以下のコマンドでシェルを再起動して設定を読み込んでおきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;exec $SHELL -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;統合gpuではなくgeforceを使うように切り替える設定:a311e6dec28847b69a9c104c237fbeb5&#34;&gt;統合GPUではなくGeForceを使うように切り替える設定&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-mac-os-x/index.html#axzz3gt2fIbGh&#34;&gt;Getting Started Mac OS X&lt;/a&gt;の&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-mac-os-x/index.html#install&#34;&gt;3.2. Install&lt;/a&gt;の説明に従って、以下のように設定しました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[システム環境設定]→[省エネルギー]を開きます&lt;/li&gt;
&lt;li&gt;[グラフィックスの自動切り替え]のチェックを外します&lt;/li&gt;
&lt;li&gt;電源アダプタに繋いでいる場合は[電源アダプタ]、繋いでいない場合は[バッテリー]を選びます&lt;/li&gt;
&lt;li&gt;[コンピュータのスリープ]のスライダーを[しない]に調節します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;cudaのサンプルを試す:a311e6dec28847b69a9c104c237fbeb5&#34;&gt;CUDAのサンプルを試す&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-mac-os-x/index.html#axzz3gt2fIbGh&#34;&gt;Getting Started Mac OS X&lt;/a&gt;の&lt;a href=&#34;http://docs.nvidia.com/cuda/cuda-getting-started-guide-for-mac-os-x/index.html#install&#34;&gt;3.2. Install&lt;/a&gt;の説明に従って、 &lt;code&gt;cuda-install-samples-7.0.sh&lt;/code&gt; を使ってサンプルプログラムを取得して試してみました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;~/sandbox/cuda&lt;/code&gt; という作業用のディレクトリを作って以下の手順で試しました。 &lt;code&gt;cuda-install-samples-7.0.sh&lt;/code&gt; はインストール先のディレクトリを引数で指定する必要がありました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/sandbox/cuda
cd !$
cuda-install-samples-7.0.sh .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行すると &lt;code&gt;NVIDIA_CUDA-7.0_Samples&lt;/code&gt; というディレクトリが作成され、配下にサンプルプログラムのソースファイルが展開されていました。&lt;/p&gt;

&lt;p&gt;そのうちの1つ &lt;code&gt;asyncAPI&lt;/code&gt; というのを試してみました。以下の手順でビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd NVIDIA_CUDA-7.0_Samples/0_Simple/asyncAPI
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実行してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ../../bin/x86_64/darwin/release/asyncAPI
[../../bin/x86_64/darwin/release/asyncAPI] - Starting...
GPU Device 0: &amp;quot;GeForce GT 650M&amp;quot; with compute capability 3.0

CUDA device [GeForce GT 650M]
time spent executing by the GPU: 99.45
time spent by CPU in CUDA calls: 0.05
CPU executed 583004 iterations while waiting for GPU to finish
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;動きました！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>