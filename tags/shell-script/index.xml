<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/shell-script/index.xml</link>
    <description>Recent content on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/tags/shell-script/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>manyrustという複数バージョンのrustインストールスクリプトを書いた</title>
      <link>https://hnakamur.github.io/blog/2015/07/18/manyrust/</link>
      <pubDate>Sat, 18 Jul 2015 23:13:32 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/07/18/manyrust/</guid>
      <description>

&lt;h2 id=&#34;multirustがあるのに-なぜ新たに書いたのか&#34;&gt;multirustがあるのに、なぜ新たに書いたのか&lt;/h2&gt;

&lt;p&gt;rustのインストールは&lt;a href=&#34;http://www.rust-lang.org/install.html&#34;&gt;Install · The Rust Programming Language&lt;/a&gt;にあるように複数のチャネルから選んでインストールします。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;stable (安定版)チャネル&lt;/li&gt;
&lt;li&gt;beta (ベータ版)チャネル&lt;/li&gt;
&lt;li&gt;nightly (毎晩ビルドされる)チャネル&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;rustでunstableなAPIを使うにはnightlyを使う必要があるので、たいていはstableとnightlyの両方をインストールして使い分けたくなるはずです。
その用途には定番のスクリプトとして&lt;a href=&#34;https://github.com/brson/multirust&#34;&gt;brson/multirust&lt;/a&gt;があります。&lt;/p&gt;

&lt;p&gt;私も使っていましたが、rustのソースコードの整形ツール&lt;a href=&#34;https://github.com/nrc/rustfmt&#34;&gt;nrc/rustfmt&lt;/a&gt;をビルドして起動しようとするとエラーになってしまいました。&lt;/p&gt;

&lt;p&gt;既に&lt;a href=&#34;https://github.com/brson/multirust/issues/43&#34;&gt;building cargo atop multirust fails, dyn link problems (Mac OS X) · Issue #43 · brson/multirust&lt;/a&gt;にイシューが上がっていて、&lt;a href=&#34;https://github.com/brson/multirust/issues/43#issuecomment-106758695&#34;&gt;コメント106758695&lt;/a&gt;にあるように環境変数 &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; を設定すれば問題は解消するとのことです。&lt;/p&gt;

&lt;p&gt;ディレクトリによって環境変数を切り替えるのは&lt;a href=&#34;https://github.com/direnv/direnv&#34;&gt;direnv/direnv&lt;/a&gt;が便利です。ただ、&lt;code&gt;direnv&lt;/code&gt; を使うのであれば、そもそも &lt;code&gt;multirust&lt;/code&gt; のように &lt;code&gt;rustc&lt;/code&gt; などの実行ファイルをラップしたシェルスクリプトを作る必要は無いわけです。&lt;/p&gt;

&lt;p&gt;rustの複数のバージョンを異なるディレクトリにインストールしておいて、利用するディレクトリごとに環境変数 &lt;code&gt;PATH&lt;/code&gt; と &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; を切り替えればいいだけです。&lt;/p&gt;

&lt;p&gt;であれば、 &lt;code&gt;multirust&lt;/code&gt; 使わなくてももっとシンプルなスクリプトでいいよね、ということで書いたのが &lt;code&gt;manyrust&lt;/code&gt; です。現状はOSXのみサポートしています。&lt;/p&gt;

&lt;h2 id=&#34;インストール手順&#34;&gt;インストール手順&lt;/h2&gt;

&lt;p&gt;以下のようにして &lt;code&gt;~/bin&lt;/code&gt; に &lt;code&gt;manyrust&lt;/code&gt; スクリプトを配置します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/bin
curl -s -o ~/bin/manyrust https://raw.githubusercontent.com/hnakamur/manyrust/master/manyrust
chmod +x ~/bin/manyrust
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;環境変数 &lt;code&gt;PATH&lt;/code&gt; に &lt;code&gt;$HOME/bin&lt;/code&gt; を追加して有効にします。
bashの場合はこんな感じです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;export PATH=&amp;quot;$HOME/bin:$PATH&amp;quot;&#39; &amp;gt;&amp;gt; ~/.bash_profilie
exec $SHELL -l
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rustのインストール&#34;&gt;rustのインストール&lt;/h2&gt;

&lt;p&gt;stableチャネルの最新版をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;manyrust install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;betaチャネルの最新版をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;manyrust install beta
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nightlyチャネルの最新版をインストール&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;manyrust install nightly
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;rustを利用する側の作業ディレクトリでの設定&#34;&gt;rustを利用する側の作業ディレクトリでの設定&lt;/h2&gt;

&lt;p&gt;stableチャネルの最新版を使うディレクトリでの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;manyrust showcfg &amp;gt;&amp;gt; .envrc
direnv allow .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nightlyチャネルの最新版を使うディレクトリでの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;manyrust showcfg nightly &amp;gt;&amp;gt; .envrc
direnv allow .
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;nightlyチャネルの特定のバージョン2015-07-14を使うディレクトリでの設定&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;manyrust showcfg nightly 2015-07-14 &amp;gt;&amp;gt; .envrc
direnv allow .
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;応用例&#34;&gt;応用例&lt;/h3&gt;

&lt;p&gt;基本的にはstableチャネルのrustを使いたいが、特定のディレクトリ下ではnightlyを使いたい場合は &lt;code&gt;$HOME/.envrc&lt;/code&gt; にstableを使う設定を書いておいて、特定のディレクトリの &lt;code&gt;.envrc&lt;/code&gt; ではnightlyを使う設定を書いておけばOKです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ manyrust showcfg &amp;gt;&amp;gt; ~/.envrc
direnv: error .envrc is blocked. Run `direnv allow` to approve its content.
$ direnv allow ~
direnv: loading ../../../../.envrc
direnv: export +DYLD_LIBRARY_PATH ~PATH
$ mkdir ~/nightly_work
$ cd !$
cd ~/nightly_work
$ manyrust showcfg nightly &amp;gt;&amp;gt; .envrc
direnv: error .envrc is blocked. Run `direnv allow` to approve its content.
$ direnv allow .
direnv: loading .envrc
direnv: export +DYLD_LIBRARY_PATH ~PATH
$ rustc --version
rustc 1.3.0-nightly (e4e93196e 2015-07-14)
$ echo $DYLD_LIBRARY_PATH
/Users/hnakamur/rust/nightly/2015-07-14/rust/lib:
$ cd
direnv: loading .envrc
direnv: export +DYLD_LIBRARY_PATH ~PATH
$ rustc --version
rustc 1.1.0 (35ceea399 2015-06-19)
$ echo $DYLD_LIBRARY_PATH
/Users/hnakamur/rust/stable/1.1.0/rust/lib:
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;direnvを使って設定を切り替えることの利点&#34;&gt;direnvを使って設定を切り替えることの利点&lt;/h3&gt;

&lt;p&gt;上の例で生成した設定ファイルは以下のようになっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat ~/.envrc
source &amp;quot;${MANYRUST_ROOT:-$HOME/rust}/stable/current/etc/bashrc&amp;quot;
$ cat ~/nightly_work/.envrc
source &amp;quot;${MANYRUST_ROOT:-$HOME/rust}/nightly/current/etc/bashrc&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;souce&lt;/code&gt; で読み込むファイルは &lt;code&gt;manyrust install&lt;/code&gt; で以下のように生成されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat ~/rust/stable/current/etc/bashrc
rust_root=&amp;quot;${RUSTS_HOME:-$HOME/rust}/stable/1.1.0/rust&amp;quot;
export PATH=&amp;quot;$rust_root/bin:$PATH&amp;quot;
export DYLD_LIBRARY_PATH=&amp;quot;$rust_root/lib:$DYLD_LIBRARY_PATH&amp;quot;
$ cat ~/rust/nightly/current/etc/bashrc
rust_root=&amp;quot;${RUSTS_HOME:-$HOME/rust}/nightly/2015-07-14/rust&amp;quot;
export PATH=&amp;quot;$rust_root/bin:$PATH&amp;quot;
export DYLD_LIBRARY_PATH=&amp;quot;$rust_root/lib:$DYLD_LIBRARY_PATH&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;direnv&lt;/code&gt; を使わずに何回もこういうファイルを &lt;code&gt;source&lt;/code&gt; すると、 &lt;code&gt;PATH&lt;/code&gt; や &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; の中身がどんどん増えてしまいます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ eval `manyrust showcfg beta`
$ echo $DYLD_LIBRARY_PATH
/Users/hnakamur/rust/beta/1.2.0-beta.2/rust/lib:
$ eval `manyrust showcfg stable`
$ echo $DYLD_LIBRARY_PATH
/Users/hnakamur/rust/stable/1.1.0/rust/lib:/Users/hnakamur/rust/beta/1.2.0-beta.2/rust/lib:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;長いだけではなく、この例だとstableには無いがnightlyにあるライブラリが存在するとstableのライブラリを使いたいのにnightly側が使われてしまうという問題が起きてしまいます。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;direnv&lt;/code&gt; を使っていれば、上の応用例のように &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; の値が追加されるのではなく設定が切り替えられるので、この問題は起きません。&lt;/p&gt;

&lt;h2 id=&#34;rustfmtのビルドとインストール&#34;&gt;rustfmtのビルドとインストール&lt;/h2&gt;

&lt;p&gt;で、ここまで書いてから &lt;code&gt;rustfmt&lt;/code&gt; をビルド、インストールしようとして問題に気付きました。 &lt;code&gt;rustfmt&lt;/code&gt; は &lt;code&gt;~/rust/nightly/current/rust/bin/&lt;/code&gt; に置いて上記のように &lt;code&gt;.envrc&lt;/code&gt; で切り替えればいいかと思っていたのですが、そうすると &lt;code&gt;stable&lt;/code&gt; を使うように &lt;code&gt;.envrc&lt;/code&gt; を設定したディレクトリでは &lt;code&gt;rustfmt&lt;/code&gt; が使えなくなってしまいます。&lt;/p&gt;

&lt;p&gt;またnightlyのバージョンが上がると &lt;code&gt;rustfmt&lt;/code&gt; をビルドし直す必要もあります。&lt;/p&gt;

&lt;p&gt;これを回避するためにはビルドした &lt;code&gt;rustfmt&lt;/code&gt; は &lt;code&gt;~/bin/rustfmt.bin&lt;/code&gt; と名前を変えて &lt;code&gt;~/bin&lt;/code&gt; に置いて、ラップしたスクリプトを &lt;code&gt;~/bin/rustfmt&lt;/code&gt; という名前で作成します。&lt;/p&gt;

&lt;p&gt;具体的な手順は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/nrc/rustfmt
cd rustfmt
manyrust showcfg nightly &amp;gt;&amp;gt; .envrc
direnv allow .
cargo build --release
cp target/release/rustfmt ~/bin/rustfmt.bin
cat &amp;lt;&amp;lt;&#39;EOF&#39; &amp;gt; ~/bin/rustfmt
#!/bin/sh
DYLD_LIBRARY_PATH=&amp;quot;${MANYRUST_ROOT:-$HOME/rust}/nightly/2015-07-14/rust/lib&amp;quot; $HOME/bin/rustfmt.bin &amp;quot;$@&amp;quot;
EOF
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今後nightlyを追加インストールした時に &lt;code&gt;rustfmt&lt;/code&gt; が依存しているディレクトリが新しいバージョンの &lt;code&gt;lib&lt;/code&gt; ディレクトリに存在しない場合に備えて、 &lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; は &lt;code&gt;~/rust/nightly/current/rust/lib&lt;/code&gt; ではなく特定のバージョンの &lt;code&gt;lib&lt;/code&gt; ディレクトリを指定しています。&lt;/p&gt;

&lt;p&gt;ということで、 &lt;code&gt;rustfmt&lt;/code&gt; に関しては &lt;code&gt;multirust&lt;/code&gt; でも &lt;code&gt;manyrust&lt;/code&gt; でも同じことで、&lt;code&gt;DYLD_LIBRARY_PATH&lt;/code&gt; を設定して実行するようなスクリプトを書いてラップする必要があるというオチでした。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>