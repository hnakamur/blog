<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/riot.js/index.xml</link>
    <description>Recent content on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/tags/riot.js/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Riot.jsでタグエディターのサンプルを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2015/02/28/riot-tag-editor-example/</link>
      <pubDate>Sat, 28 Feb 2015 21:12:37 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/02/28/riot-tag-editor-example/</guid>
      <description>

&lt;h2 id=&#34;riot-js&#34;&gt;Riot.js&lt;/h2&gt;

&lt;p&gt;Riot.jsについては&lt;a href=&#34;http://qiita.com/cognitom/items/54ae38c9a50dbbe28367&#34;&gt;Riot.js 2.0 情報まとめ - Qiita&lt;/a&gt;に良いまとめがありますのでそちらをどうぞ。良いまとめをありがとうございます。&lt;/p&gt;

&lt;h2 id=&#34;本家が提供しているtodoアプリをgoemonでライブリロードして開発を高速化するサンプル&#34;&gt;本家が提供しているToDoアプリをgoemonでライブリロードして開発を高速化するサンプル&lt;/h2&gt;

&lt;p&gt;今回のタグエディターの前に、環境整備ということで本家が提供しているToDoアプリをgoemonでライブリロードして開発を高速化するサンプルを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/riotjs-todo-goemon-livereload-example&#34;&gt;hnakamur/riotjs-todo-goemon-livereload-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://muut.com/riotjs/guide/&#34;&gt;Riot developer guide&lt;/a&gt;にあるアプリからどのように変更したかはgitのコミットを小分けにしてあるので、そちらをご参照ください。
&lt;a href=&#34;https://github.com/hnakamur/riotjs-todo-goemon-livereload-example/commits/master&#34;&gt;Commits · hnakamur/riotjs-todo-goemon-livereload-example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;タグエディターのサンプルをriot-jsでも作ってみた&#34;&gt;タグエディターのサンプルをRiot.jsでも作ってみた&lt;/h2&gt;

&lt;p&gt;で、本題のタグエディターのサンプルです。以前にjQuery, Backbone.js, Vue.jsで同じものを作っていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/ac5f04930d0c08f141e5&#34;&gt;jQuery - タグ・エディターを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/bfdade12bc5db21fa771&#34;&gt;Backbone.jsでタグ・エディターを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/a73ff28621e06193a228&#34;&gt;vue.jsでタグ・エディターを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はRiot.jsで作ってみました。&lt;/p&gt;

&lt;p&gt;ソース: &lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon&#34;&gt;hnakamur/riot-tag-editor-live-reload-example-with-goemon&lt;/a&gt;
コンパイル済みのデモ: &lt;a href=&#34;https://hnakamur.github.io/riot-tag-editor-live-reload-example-with-goemon/demo/&#34;&gt;Riot tag editor example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;セットアップ手順はソースの&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/master/README.md&#34;&gt;README&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;タグエディターのタグのソースは&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/master/assets/tag-editor.tag&#34;&gt;tag-editor.tag&lt;/a&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tag-editor&amp;gt;
  &amp;lt;div class=&amp;quot;tag-editor-field&amp;quot; onclick={ click }&amp;gt;
    &amp;lt;div class=&amp;quot;tag-editor-tag tag-editor-tag-measure&amp;quot;&amp;gt;
      &amp;lt;div id=&amp;quot;measure&amp;quot; class=&amp;quot;tag-editor-text&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;a class=&amp;quot;tag-editor-delete&amp;quot;&amp;gt;x&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div each={ tags } class=&amp;quot;tag-editor-tag&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;tag-editor-text&amp;quot;&amp;gt;{ name }&amp;lt;/div&amp;gt;
      &amp;lt;a class=&amp;quot;tag-editor-delete&amp;quot; onclick={ parent.clickDelete }&amp;gt;x&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;input name=&amp;quot;editor&amp;quot; class=&amp;quot;tag-editor-input&amp;quot; style=&amp;quot;width: 0&amp;quot; onkeyup={ keyup } onkeydown={ keydown } onblur={ blur }&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;script&amp;gt;
    this.tags = opts.tags
    this.separator = /[, ]+/

    click(e) {
      adjustEditorWidth(this)
      this.editor.focus()
      return false
    }

    keyup(e) {
      var val = this.editor.value
      if (this.separator.test(val)) {
        mayInsertTags(this)
      } else {
        adjustEditorWidth(this)
      }
      return false
    }

    keydown(e) {
      if (e.which == 13 /* Enter */ &amp;amp;&amp;amp; this.editor.value !== &#39;&#39;) {
        mayInsertTags(this)
        return true
      } else if (e.which == 8 /* Backspace */ &amp;amp;&amp;amp; this.editor.value === &#39;&#39; &amp;amp;&amp;amp; this.tags.length &amp;gt; 0) {
        this.tags.pop()
      }
      return true
    }

    blur(e) {
      mayInsertTags(this)
      return true
    }

    clickDelete(e) {
      e.stopPropagation()
      this.tags.splice(this.tags.indexOf(e.item), 1)
      return false
    }

    function adjustEditorWidth(elem) {
      elem.measure.innerText = elem.editor.value + &#39;WW&#39;
      elem.editor.style.width = elem.measure.offsetWidth + &#39;px&#39;
    }

    function mayInsertTags(elem) {
      var values = elem.editor.value.split(elem.separator),
          i = 0,
          len = values.length,
          value
      elem.editor.value = &#39;&#39;
      adjustEditorWidth(elem)
      for (; i &amp;lt; len; i++) {
        value = values[i]
        if (value !== &#39;&#39; &amp;amp;&amp;amp; !containsTag(elem, value)) {
          elem.tags.push({name: value})
        }
      }
    }

    function containsTag(elem, tag) {
      var i = 0, 
          len = elem.tags.length
      for (; i &amp;lt; len; i++) {
        if (elem.tags[i].name === tag) {
          return true
        }
      }
      return false
    }
  &amp;lt;/script&amp;gt;

&amp;lt;/tag-editor&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTMLのタグとJavaScriptのコードを一箇所にかけて、イベントもonclickとかで書くので、コンパクトで見やすいです。
onclickとかに指定した関数は &lt;code&gt;function&lt;/code&gt; なしで書けるようになっていますが、そうでない関数には &lt;code&gt;function&lt;/code&gt; を明記する必要がありました。&lt;/p&gt;

&lt;p&gt;タグエディターを利用する側のHTMLのコードは以下の様な感じで、こちらもシンプルです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/assets/index.html#L31-L41&#34;&gt;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/assets/index.html#L31-L41&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;script src=&amp;quot;tag-editor.tag&amp;quot; type=&amp;quot;riot/tag&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/g/riot@2.0(riot.min.js+compiler.min.js)&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
    riot.mount(&#39;tag-editor&#39;, {
      tags: [
        {name: &#39;foo&#39;},
        {name: &#39;bar&#39;},
      ]
    })
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;プリコンパイル済みのソースの作成&#34;&gt;プリコンパイル済みのソースの作成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;riot assets/ demo/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で &lt;code&gt;assets/tag-editor.tag&lt;/code&gt; から &lt;code&gt;demo/tag-editor.js&lt;/code&gt; が生成されます。&lt;/p&gt;

&lt;p&gt;利用する側のHTMLは以下のようにします。 riot.jsの読み込み方法と、タグエディターのソースを読み込む順番が開発時とは違うので要注意です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/demo/index.html#L30-L40&#34;&gt;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/demo/index.html#L30-L40&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/riot/2.0/riot.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;tag-editor.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
    riot.mount(&#39;tag-editor&#39;, {
      tags: [
        {name: &#39;foo&#39;},
        {name: &#39;bar&#39;},
      ]
    })
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;riot-jsの魅力&#34;&gt;Riot.jsの魅力&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://muut.com/riotjs/compare.html&#34;&gt;Riot vs React vs Polymer&lt;/a&gt;を見ても、riot.min.jsは6.7KBとコンパクトなのが魅力です。それでいてカスタムタグもすっきりシンプルに書けますし。これは今後に期待ですね！&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>