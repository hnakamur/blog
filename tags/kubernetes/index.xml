<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Kubernetes on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/kubernetes/index.xml</link>
    <description>Recent content in Kubernetes on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/tags/kubernetes/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>さくらのクラウドでPackerとTerraformを使ってContainer Linuxの環境構築をしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/02/use-container-linux-on-sakura-cloud-using-packer-and-terraform/</link>
      <pubDate>Mon, 02 Jan 2017 15:34:23 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/01/02/use-container-linux-on-sakura-cloud-using-packer-and-terraform/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;さくらのクラウドでPackerとTerraformを使って&lt;a href=&#34;https://coreos.com/os/docs/latest/&#34;&gt;CoreOS Container Linux&lt;/a&gt;の環境構築をしてみたのでメモです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://cloud-news.sakura.ad.jp/public_archive_iso/&#34;&gt;パブリックアーカイブ・ISOイメージ&lt;/a&gt;にCoreOSはあるのですが、現状では残念ながらバージョンが 367.1.0 (stable) とかなり古い状態です。&lt;/p&gt;

&lt;p&gt;そこで &lt;a href=&#34;https://stable.release.core-os.net/amd64-usr/&#34;&gt;https://stable.release.core-os.net/amd64-usr/&lt;/a&gt; 以下にある安定版公式ISOイメージの現時点の最新版である 1185.5.0 を使ってPackerでさくらのクラウド上にマイアーカイブを作成し、それを元にサーバで使用するディスクとサーバを作成します。&lt;/p&gt;

&lt;p&gt;さくらのクラウドには&lt;a href=&#34;http://cloud-news.sakura.ad.jp/startup-script/&#34;&gt;スタートアップスクリプト&lt;/a&gt;という機能がありサーバの起動時に設定を行うことができるのですが、これが使えるのはCentOS、Debian、Ubuntuに限定されるようでCoreOSでは使えませんでした。&lt;/p&gt;

&lt;p&gt;これだと構成はほぼ同じで静的IPアドレスだけが異なる複数のサーバを作りたい場合も、サーバ1台毎にPackerでマイアーカイブを作ってそこからサーバを作る必要があり、実用には厳しいなと思って一度は断念していました。&lt;/p&gt;

&lt;p&gt;ルータを使わない構成であれば、まずはDHCPで起動してアドレスをもらってからプロビジョニング時に静的IPアドレスに切り替えるという手はあります。ですがルータを使う場合はDHCPサーバがいないのでこの手は使えません。&lt;/p&gt;

&lt;p&gt;そんな時、&lt;a href=&#34;https://github.com/sacloud/packer-builder-sakuracloud&#34;&gt;さくらのクラウド用Packerプラグイン&lt;/a&gt;、&lt;a href=&#34;https://github.com/yamamoto-febc/terraform-provider-sakuracloud&#34;&gt;Terraform for さくらのクラウド&lt;/a&gt;、&lt;a href=&#34;https://github.com/yamamoto-febc/sacloud-upload-image&#34;&gt;Upload ISO image to SAKURA CLOUD&lt;/a&gt;などの便利なツールを作ってくださっている山本さんのツイートでContainer Linuxの&lt;a href=&#34;https://coreos.com/os/docs/latest/config-drive.html&#34;&gt;Customize with Config-Drive&lt;/a&gt;という機能を知りました。便利なツールに加えて有用な情報、いつもありがとうございます！&lt;/p&gt;

&lt;p&gt;この記事はこの機能と上記の3つのツールを使ってContainer Linuxの環境構築をしてみたメモです。&lt;/p&gt;

&lt;h2 id=&#34;container-linuxのisoイメージ作成&#34;&gt;Container LinuxのISOイメージ作成&lt;/h2&gt;

&lt;h3 id=&#34;packerとさくらのクラウド用packerプラグインの事前準備&#34;&gt;Packerとさくらのクラウド用Packerプラグインの事前準備&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.packer.io/&#34;&gt;Packer by HashiCorp&lt;/a&gt;と&lt;a href=&#34;https://github.com/sacloud/packer-builder-sakuracloud&#34;&gt;さくらのクラウド用Packerプラグイン&lt;/a&gt;をインストールしていない場合はそれぞれのドキュメントに従ってインストールしてください。&lt;/p&gt;

&lt;p&gt;また&lt;a href=&#34;https://github.com/yamamoto-febc/terraform-provider-sakuracloud/blob/master/docs/installation.md#%E3%81%95%E3%81%8F%E3%82%89%E3%81%AE%E3%82%AF%E3%83%A9%E3%82%A6%E3%83%89api%E3%82%AD%E3%83%BC%E3%81%AE%E5%8F%96%E5%BE%97&#34;&gt;APIキーの取得&lt;/a&gt;と&lt;a href=&#34;https://github.com/sacloud/packer-builder-sakuracloud#apiキーの設定&#34;&gt;APIキーの設定&lt;/a&gt;も行っておいてください。&lt;/p&gt;

&lt;h3 id=&#34;packerでさくらのクラウドにcontainer-linuxのマイアーカイブを作成&#34;&gt;PackerでさくらのクラウドにContainer Linuxのマイアーカイブを作成&lt;/h3&gt;

&lt;p&gt;以下の内容を containerlinux.json というファイルに保存します。
「ここにパスワードを設定」にはContainer Linuxで予め用意されている &lt;code&gt;core&lt;/code&gt; ユーザに設定するパスワードを設定します。
「ここにパスワードのハッシュを設定」には &lt;a href=&#34;https://github.com/coreos/coreos-cloudinit/blob/master/Documentation/cloud-config.md#generating-a-password-hash&#34;&gt;Generating a password hash&lt;/a&gt; の手順で生成したパスワードのハッシュを設定します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;sakuracloud_zone&lt;/code&gt; は&lt;a href=&#34;http://developer.sakura.ad.jp/cloud/api/1.1/&#34;&gt;さくらのクラウド API v1.1 ドキュメント&lt;/a&gt;の一般注記事項のAPI URLに書いてあるゾーンのうち、自分が利用したいゾーンを指定します。以下の例では &lt;code&gt;is1b&lt;/code&gt; (石狩第2ゾーン)としています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;variables&amp;quot;: {
    &amp;quot;sakuracloud_zone&amp;quot;: &amp;quot;is1b&amp;quot;,
    &amp;quot;archive_name&amp;quot;: &amp;quot;CoreOS 1185.5.0&amp;quot;,
    &amp;quot;iso_url&amp;quot;: &amp;quot;https://stable.release.core-os.net/amd64-usr/1185.5.0/coreos_production_iso_image.iso&amp;quot;,
    &amp;quot;iso_checksum&amp;quot;: &amp;quot;1c8e7948bdc54980df87a9a2b08fa744104f977950002f1605b60bf44d2021b9&amp;quot;,
    &amp;quot;iso_checksum_type&amp;quot;: &amp;quot;sha256&amp;quot;,
    &amp;quot;install_disk_device&amp;quot;: &amp;quot;/dev/vda&amp;quot;,
    &amp;quot;tmp_password&amp;quot;: &amp;quot;ここにパスワードを設定&amp;quot;,
    &amp;quot;tmp_password_hash&amp;quot;: &amp;quot;ここにパスワードのハッシュを設定&amp;quot;
  },
  &amp;quot;builders&amp;quot;: [{
    &amp;quot;type&amp;quot;: &amp;quot;sakuracloud&amp;quot;,
    &amp;quot;zone&amp;quot;: &amp;quot;{{user `sakuracloud_zone`}}&amp;quot;,
    &amp;quot;os_type&amp;quot;: &amp;quot;iso&amp;quot;,
    &amp;quot;iso_url&amp;quot;: &amp;quot;{{user `iso_url`}}&amp;quot;,
    &amp;quot;iso_checksum&amp;quot;: &amp;quot;{{user `iso_checksum`}}&amp;quot;,
    &amp;quot;iso_checksum_type&amp;quot;: &amp;quot;{{user `iso_checksum_type`}}&amp;quot;,
    &amp;quot;us_keyboard&amp;quot;: true,
    &amp;quot;boot_wait&amp;quot;: &amp;quot;20s&amp;quot;,
    &amp;quot;boot_command&amp;quot;: [
      &amp;quot;cat &amp;lt;&amp;lt;&#39;EOF&#39; &amp;gt; /tmp/cloud-config.yml&amp;lt;enter&amp;gt;&amp;quot;,
      &amp;quot;#cloud-config&amp;lt;enter&amp;gt;&amp;quot;,
      &amp;quot;users:&amp;lt;enter&amp;gt;&amp;quot;,
      &amp;quot;  - name: core&amp;lt;enter&amp;gt;&amp;quot;,
      &amp;quot;    passwd: {{user `tmp_password_hash`}}&amp;lt;enter&amp;gt;&amp;quot;,
      &amp;quot;EOF&amp;lt;enter&amp;gt;&amp;lt;wait&amp;gt;&amp;quot;,
      &amp;quot;sudo coreos-install -c /tmp/cloud-config.yml -d {{user `install_disk_device`}}&amp;lt;enter&amp;gt;&amp;lt;wait&amp;gt;&amp;quot;,
      &amp;quot;&amp;lt;wait10&amp;gt;&amp;lt;wait10&amp;gt;&amp;lt;wait10&amp;gt;&amp;lt;wait10&amp;gt;&amp;lt;wait10&amp;gt;&amp;lt;wait10&amp;gt;&amp;quot;,
      &amp;quot;&amp;lt;wait10&amp;gt;&amp;lt;wait10&amp;gt;&amp;lt;wait10&amp;gt;&amp;quot;,
      &amp;quot;reboot&amp;lt;enter&amp;gt;&amp;lt;wait&amp;gt;&amp;quot;
    ],
    &amp;quot;user_name&amp;quot;: &amp;quot;core&amp;quot;,
    &amp;quot;password&amp;quot;: &amp;quot;{{user `tmp_password`}}&amp;quot;,
    &amp;quot;archive_name&amp;quot;: &amp;quot;{{user `archive_name`}}&amp;quot;,
    &amp;quot;archive_tags&amp;quot;: [&amp;quot;@size-extendable&amp;quot;, &amp;quot;current-stable&amp;quot;, &amp;quot;arch-64bit&amp;quot;, &amp;quot;distro-containerlinux&amp;quot;]
  }],
  &amp;quot;provisioners&amp;quot;: [{
    &amp;quot;type&amp;quot;: &amp;quot;shell&amp;quot;,
    &amp;quot;inline&amp;quot;: [
      &amp;quot;sudo passwd -d core&amp;quot;
    ],
    &amp;quot;pause_before&amp;quot;: &amp;quot;20s&amp;quot;
  }]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドを実行すると、一時的にサーバを作ってISOイメージからインストールし、その後シャットダウンしてマイアーカイブを作るという一連の処理を行ってくれます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;packer build containerlinux.json
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;terraform-for-さくらのクラウドでまずルータだけ作成&#34;&gt;Terraform for さくらのクラウドでまずルータだけ作成&lt;/h2&gt;

&lt;h3 id=&#34;terraform-for-さくらのクラウドの事前準備&#34;&gt;Terraform for さくらのクラウドの事前準備&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://www.terraform.io/&#34;&gt;Terraform&lt;/a&gt;と&lt;a href=&#34;https://github.com/yamamoto-febc/terraform-provider-sakuracloud&#34;&gt;Terraform for さくらのクラウド&lt;/a&gt;をインストールしていない場合は、それぞれのドキュメントに従ってインストールしてください。&lt;/p&gt;

&lt;p&gt;またAPIキーと利用したいゾーンの設定も必要です。&lt;/p&gt;

&lt;p&gt;APIキーの設定は&lt;a href=&#34;https://github.com/sacloud/packer-builder-sakuracloud&#34;&gt;さくらのクラウド用Packerプラグイン&lt;/a&gt;で行ったものと同じなので、ゾーンの設定を追加で行う必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export SAKURACLOUD_ACCESS_TOKEN=[APIトークン]
$ export SAKURACLOUD_ACCESS_TOKEN_SECRET=[APIシークレット]
$ export SAKURACLOUD_ZONE=is1b
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;terraform-for-さくらのクラウドでルータを作成&#34;&gt;Terraform for さくらのクラウドでルータを作成&lt;/h3&gt;

&lt;p&gt;Terraformを使うなら本来は1つのtfファイルでルータとサーバを一気に作成したいところなのですが、サーバ1台毎の設定ファイルを含むISOイメージを作る部分をTerraform外のスクリプトで作成する都合上、2ステップに分ける必要があります。&lt;/p&gt;

&lt;p&gt;まずは以下の内容を &lt;code&gt;server.tf&lt;/code&gt; というファイルに保存します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resource &amp;quot;sakuracloud_internet&amp;quot; &amp;quot;router01&amp;quot; {
    name = &amp;quot;router01&amp;quot;
    description = &amp;quot;by Terraform&amp;quot;
    tags = [&amp;quot;Terraform&amp;quot;]
    nw_mask_len = 28
    band_width = 100
}

output &amp;quot;router01_ipaddress&amp;quot; {
    value = &amp;quot;${sakuracloud_internet.router01.nw_address}&amp;quot;
}

output &amp;quot;router01_gateway&amp;quot; {
    value = &amp;quot;${sakuracloud_internet.router01.nw_gateway}&amp;quot;
}

output &amp;quot;router01_min_ipaddress&amp;quot; {
    value = &amp;quot;${sakuracloud_internet.router01.nw_min_ipaddress}&amp;quot;
}

output &amp;quot;router01_max_ipaddress&amp;quot; {
    value = &amp;quot;${sakuracloud_internet.router01.nw_max_ipaddress}&amp;quot;
}

output &amp;quot;router01_ipaddresses&amp;quot; {
    value = [&amp;quot;${sakuracloud_internet.router01.nw_ipaddresses}&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;nw_mask_len&lt;/code&gt; は&lt;a href=&#34;https://github.com/yamamoto-febc/terraform-provider-sakuracloud/blob/master/docs/configuration/resources/internet.md&#34;&gt;Terraform for さくらのクラウドのルーター&lt;/a&gt;のドキュメントのパラメーターの項を参考に、必要なIPアドレスの数に応じて &lt;code&gt;/28&lt;/code&gt;, &lt;code&gt;/27&lt;/code&gt;, &lt;code&gt;/26&lt;/code&gt; から選択してください。設定する値は &lt;code&gt;/&lt;/code&gt; 無しの数値です。&lt;/p&gt;

&lt;p&gt;なお、&lt;a href=&#34;http://cloud-news.sakura.ad.jp/2015/03/31/ipaddr24-25/&#34;&gt;「ルータ＋スイッチ」 一部の追加IPアドレス個数でのお申込み方法変更のお知らせ | さくらのクラウドニュース&lt;/a&gt; を見ると &lt;code&gt;/25&lt;/code&gt;, &lt;code&gt;/24&lt;/code&gt; も利用可能ですが営業に問い合わせが必要なため、APIからは利用不可となっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;name&lt;/code&gt; や &lt;code&gt;description&lt;/code&gt; はお好みで変更してください。&lt;/p&gt;

&lt;p&gt;ルーターに付与されるIPアドレスの範囲はルーター作成後に確定し&lt;a href=&#34;https://github.com/yamamoto-febc/terraform-provider-sakuracloud/blob/master/docs/configuration/resources/internet.md&#34;&gt;Terraform for さくらのクラウドのルーター&lt;/a&gt;のドキュメントの属性 &lt;code&gt;nw_address&lt;/code&gt; などに設定されます。&lt;/p&gt;

&lt;p&gt;上記の &lt;code&gt;server.tf&lt;/code&gt; ではTerraformの&lt;a href=&#34;https://www.terraform.io/docs/configuration/outputs.html&#34;&gt;Configuring Outputs&lt;/a&gt;の機能を使ってこれらの属性を出力するようにしています。&lt;/p&gt;

&lt;p&gt;Terraformの使い方自体は通常通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;terraform plan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でプランを確認し、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で適用します。&lt;/p&gt;

&lt;p&gt;すると以下のように出力が出ます。以下ではIPアドレスを伏せています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Outputs:

router01_gateway = xxx.yyy.zzz.145
router01_ipaddress = xxx.yyy.zzz.144
router01_ipaddresses = [
    xxx.yyy.zzz.148,
    xxx.yyy.zzz.149,
    xxx.yyy.zzz.150,
    xxx.yyy.zzz.151,
    xxx.yyy.zzz.152,
    xxx.yyy.zzz.153,
    xxx.yyy.zzz.154,
    xxx.yyy.zzz.155,
    xxx.yyy.zzz.156,
    xxx.yyy.zzz.157,
    xxx.yyy.zzz.158
]
router01_max_ipaddress = xxx.yyy.zzz.158
router01_min_ipaddress = xxx.yyy.zzz.148
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;作成したいサーバ1台毎にcontainer-linuxのconfig-driveのisoイメージを作成&#34;&gt;作成したいサーバ1台毎にContainer LinuxのConfig DriveのISOイメージを作成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://coreos.com/os/docs/latest/config-drive.html&#34;&gt;Customize with Config-Drive&lt;/a&gt;の手順に従ってConfig DriveのISOイメージを作成し、&lt;a href=&#34;https://github.com/yamamoto-febc/sacloud-upload-image&#34;&gt;Upload ISO image to SAKURA CLOUD&lt;/a&gt;を使ってさくらのクラウドにアップロードします。&lt;/p&gt;

&lt;h3 id=&#34;事前準備&#34;&gt;事前準備&lt;/h3&gt;

&lt;p&gt;私はCentOSで作業したので、ISOイメージの作成に使う &lt;code&gt;mkisofs&lt;/code&gt; を以下のコマンドでインストールしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo yum install -y mkisofs
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;macOSをお使いの場合は &lt;code&gt;mkisofs&lt;/code&gt; は不要ですが、次項の &lt;code&gt;mkupload.sh&lt;/code&gt; で &lt;code&gt;mkisofs&lt;/code&gt; を呼び出しているところを&lt;a href=&#34;https://coreos.com/os/docs/latest/config-drive.html&#34;&gt;Customize with Config-Drive&lt;/a&gt;を参考に書き変えてください。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/yamamoto-febc/sacloud-upload-image&#34;&gt;Upload ISO image to SAKURA CLOUD&lt;/a&gt;をインストールしていない場合はインストールしてください。&lt;/p&gt;

&lt;p&gt;APIキーの取得とAPIキー及びゾーンの環境変数設定は上記のTerraform for さくらのクラウドのときと同じなので既に行っていれば不要です。&lt;/p&gt;

&lt;h3 id=&#34;config-driveのisoイメージを作成-アップロード&#34;&gt;Config DriveのISOイメージを作成・アップロード&lt;/h3&gt;

&lt;p&gt;以下のシェルスクリプトを &lt;code&gt;mkupload.sh&lt;/code&gt; という名前で保存し、 &lt;code&gt;chmod +x mkupload.sh&lt;/code&gt; で実行パーミションを付けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
set -eu
basedir=/tmp/configdrive.$$
server=&amp;quot;$SERVER&amp;quot;
ssh_pub_key=&amp;quot;$SSH_PUB_KEY&amp;quot;
dns=&amp;quot;$DNS&amp;quot;
address=&amp;quot;$ADDRESS&amp;quot;
gateway=&amp;quot;$GATEWAY&amp;quot;

mkdir -p &amp;quot;$basedir/openstack/latest&amp;quot;

cat &amp;lt;&amp;lt;EOF &amp;gt; &amp;quot;$basedir/openstack/latest/user_data&amp;quot;
#cloud-config

users:
  - name: &amp;quot;core&amp;quot;
    ssh-authorized-keys:
      - &amp;quot;${ssh_pub_key}&amp;quot;
coreos:
  units:
    - name: 00-eth0.network
      runtime: true
      content: |
        [Match]
        Name=eth0

        [Network]
        DNS=${dns}
        Address=${address}
        Gateway=${gateway}
EOF

config_name=&amp;quot;${server}-config&amp;quot;
mkisofs -R -V config-2 -o &amp;quot;${config_name}.iso&amp;quot; &amp;quot;${basedir}&amp;quot;
sacloud-upload-image -f &amp;quot;${config_name}.iso&amp;quot; &amp;quot;${config_name}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように実行します。公開鍵のパスはとIPアドレスは適宜変更してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;SERVER=server01 SSH_PUB_KEY=&amp;quot;`cat ~/.ssh/id_rsa.pub`&amp;quot; DNS=8.8.8.8 ADDRESS=xxx.yyy.zzz.148/28 GATEWAY=xxx.yyy.zzz.145 ./mkuploadconfig.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;SERVER=server02 SSH_PUB_KEY=&amp;quot;`cat ~/.ssh/id_rsa.pub`&amp;quot; DNS=8.8.8.8 ADDRESS=xxx.yyy.zzz.149/28 GATEWAY=xxx.yyy.zzz.145 ./mkuploadconfig.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ADDRESS&lt;/code&gt; の値は上記で出力された &lt;code&gt;router01_ipaddresses&lt;/code&gt; の値を上から順番に使い、ネットワークマスク付きで指定しています。&lt;/p&gt;

&lt;p&gt;作成されるISOイメージの名前は &lt;code&gt;${SERVER}-config&lt;/code&gt; となります。上記の例だと &lt;code&gt;server01-config&lt;/code&gt; と &lt;code&gt;server02-config&lt;/code&gt; です。&lt;/p&gt;

&lt;p&gt;作成されたら&lt;a href=&#34;https://secure.sakura.ad.jp/cloud/&#34;&gt;さくらのクラウドのコントロールパネル&lt;/a&gt;にログインし、ISOイメージ一覧から作成されたISOイメージを選んで「詳細」ボタンを押し、「リソースID」の値をメモしてください。&lt;/p&gt;

&lt;h2 id=&#34;terraform-for-さくらのクラウドでルータに繋がったサーバを作成&#34;&gt;Terraform for さくらのクラウドでルータに繋がったサーバを作成&lt;/h2&gt;

&lt;p&gt;上記で作成していた &lt;code&gt;server.tf&lt;/code&gt; にサーバ、ディスクのリソースを追記します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;resource &amp;quot;sakuracloud_internet&amp;quot; &amp;quot;router01&amp;quot; {
    name = &amp;quot;router01&amp;quot;
    description = &amp;quot;by Terraform&amp;quot;
    tags = [&amp;quot;Terraform&amp;quot;]
    nw_mask_len = 28
    band_width = 100
}

resource &amp;quot;sakuracloud_server&amp;quot; &amp;quot;server01&amp;quot; {
    name = &amp;quot;server01&amp;quot;
    disks = [&amp;quot;${sakuracloud_disk.disk01.id}&amp;quot;]
    cdrom_id = &amp;quot;server01-configのISOイメージのリソースID&amp;quot;
    tags = [&amp;quot;@virtio-net-pci&amp;quot;, &amp;quot;Terraform&amp;quot;]
    description = &amp;quot;by Terraform&amp;quot;
    core = &amp;quot;1&amp;quot;
    memory = &amp;quot;1&amp;quot;
    base_interface = &amp;quot;${sakuracloud_internet.router01.switch_id}&amp;quot;
    additional_interfaces = [&amp;quot;&amp;quot;]
}
resource &amp;quot;sakuracloud_disk&amp;quot; &amp;quot;disk01&amp;quot; {
    name = &amp;quot;disk01&amp;quot;
    source_archive_id = &amp;quot;${data.sakuracloud_archive.containerlinux.id}&amp;quot;
    size = &amp;quot;40&amp;quot;
    description = &amp;quot;by Terraform&amp;quot;
}

resource &amp;quot;sakuracloud_server&amp;quot; &amp;quot;server02&amp;quot; {
    name = &amp;quot;server02&amp;quot;
    disks = [&amp;quot;${sakuracloud_disk.disk02.id}&amp;quot;]
    cdrom_id = &amp;quot;server02-configのISOイメージのリソースID&amp;quot;
    tags = [&amp;quot;@virtio-net-pci&amp;quot;, &amp;quot;Terraform&amp;quot;]
    description = &amp;quot;by Terraform&amp;quot;
    core = &amp;quot;1&amp;quot;
    memory = &amp;quot;1&amp;quot;
    base_interface = &amp;quot;${sakuracloud_internet.router01.switch_id}&amp;quot;
    additional_interfaces = [&amp;quot;&amp;quot;]
}
resource &amp;quot;sakuracloud_disk&amp;quot; &amp;quot;disk02&amp;quot; {
    name = &amp;quot;disk02&amp;quot;
    source_archive_id = &amp;quot;${data.sakuracloud_archive.containerlinux.id}&amp;quot;
    size = &amp;quot;40&amp;quot;
    description = &amp;quot;by Terraform&amp;quot;
}

data &amp;quot;sakuracloud_archive&amp;quot; &amp;quot;containerlinux&amp;quot; {
    filter = {
        name   = &amp;quot;Tags&amp;quot;
        values = [&amp;quot;current-stable&amp;quot;, &amp;quot;arch-64bit&amp;quot;, &amp;quot;distro-containerlinux&amp;quot;]
    }
}

output &amp;quot;router01_ipaddress&amp;quot; {
    value = &amp;quot;${sakuracloud_internet.router01.nw_address}&amp;quot;
}

output &amp;quot;router01_gateway&amp;quot; {
    value = &amp;quot;${sakuracloud_internet.router01.nw_gateway}&amp;quot;
}

output &amp;quot;router01_min_ipaddress&amp;quot; {
    value = &amp;quot;${sakuracloud_internet.router01.nw_min_ipaddress}&amp;quot;
}

output &amp;quot;router01_max_ipaddress&amp;quot; {
    value = &amp;quot;${sakuracloud_internet.router01.nw_max_ipaddress}&amp;quot;
}

output &amp;quot;router01_ipaddresses&amp;quot; {
    value = [&amp;quot;${sakuracloud_internet.router01.nw_ipaddresses}&amp;quot;]
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;server01の&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cdrom_id = &amp;quot;server01-configのISOイメージのリソースID&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の部分は上記でメモしたISOイメージのリソースIDを書いてください。
server02のcdrom_idも同様です。&lt;/p&gt;

&lt;p&gt;serverの &lt;code&gt;core&lt;/code&gt;, &lt;code&gt;memory&lt;/code&gt; やdiskの &lt;code&gt;size&lt;/code&gt; などはお好みで変更してください。
設定可能な値の一覧は&lt;a href=&#34;http://cloud.sakura.ad.jp/specification/server-disk/&#34;&gt;サーバー/ディスク機能の仕様・料金| さくらのクラウド&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;あとは通常通りTerraformを実行するだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;terraform plan
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でプランを確認し、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;terraform apply
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で適用します。&lt;/p&gt;

&lt;p&gt;これでルーターに繋がったContainer Linuxのサーバを静的IPアドレス設定で作成できました！&lt;/p&gt;

&lt;h2 id=&#34;気になった点&#34;&gt;気になった点&lt;/h2&gt;

&lt;h3 id=&#34;作成したサーバをコンパネでみるとipアドレスが表示されていない&#34;&gt;作成したサーバをコンパネでみるとIPアドレスが表示されていない&lt;/h3&gt;

&lt;p&gt;コンパネのサーバ詳細の「NIC」タブのルータ＋スイッチの行の「IPv4アドレス」がハイフンになっていました。またコンパネの「マップ」で見てもIPアドレスが表示されていませんでした。&lt;/p&gt;

&lt;p&gt;まあこれはディスクの修正機能を使っていないので仕方ない気もします。
が、&lt;a href=&#34;http://cloud-news.sakura.ad.jp/2014/09/19/map-ipaddr-modifying/&#34;&gt;マップ画面に表示されるIPアドレス編集機能を追加しました | さくらのクラウドニュース&lt;/a&gt;の手順で設定すれば大丈夫でした。&lt;/p&gt;

&lt;p&gt;実現可能かどうかまだよくわかっていないのですが&lt;a href=&#34;https://github.com/yamamoto-febc/terraform-provider-sakuracloud&#34;&gt;Terraform for さくらのクラウド&lt;/a&gt;でのサーバ作成時にこのIPアドレスを設定できると理想的だなあと思います。&lt;/p&gt;

&lt;h3 id=&#34;terraformでサーバのリソースのcdrom-idを手動で指定する必要がある&#34;&gt;Terraformでサーバのリソースのcdrom_idを手動で指定する必要がある&lt;/h3&gt;

&lt;p&gt;アーカイブについては&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data &amp;quot;sakuracloud_archive&amp;quot; &amp;quot;containerlinux&amp;quot; {
    filter = {
        name   = &amp;quot;Tags&amp;quot;
        values = [&amp;quot;current-stable&amp;quot;, &amp;quot;arch-64bit&amp;quot;, &amp;quot;distro-containerlinux&amp;quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにタグでフィルタリングして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    disks = [&amp;quot;${sakuracloud_disk.disk01.id}&amp;quot;]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように参照できます。&lt;/p&gt;

&lt;p&gt;ISOイメージも&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;data &amp;quot;sakuracloud_iso&amp;quot; &amp;quot;server01_config&amp;quot; {
    filter = {
        name   = &amp;quot;Name&amp;quot;
        values = [&amp;quot;server01-config&amp;quot;]
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;みたいにフィルタリングして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    cdrom_id = &amp;quot;${sakuracloud_iso.server01_config.id}&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように参照できると理想的だなあと思います。&lt;/p&gt;

&lt;h3 id=&#34;container-linuxのconfig-driveをterraformで作成できたらさらに理想的&#34;&gt;Container LinuxのConfig DriveをTerraformで作成できたらさらに理想的&lt;/h3&gt;

&lt;p&gt;現状だとこの記事で書いたように一旦ルーターだけ作って、IPアドレスを調べてから、サーバを作るという手順を踏む必要があります。このため、Terraformの設定ファイルを書き変えて2回適用する必要があります。&lt;/p&gt;

&lt;p&gt;もしContainer LinuxのConfig DriveをTerraformで作成できたら、Terraformの設定ファイルを最初からサーバ込みで記述して1回の適用でルータとサーバを一気に作成できることになるので、こうなれば最高だなーと思います。が、どういう仕様にするかと実装を推測してみるとこれはかなり難しそうな気がします。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;ということで少々不便な点はありますが、さくらのクラウドでContainer Linuxの最新版を使うことが出来ました！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>KubernetesのSecrets機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/01/tried-kubernetes-secrets/</link>
      <pubDate>Sun, 01 Jan 2017 16:31:08 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/01/01/tried-kubernetes-secrets/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/tutorials/stateful-application/run-stateful-application/&#34;&gt;Running a Single-Instance Stateful Application - Kubernetes&lt;/a&gt; ではMySQLのrootユーザのパスワードを設定のyamlファイルに直接書いていましたが、 安全に管理するためには&lt;a href=&#34;http://kubernetes.io/docs/user-guide/secrets/&#34;&gt;Secrets - Kubernetes&lt;/a&gt; を使うべきとのことなので試してみました。&lt;/p&gt;

&lt;h2 id=&#34;パスワードをsecretとして作成&#34;&gt;パスワードをsecretとして作成&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/secrets/&#34;&gt;Secrets - Kubernetes&lt;/a&gt; ではユーザ名とパスワードを作っていますが、ここではrootユーザのパスワードだけにしてみました。&lt;/p&gt;

&lt;p&gt;以下のような内容でmysql-secrets.ymlというファイルを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiVersion: v1
kind: Secret
metadata:
  name: mysql-secret
type: Opaque
data:
  rootPassword: MWYyZDFlMmU2N2Rm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;data.rootPasswordの値は指定したいパスワードをbase64エンコードした値を書いています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo -n &amp;quot;1f2d1e2e67df&amp;quot; | base64
MWYyZDFlMmU2N2Rm
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドでsecretを作成します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ k create -f mysql-secrets.yml
secret &amp;quot;mysql-secret&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;作成したsecretを確認&#34;&gt;作成したsecretを確認&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get secrets mysql-secret -o yaml
apiVersion: v1
data:
  rootPassword: MWYyZDFlMmU2N2Rm
kind: Secret
metadata:
  creationTimestamp: 2017-01-01T07:56:48Z
  name: mysql-secret
  namespace: default
  resourceVersion: &amp;quot;70478&amp;quot;
  selfLink: /api/v1/namespaces/default/secrets/mysql-secret
  uid: d8fe8b5f-cff7-11e6-8be9-aece81f30d69
type: Opaque
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;secretをpodから利用する&#34;&gt;secretをPodから利用する&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/01/01/tried-mysql-and-nfs-on-kubernetes/&#34;&gt;Kuberntesでデータ領域をNFSマウントしてMySQLを動かしてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;のmysql-deploy.ymlを以下のように変更しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mysql
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
        ver: &amp;quot;5.6&amp;quot;
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: mysql-secret
              key: rootPassword
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
        - name: mysql-persistent-storage
          persistentVolumeClaim:
            claimName: mysql-pvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;serviceとdeployを一旦削除し、mac上のデータディレクトリも一旦消してから、イカのコマンドで作り直しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl create -f mysql-deploy.yml
deployment &amp;quot;mysql&amp;quot; created
$ kubectl create -f mysql-svc.yml
service &amp;quot;mysql&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;作成したpodの詳細情報を確認&#34;&gt;作成したPodの詳細情報を確認&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl describe po -l app=mysql
Name:           mysql-1289358488-80g5n
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sun, 01 Jan 2017 17:07:51 +0900
Labels:         app=mysql
                pod-template-hash=1289358488
                ver=5.6
Status:         Running
IP:             172.17.0.5
Controllers:    ReplicaSet/mysql-1289358488
Containers:
  mysql:
    Container ID:       docker://928c7f98bdc8241830ec564d3fb31656647bc2c1e020b257bb1364de1d4e9435
    Image:              mysql:5.6
    Image ID:           docker://sha256:e1406e1f7c42c7e664e138c2cedfcd4c09eef6d4859df1f93fd54d87ed3ba1a1
    Port:               3306/TCP
    State:              Running
      Started:          Sun, 01 Jan 2017 17:07:52 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/lib/mysql from mysql-persistent-storage (rw)
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:
      MYSQL_ROOT_PASSWORD:      &amp;lt;set to the key &#39;rootPassword&#39; in secret &#39;mysql-secret&#39;&amp;gt;
Conditions:
  Type          Status
  Initialized   True
  Ready         True
  PodScheduled  True
Volumes:
  mysql-persistent-storage:
    Type:       PersistentVolumeClaim (a reference to a PersistentVolumeClaim in the same namespace)
    ClaimName:  mysql-pvc
    ReadOnly:   false
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath           Type            Reason          Message
  ---------     --------        -----   ----                    -------------           --------        ------          -------
  1m            1m              1       {default-scheduler }                            Normal          Scheduled       Successfully as
signed mysql-1289358488-80g5n to minikube
  1m            1m              1       {kubelet minikube}      spec.containers{mysql}  Normal          Pulled          Container image
 &amp;quot;mysql:5.6&amp;quot; already present on machine
  1m            1m              1       {kubelet minikube}      spec.containers{mysql}  Normal          Created         Created contain
er with docker id 928c7f98bdc8; Security:[seccomp=unconfined]
  1m            1m              1       {kubelet minikube}      spec.containers{mysql}  Normal          Started         Started contain
er with docker id 928c7f98bdc8
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;MYSQL_ROOT_PASSWORDの説明が &lt;code&gt;&amp;lt;set to the key &#39;rootPassword&#39; in secret &#39;mysql-secret&#39;&amp;gt;&lt;/code&gt; となっていて問題なく使えているようです。&lt;/p&gt;

&lt;h3 id=&#34;mysqlクライアントで接続&#34;&gt;mysqlクライアントで接続&lt;/h3&gt;

&lt;p&gt;mysqlのクライアントで指定したパスワードで接続できることが確認できました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl run -it --rm --image=mysql:5.6 mysql-client -- mysql -h 172.17.0.5 -p1f2d1e2e67df
Waiting for pod default/mysql-client-992258208-c9wm3 to be running, status is Pending, pod ready: false
If you don&#39;t see a command prompt, try pressing enter.

mysql&amp;gt; create database db1;
Query OK, 1 row affected (0.01 sec)

mysql&amp;gt; exit
Bye
Session ended, resume using &#39;kubectl attach mysql-client-992258208-c9wm3 -c mysql-client -i -t&#39; command when the pod is running
deployment &amp;quot;mysql-client&amp;quot; deleted
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Kuberntesでデータ領域をNFSマウントしてMySQLを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/01/tried-mysql-and-nfs-on-kubernetes/</link>
      <pubDate>Sun, 01 Jan 2017 12:38:24 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/01/01/tried-mysql-and-nfs-on-kubernetes/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/01/01/use-nfs-persistent-volume-on-minikube-virtualbox/&#34;&gt;minikubeとVirtualBoxでNFSのpersistent volumeを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の結果を踏まえて、 &lt;a href=&#34;http://kubernetes.io/docs/tutorials/stateful-application/run-stateful-application/&#34;&gt;Running a Single-Instance Stateful Application - Kubernetes&lt;/a&gt; のチュートリアルを試してみたのでメモです。&lt;/p&gt;

&lt;h2 id=&#34;設定ファイル&#34;&gt;設定ファイル&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ cat persistent-volume-nfs.yml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs
  labels:
    type: nfs
spec:
  capacity:
    storage: 30Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    # TODO: modify path and server appropriately
    path: /Users/hnakamur/kube-data/mysql
    server: 192.168.99.1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ cat mysql-pvc.yml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: mysql-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 15Gi
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ cat mysql-deploy.yml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mysql
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ cat mysql-svc.yml
apiVersion: v1
kind: Service
metadata:
  name: mysql
spec:
  ports:
    - port: 3306
  selector:
    app: mysql
  clusterIP: None
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ハマった点としては、persistent volumeとpersistent volume claimのaccessModesは合わせないとうまく行きませんでした。具体的には &lt;code&gt;kubectl describe pvc mysql-pvc&lt;/code&gt; で確認したときにStatusがPendingになっていました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/persistent-volumes/#access-modes&#34;&gt;Access Modes&lt;/a&gt;にアクセスモードについての説明があります。&lt;/p&gt;

&lt;h2 id=&#34;サービスの作成と公開&#34;&gt;サービスの作成と公開&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;kubectl create -f persistent-volume-nfs.yml
kubectl create -f mysql-pvc.yml
kubectl create -f mysql-deploy.yml
kubectl create -f mysql-svc.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysqlに接続してみる&#34;&gt;MySQLに接続してみる&lt;/h2&gt;

&lt;p&gt;まずMySQLコンテナのIPアドレスを調べます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide -l app=mysql
NAME                     READY     STATUS    RESTARTS   AGE       IP           NODE
mysql-4160924354-c5x2l   1/1       Running   0          3m        172.17.0.5   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mysqlクライアントのイメージを使ってmysqlに接続します。
&lt;code&gt;If you don&#39;t see a command prompt, try pressing enter.&lt;/code&gt; とある通り、そのままではプロンプトが表示されなかったのでエンターキーを押すと表示されました。&lt;/p&gt;

&lt;p&gt;試しにデータベースをテーブルを作成してみます。その後 Control-D を押してmysqlクライアントを抜けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl run -it --rm --image=mysql:5.6 mysql-client -- mysql -h 172.17.0.5 -ppassword
Waiting for pod default/mysql-client-1703061864-g1p4s to be running, status is Pending, pod ready: false
If you don&#39;t see a command prompt, try pressing enter.

mysql&amp;gt; create database test1;
Query OK, 1 row affected (0.00 sec)

mysql&amp;gt; use test1;
Database changed
mysql&amp;gt; create table table1 (id integer);
Query OK, 0 rows affected (0.02 sec)

mysql&amp;gt; ^DBye
Session ended, resume using &#39;kubectl attach mysql-client-1703061864-g1p4s -c mysql-client -i -t&#39; command when the pod is running
deployment &amp;quot;mysql-client&amp;quot; deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;mysqlサーバのpodを更新してみる&#34;&gt;MySQLサーバのPodを更新してみる&lt;/h2&gt;

&lt;p&gt;mysql-deploy.yml を書き変えて &lt;code&gt;kubectl apply&lt;/code&gt; で更新してみます。&lt;/p&gt;

&lt;p&gt;最初MYSQL_ROOT_PASSWORDの値を変えてみようかと思って試したのですが、よく考えるとこれはデータベース作成時に設定されてNFSでマウントしたデータ領域はそのまま残るので、この値を変えても更新できませんでした。&lt;/p&gt;

&lt;p&gt;そこで、ラベルに &lt;code&gt;ver=5.6&lt;/code&gt; というのを追加してみました。
最初5.6はダブルクォートで囲まずにyamlファイルに書いてみたのですが、エラーになったのでダブルクォートで囲んでいます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat mysql-deploy.yml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: mysql
spec:
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app: mysql
        ver: &amp;quot;5.6&amp;quot;
    spec:
      containers:
      - image: mysql:5.6
        name: mysql
        env:
          # Use secret in real usage
        - name: MYSQL_ROOT_PASSWORD
          value: password
        ports:
        - containerPort: 3306
          name: mysql
        volumeMounts:
        - name: mysql-persistent-storage
          mountPath: /var/lib/mysql
      volumes:
      - name: mysql-persistent-storage
        persistentVolumeClaim:
          claimName: mysql-pvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドで反映しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl apply -f mysql-deploy.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再度mysqlに接続して、先ほど作成したデータベースとテーブルがあるかを確認します。&lt;/p&gt;

&lt;p&gt;まずMySQLコンテナのIPアドレスを調べます。
spec.strategyがRecreateなので、コンテナが作り直されてIPアドレスも先程とは変わっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide -l app=mysql
NAME                     READY     STATUS    RESTARTS   AGE       IP           NODE
mysql-1726459224-c5gps   1/1       Running   0          10s       172.17.0.6   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;kubectl describe po -l app=mysql&lt;/code&gt; を実行してStateのStartedやEventsの時刻を見るとコンテナが作り直されたことがわかります。&lt;/p&gt;

&lt;p&gt;mysqlに接続して、データベースとテーブルを確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl run -it --rm --image=mysql:5.6 mysql-client -- mysql -h 172.17.0.6 -pmypassword
Waiting for pod default/mysql-client-1775806825-vxjgf to be running, status is Pending, pod ready: false
If you don&#39;t see a command prompt, try pressing enter.

mysql&amp;gt; show databases;
+--------------------+
| Database           |
+--------------------+
| information_schema |
| mysql              |
| performance_schema |
| test1              |
+--------------------+
4 rows in set (0.01 sec)

mysql&amp;gt; use test1;
Reading table information for completion of table and column names
You can turn off this feature to get a quicker startup with -A

Database changed
mysql&amp;gt; show tables;
+-----------------+
| Tables_in_test1 |
+-----------------+
| table1          |
+-----------------+
1 row in set (0.00 sec)

mysql&amp;gt; exit
Bye
Session ended, resume using &#39;kubectl attach mysql-client-1775806825-vxjgf -c mysql-client -i -t&#39; command when the pod is running
deployment &amp;quot;mysql-client&amp;quot; deleted
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>minikubeとVirtualBoxでNFSのpersistent volumeを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/01/use-nfs-persistent-volume-on-minikube-virtualbox/</link>
      <pubDate>Sun, 01 Jan 2017 09:40:35 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/01/01/use-nfs-persistent-volume-on-minikube-virtualbox/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/tutorials/&#34;&gt;Tutorials - Kubernetes&lt;/a&gt;のStateful Applicationsを試そうと思って少し読んだ所、 persistent volume というものを用意する必要があることがわかりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/user-guide/persistent-volumes/#types-of-persistent-volumes&#34;&gt;Types of Persistent Volumes&lt;/a&gt; を見るとさまざまなタイプの persistent volume がありますが、Mac上での開発環境としてkubernetesを使うならNFSが手軽そうなので、これを試してみることにしました。&lt;/p&gt;

&lt;p&gt;このページを見てもよくわからなかったので、検索して見つけた以下の情報を参考にして試行錯誤して、とりあえず動くようになったのでメモです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/minikube/issues/2#issuecomment-233629375&#34;&gt;Support mounting host directories into pods · Issue #2 · kubernetes/minikube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/TheNewNormal/kube-solo-osx/blob/master/examples/pv/nfs-pv-mount-on-pod.md&#34;&gt;kube-solo-osx/nfs-pv-mount-on-pod.md at master · TheNewNormal/kube-solo-osx&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/tree/master/examples/volumes/nfs&#34;&gt;kubernetes/examples/volumes/nfs at master · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;minikubeからmacのディスクをnfsマウントする&#34;&gt;minikubeからmacのディスクをNFSマウントする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/kubernetes/minikube/issues/2#issuecomment-233629375&#34;&gt;Support mounting host directories into pods · Issue #2 · kubernetes/minikube&lt;/a&gt;のコメントに従って以下のコマンドをmacで実行しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &amp;quot;/Users -network 192.168.99.0 -mask 255.255.255.0 -alldirs -maproot=root:wheel&amp;quot; | sudo tee -a /etc/exports
sudo nfsd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IPアドレスは &lt;code&gt;minikube ip&lt;/code&gt; の結果に合わせて調整します。私の環境では 192.168.99.100 だったので、それにあわせて &lt;code&gt;-network&lt;/code&gt; は 192.168.99.0、 &lt;code&gt;-mask&lt;/code&gt; は 255.255.255.0 としています。&lt;/p&gt;

&lt;p&gt;以下の手順で、手動で一度マウントしてみました。 &lt;code&gt;minikube start&lt;/code&gt; は既に起動済みなら不要です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;minikube start
minikube ssh -- sudo umount /Users
minikube ssh -- sudo /usr/local/etc/init.d/nfs-client start
minikube ssh -- sudo mount 192.168.99.1:/Users /Users -o rw,async,noatime,rsize=32768,wsize=32768,proto=tcp
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IPアドレスは &lt;code&gt;minikube ip&lt;/code&gt; の結果に合わせて調整します。私の環境では 192.168.99.100 だったので、minikubeからmacへは 192.168.99.1 で参照できるということでmountの引数にはこのアドレスを指定しています。&lt;/p&gt;

&lt;p&gt;マウントポイントの /Users は適宜変更変更します。&lt;/p&gt;

&lt;p&gt;無事マウントできたら &lt;code&gt;minikube ssh&lt;/code&gt; でssh接続して &lt;code&gt;df -h&lt;/code&gt; などでマウントされたことを確認し、minikube内からとmac側からファイルを作ったり削除して相互に見えることを確認しました。&lt;/p&gt;

&lt;p&gt;一通り確認したらminikube内から &lt;code&gt;sudo umount /Users&lt;/code&gt; でアンマウントしておきます。&lt;/p&gt;

&lt;h2 id=&#34;podからnfsのpersistent-volumeを使ってみる&#34;&gt;PodからNFSのpersistent volumeを使ってみる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/TheNewNormal/kube-solo-osx/blob/master/examples/pv/nfs-pv-mount-on-pod.md&#34;&gt;kube-solo-osx/nfs-pv-mount-on-pod.md at master · TheNewNormal/kube-solo-osx&lt;/a&gt;と&lt;a href=&#34;https://github.com/kubernetes/kubernetes/tree/master/examples/volumes/nfs&#34;&gt;kubernetes/examples/volumes/nfs at master · kubernetes/kubernetes&lt;/a&gt;を参考にして試行錯誤しました。&lt;/p&gt;

&lt;p&gt;後者の &lt;a href=&#34;https://github.com/kubernetes/kubernetes/blob/f5d9c430e9168cf5c41197b8a4e457981cb031df/examples/volumes/nfs/nfs-web-rc.yaml&#34;&gt;nfs-web-rc.yaml&lt;/a&gt;では ReplicationController というものを作っているのですが、&lt;a href=&#34;http://stackoverflow.com/questions/37423117/replication-controller-vs-deployment-in-kubernetes/37423281#37423281&#34;&gt;google compute engine - Replication Controller VS Deployment in Kubernetes - Stack Overflow&lt;/a&gt;というコメントによると、ReplicatioControllerはDeploymentsにとって変わられるものだそうです。ただし、 &lt;a href=&#34;http://stackoverflow.com/questions/37423117/replication-controller-vs-deployment-in-kubernetes/37423217#37423217&#34;&gt;google compute engine - Replication Controller VS Deployment in Kubernetes - Stack Overflow&lt;/a&gt;によるとDeploymentはまだベータです。&lt;/p&gt;

&lt;h2 id=&#34;サービス公開用の設定ファイル&#34;&gt;サービス公開用の設定ファイル&lt;/h2&gt;

&lt;p&gt;試行錯誤した結果の設定ファイルは以下の通りです。&lt;/p&gt;

&lt;p&gt;persistent-volume-nfs.ymlのspec.nfs.pathに対応するディレクトリはmacで &lt;code&gt;mkdir -p /Users/hnakamur/kube-data&lt;/code&gt; で作成しておきます。spec.nfs.serverはminikubeから見たmacのIPアドレスを指定します。&lt;/p&gt;

&lt;p&gt;spec.persistentVolumeReclaimPolicyは&lt;a href=&#34;https://github.com/TheNewNormal/kube-solo-osx/blob/252b46b4837efc41e7c85c7c3171518e23520866/examples/pv/nfs-pv-mount-on-pod.md&#34;&gt;kube-solo-osx/nfs-pv-mount-on-pod.md at 252b46b4837efc41e7c85c7c3171518e23520866 · TheNewNormal/kube-solo-osx&lt;/a&gt;ではRetainedとなっていたのですが、動かしてみるとエラーメッセージが出たのでそこに書いてあった選択肢の1つのRetainに変えました。&lt;/p&gt;

&lt;p&gt;persistemt volumeとpersistent volume claimについては&lt;a href=&#34;http://kubernetes.io/docs/user-guide/persistent-volumes/&#34;&gt;Persistent Volumes - Kubernetes&lt;/a&gt;に説明があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat persistent-volume-nfs.yml
kind: PersistentVolume
apiVersion: v1
metadata:
  name: pv-nfs
  labels:
    type: nfs
spec:
  capacity:
    storage: 30Gi
  accessModes:
    - ReadWriteMany
  persistentVolumeReclaimPolicy: Retain
  nfs:
    # TODO: modify path and server appropriately
    path: /Users/hnakamur/kube-data
    server: 192.168.99.1
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ cat persistent-volume-claim.yml
kind: PersistentVolumeClaim
apiVersion: v1
metadata:
  name: my-pvc
spec:
  accessModes:
    - ReadWriteMany
  resources:
    requests:
      storage: 15Gi
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Deploymentsについては&lt;a href=&#34;http://kubernetes.io/docs/user-guide/deployments/&#34;&gt;Deployments - Kubernetes&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat nginx-deployment.yml
apiVersion: extensions/v1beta1
kind: Deployment
metadata:
  name: nginx
spec:
  replicas: 3
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
        - name: nginx
          image: nginx:1.11.8
          ports:
            - containerPort: 80
          volumeMounts:
            - mountPath: &amp;quot;/usr/share/nginx/html&amp;quot;
              name: nginx-data
      volumes:
        - name: nginx-data
          persistentVolumeClaim:
            claimName: my-pvc
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Servicesについては&lt;a href=&#34;http://kubernetes.io/docs/user-guide/services/#type-nodeport&#34;&gt;Services - Kubernetes&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cat nginx-service.yml
kind: Service
apiVersion: v1
metadata:
  name: nginx
spec:
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: NodePort
  selector:
    app: nginx
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サービス作成と公開&#34;&gt;サービス作成と公開&lt;/h2&gt;

&lt;p&gt;上記の設定ファイルを用意しておけば、サービス作成と公開は以下のように実行するだけです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl create -f persistent-volume-nfs.yml
kubectl create -f persistent-volume-claim.yml
kubectl create -f nginx-deployment.yml
kubectl create -f nginx-service.yml
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;mac上で以下のコマンドでnginxで表示するHTMLファイルを作成します。HTMLファイルと言いつつ手抜きで単なるテキストです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;echo &#39;Hello Kubernetes NFS volume!&#39; &amp;gt; ~/kube-data/index.html
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;macからcurlでサービスのnginxにアクセスしてみる&#34;&gt;macからcurlでサービスのnginxにアクセスしてみる&lt;/h2&gt;

&lt;p&gt;ノードのIPとポートを取得して環境変数に設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export NODE_IP=$(minikube ip)
$ echo NODE_IP=$NODE_IP
NODE_IP=192.168.99.100
$ export NODE_PORT=$(kubectl get services/nginx -o go-template=&#39;{{(index .spec.ports 0).nodePort}}&#39;)
$ echo NODE_PORT=$NODE_PORT
NODE_PORT=32252
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curlでアクセスすると、上記で作成したファイルの内容が表示されることを確認できました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes NFS volume!
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;サービス公開停止と削除&#34;&gt;サービス公開停止と削除&lt;/h2&gt;

&lt;p&gt;作成時とは逆の順番に &lt;code&gt;kubectl delete -f&lt;/code&gt; で設定ファイルを指定して削除すればOKでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl delete -f nginx-service.yml
kubectl delete -f nginx-deployment.yml
kubectl delete -f persistent-volume-claim.yml
kubectl delete -f persistent-volume-nfs.yml
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>minikubeでKubernetesのチュートリアルをやってみた</title>
      <link>https://hnakamur.github.io/blog/2016/12/31/tried-kubernetes-tutorial-with-minikube/</link>
      <pubDate>Sat, 31 Dec 2016 16:24:33 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/12/31/tried-kubernetes-tutorial-with-minikube/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;検索してたら &lt;a href=&#34;https://news.ycombinator.com/item?id=12462261&#34;&gt;Why Kubernetes is winning the container war | Hacker News&lt;/a&gt; というHacker Newsのスレッドを見つけました。&lt;/p&gt;

&lt;p&gt;実際に勝つどうかはともかく、実際に使っている人やMesosphereやRed Hatの人のコメントがあり、非常に参考になりそうです。このブログ記事を書くまで私は Kubernetes はろくに触ったことが無かったので内容はよくわからないですが、後日また見直してみたいところです。&lt;/p&gt;

&lt;p&gt;上記のHacker Newsのコメントで以下の2つのチュートリアルが紹介されていました。このブログ記事はこのうち1つめのほうを試してみたメモです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://kubernetesbootcamp.github.io/kubernetes-bootcamp/&#34;&gt;Kubernetes Bootcamp&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kelseyhightower/kubernetes-the-hard-way&#34;&gt;kelseyhightower/kubernetes-the-hard-way: Bootstrap Kubernetes the hard way on Google Cloud Platform or Amazon EC2. No scripts.&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;試してから気づいたのですが、全く同じ内容が Kubernetes の公式ドキュメントの &lt;a href=&#34;http://kubernetes.io/docs/tutorials/kubernetes-basics/&#34;&gt;Kubernetes Basics&lt;/a&gt; にありました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://kubernetes.io/docs/tutorials/kubernetes-basics/&#34;&gt;Kubernetes Basics&lt;/a&gt; はいくつかの章（このチュートリアルでは Module と呼ばれています）に分かれていて、まず図解付きのわかりやすい概念説明があり、その後ブラウザ上のターミナルでコマンドを入力すると結果が表示されるというインタラクティブなチュートリアルになっています。&lt;/p&gt;

&lt;p&gt;各章末にクイズがあり、概念を理解したか確認できるのも良い感じです。&lt;/p&gt;

&lt;p&gt;ターミナルの左に説明文があり、入力する各コマンドをマウスでクリックすると、右側のターミナルに入力してくれるので手軽に試せます。&lt;/p&gt;

&lt;p&gt;とはいえ、手元の環境でも試してみたかったので、macOS上に環境構築してブラウザのインタラクティブチュートリアルとともに試してみました。&lt;/p&gt;

&lt;h2 id=&#34;macos-sierraでの事前準備&#34;&gt;macOS Sierraでの事前準備&lt;/h2&gt;

&lt;p&gt;&lt;code&gt;minikube start --help&lt;/code&gt; の &lt;code&gt;--vm-driver&lt;/code&gt; の説明によると仮想マシンドライバは virtualbox xhyve vmwarefusion のいずれかでデフォルトは virtualbox です。
ということでVirtualBoxをインストールしておきます。私の環境ではバージョンは 5.1.12 でした。&lt;/p&gt;

&lt;p&gt;minikubeとKubernetesはGitHubのプロジェクトにリリースページがあってそこからバイナリをダウンロードできます。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/minikube/releases/tag/v0.14.0&#34;&gt;Release v0.14.0 · kubernetes/minikube&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/kubernetes/kubernetes/releases/tag/v1.5.1&#34;&gt;Release v1.5.1 · kubernetes/kubernetes&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;が、Homebrewでパッケージが用意されていてバージョンも上記と同じで最新だったのでHomebrewでインストールしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install Caskroom/cask/minikube
brew install kubectl
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;module-1-kubernetsクラスタを作成する&#34;&gt;Module 1: Kubernetsクラスタを作成する&lt;/h2&gt;

&lt;p&gt;概念の説明は &lt;a href=&#34;https://kubernetesbootcamp.github.io/kubernetes-bootcamp/1-1.html&#34;&gt;Introduction to Kubernetes cluster&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;minikubeのバージョン確認&#34;&gt;minikubeのバージョン確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ minikube version       
minikube version: v0.14.0
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;minikube起動&#34;&gt;minikube起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ minikube start
Starting local Kubernetes cluster...
Kubectl is now configured to use the cluster.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kubectlのバージョン確認&#34;&gt;kubectlのバージョン確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl version
Client Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;5&amp;quot;, GitVersion:&amp;quot;v1.5.1&amp;quot;, GitCommit:&amp;quot;82450d03cb057bab0950214ef122b67c83fb11df&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;2016-12-22T13:56:59Z&amp;quot;, GoVersion:&amp;quot;go1.7.4&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;darwin/amd64&amp;quot;}
Server Version: version.Info{Major:&amp;quot;1&amp;quot;, Minor:&amp;quot;5&amp;quot;, GitVersion:&amp;quot;v1.5.1&amp;quot;, GitCommit:&amp;quot;82450d03cb057bab0950214ef122b67c83fb11df&amp;quot;, GitTreeState:&amp;quot;clean&amp;quot;, BuildDate:&amp;quot;1970-01-01T00:00:00Z&amp;quot;, GoVersion:&amp;quot;go1.7.1&amp;quot;, Compiler:&amp;quot;gc&amp;quot;, Platform:&amp;quot;linux/amd64&amp;quot;}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;クラスタの情報表示&#34;&gt;クラスタの情報表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl cluster-info
Kubernetes master is running at https://192.168.99.100:8443
kubernetes-dashboard is running at https://192.168.99.100:8443/api/v1/proxy/namespaces/kube-system/services/kubernetes-dashboard

To further debug and diagnose cluster problems, use &#39;kubectl cluster-info dump&#39;.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ノード一覧&#34;&gt;ノード一覧&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get nodes
NAME       STATUS    AGE
minikube   Ready     11h
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;module-2-アプリをデプロイ&#34;&gt;Module 2: アプリをデプロイ&lt;/h2&gt;

&lt;p&gt;概念の説明は &lt;a href=&#34;https://kubernetesbootcamp.github.io/kubernetes-bootcamp/2-1.html&#34;&gt;Your first application deployment&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;kubernetes-bootcampアプリをデプロイ&#34;&gt;kubernetes-bootcampアプリをデプロイ&lt;/h3&gt;

&lt;p&gt;チュートリアルのために用意されたkubernetes-bootcampアプリをデプロイしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl run kubernetes-bootcamp --image=docker.io/jocatalin/kubernetes-bootcamp:v1 --port=8080
deployment &amp;quot;kubernetes-bootcamp&amp;quot; created
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;デプロイされたアプリ一覧&#34;&gt;デプロイされたアプリ一覧&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   1         1         1            1           57s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;プロキシ起動&#34;&gt;プロキシ起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl proxy
Starting to serve on 127.0.0.1:8001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;プロキシを起動したらプロンプトには戻ってこないので、以降のコマンドは別のターミナルで実行します。&lt;/p&gt;

&lt;h3 id=&#34;podの名前を取得&#34;&gt;Podの名前を取得&lt;/h3&gt;

&lt;p&gt;この後参照するため、Podの名前を取得して環境変数POD_NAMEに設定しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export POD_NAME=$(kubectl get pods -o go-template --template &#39;{{range .items}}{{.metadata.name}}{{&amp;quot;\n&amp;quot;}}{{end}}&#39;)
$ echo Name of the Pod: $POD_NAME
Name of the Pod: kubernetes-bootcamp-390780338-6j8fn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;見た感じ &lt;code&gt;--template&lt;/code&gt; の引数の書式はGo言語の &lt;a href=&#34;https://golang.org/pkg/text/template/&#34;&gt;text/template&lt;/a&gt;パッケージのテンプレート言語をそのまま使っているようです。&lt;/p&gt;

&lt;p&gt;Pod名の &lt;code&gt;390780338-6j8fn&lt;/code&gt; の部分はデプロイの度に生成されるランダムな文字列となっています。&lt;/p&gt;

&lt;h3 id=&#34;プロキシ経由でアプリにアクセス&#34;&gt;プロキシ経由でアプリにアクセス&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ curl http://localhost:8001/api/v1/proxy/namespaces/default/pods/$POD_NAME/
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-6j8fn | v=1
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;module-3-デプロイしたアプリを詳しく見てみる&#34;&gt;Module 3: デプロイしたアプリを詳しく見てみる&lt;/h2&gt;

&lt;p&gt;概念の説明は &lt;a href=&#34;https://kubernetesbootcamp.github.io/kubernetes-bootcamp/3-1.html&#34;&gt;Pods and Nodes&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;pod一覧表示&#34;&gt;Pod一覧表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods
NAME                                  READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-390780338-6j8fn   1/1       Running   0          13m
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pod詳細表示&#34;&gt;Pod詳細表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl describe pods
Name:           kubernetes-bootcamp-390780338-6j8fn
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 17:15:41 +0900
Labels:         pod-template-hash=390780338
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.4
Controllers:    ReplicaSet/kubernetes-bootcamp-390780338
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://f3d04d91e8f27b2b537c20d82253376993483f9bb9c0d1196ba50ecc3a69ff7c
    Image:              docker.io/jocatalin/kubernetes-bootcamp:v1
    Image ID:           docker://sha256:8fafd8af70e9aa7c3ab40222ca4fd58050cf3e49cb14a4e7c0f460cd4f78e9fe
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 17:15:42 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         True 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  15m           15m             1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-390780338-6j8fn to minikube
  15m           15m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;docker.io/jocatalin/kubernetes-bootcamp:v1&amp;quot; already present on machine
  15m           15m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id f3d04d91e8f2; Security:[seccomp=unconfined]
  15m           15m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id f3d04d91e8f2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;podのログ表示&#34;&gt;Podのログ表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl logs $POD_NAME
Kubernetes Bootcamp App Started At: 2016-12-31T08:15:42.728Z | Running On:  kubernetes-bootcamp-390780338-6j8fn 

Running On: kubernetes-bootcamp-390780338-6j8fn | Total Requests: 1 | App Uptime: 580.532 seconds | Log Time: 2016-12-31T08:25:23.260Z
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pod内でコマンド実行&#34;&gt;Pod内でコマンド実行&lt;/h3&gt;

&lt;p&gt;envコマンドを実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl exec $POD_NAME env
PATH=/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin
HOSTNAME=kubernetes-bootcamp-390780338-6j8fn
KUBERNETES_SERVICE_HOST=10.0.0.1
KUBERNETES_SERVICE_PORT=443
KUBERNETES_SERVICE_PORT_HTTPS=443
KUBERNETES_PORT=tcp://10.0.0.1:443
KUBERNETES_PORT_443_TCP=tcp://10.0.0.1:443
KUBERNETES_PORT_443_TCP_PROTO=tcp
KUBERNETES_PORT_443_TCP_PORT=443
KUBERNETES_PORT_443_TCP_ADDR=10.0.0.1
NPM_CONFIG_LOGLEVEL=info
NODE_VERSION=6.3.1
HOME=/root
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;hostname&lt;/code&gt; コマンドを実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl exec $POD_NAME hostname
kubernetes-bootcamp-390780338-6j8fn
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;ip a&lt;/code&gt; を実行してみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl exec $POD_NAME ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default qlen 1
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host 
       valid_lft forever preferred_lft forever
11: eth0@if12: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc noqueue state UP group default 
    link/ether 02:42:ac:11:00:04 brd ff:ff:ff:ff:ff:ff
    inet 172.17.0.4/16 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::42:acff:fe11:4/64 scope link tentative dadfailed 
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;pod内でbash実行&#34;&gt;Pod内でbash実行&lt;/h3&gt;

&lt;p&gt;以下のコマンドでbashを実行するとプロンプトが表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl exec -ti $POD_NAME bash
root@kubernetes-bootcamp-390780338-6j8fn:/# 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;チュートリアルのために用意されたkubernetes-bootcampアプリに含まれるファイル &lt;code&gt;server.js&lt;/code&gt; の内容を表示してみます。このアプリは Node.js で書かれていることがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kubernetes-bootcamp-390780338-6j8fn:/# cat server.js
var http = require(&#39;http&#39;);
var requests=0;
var podname= process.env.HOSTNAME;
var startTime;
var host;
var handleRequest = function(request, response) {
  response.setHeader(&#39;Content-Type&#39;, &#39;text/plain&#39;);
  response.writeHead(200);
  response.write(&amp;quot;Hello Kubernetes bootcamp! | Running on: &amp;quot;);
  response.write(host);
  response.end(&amp;quot; | v=1\n&amp;quot;);
  console.log(&amp;quot;Running On:&amp;quot; ,host, &amp;quot;| Total Requests:&amp;quot;, ++requests,&amp;quot;| App Uptime:&amp;quot;, (new Date() - startTime)/1000 , &amp;quot;seconds&amp;quot;, &amp;quot;| Log Time:&amp;quot;,new Date());
}
var www = http.createServer(handleRequest);
www.listen(8080,function () {
    startTime = new Date();;
    host = process.env.HOSTNAME;
    console.log (&amp;quot;Kubernetes Bootcamp App Started At:&amp;quot;,startTime, &amp;quot;| Running On: &amp;quot; ,host, &amp;quot;\n&amp;quot; );
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod内からcurlで直接アプリにアクセスしてみます。 Node.js コンテナ内でbashを実行しているのでホスト名には localhost を指定しています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kubernetes-bootcamp-390780338-6j8fn:/# curl localhost:8080
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-6j8fn | v=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;exit&lt;/code&gt; を入力してPod内のbashを抜けます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@kubernetes-bootcamp-390780338-6j8fn:/# exit
exit
$ 
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;module-4-アプリをkubernetes外に公開する&#34;&gt;Module 4: アプリをKubernetes外に公開する&lt;/h2&gt;

&lt;p&gt;概念の説明は &lt;a href=&#34;https://kubernetesbootcamp.github.io/kubernetes-bootcamp/4-1.html&#34;&gt;Services&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;p&gt;Module 1では &lt;code&gt;minikube proxy&lt;/code&gt; を実行してMacの8001番ポートでリッスンしておいて、Macから localhost:8001 でアクセスしました。&lt;/p&gt;

&lt;p&gt;ここではKubernetesのノード上のポートでリッスンして、Macからminikubeのproxyを経由せずに直接アクセスします。&lt;/p&gt;

&lt;h3 id=&#34;サービス一覧表示&#34;&gt;サービス一覧表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get services
NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   10.0.0.1     &amp;lt;none&amp;gt;        443/TCP   12h
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;kubernetes-bootcampアプリを公開&#34;&gt;kubernetes-bootcampアプリを公開&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl expose deployment/kubernetes-bootcamp --type=&amp;quot;NodePort&amp;quot; --port 8080
service &amp;quot;kubernetes-bootcamp&amp;quot; exposed
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;再度サービス一覧表示&#34;&gt;再度サービス一覧表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get services
NAME                  CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE
kubernetes            10.0.0.1     &amp;lt;none&amp;gt;        443/TCP          12h
kubernetes-bootcamp   10.0.0.228   &amp;lt;nodes&amp;gt;       8080:31123/TCP   40s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上で &lt;code&gt;kubectl expose&lt;/code&gt; コマンドでサービスを公開したので、一覧にkubernetes-bootcampが含まれるようになりました。&lt;/p&gt;

&lt;h3 id=&#34;サービス詳細表示&#34;&gt;サービス詳細表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl describe services/kubernetes-bootcamp
Name:                   kubernetes-bootcamp
Namespace:              default
Labels:                 run=kubernetes-bootcamp
Selector:               run=kubernetes-bootcamp
Type:                   NodePort
IP:                     10.0.0.228
Port:                   &amp;lt;unset&amp;gt; 8080/TCP
NodePort:               &amp;lt;unset&amp;gt; 31123/TCP
Endpoints:              172.17.0.4:8080
Session Affinity:       None
No events.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ノードのポート取得&#34;&gt;ノードのポート取得&lt;/h3&gt;

&lt;p&gt;この後参照するため、ノードのポートを取得して環境変数 NODE_PORT に設定しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export NODE_PORT=$(kubectl get services/kubernetes-bootcamp -o go-template=&#39;{{(index .spec.ports 0).nodePort}}&#39;)
$ echo NODE_PORT=$NODE_PORT
NODE_PORT=31123
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://kubernetesbootcamp.github.io/kubernetes-bootcamp/4-2.html&#34;&gt;Module 4のインタラクティブチュートリアル&lt;/a&gt;ではこの後 &lt;code&gt;curl host01:$NODE_PORT&lt;/code&gt; でアクセスしているのですが、手元の環境では &lt;code&gt;host01&lt;/code&gt; というホスト名ではアクセスできません。&lt;/p&gt;

&lt;p&gt;そこで、以下のコマンドを実行してノードのIPアドレスを取得し、環境変数 NODE_IP に設定します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export NODE_IP=$(minikube ip)
$ echo NODE_IP=$NODE_IP
NODE_IP=192.168.99.100
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のコマンドでMacからKubernetesのノードに直接アクセスします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-6j8fn | v=1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Module 4のStep 2でラベルを付けて、Step 3でサービス削除するのですが、この記事を書く時は飛ばしてしまったので、Module 6の後に行います。&lt;/p&gt;

&lt;h2 id=&#34;module-5-アプリをスケールアップする&#34;&gt;Module 5: アプリをスケールアップする&lt;/h2&gt;

&lt;p&gt;概念の説明は &lt;a href=&#34;https://kubernetesbootcamp.github.io/kubernetes-bootcamp/5-1.html&#34;&gt;Running multiple instances of an app&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;h3 id=&#34;デプロイされたアプリのスケールアップ前のレプリカ数を確認&#34;&gt;デプロイされたアプリのスケールアップ前のレプリカ数を確認&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;kubectl get deployments&lt;/code&gt; の結果にはデプロイごとにアプリのレプリカ（複製）の数が表示されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   1         1         1            1           46m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この結果ではPodの数は1です。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;DESIRED: デプロイ時に指定したレプリカ数。desireの意味は「切望する」なので、デプロイ時に希望した数ということでしょう。&lt;/li&gt;
&lt;li&gt;CURRENT: 現在実行中のレプリカ数。&lt;/li&gt;
&lt;li&gt;UP-TO-DATE: 指定した状態に更新されたレプリカ数。&lt;/li&gt;
&lt;li&gt;AVAILABLE: ユーザが利用可能な（＝ユーザに実際にサービスが提供されている）レプリカ数。&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;スケールアップ&#34;&gt;スケールアップ&lt;/h3&gt;

&lt;p&gt;このデプロイのレプリカ数を4に増やしてみます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl scale deployments/kubernetes-bootcamp --replicas=4
deployment &amp;quot;kubernetes-bootcamp&amp;quot; scaled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デプロイ一覧で再度確認するとレプリカ数が4に増えていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   4         4         4            4           55m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod一覧を &lt;code&gt;-o wide&lt;/code&gt; を指定して表示するとIPアドレスとノードを確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide
NAME                                  READY     STATUS    RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-390780338-6j8fn   1/1       Running   0          55m       172.17.0.4   minikube
kubernetes-bootcamp-390780338-jw7cn   1/1       Running   0          7s        172.17.0.5   minikube
kubernetes-bootcamp-390780338-p8jbb   1/1       Running   0          7s        172.17.0.6   minikube
kubernetes-bootcamp-390780338-vq3kx   1/1       Running   0          7s        172.17.0.7   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ちなみに &lt;code&gt;-o wide&lt;/code&gt; 無しの出力結果は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods
NAME                                  READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-390780338-6j8fn   1/1       Running   0          56m
kubernetes-bootcamp-390780338-jw7cn   1/1       Running   0          1m
kubernetes-bootcamp-390780338-p8jbb   1/1       Running   0          1m
kubernetes-bootcamp-390780338-vq3kx   1/1       Running   0          1m
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;スケールアップ後のデプロイの詳細表示&#34;&gt;スケールアップ後のデプロイの詳細表示&lt;/h3&gt;

&lt;p&gt;Events欄にスケールアップした記録が残っています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl describe deployments/kubernetes-bootcamp
Name:                   kubernetes-bootcamp
Namespace:              default
CreationTimestamp:      Sat, 31 Dec 2016 17:15:41 +0900
Labels:                 run=kubernetes-bootcamp
Selector:               run=kubernetes-bootcamp
Replicas:               4 updated | 4 total | 4 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  1 max unavailable, 1 max surge
Conditions:
  Type          Status  Reason
  ----          ------  ------
  Available     True    MinimumReplicasAvailable
OldReplicaSets: &amp;lt;none&amp;gt;
NewReplicaSet:  kubernetes-bootcamp-390780338 (4/4 replicas created)
Events:
  FirstSeen     LastSeen        Count   From                            SubObjectPath   Type            Reason                  Message
  ---------     --------        -----   ----                            -------------   --------        ------                  -------
  58m           58m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled up replica set kubernetes-bootcamp-390780338 to 1
  3m            3m              1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled up replica set kubernetes-bootcamp-390780338 to 4
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;スケールアップ後のアプリにcurlでアクセス&#34;&gt;スケールアップ後のアプリにcurlでアクセス&lt;/h3&gt;

&lt;p&gt;アクセスしてみるとリクエストごとにランダムなPodに振り分けられ、負荷分散されていることが確認できました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-6j8fn | v=1
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-6j8fn | v=1
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-jw7cn | v=1
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-p8jbb | v=1
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-6j8fn | v=1
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-390780338-6j8fn | v=1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;スケールダウン&#34;&gt;スケールダウン&lt;/h3&gt;

&lt;p&gt;レプリカ数を2に減らします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl scale deployments/kubernetes-bootcamp --replicas=2
deployment &amp;quot;kubernetes-bootcamp&amp;quot; scaled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;デプロイ一覧で2に減ったことを確認しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   2         2         2            2           1h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直後のPod一覧では2つのコンテナのSTATUSがTerminating （終了中）となっていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide
NAME                                  READY     STATUS        RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-390780338-6j8fn   1/1       Running       0          1h        172.17.0.4   minikube
kubernetes-bootcamp-390780338-jw7cn   1/1       Running       0          12m       172.17.0.5   minikube
kubernetes-bootcamp-390780338-p8jbb   1/1       Terminating   0          12m       172.17.0.6   minikube
kubernetes-bootcamp-390780338-vq3kx   1/1       Terminating   0          12m       172.17.0.7   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;数十秒程度してから再度Pod一覧を見るとSTATUSがRunningの2つだけになっていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide
NAME                                  READY     STATUS    RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-390780338-6j8fn   1/1       Running   0          1h        172.17.0.4   minikube
kubernetes-bootcamp-390780338-jw7cn   1/1       Running   0          13m       172.17.0.5   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;module-6-アプリをローリングアップデート&#34;&gt;Module 6: アプリをローリングアップデート&lt;/h2&gt;

&lt;p&gt;概念の説明は &lt;a href=&#34;https://kubernetesbootcamp.github.io/kubernetes-bootcamp/6-1.html&#34;&gt;Performing a rolling update for an app&lt;/a&gt; を参照してください。&lt;/p&gt;

&lt;p&gt;ローリングアップデートではアプリのダウンタイムをゼロでアプリを更新できるそうです。&lt;/p&gt;

&lt;h3 id=&#34;アップデート前の状態確認&#34;&gt;アップデート前の状態確認&lt;/h3&gt;

&lt;p&gt;Pod一覧。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide
NAME                                  READY     STATUS    RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-390780338-6j8fn   1/1       Running   0          1h        172.17.0.4   minikube
kubernetes-bootcamp-390780338-jw7cn   1/1       Running   0          21m       172.17.0.5   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod詳細情報。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl describe pods
Name:           kubernetes-bootcamp-390780338-6j8fn
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 17:15:41 +0900
Labels:         pod-template-hash=390780338
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.4
Controllers:    ReplicaSet/kubernetes-bootcamp-390780338
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://f3d04d91e8f27b2b537c20d82253376993483f9bb9c0d1196ba50ecc3a69ff7c
    Image:              docker.io/jocatalin/kubernetes-bootcamp:v1
    Image ID:           docker://sha256:8fafd8af70e9aa7c3ab40222ca4fd58050cf3e49cb14a4e7c0f460cd4f78e9fe
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 17:15:42 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True
  Ready         True
  PodScheduled  True
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
No events.


Name:           kubernetes-bootcamp-390780338-jw7cn
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:10:47 +0900
Labels:         pod-template-hash=390780338
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.5
Controllers:    ReplicaSet/kubernetes-bootcamp-390780338
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://23e8c9c3c2b64701f88a61033b534a23f7f2e4a540afa019eea20050bfd12a39
    Image:              docker.io/jocatalin/kubernetes-bootcamp:v1
    Image ID:           docker://sha256:8fafd8af70e9aa7c3ab40222ca4fd58050cf3e49cb14a4e7c0f460cd4f78e9fe
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 18:10:48 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True
  Ready         True
  PodScheduled  True
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  21m           21m             1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-390780338-jw7cn to minikube
  21m           21m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;docker.io/jocatalin/kubernetes-bootcamp:v1&amp;quot; already present on machine
  21m           21m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id 23e8c9c3c2b6; Security:[seccomp=unconfined]
  21m           21m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id 23e8c9c3c2b6
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;アプリのバージョンアップ&#34;&gt;アプリのバージョンアップ&lt;/h3&gt;

&lt;p&gt;以下のコマンドでアプリをv1からv2にバージョンアップします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2$ kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v2
deployment &amp;quot;kubernetes-bootcamp&amp;quot; image updated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;直後のPods一覧。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide
NAME                                   READY     STATUS        RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-2100875782-0jd0d   1/1       Running       0          26s       172.17.0.6   minikube
kubernetes-bootcamp-2100875782-vnxk1   1/1       Running       0          26s       172.17.0.7   minikube
kubernetes-bootcamp-390780338-6j8fn    1/1       Terminating   0          1h        172.17.0.4   minikube
kubernetes-bootcamp-390780338-jw7cn    1/1       Terminating   0          24m       172.17.0.5   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;十秒程度したあとのPods一覧。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide
NAME                                   READY     STATUS    RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-2100875782-0jd0d   1/1       Running   0          55s       172.17.0.6   minikube
kubernetes-bootcamp-2100875782-vnxk1   1/1       Running   0          55s       172.17.0.7   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サービス詳細。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;
$ kubectl describe services/kubernetes-bootcamp
Name:                   kubernetes-bootcamp
Namespace:              default
Labels:                 run=kubernetes-bootcamp
Selector:               run=kubernetes-bootcamp
Type:                   NodePort
IP:                     10.0.0.228
Port:                   &amp;lt;unset&amp;gt; 8080/TCP
NodePort:               &amp;lt;unset&amp;gt; 31123/TCP
Endpoints:              172.17.0.6:8080,172.17.0.7:8080
Session Affinity:       None
No events.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;アップデート後のアプリにアクセス&#34;&gt;アップデート後のアプリにアクセス&lt;/h3&gt;

&lt;p&gt;curlでアクセスしてみると出力にv=2と表示され、アップデートされたアプリが利用可能になっていることが確認できました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-2100875782-0jd0d | v=2
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-2100875782-0jd0d | v=2
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-2100875782-vnxk1 | v=2
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ローリングアップデート後の状態確認&#34;&gt;ローリングアップデート後の状態確認&lt;/h3&gt;

&lt;p&gt;ローリングアップデートの状態確認。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl rollout status deployments/kubernetes-bootcamp
deployment &amp;quot;kubernetes-bootcamp&amp;quot; successfully rolled out
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod詳細表示。Imageの値が &lt;code&gt;jocatalin/kubernetes-bootcamp:v2&lt;/code&gt; と v2になっていることが確認できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl describe pods
Name:           kubernetes-bootcamp-2100875782-0jd0d
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:34:57 +0900
Labels:         pod-template-hash=2100875782
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.6
Controllers:    ReplicaSet/kubernetes-bootcamp-2100875782
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://7438b24d95242018dae9b4e82b93055d772f14650c688203b80204073d67d84b
    Image:              jocatalin/kubernetes-bootcamp:v2
    Image ID:           docker://sha256:b6556396ebd45c517469c522c3c61ecf5ab708cafe0e59df906278d34c255ef8
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 18:34:58 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         True 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  5m            5m              1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-2100875782-0jd0d to minikube
  5m            5m              1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;jocatalin/kubernetes-bootcamp:v2&amp;quot; already present on machine
  5m            5m              1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id 7438b24d9524; Security:[seccomp=unconfined]
  5m            5m              1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id 7438b24d9524


Name:           kubernetes-bootcamp-2100875782-vnxk1
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:34:57 +0900
Labels:         pod-template-hash=2100875782
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.7
Controllers:    ReplicaSet/kubernetes-bootcamp-2100875782
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://54c58841abb18466fb0f79636111ef5ff193226f43a5741d1730efeb4689ba58
    Image:              jocatalin/kubernetes-bootcamp:v2
    Image ID:           docker://sha256:b6556396ebd45c517469c522c3c61ecf5ab708cafe0e59df906278d34c255ef8
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 18:34:58 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         True 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  5m            5m              1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-2100875782-vnxk1 to minikube
  5m            5m              1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;jocatalin/kubernetes-bootcamp:v2&amp;quot; already present on machine
  5m            5m              1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id 54c58841abb1; Security:[seccomp=unconfined]
  5m            5m              1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id 54c58841abb1
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;アプリのバージョンアップ失敗の例&#34;&gt;アプリのバージョンアップ失敗の例&lt;/h3&gt;

&lt;h4 id=&#34;存在しないタグのイメージにアップデート&#34;&gt;存在しないタグのイメージにアップデート&lt;/h4&gt;

&lt;p&gt;次はv10とタグ付けされたイメージにアップデートを試みます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl set image deployments/kubernetes-bootcamp kubernetes-bootcamp=jocatalin/kubernetes-bootcamp:v10
deployment &amp;quot;kubernetes-bootcamp&amp;quot; image updated
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;問題なくアップデートされたように見えますが、実はv10というタグのイメージは存在しないのでエラーになります。&lt;/p&gt;

&lt;p&gt;デプロイ一覧のレプリカ数を見ると、DESIREDが2に対してAVAILABLEが1であり希望した状態になっていないことがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get deployments
NAME                  DESIRED   CURRENT   UP-TO-DATE   AVAILABLE   AGE
kubernetes-bootcamp   2         3         2            1           1h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pods一覧を見ると一部のPodはSTATUSがImagePullBackOffとなっています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide
NAME                                   READY     STATUS             RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-1951388213-lpc3k   0/1       ImagePullBackOff   0          26s       172.17.0.4   minikube
kubernetes-bootcamp-1951388213-mwx9v   0/1       ImagePullBackOff   0          25s       172.17.0.5   minikube
kubernetes-bootcamp-2100875782-0jd0d   1/1       Terminating        0          10m       172.17.0.6   minikube
kubernetes-bootcamp-2100875782-vnxk1   1/1       Running            0          10m       172.17.0.7   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;間を置いて何度か試していると、STATUSがErrImagePullとなっているときもありました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide
NAME                                   READY     STATUS             RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-1951388213-lpc3k   0/1       ImagePullBackOff   0          1m        172.17.0.4   minikube
kubernetes-bootcamp-1951388213-mwx9v   0/1       ErrImagePull       0          1m        172.17.0.5   minikube
kubernetes-bootcamp-2100875782-vnxk1   1/1       Running            0          11m       172.17.0.7   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod詳細。
Imageの値が &lt;code&gt;jocatalin/kubernetes-bootcamp:v10&lt;/code&gt; であるコンテナのEventsを見ると
&lt;code&gt;Failed to pull image &amp;quot;jocatalin/kubernetes-bootcamp:v10&amp;quot;: Tag v10 not found in repository docker.io/jocatalin/kubernetes-bootcamp&lt;/code&gt; というエラーがあり、タグv10はレジストリに無かったことがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl describe pods
Name:           kubernetes-bootcamp-1951388213-lpc3k
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:44:43 +0900
Labels:         pod-template-hash=1951388213
                run=kubernetes-bootcamp
Status:         Pending
IP:             172.17.0.4
Controllers:    ReplicaSet/kubernetes-bootcamp-1951388213
Containers:
  kubernetes-bootcamp:
    Container ID:
    Image:              jocatalin/kubernetes-bootcamp:v10
    Image ID:
    Port:               8080/TCP
    State:              Waiting
      Reason:           ImagePullBackOff
    Ready:              False
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         False 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  6m            6m              1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-1951388213-lpc3k to minikube
  6m            36s             6       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulling         pulling image &amp;quot;jocatalin/kubernetes-bootcamp:v10&amp;quot;
  6m            30s             6       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Warning         Failed          Failed to pull image &amp;quot;jocatalin/kubernetes-bootcamp:v10&amp;quot;: Tag v10 not found in repository docker.io/jocatalin/kubernetes-bootcamp
  6m            30s             6       {kubelet minikube}                                              Warning         FailedSync      Error syncing pod, skipping: failed to &amp;quot;StartContainer&amp;quot; for &amp;quot;kubernetes-bootcamp&amp;quot; with ErrImagePull: &amp;quot;Tag v10 not found in reposit
ory docker.io/jocatalin/kubernetes-bootcamp&amp;quot;

  6m    2s      22      {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal  BackOff         Back-off pulling image &amp;quot;jocatalin/kubernetes-bootcamp:v10&amp;quot;
  6m    2s      22      {kubelet minikube}                                              Warning FailedSync      Error syncing pod, skipping: failed to &amp;quot;StartContainer&amp;quot; for &amp;quot;kubernetes-bootcamp&amp;quot; with ImagePullBackOff: &amp;quot;Back-off pulling image \&amp;quot;jocatalin/kubernetes-bo
otcamp:v10\&amp;quot;&amp;quot;



Name:           kubernetes-bootcamp-1951388213-mwx9v
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:44:44 +0900
Labels:         pod-template-hash=1951388213
                run=kubernetes-bootcamp
Status:         Pending
IP:             172.17.0.5
Controllers:    ReplicaSet/kubernetes-bootcamp-1951388213
Containers:
  kubernetes-bootcamp:
    Container ID:
    Image:              jocatalin/kubernetes-bootcamp:v10
    Image ID:
    Port:               8080/TCP
    State:              Waiting
      Reason:           ImagePullBackOff
    Ready:              False
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         False 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  6m            6m              1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-1951388213-mwx9v to minikube
  6m            2m              5       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulling         pulling image &amp;quot;jocatalin/kubernetes-bootcamp:v10&amp;quot;
  6m            2m              5       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Warning         Failed          Failed to pull image &amp;quot;jocatalin/kubernetes-bootcamp:v10&amp;quot;: Tag v10 not found in repository docker.io/jocatalin/kubernetes-bootcamp
  6m            2m              5       {kubelet minikube}                                              Warning         FailedSync      Error syncing pod, skipping: failed to &amp;quot;StartContainer&amp;quot; for &amp;quot;kubernetes-bootcamp&amp;quot; with ErrImagePull: &amp;quot;Tag v10 not found in repository docker.io/jocatalin/kubernetes-bootcamp&amp;quot;

  6m    14s     23      {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal  BackOff         Back-off pulling image &amp;quot;jocatalin/kubernetes-bootcamp:v10&amp;quot;
  6m    14s     23      {kubelet minikube}                                              Warning FailedSync      Error syncing pod, skipping: failed to &amp;quot;StartContainer&amp;quot; for &amp;quot;kubernetes-bootcamp&amp;quot; with ImagePullBackOff: &amp;quot;Back-off pulling image \&amp;quot;jocatalin/kubernetes-bootcamp:v10\&amp;quot;&amp;quot;



Name:           kubernetes-bootcamp-2100875782-vnxk1
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:34:57 +0900
Labels:         pod-template-hash=2100875782
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.7
Controllers:    ReplicaSet/kubernetes-bootcamp-2100875782
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://54c58841abb18466fb0f79636111ef5ff193226f43a5741d1730efeb4689ba58
    Image:              jocatalin/kubernetes-bootcamp:v2
    Image ID:           docker://sha256:b6556396ebd45c517469c522c3c61ecf5ab708cafe0e59df906278d34c255ef8
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 18:34:58 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         True 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  16m           16m             1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-2100875782-vnxk1 to minikube
  16m           16m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;jocatalin/kubernetes-bootcamp:v2&amp;quot; already present on machine
  16m           16m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id 54c58841abb1; Security:[seccomp=unconfined]
  16m           16m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id 54c58841abb1
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;v10へのローリングアップデートを中止&#34;&gt;v10へのローリングアップデートを中止&lt;/h4&gt;

&lt;p&gt;ローリングアップデートをアンドゥします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl rollout undo deployments/kubernetes-bootcamp$ kubectl rollout undo deployments/kubernetes-bootcamp
deployment &amp;quot;kubernetes-bootcamp&amp;quot; rolled back
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod一覧。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -o wide
NAME                                   READY     STATUS    RESTARTS   AGE       IP           NODE
kubernetes-bootcamp-2100875782-vnxk1   1/1       Running   0          20m       172.17.0.7   minikube
kubernetes-bootcamp-2100875782-x290l   1/1       Running   0          17s       172.17.0.4   minikube
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod詳細。&lt;/p&gt;

&lt;p&gt;Podのレプリカ数は以前指定した2で、2つのPodともImageが &lt;code&gt;jocatalin/kubernetes-bootcamp:v2&lt;/code&gt; とアップデート前のバージョンに戻ったことが確認できました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ 
kubectl describe pods$ kubectl describe pods
Name:           kubernetes-bootcamp-2100875782-vnxk1
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:34:57 +0900
Labels:         pod-template-hash=2100875782
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.7
Controllers:    ReplicaSet/kubernetes-bootcamp-2100875782
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://54c58841abb18466fb0f79636111ef5ff193226f43a5741d1730efeb4689ba58
    Image:              jocatalin/kubernetes-bootcamp:v2
    Image ID:           docker://sha256:b6556396ebd45c517469c522c3c61ecf5ab708cafe0e59df906278d34c255ef8
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 18:34:58 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         True 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  21m           21m             1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-2100875782-vnxk1 to minikube
  21m           21m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;jocatalin/kubernetes-bootcamp:v2&amp;quot; already present on machine
  21m           21m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id 54c58841abb1; Security:[seccomp=unconfined]
  21m           21m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id 54c58841abb1


Name:           kubernetes-bootcamp-2100875782-x290l
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:55:31 +0900
Labels:         pod-template-hash=2100875782
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.4
Controllers:    ReplicaSet/kubernetes-bootcamp-2100875782
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://523dca2d5839e832942af50d52fe8008c16862c19ebed553e50293765f4cf12c
    Image:              jocatalin/kubernetes-bootcamp:v2
    Image ID:           docker://sha256:b6556396ebd45c517469c522c3c61ecf5ab708cafe0e59df906278d34c255ef8
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 18:55:32 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         True 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  21m           21m             1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-2100875782-vnxk1 to minikube
  21m           21m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;jocatalin/kubernetes-bootcamp:v2&amp;quot; already present on machine
  21m           21m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id 54c58841abb1; Security:[seccomp=unconfined]
  21m           21m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id 54c58841abb1


Name:           kubernetes-bootcamp-2100875782-x290l
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:55:31 +0900
Labels:         pod-template-hash=2100875782
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.4
Controllers:    ReplicaSet/kubernetes-bootcamp-2100875782
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://523dca2d5839e832942af50d52fe8008c16862c19ebed553e50293765f4cf12c
    Image:              jocatalin/kubernetes-bootcamp:v2
    Image ID:           docker://sha256:b6556396ebd45c517469c522c3c61ecf5ab708cafe0e59df906278d34c255ef8
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 18:55:32 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         True 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  1m            1m              1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-2100875782-x290l to minikube
  1m            1m              1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;jocatalin/kubernetes-bootcamp:v2&amp;quot; already present on machine
  1m            1m              1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id 523dca2d5839; Security:[seccomp=unconfined]
  1m            1m              1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id 523dca2d5839
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curlでアクセスしてみても v2 と表示されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-2100875782-vnxk1 | v=2
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-2100875782-vnxk1 | v=2
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-2100875782-x290l | v=2
$ curl $NODE_IP:$NODE_PORT
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-2100875782-x290l | v=2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;module-4のstep-2-ラベルを付ける&#34;&gt;Module 4のStep 2: ラベルを付ける&lt;/h2&gt;

&lt;p&gt;デプロイの詳細表示。
Labelsにrun=kubernetes-bootcampというのがデフォルトで付いていることがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl describe deployment
Name:                   kubernetes-bootcamp
Namespace:              default
CreationTimestamp:      Sat, 31 Dec 2016 17:15:41 +0900
Labels:                 run=kubernetes-bootcamp
Selector:               run=kubernetes-bootcamp
Replicas:               2 updated | 2 total | 2 available | 0 unavailable
StrategyType:           RollingUpdate
MinReadySeconds:        0
RollingUpdateStrategy:  1 max unavailable, 1 max surge
Conditions:
  Type          Status  Reason
  ----          ------  ------
  Available     True    MinimumReplicasAvailable
OldReplicaSets: &amp;lt;none&amp;gt;
NewReplicaSet:  kubernetes-bootcamp-2100875782 (2/2 replicas created)
Events:
  FirstSeen     LastSeen        Count   From                            SubObjectPath   Type            Reason                  Message
  ---------     --------        -----   ----                            -------------   --------        ------                  -------
  55m           55m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled up replica set kubernetes-bootcamp-390780338 to 4
  43m           43m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled down replica set kubernetes-bootcamp-390780338 to 2
  31m           31m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled up replica set kubernetes-bootcamp-2100875782 to 1
  31m           31m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled down replica set kubernetes-bootcamp-390780338 to 1
  31m           31m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled down replica set kubernetes-bootcamp-390780338 to 0
  21m           21m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled up replica set kubernetes-bootcamp-1951388213 to 1
  21m           21m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled down replica set kubernetes-bootcamp-2100875782 to 1
  21m           21m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled up replica set kubernetes-bootcamp-1951388213 to 2
  31m           11m             2       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled up replica set kubernetes-bootcamp-2100875782 to 2
  11m           11m             1       {deployment-controller }                        Normal          DeploymentRollback      Rolled back deployment &amp;quot;kubernetes-bootcamp&amp;quot; to revision 2
  11m           11m             1       {deployment-controller }                        Normal          ScalingReplicaSet       Scaled down replica set kubernetes-bootcamp-1951388213 to 0
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定したラベルを持つPods一覧表示。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -l run=kubernetes-bootcamp
NAME                                   READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-2100875782-vnxk1   1/1       Running   0          32m
kubernetes-bootcamp-2100875782-x290l   1/1       Running   0          11m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定したラベルを持つサービス一覧表示。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get services -l run=kubernetes-bootcamp
NAME                  CLUSTER-IP   EXTERNAL-IP   PORT(S)          AGE
kubernetes-bootcamp   10.0.0.228   &amp;lt;nodes&amp;gt;       8080:31123/TCP   1h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod名を取得して環境変数POD_NAMEに設定。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export POD_NAME=$(kubectl get pods -o go-template --template &#39;{{range .items}}{{.metadata.name}}{{&amp;quot;\n&amp;quot;}}{{end}}&#39;)
$ echo Name of the Pod: $POD_NAME
Name of the Pod: kubernetes-bootcamp-2100875782-vnxk1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podにapp=v2というラベルを設定。チュートリアルではapp=v1というラベルを指定していますが、この記事ではバージョンアップ後に実行しているのでapp=v2にします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl label pod $POD_NAME app=v2
pod &amp;quot;kubernetes-bootcamp-2100875782-vnxk1&amp;quot; labeled
pod &amp;quot;kubernetes-bootcamp-2100875782-x290l&amp;quot; labeled
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod詳細表示。
Labelsにapp=v2が付いています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;kubectl describe pods $POD_NAME
Name:           kubernetes-bootcamp-2100875782-vnxk1
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:34:57 +0900
Labels:         app=v2
                pod-template-hash=2100875782
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.7
Controllers:    ReplicaSet/kubernetes-bootcamp-2100875782
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://54c58841abb18466fb0f79636111ef5ff193226f43a5741d1730efeb4689ba58
    Image:              jocatalin/kubernetes-bootcamp:v2
    Image ID:           docker://sha256:b6556396ebd45c517469c522c3c61ecf5ab708cafe0e59df906278d34c255ef8
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 18:34:58 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         True 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  36m           36m             1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-2100875782-vnxk1 to minikube
  36m           36m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;jocatalin/kubernetes-bootcamp:v2&amp;quot; already present on machine
  36m           36m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id 54c58841abb1; Security:[seccomp=unconfined]
  36m           36m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id 54c58841abb1


Name:           kubernetes-bootcamp-2100875782-x290l
Namespace:      default
Node:           minikube/192.168.99.100
Start Time:     Sat, 31 Dec 2016 18:55:31 +0900
Labels:         app=v2
                pod-template-hash=2100875782
                run=kubernetes-bootcamp
Status:         Running
IP:             172.17.0.4
Controllers:    ReplicaSet/kubernetes-bootcamp-2100875782
Containers:
  kubernetes-bootcamp:
    Container ID:       docker://523dca2d5839e832942af50d52fe8008c16862c19ebed553e50293765f4cf12c
    Image:              jocatalin/kubernetes-bootcamp:v2
    Image ID:           docker://sha256:b6556396ebd45c517469c522c3c61ecf5ab708cafe0e59df906278d34c255ef8
    Port:               8080/TCP
    State:              Running
      Started:          Sat, 31 Dec 2016 18:55:32 +0900
    Ready:              True
    Restart Count:      0
    Volume Mounts:
      /var/run/secrets/kubernetes.io/serviceaccount from default-token-qqsb7 (ro)
    Environment Variables:      &amp;lt;none&amp;gt;
Conditions:
  Type          Status
  Initialized   True 
  Ready         True 
  PodScheduled  True 
Volumes:
  default-token-qqsb7:
    Type:       Secret (a volume populated by a Secret)
    SecretName: default-token-qqsb7
QoS Class:      BestEffort
Tolerations:    &amp;lt;none&amp;gt;
Events:
  FirstSeen     LastSeen        Count   From                    SubObjectPath                           Type            Reason          Message
  ---------     --------        -----   ----                    -------------                           --------        ------          -------
  15m           15m             1       {default-scheduler }                                            Normal          Scheduled       Successfully assigned kubernetes-bootcamp-2100875782-x290l to minikube
  15m           15m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Pulled          Container image &amp;quot;jocatalin/kubernetes-bootcamp:v2&amp;quot; already present on machine
  15m           15m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Created         Created container with docker id 523dca2d5839; Security:[seccomp=unconfined]
  15m           15m             1       {kubelet minikube}      spec.containers{kubernetes-bootcamp}    Normal          Started         Started container with docker id 523dca2d5839
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今つけたラベルを持つPod一覧表示。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods -l app=v2
NAME                                   READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-2100875782-vnxk1   1/1       Running   0          40m
kubernetes-bootcamp-2100875782-x290l   1/1       Running   0          19m
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;module-4のstep-3-サービスを削除&#34;&gt;Module 4のStep 3: サービスを削除&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl delete service -l run=kubernetes-bootcamp
service &amp;quot;kubernetes-bootcamp&amp;quot; deleted
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;サービス一覧を確認すると kubernetes-bootcamp が消えていることがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get services
NAME         CLUSTER-IP   EXTERNAL-IP   PORT(S)   AGE
kubernetes   10.0.0.1     &amp;lt;none&amp;gt;        443/TCP   13h
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;curlでアクセスすると接続拒否という期待される結果になりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ curl $NODE_IP:$NODE_PORT
curl: (7) Failed to connect to 192.168.99.100 port 31123: Connection refused
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Pod一覧を見るとPod自体は存在します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ kubectl get pods
NAME                                   READY     STATUS    RESTARTS   AGE
kubernetes-bootcamp-2100875782-vnxk1   1/1       Running   0          40m
kubernetes-bootcamp-2100875782-x290l   1/1       Running   0          19m
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Podに入ってアクセスするとアプリ自体は引き続き稼働中であることがわかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ export POD_NAME=kubernetes-bootcamp-2100875782-vnxk1
$ kubectl exec -ti $POD_NAME curl localhost:8080
Hello Kubernetes bootcamp! | Running on: kubernetes-bootcamp-2100875782-vnxk1 | v=2
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;ローリングアップデートとアップデート失敗時の切り戻しが簡単に行えるのは良いなと思いました。&lt;/p&gt;

&lt;p&gt;このチュートリアルはステートレスなアプリケーションの例でしたが、
&lt;a href=&#34;http://kubernetes.io/docs/tutorials/&#34;&gt;Tutorials - Kubernetes&lt;/a&gt;
には Stateful Applications というチュートリアルもあるので、こちらも後日試してみたいです。　&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>