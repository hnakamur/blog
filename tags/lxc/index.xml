<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lxc on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/lxc/index.xml</link>
    <description>Recent content in Lxc on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <atom:link href="https://hnakamur.github.io/blog/tags/lxc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LXC 2.0でCentOS 7のコンテナを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2016/04/19/run_centos7_containers_on_lxc2/</link>
      <pubDate>Tue, 19 Apr 2016 06:37:15 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/04/19/run_centos7_containers_on_lxc2/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;h3 id=&#34;なぜdockerではなくlxcを使うのか&#34;&gt;なぜDockerではなくLXCを使うのか&lt;/h3&gt;

&lt;p&gt;コンテナと言えばDockerが有名です。Docker 1.9からネットワーク機能が大幅に良くなっていて、Docker Composeでコンテナを作成するとコンテナ名で名前解決できるようになっています。&lt;/p&gt;

&lt;p&gt;また公式のCentOS 7コンテナも良くなっていて、Dockerfileに &lt;code&gt;CMD [&amp;quot;/bin/init&amp;quot;]&lt;/code&gt; と書いておけば普通に systemd が起動するようになっています。&lt;/p&gt;

&lt;p&gt;そして &lt;code&gt;docker run&lt;/code&gt; に &lt;code&gt;--privileged&lt;/code&gt; オプションを付けて実行すれば実行時に &lt;code&gt;/etc/&lt;/code&gt; などの下のファイルを書き換えることも出来ます。&lt;/p&gt;

&lt;p&gt;しかしこのような使い方は&lt;a href=&#34;https://docs.docker.com/engine/userguide/eng-image/dockerfile_best-practices/&#34;&gt;Best practices for writing Dockerfiles&lt;/a&gt;と全く合いません。Dockerのベストプラクティスでは1コンテナ1プロセス、コンテナは最小限で使い捨て、ログやデータはコンテナ外部に保存するというスタンスなのです。&lt;/p&gt;

&lt;p&gt;一方、本番環境でDockerを使わずAnsibleでプロビジョニングする前提であれば、開発環境もAnsibleでプロビジョニングしたいところです。サーバが1台ならVagrant + VirtualBoxで良いのですが、複数台となると仮想マシンではメモリがたくさん必要になりますのでコンテナを使いたいところです。LXCなら従来のLinuxサーバと同じ感覚で利用できます。&lt;/p&gt;

&lt;h3 id=&#34;2016-05-07-追記&#34;&gt;2016-05-07 追記&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.io/blog/2016/05/07/tried-lxd-2.0-on-ubuntu-16.04/&#34;&gt;Ubuntu 16.04 LTSでLXD 2.0を試してみた&lt;/a&gt;を書きました。試してみて思ったのは、今から使うならLXC 2.0よりもLXD 2.0のほうが良いということです。この記事よりもこちらをお勧めします。&lt;/p&gt;

&lt;h3 id=&#34;ubuntu-14-04-16-04でlxc-2-0を使う&#34;&gt;Ubuntu 14.04/16.04でLXC 2.0を使う&lt;/h3&gt;

&lt;p&gt;LXCもコンテナなのでLinuxカーネルはホストとコンテナで同じものが使われます。CentOS 7単独の環境に近づけるにはホストもCentOS 7にしたいところです。が、現時点ではCentOS 7ではLXCはepelにバージョン1.0.8があるだけです。&lt;/p&gt;

&lt;p&gt;LXCはCanonical LtdがUbuntu上で開発しているので、Ubuntu上で使うほうがトラブルは少なくて済むと予想します。ということで、LinuxカーネルのバージョンがCentOS 7と違ってしまうというデメリットはあるのですが、ホストはUbuntuを使うことにします。&lt;/p&gt;

&lt;p&gt;Ubuntu 14.04のカーネルのほうがCentOS 7のカーネルより新しいので、アプリケーション開発に使う分にはLinuxカーネルのバージョン違いで影響が出ることはほぼ無いと思います。&lt;/p&gt;

&lt;p&gt;2016-04-06にLXC 2.0がリリースされました。&lt;a href=&#34;https://linuxcontainers.org/ja/lxc/news/&#34;&gt;Linux Containers - LXC - ニュース&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これは長期サポート(Long-term support; LTS) リリースです。ということで、今から使うなら2.0が良いと思います。&lt;/p&gt;

&lt;h2 id=&#34;lxcのセットアップ&#34;&gt;LXCのセットアップ&lt;/h2&gt;

&lt;p&gt;セットアップ用のスクリプトとVagrantfileを書きました。
&lt;a href=&#34;https://github.com/hnakamur/setup_lxc_on_vagrant&#34;&gt;hnakamur/setup_lxc_on_vagrant: Vagrantfile to set up LXC 2.x on Ubuntu 14.04 or 16.04&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;これを使うと以下の手順でセットアップ出来ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cp Vagrantfile.ubuntu1404 Vagrantfile
vagrant up &amp;amp;&amp;amp; vagrant reload
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;セットアップした後ネットワークの再起動が必要なので &lt;code&gt;vagrant up&lt;/code&gt; に加えて &lt;code&gt;vagrant reload&lt;/code&gt; を実行しています。&lt;/p&gt;

&lt;p&gt;セットアップは&lt;a href=&#34;https://github.com/hnakamur/setup_lxc_on_vagrant/blob/master/setup_lxc.sh&#34;&gt;setup_lxc.sh&lt;/a&gt;というシェルスクリプトになっているので設定内容が気になる方はこちらを参照してください。Vagrantを使わないUbuntu 14.04/16.04環境でもこのスクリプトを実行すればLXCをセットアップできます。&lt;/p&gt;

&lt;p&gt;Vagrantの仮想マシンの再起動が終わったら&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で仮想マシンに入ってLXCを使います。&lt;/p&gt;

&lt;h2 id=&#34;コンテナ作成&#34;&gt;コンテナ作成&lt;/h2&gt;

&lt;p&gt;例えばweb01という名前のCentOS 7コンテナを作成するには以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc-create -n web01 -t download -- -d centos -r 7 -a amd64
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;-t&lt;/code&gt; はテンプレートを指定するオプションです。centosというテンプレートもあるのですが、それを使うとコンテナの挙動に問題があった (これについては今後別記事で書く予定です) ので、downloadテンプレートを使っています。&lt;/p&gt;

&lt;p&gt;初回はコンテナのイメージファイルをダウンロードするので時間がかかります。イメージファイルのサイズは約60MBとそれほど大きくもないのですが、私の環境では20分程度かかる場合もありました。&lt;/p&gt;

&lt;h2 id=&#34;コンテナ起動&#34;&gt;コンテナ起動&lt;/h2&gt;

&lt;p&gt;web01というコンテナを起動するには以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc-start -n web01
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;コンテナ一覧表示&#34;&gt;コンテナ一覧表示&lt;/h2&gt;

&lt;p&gt;以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc-ls -f
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;出力例はこんな感じになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~$ sudo lxc-ls -f
NAME    STATE   AUTOSTART GROUPS IPV4       IPV6
web01   RUNNING 0         -      10.0.3.244  -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動直後に実行するとIPv4の列が-になっています。数秒立ってから再度実行するとIPアドレスがDHCPで設定されて表示されます。&lt;/p&gt;

&lt;h3 id=&#34;コンテナ名でdnsを引けるか確認&#34;&gt;コンテナ名でDNSを引けるか確認&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~$ dig +short web01
10.0.3.244
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、LXCのdnsmasqで引けるようにするために&lt;a href=&#34;http://www.clear-code.com/blog/2014/7/30.html#.2Fetc.2Fresolve.conf.E3.81.ABnameserver.E3.82.92.E8.BF.BD.E5.8A.A0.E3.81.99.E3.82.8B&#34;&gt;LXCコンテナに名前でアクセスする方法 - ククログ(2014-07-30)&lt;/a&gt;を参考に &lt;a href=&#34;https://github.com/hnakamur/setup_lxc_on_vagrant/blob/8dac97e2c0dafe3bad275f733a549f7b03477cb4/setup_lxc.sh#L40-L43&#34;&gt;https://github.com/hnakamur/setup_lxc_on_vagrant/blob/8dac97e2c0dafe3bad275f733a549f7b03477cb4/setup_lxc.sh#L40-L43&lt;/a&gt; で設定しています。情報共有ありがとうございます！&lt;/p&gt;

&lt;h2 id=&#34;コンテナ内に入る&#34;&gt;コンテナ内に入る&lt;/h2&gt;

&lt;p&gt;web01というコンテナ内に入るには以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo lxc-attach -n web01
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナ内でシェルのプロンプトが表示されますので、好きなコマンドを実行してください。 &lt;code&gt;exit&lt;/code&gt; で抜けます。実行例を以下に示します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~$ sudo lxc-attach -n web01
bash-4.2# ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
9: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether fe:74:45:50:85:27 brd ff:ff:ff:ff:ff:ff
    inet 10.0.3.11/24 brd 10.0.3.255 scope global dynamic eth0
       valid_lft 3219sec preferred_lft 3219sec
    inet6 fe80::fc74:45ff:fe50:8527/64 scope link
       valid_lft forever preferred_lft forever
bash-4.2# exitvagrant@vagrant-ubuntu-trusty-64:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;↑exitの後returnキーを押しても改行されませんでした。&lt;/p&gt;

&lt;h2 id=&#34;コンテナを停止する&#34;&gt;コンテナを停止する&lt;/h2&gt;

&lt;p&gt;以下のようにして停止します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo lxc-stop -n web01
vagrant@vagrant-ubuntu-trusty-64:~$ sudo lxc-ls -f
NAME    STATE   AUTOSTART GROUPS IPV4       IPV6
web01   STOPPED 0         -      -          -
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxc-stopですぐに停止するには以下の設定が必要&#34;&gt;lxc-stopですぐに停止するには以下の設定が必要&lt;/h3&gt;

&lt;p&gt;downloadテンプレートで作成したCentOS 7コンテナはそのままだと、lxc-stopで停止するのに1分間待たされます。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lists.linuxcontainers.org/pipermail/lxc-users/2014-February/006304.html&#34;&gt;[lxc-users] lxc-stop doesn&amp;rsquo;t stop centos, waits for the timeout&lt;/a&gt;を参考に、コンテナ内で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ln -s /usr/lib/systemd/system/halt.target /etc/systemd/system/sigpwr.target
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行すれば、lxc-stopですぐに停止できました。&lt;/p&gt;

&lt;h2 id=&#34;コンテナを削除する&#34;&gt;コンテナを削除する&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~$ sudo lxc-destroy -n web01
Destroyed container web01
vagrant@vagrant-ubuntu-trusty-64:~$ sudo lxc-ls -f
vagrant@vagrant-ubuntu-trusty-64:~$
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ホストでlxcサービス起動時にコンテナを自動起動する&#34;&gt;ホストでLXCサービス起動時にコンテナを自動起動する&lt;/h3&gt;

&lt;p&gt;&lt;code&gt;/var/lib/lxc/${コンテナ名}/config&lt;/code&gt; ファイルに以下の行を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;lxc.start.auto = 1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;複数コンテナ間の依存関係を指定して起動の順序を制御するなど高度な指定については加藤泰文さんの&lt;a href=&#34;http://gihyo.jp/admin/serial/01/linux_containers/0025?page=1&#34;&gt;第25回　LXCの構築・活用 [11] ─lxc-autostartコマンドによるコンテナの自動起動：LXCで学ぶコンテナ入門 －軽量仮想化環境を実現する技術｜gihyo.jp … 技術評論社&lt;/a&gt;の記事をご参照ください。私は複雑な指定は試してないです。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;Ubuntu 14.04上でLXC 2.0をセットアップして使う手順についてまとめました。&lt;/p&gt;

&lt;p&gt;コンテナの作成とプロビジョニングについてはAnsible playbookのサンプルも作ったので今後別記事で書く予定です。また、この記事では触れなかったハマりネタもいくつかあったのでそれも今度書こうと思います。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>