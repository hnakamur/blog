<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/tags/nginx/</link>
    <description>Recent content in Nginx on hnakamur&#39;s blog</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 01 Aug 2018 20:55:00 +0900</lastBuildDate>
    <atom:link href="https://hnakamur.github.io/blog/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>nginx luaでSAMLのService Providerを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2018/07/31/saml-service-provider-with-nginx-lua/</link>
      <pubDate>Tue, 31 Jul 2018 10:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/31/saml-service-provider-with-nginx-lua/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/&#34;&gt;nginxとshibbolethでSAML2のシングルサインオンを試してみた&lt;/a&gt; では &lt;a href=&#34;https://www.shibboleth.net/products/service-provider/&#34;&gt;Service Provider – Shibboleth Consortium&lt;/a&gt; を使いましたが、汎用的な分、設定方法のドキュメント&#xA;&lt;a href=&#34;https://wiki.shibboleth.net/confluence/display/SHIB2/NativeSPConfiguration&#34;&gt;NativeSPConfiguration - Shibboleth 2 - Shibboleth Wiki&lt;/a&gt; を見ても圧倒される感がありました （なお、ページ上部の囲みを見ると Shibboleth SP は先日 3.x がリリースされて 2.x はEOLになったそうです）。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginxとshibbolethでSAML2のシングルサインオンを試してみた</title>
      <link>https://hnakamur.github.io/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</link>
      <pubDate>Wed, 04 Jul 2018 16:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;勤務先でSAML2のシングルサインオンについて調査していたところ&#xA;&lt;a href=&#34;https://github.com/nginx-shib/nginx-http-shibboleth/issues/16&#34;&gt;Is this module compatible with SAML 2 in HTTP POST mode? · Issue #16 · nginx-shib/nginx-http-shibboleth&lt;/a&gt;&#xA;というイシューを見つけました。&#xA;この nginx-http-shibboleth というモジュールを使えば実現できそうということで、&#xA;nginxとshibbolethでSAML2のシングルサインオンを試してみたメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginxのコードリーディングにrtagsを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</link>
      <pubDate>Wed, 23 May 2018 22:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/&#34;&gt;Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した&lt;/a&gt; で作成したrtagsを使ってnginxのコードリーディングをするための手順メモです。&lt;/p&gt;&#xA;&lt;p&gt;configure で生成される &lt;code&gt;ngx_auto_config.h&lt;/code&gt; と &lt;code&gt;ngx_auto_headers.h&lt;/code&gt; も含めて読みたいというのと、rtagsのREADMEの &lt;code&gt;Setup](https://github.com/Andersbakken/rtags#setup) のうちnginxでは [Bear](https://github.com/rizsotto/Bear) を使って &lt;/code&gt;compile_commands.json&lt;code&gt;を生成するという関係もあり、&lt;/code&gt;debパッケージを使ってnginxモジュールをビルド・デバッグする](&lt;a href=&#34;https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/&#34;&gt;https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/&lt;/a&gt;) と似た感じでビルドしていくことになります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>debパッケージを使ってnginxモジュールをビルド・デバッグする</title>
      <link>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</link>
      <pubDate>Thu, 10 May 2018 09:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;私は &lt;a href=&#34;https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/&#34;&gt;私のnginxのカスタムrpmとdebをビルドする手順&lt;/a&gt; でサードパーティモジュールを含んだnginxのパッケージをビルドしています。&lt;/p&gt;&#xA;&lt;p&gt;このパッケージに自作モジュールを追加して開発するためのビルド手順を考えてみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>私のnginxのカスタムrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 08:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/</guid>
      <description>&lt;h1 id=&#34;はじめに&#34;&gt;はじめに&lt;/h1&gt;&#xA;&lt;p&gt;nginxのカスタムrpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている&#xA;手順をピックアップしながら毎度ビルドしているのは良くないので、自分用にまとめておきます。&#xA;なおこの手順は私の手元の環境と自作コマンドに依存しているので、他の環境でコピペしても動きません。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua-nginx-moduleのshared dictの空き容量について</title>
      <link>https://hnakamur.github.io/blog/2017/10/11/lua-nginx-shared-dict-free-space/</link>
      <pubDate>Wed, 11 Oct 2017 11:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/10/11/lua-nginx-shared-dict-free-space/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers&lt;/a&gt; の&#xA;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;&#xA;は複数ワーカープロセス間でデータを共有することができ、非常に便利です。&lt;/p&gt;&#xA;&lt;p&gt;使用する際は&#xA;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt; ディレクティブ&#xA;で以下のように shared dict の名称とサイズを指定する必要があります。&lt;/p&gt;</description>
    </item>
    <item>
      <title>lua-nginx-moduleのshared dictのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/09/27/code-reading-lua-nginx-shared-dict/</link>
      <pubDate>Wed, 27 Sep 2017 08:57:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/27/code-reading-lua-nginx-shared-dict/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module&#34;&gt;openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers&lt;/a&gt;&#xA;の&#xA;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module#ngxshareddict&#34;&gt;ngx.shared.DICT&lt;/a&gt;&#xA;を使う際&#xA;&lt;a href=&#34;https://github.com/openresty/lua-nginx-module#lua_shared_dict&#34;&gt;lua_shared_dict&lt;/a&gt;&#xA;ディレクティブで&lt;/p&gt;&#xA;&lt;div class=&#34;highlight&#34;&gt;&lt;pre tabindex=&#34;0&#34; class=&#34;chroma&#34;&gt;&lt;code class=&#34;language-text&#34; data-lang=&#34;text&#34;&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;http {&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    lua_shared_dict dogs 10m;&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;    ...&#xA;&lt;/span&gt;&lt;/span&gt;&lt;span class=&#34;line&#34;&gt;&lt;span class=&#34;cl&#34;&gt;}&#xA;&lt;/span&gt;&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;p&gt;のように dict のサイズを指定しますが、容量が足りているかを確認するため実際の使用量をモニタリングしたいと思いました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ngx_http_limit_req_moduleのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/08/17/nginx-limit-req-code-reading/</link>
      <pubDate>Thu, 17 Aug 2017 09:38:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/17/nginx-limit-req-code-reading/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://nginx.org/en/docs/http/ngx_http_limit_req_module.html&#34;&gt;Module ngx_http_limit_req_module&lt;/a&gt;&#xA;を使おうと思ってコードを読んでみたのでメモです。&lt;/p&gt;&#xA;&lt;h2 id=&#34;leaky-bucket&#34;&gt;leaky bucket&lt;/h2&gt;&#xA;&lt;p&gt;上記のドキュメントに &amp;ldquo;leaky bucket&amp;rdquo; を使ってリクエスト数の制御を行っていると書かれています。&lt;/p&gt;&#xA;&lt;p&gt;leaky bucketについては&#xA;&lt;a href=&#34;http://www.geeksforgeeks.org/leaky-bucket-algorithm/&#34;&gt;Leaky Bucket Algorithm| Computer Networks - GeeksforGeeks&lt;/a&gt;&#xA;の説明が具体例もあってわかりやすかったです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginx&#43;luaのカスタムdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</link>
      <pubDate>Tue, 18 Jul 2017 15:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/&#34;&gt;ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた&lt;/a&gt; 、 &lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/14/tried-git-buildpackage-patch-queue/&#34;&gt;git-buildpackageのpatch-queue機能を試してみた&lt;/a&gt; の続きです。&lt;/p&gt;&#xA;&lt;p&gt;私はCentOS 6と7用のnginx + luaのカスタムrpmを&#xA;&lt;a href=&#34;https://github.com/hnakamur/nginx-rpm&#34;&gt;hnakamur/nginx-rpm: A Dockerfile to build nginx rpm for CentOS 6 and 7 using fedora copr&lt;/a&gt;&#xA;で作っていましたが、それとほぼ同じ内容のdebパッケージを作ってみました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>git-buildpackageのpatch-queue機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</link>
      <pubDate>Fri, 14 Jul 2017 11:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/&#34;&gt;ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた&lt;/a&gt; で &lt;code&gt;quilt&lt;/code&gt; を使ったパッチ適用を経験してみて、不慣れなこともありちょっと面倒な気がしました。&lt;/p&gt;&#xA;&lt;p&gt;そこで、 &lt;code&gt;git-buildpackage&lt;/code&gt; の `Working with patches](&lt;a href=&#34;http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.patches.html&#34;&gt;http://honk.sigxcpu.org/projects/git-buildpackage/manual-html/gbp.patches.html&lt;/a&gt;) を試してみることにしました。&lt;/p&gt;&#xA;&lt;p&gt;前回作業したgitのレポジトリで以下のコミットに戻してから、以下の手順を試しました。&lt;/p&gt;</description>
    </item>
    <item>
      <title>ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</link>
      <pubDate>Fri, 14 Jul 2017 06:07:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;http://asnokaze.hatenablog.com/entry/2017/07/03/083530&#34;&gt;Nginxのリバースプロキシでバックエンドとhttp2通信する - ASnoKaze blog&lt;/a&gt; で紹介されていたngx_http_v2_upstreamモジュールを組み込んだnginxのdebianパッケージを作ってみたのでメモです。&lt;/p&gt;</description>
    </item>
    <item>
      <title>nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました</title>
      <link>https://hnakamur.github.io/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</link>
      <pubDate>Tue, 15 Dec 2015 04:19:16 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</guid>
      <description>&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;&#xA;&lt;p&gt;&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/&#34;&gt;Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;と&lt;a href=&#34;https://hnakamur.github.io/blog/blog/2015/12/05/build_rpm_with_mock/&#34;&gt;mockコマンドでrpmをビルドする · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の環境でいくつかrpmをビルド・配布してみたのですが、手元の環境でビルドを成功させるまでに試行錯誤するのと、coprにsrpmをアップロードしてビルド・配布するのが別の環境だと面倒なことに気付きました。&lt;/p&gt;</description>
    </item>
  </channel>
</rss>
