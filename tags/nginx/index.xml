<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Nginx on hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/tags/nginx/</link>
    <description>Recent content in Nginx on hnakamur&#39;s blog</description>
    <generator>Hugo</generator>
    <language>ja-jp</language>
    <lastBuildDate>Wed, 01 Aug 2018 20:55:00 +0900</lastBuildDate>
    <atom:link href="https://hnakamur.github.io/blog/tags/nginx/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>nginx luaでSAMLのService Providerを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2018/07/31/saml-service-provider-with-nginx-lua/</link>
      <pubDate>Tue, 31 Jul 2018 10:00:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/31/saml-service-provider-with-nginx-lua/</guid>
      <description>はじめに nginxとshibbolethでSAML2のシングルサインオンを試してみた では Service Provider – Shibboleth Consortium を使いましたが、汎用的な分、設定方法のドキ</description>
    </item>
    <item>
      <title>nginxとshibbolethでSAML2のシングルサインオンを試してみた</title>
      <link>https://hnakamur.github.io/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</link>
      <pubDate>Wed, 04 Jul 2018 16:40:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</guid>
      <description>はじめに 勤務先でSAML2のシングルサインオンについて調査していたところ Is this module compatible with SAML 2 in HTTP POST mode? · Issue #16 · nginx-shib/nginx-http-shibboleth というイシューを見つけました。 この nginx-http-shibboleth</description>
    </item>
    <item>
      <title>nginxのコードリーディングにrtagsを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</link>
      <pubDate>Wed, 23 May 2018 22:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</guid>
      <description>はじめに Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した で作成したrtagsを使ってnginxのコードリーディングをするための手順メモで</description>
    </item>
    <item>
      <title>debパッケージを使ってnginxモジュールをビルド・デバッグする</title>
      <link>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</link>
      <pubDate>Thu, 10 May 2018 09:25:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</guid>
      <description>はじめに 私は 私のnginxのカスタムrpmとdebをビルドする手順 でサードパーティモジュールを含んだnginxのパッケージをビルドしています</description>
    </item>
    <item>
      <title>私のnginxのカスタムrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 08:30:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/</guid>
      <description>はじめに nginxのカスタムrpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている 手順をピックアップしながら</description>
    </item>
    <item>
      <title>lua-nginx-moduleのshared dictの空き容量について</title>
      <link>https://hnakamur.github.io/blog/2017/10/11/lua-nginx-shared-dict-free-space/</link>
      <pubDate>Wed, 11 Oct 2017 11:10:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/10/11/lua-nginx-shared-dict-free-space/</guid>
      <description>はじめに openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers の ngx.shared.DICT は複数ワーカープロセス間でデータを共有することができ、非常に便利です。 使用する際は lua_shared_dict ディレクティブ で以下のよ</description>
    </item>
    <item>
      <title>lua-nginx-moduleのshared dictのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/09/27/code-reading-lua-nginx-shared-dict/</link>
      <pubDate>Wed, 27 Sep 2017 08:57:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/09/27/code-reading-lua-nginx-shared-dict/</guid>
      <description>はじめに openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers の ngx.shared.DICT を使う際 lua_shared_dict ディレクティブで http { lua_shared_dict dogs 10m; ... } のように dict のサイズを指定しますが、容量が足りているかを確認するため実</description>
    </item>
    <item>
      <title>ngx_http_limit_req_moduleのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/08/17/nginx-limit-req-code-reading/</link>
      <pubDate>Thu, 17 Aug 2017 09:38:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/08/17/nginx-limit-req-code-reading/</guid>
      <description>はじめに Module ngx_http_limit_req_module を使おうと思ってコードを読んでみたのでメモです。 leaky bucket 上記のドキュメントに &amp;ldquo;leaky bucket&amp;rdquo; を使ってリクエスト数の制御を行っていると書かれていま</description>
    </item>
    <item>
      <title>nginx&#43;luaのカスタムdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</link>
      <pubDate>Tue, 18 Jul 2017 15:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</guid>
      <description>はじめに ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた 、 git-buildpackag</description>
    </item>
    <item>
      <title>git-buildpackageのpatch-queue機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</link>
      <pubDate>Fri, 14 Jul 2017 11:20:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</guid>
      <description>はじめに ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた で quilt を使ったパッチ適用を経験して</description>
    </item>
    <item>
      <title>ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</link>
      <pubDate>Fri, 14 Jul 2017 06:07:00 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</guid>
      <description>はじめに Nginxのリバースプロキシでバックエンドとhttp2通信する - ASnoKaze blog で紹介されていたngx_http_v2_upstreamモジュー</description>
    </item>
    <item>
      <title>nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました</title>
      <link>https://hnakamur.github.io/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</link>
      <pubDate>Tue, 15 Dec 2015 04:19:16 +0900</pubDate>
      <guid>https://hnakamur.github.io/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</guid>
      <description>はじめに Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた · hnakamur&amp;rsquo;s blog at githubとmockコマ</description>
    </item>
  </channel>
</rss>
