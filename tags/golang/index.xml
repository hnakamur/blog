<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/tags/golang/</link>
    <description>Recent content in golang on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Thu, 30 Jun 2016 06:40:12 +0900</lastBuildDate>
    
	<atom:link href="https://hnakamur.github.io/blog/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>分散SQLデータベースCockroachDBのキーバリューストレージのデバッグコマンドを試してみた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/06/30/experiment-cockroachdb-key-value-store/</link>
      <pubDate>Thu, 30 Jun 2016 06:40:12 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/06/30/experiment-cockroachdb-key-value-store/</guid>
      <description>はじめに LSM-TreeとRocksDB、TiDB、CockroachDBが気になる で紹介した CockroachDB は What is CockroachDB? によるとスケールアウトできる分散SQ</description>
    </item>
    
    <item>
      <title>連番ファイル名の命名規則について実験してみた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/06/22/experimented_with_naming_for_many_sequential_numbered_files/</link>
      <pubDate>Wed, 22 Jun 2016 23:40:27 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/06/22/experimented_with_naming_for_many_sequential_numbered_files/</guid>
      <description>はじめに 0〜1,000,000といった連番のファイルを作るときに、1つのディレクトリに全てのファイルを入れると、遅くなるとか取り扱いが面倒に</description>
    </item>
    
    <item>
      <title>sleuthというGoのライブラリでサービスディスカバリを試してみた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/06/15/tried-service-discovery-with-sleuth/</link>
      <pubDate>Wed, 15 Jun 2016 06:56:10 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/06/15/tried-service-discovery-with-sleuth/</guid>
      <description>はじめに Service autodiscovery in Go with sleuth - darian.afという記事を見かけて試してみたのでメモです。 github.com/ursiform/sleuthのセ</description>
    </item>
    
    <item>
      <title>gistを作成するGoのCLIを見つけた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/06/14/go_cli_to_create_a_gist/</link>
      <pubDate>Tue, 14 Jun 2016 00:52:22 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/06/14/go_cli_to_create_a_gist/</guid>
      <description>delta24/gist: A command line gister in Goです。期待通りに動かない点があったのでプルリクエストを送ったら、すぐにマージされました。 インストール Goはインストール済みと</description>
    </item>
    
    <item>
      <title>Goのシリアライゼーションのベンチマークを自分でも試してみた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/06/13/tried_go_serialization_benchmarks/</link>
      <pubDate>Mon, 13 Jun 2016 23:34:16 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/06/13/tried_go_serialization_benchmarks/</guid>
      <description>2015年12月の記事ですが最速という噂のFlatbuffersの速度のヒミツと、導入方法の紹介(Go) - Qiitaを読んで、「gobは遅い</description>
    </item>
    
    <item>
      <title>GoでLTSV形式でログ出力するライブラリを書いた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/06/13/wrote_go_ltsvlog_library/</link>
      <pubDate>Mon, 13 Jun 2016 21:42:53 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/06/13/wrote_go_ltsvlog_library/</guid>
      <description>なぜ書いたか Goで高機能なサードパーティのログ出力ライブラリと言えばSirupsen/logrusが有名です。私もdoloopwhile/l</description>
    </item>
    
    <item>
      <title>Goで複数のリモートのワーカーにジョブを実行させるremoteworkersというパッケージを書いた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/06/12/wrote_remoteworkers_go_pacakge/</link>
      <pubDate>Sun, 12 Jun 2016 21:53:35 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/06/12/wrote_remoteworkers_go_pacakge/</guid>
      <description>なぜ書いたか 仕事で複数のサーバで同じ処理を実行して結果を集めたいというニーズがあって、各サーバをgRPCのサーバにするという実装でとりあえず</description>
    </item>
    
    <item>
      <title>Goで複数のリモートのワーカーにジョブを実行させるremoteworkersというパッケージを書いた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/06/12/2016/06/12/wrote_remoteworkers_go_package/</link>
      <pubDate>Sun, 12 Jun 2016 21:53:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/06/12/2016/06/12/wrote_remoteworkers_go_package/</guid>
      <description>なぜ書いたか 仕事で複数のサーバで同じ処理を実行して結果を集めたいというニーズがあって、各サーバをgRPCのサーバにするという実装でとりあえず</description>
    </item>
    
    <item>
      <title>GoのMessagePackのライブラリのベンチマークをしてみた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/06/04/benchmark_go_msgpack_libraries/</link>
      <pubDate>Sat, 04 Jun 2016 22:17:52 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/06/04/benchmark_go_msgpack_libraries/</guid>
      <description>Go の msgpack ライブラリ比較 - Qiitaの記事が最終更新日から1年以上経過しているとのことなので、現在の最新のコミットで試してみました。 github.com/vmihailenco/msgpack を go get する</description>
    </item>
    
    <item>
      <title>go-daemonとgoのos.StartProcess()のコードを読んでみた</title>
      <link>https://hnakamur.github.io/blog/posts/2016/04/23/go-daemon-and-golang-os-startprocess-code-reading/</link>
      <pubDate>Sat, 23 Apr 2016 16:45:09 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/posts/2016/04/23/go-daemon-and-golang-os-startprocess-code-reading/</guid>
      <description>発端: Goでデーモンを書くのは無理と思っていたら実は出来るらしい Goでデーモンを書くのは無理と以前どこかで読んだ気がします。 ところが、Pyt</description>
    </item>
    
  </channel>
</rss>