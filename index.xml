<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hnakamur&#39;s blog at github</title>
    <link>/blog/</link>
    <description>Recent content on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 17 May 2015 07:51:14 +0900</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>FreeBSD 10.1 amd64でRustをビルドしてみた</title>
      <link>/blog/2015/05/17/build_rust_on_freebsd/</link>
      <pubDate>Sun, 17 May 2015 07:51:14 +0900</pubDate>
      
      <guid>/blog/2015/05/17/build_rust_on_freebsd/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.rust-lang.org/install.html&#34;&gt;Install · The Rust Programming Language&lt;/a&gt;
を見ると現在のところRustのバイナリが提供されているのはLinux, Mac, Windowsのみです。&lt;/p&gt;

&lt;p&gt;FreeBSD 10.1 amd64でソースからビルドしてみました。
&lt;a href=&#34;https://github.com/rust-lang/rust#building-from-source&#34;&gt;Building from Source&lt;/a&gt;に従ってビルドするとすんなり行けました。&lt;/p&gt;

&lt;p&gt;FreeBSDでの手順は以下のとおりです。標準でclangとcurlがインストールされていたのでそれを使っています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo pkg install -y python gmake git
git clone https://github.com/rust-lang/rust.git
cd rust
./configure
gmake
sudo gmake install
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>さくらのVPSにFreeBSD 10.1をクリーンインストールした時のメモ</title>
      <link>/blog/2015/05/16/install_freebsd10.1_on_sakura_vps/</link>
      <pubDate>Sat, 16 May 2015 11:39:29 +0900</pubDate>
      
      <guid>/blog/2015/05/16/install_freebsd10.1_on_sakura_vps/</guid>
      <description>

&lt;h2 id=&#34;はじめに:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;さくらのVPSにFreeBSD 10.1をクリーンインストールしてみましたので、手順をメモしておきます。作業した環境は MacBook Pro (USキーボード) です。
インストール後以下の設定を行います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;ファイルシステムはZFSを選択&lt;/li&gt;
&lt;li&gt;sshの鍵認証の設定&lt;/li&gt;
&lt;li&gt;sudoのインストールと設定&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;なお、インストールには下記のページを参考にしました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.emaita.jp/2015/03/06/freebsd10_1.html&#34;&gt;FreeBSD 10.1 導入 — emaita 備忘録&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://blog.livedoor.jp/saba_nano/archives/28363307.html&#34;&gt;[FreeBSD] さくらのVPSに FreeBSD 9.1 amd64 をインストールする方法 (1) : saba nano - へっぽこ管理者のサーバ管理日誌（LV.2）&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;インストール準備:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;インストール準備&lt;/h2&gt;

&lt;h3 id=&#34;isoイメージをミラーから取得してvpsにsftpでアップロード:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;ISOイメージをミラーから取得してVPSにsftpでアップロード&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.jp.freebsd.org/mirror.html&#34;&gt;FreeBSD-related Sites in Japan&lt;/a&gt;を見てftp3.jp.FreeBSD.org (ftp.sakura.ad.jp)からダウンロードすることにしました。&lt;/p&gt;

&lt;p&gt;ブラウザで
&lt;a href=&#34;ftp://ftp3.jp.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.1/&#34;&gt;ftp://ftp3.jp.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.1/&lt;/a&gt;
を開き
&lt;a href=&#34;ftp://ftp3.jp.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.1/FreeBSD-10.1-RELEASE-amd64-bootonly.iso&#34;&gt;ftp://ftp3.jp.freebsd.org/pub/FreeBSD/releases/ISO-IMAGES/10.1/FreeBSD-10.1-RELEASE-amd64-bootonly.iso&lt;/a&gt;
をダウンロードします。&lt;/p&gt;

&lt;p&gt;これを&lt;a href=&#34;https://help.sakura.ad.jp/app/answers/detail/a_id/2405&#34;&gt;ISOイメージインストール｜さくらインターネット公式サポートサイト&lt;/a&gt;の手順を参考にアップロードします。&lt;/p&gt;

&lt;p&gt;OS Xにはsftpコマンドが標準で入っているのでそれを使います。接続情報は、さくらのVPSのコントロールパネルで確認します。
ここでは、ユーザ名をvpsXXXXXXXXXXXX, ホスト名をvps-isoY.sakura.ad.jpとして説明します。&lt;/p&gt;

&lt;p&gt;isoファイルのあるディレクトリでsftpを実行し、以下の手順で上記のisoファイルをアップロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sftp vpsXXXXXXXXXXXX@vps-isoY.sakura.ad.jp
vpsXXXXXXXXXXXX@vps-isoY.sakura.ad.jp&#39;s password: (パスワードを入力)
sftp&amp;gt; cd iso
sftp&amp;gt; put FreeBSD-10.1-RELEASE-amd64-bootonly.iso
sftp&amp;gt; quit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アップロードが完了したらsftpコマンドは終了します。さくらのVPSのコントロールパネルの「ISOイメージインストール」のポップアップの「ISOイメージ情報」に今アップロードしたisoファイルが表示されたことを確認し、「マウント設定」の「設定内容を確認する」ボタンを押し、「インストールを実行する」ボタンを押します。&lt;/p&gt;

&lt;h2 id=&#34;インストール:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;インストール&lt;/h2&gt;

&lt;p&gt;「VNCコンソール(HTML5版)を起動」ボタンを押してコンソールで作業します。&lt;/p&gt;

&lt;h3 id=&#34;キーマップの確認:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;キーマップの確認&lt;/h3&gt;

&lt;p&gt;HTML5版のVNCコンソールは、どうも日本語キーボードを想定しているようで、USキーボードだと以下のように一部の記号の配置が異なっています。
なお、キーマップはデフォルト(US配列)を選択しています。&lt;/p&gt;

&lt;p&gt;押したキーを左、入力された文字を右に示します。&lt;/p&gt;

&lt;table border=&#34;1&#34;&gt;
&lt;tr&gt;&lt;th style=&#34;padding:4px&#34;&gt;押したキー&lt;/th&gt;&lt;th style=&#34;padding:4px&#34;&gt;入力された文字&lt;/th&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;`&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;[&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;~ (Shift+`)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;@ (Shift+2)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;{&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;^ (Shift+6)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;+&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;&amp; (Shift+7)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;^&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;* (Shift+8)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;&#34;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;( (Shift+9)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;*&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;) (Shift+0)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;(&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;_ (Shift+-)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;何も入力されない&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;=&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;-&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;+ (Shift+=)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;:&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;[&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;]&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;{ (Shift+[)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;}&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;]&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;\&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;} (Shift+})&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;|&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;\&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;何も入力されない&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;| (Shift+\)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;何も入力されない&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;: (Shift+;)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;&#34;&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;&#39;&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;7&lt;/td&gt;&lt;/tr&gt;
&lt;tr&gt;&lt;td style=&#34;padding:4px&#34;&gt;&#34; (Shift+&#39;)&lt;/td&gt;&lt;td style=&#34;padding:4px&#34;&gt;@&lt;/td&gt;&lt;/tr&gt;
&lt;/table&gt;

&lt;h3 id=&#34;ホスト名設定:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;ホスト名設定&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Please choose a hostname for this machine.&amp;ldquo;の画面ではVPSのコンソールの標準ホスト名を入力します。&lt;/p&gt;

&lt;h3 id=&#34;インストールするコンポーネントの選択:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;インストールするコンポーネントの選択&lt;/h3&gt;

&lt;p&gt;初期選択状態は以下のようになっていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;[ ] doc: Additional documentation&lt;/li&gt;
&lt;li&gt;[*] games: Games (fortune, etc.)&lt;/li&gt;
&lt;li&gt;[*] lib32: 32-bit compatiblity libraries&lt;/li&gt;
&lt;li&gt;[*] ports: Ports tree&lt;/li&gt;
&lt;li&gt;[ ] src: System source code&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gamesとlib32を外して、docとsrcを追加しました。&lt;/p&gt;

&lt;h3 id=&#34;ネットワーク設定:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;ネットワーク設定&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;「Network Configuration」では「vtnet0」を選び「OK」を押します。&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Would you like to configure IPv4 for this interface&amp;rdquo; → [Yes]を押す&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Would you like to use DHCP to configure this interface?&amp;rdquo; → [No]を押す&lt;/li&gt;
&lt;li&gt;「Static Netowrk Interface Configuration」の画面でIP Address, Subnet Mask, Default Routerを入力します。VPSのコントロールパネルのIPv4のアドレス、ネットマスク、ゲートウェイの値をそれぞれ入力します。&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Would you like to configure IPv6 for this interface?&amp;rdquo; → NoYes]を押す&lt;/li&gt;
&lt;li&gt;「Resolver Configuration」の画面でSearch, IPv4 DNS #1, IPv4 DNS #2を入力します。順にVPSコントロールパネルの標準ホスト名のドメイン部分(私の場合はvs.sakura.ne.jp)、IPv4のプライマリDNS、セカンダリDNSを入力します。&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;ボツ-ipv6を有効にすると失敗しました:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;(ボツ) IPv6を有効にすると失敗しました&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&amp;ldquo;Would you like to configure IPv6 for this interface?&amp;rdquo; → [Yes]を押す&lt;/li&gt;
&lt;li&gt;&amp;ldquo;Would you like to try stateless address autoconfiguration (SLAAC)?&amp;rdquo; → [No]を押す&lt;/li&gt;
&lt;li&gt;「Static IPv6 Network Interface Configuration」の画面でIPv6 AddressとDefault RouterにVPSのコントロールパネルのIPv6のアドレスとゲートウェイを入力します。上記のキーマップの確認に書いたように:を入力するにはUSキーボードではShift+=を押してください。&lt;/li&gt;
&lt;li&gt;「Resolver Configuration」の画面でSearch, IPv6 DNS #1, IPv6 DNS #2, IPv4 DNS #1, IPv4 DNS #2を入力します。順にVPSコントロールパネルの標準ホスト名のドメイン部分(私の場合はvs.sakura.ne.jp)、IPv6のDNS、空欄、IPv4のプライマリDNS、セカンダリDNSを入力します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;ダウンロードは無事に進んだようなのですが、その後以下のエラーが出ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Abort
Distribution extract failed

An installation step has been aborted. Would you
like to restart the installation or exit
the installer?
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ミラーサイト選択:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;ミラーサイト選択&lt;/h3&gt;

&lt;p&gt;「Mirror Selection」の画面では「&lt;a href=&#34;ftp://ftp3.jp.freebsd.org&#34;&gt;ftp://ftp3.jp.freebsd.org&lt;/a&gt; Japan #3」を選択します。&lt;/p&gt;

&lt;h3 id=&#34;パーティション作成:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;パーティション作成&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;Auto (UFS): Guided Disk Setup&lt;/li&gt;
&lt;li&gt;Manual: Manual Disk Setup (experts)&lt;/li&gt;
&lt;li&gt;Shell: Open a shell and partition by hand&lt;/li&gt;
&lt;li&gt;Auto (ZFS): Guided Root-on-ZFS&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回は「Auto (ZFS)」にしました。
「ZFS Configuration」ではそのまま「&amp;gt;&amp;gt;&amp;gt; Install     Proceed with Installation」を選びます。&lt;/p&gt;

&lt;h3 id=&#34;zfsの仮想デバイスタイプ:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;ZFSの仮想デバイスタイプ&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;stripe: Stripe - No Redundancy&lt;/li&gt;
&lt;li&gt;mirror: Mirror - n-Way Mirroring&lt;/li&gt;
&lt;li&gt;raidz1: RAID-Z1 - Single Redundant RAID&lt;/li&gt;
&lt;li&gt;raidz2: RAID-Z2 - Single Redundant RAID&lt;/li&gt;
&lt;li&gt;raidz3: RAID-Z3 - Single Redundant RAID&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;「stripe」を選びました。&lt;/p&gt;

&lt;h3 id=&#34;ブロックデバイス選択:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;ブロックデバイス選択&lt;/h3&gt;

&lt;p&gt;「vtbd0 VirtIO Block Device」をスペースキーを押して選択します。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Last Chance! Are you sure you want to destroy the current contents of the following disks: vtbd0&amp;rdquo; では[YES]を選びます。&lt;/p&gt;

&lt;h3 id=&#34;rootユーザのパスワード設定:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;rootユーザのパスワード設定&lt;/h3&gt;

&lt;p&gt;以下のようにrootユーザのパスワードを設定します。なぜかreturnキーが効かないようなのでCtrl-Jで代用しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Please select a password for the system management account (root):
Changing local password for root
New Password: (パスワードを入力してCtrl-Jを押す)
Retype New Password: (パスワードを入力してCtrl-Jを押す)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;表示も変で、Ctrl-Jを押した時に行が次の行に進みますが、行頭には戻らず続きのカラムから表示されていました。&lt;/p&gt;

&lt;h3 id=&#34;タイムゾーン設定:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;タイムゾーン設定&lt;/h3&gt;

&lt;p&gt;&amp;ldquo;Is this machine&amp;rsquo;s CMOS clock set to UTC?  If it is set to local time, or you don&amp;rsquo;t know, please choose NO here!&amp;rdquo; ではハードウェアの設定はわからないので「No」を選びます。&lt;/p&gt;

&lt;p&gt;「Select a region」では「5 Asia」を選び、「Select a country or region」では「18 Japan」を選びます。
&amp;ldquo;Does the abbreviation `JST&amp;rsquo; look reasonable?&amp;ldquo;に「Yes」を選びます。&lt;/p&gt;

&lt;h3 id=&#34;自動起動するサービス選択:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;自動起動するサービス選択&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Choose the services you would like to be started at boot:
  [ ] local_unbound  Local caching validating resolver
  [*] sshd           Secure shell daemon
  [ ] moused         PS/2 mouse pointer on console
  [ ] ntpd           Synchronize system and network time
  [ ] powerd         Adjust CPU frequency dynamically if supported
  [*] dumpev         Enable kernel crash dumps to /var/crash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ntpdを追加選択します。&lt;/p&gt;

&lt;h3 id=&#34;ユーザ追加:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;ユーザ追加&lt;/h3&gt;

&lt;p&gt;sshでログインする管理用のユーザとして「admin」という名前のユーザを追加することにします。あとでsudoersに追加するのでadminユーザのセカンダリグループにwheelを追加します。&lt;/p&gt;

&lt;p&gt;&amp;ldquo;Would you like to add users to the installed systems now?&amp;ldquo;に「Yes」を選びます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Add Users
Username: admin
Full name: admin
Uid (Leave empty for default): (Ctrl-Jを押す)
Login group [admin]: (Ctrl-Jを押す)
Login group is admin. Invite admin into other groups? []: (wheelと入力してCtrl-Jを押す)
Login class [default]: (Ctrl-Jを押す)
Shell (ch csh tcsh nologin) [sh]: (Ctrl-Jを押す)
Home directory [/home/admin]: (Ctrl-Jを押す)
Home directory permissions (Leave empty for default): (Ctrl-Jを押す)
Use password-based authentication? [yes]: (Ctrl-Jを押す)
Use an empty password? (yes/no) [no]: (Ctrl-Jを押す)
Use a random password? (yes/no) [no]: (Ctrl-Jを押す)
Enter password: (パスワードを入力してCtrl-Jを押す)
Enter password again: (パスワードを入力してCtrl-Jを押す)
Lock out the accout after creation? [no]: (Ctrl-Jを押す)
OK? (yes/no): (yesと入力してCtrl-Jを押す)
adduser: INFO Successfully added (admin) to the user database.
Add another user? (yes/no): (noと入力してCtrl-Jを押す)
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;インストールの終了:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;インストールの終了&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;Setup of you FreeBSD system is nearly complete.  You can now
modify your configuration choices. After this screen, you will
have an opportunity to make more complex changes using a shell.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の画面では「Exit」を選択して「OK」を押します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The installation is now finished.
Before exiting the installer, yould
you like to open a shell in the new
system to make any final manual
modifications?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の画面では「No」を選択します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Installation of FreeBSD
complete! Would you like
to reboot into the
installed system now?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の画面では「Reboot」を押しても、またインストーラの画面が起動してしまいます。
そこで、さくらのVPSのコンソールで「OSインストール」→「ISOイメージインストール」を選び、「ISOイメージアップロード情報」の「アカウントの削除」ボタンを押します。
「アカウントを削除してよろしいですか？アップロードしたファイルも削除されます。」と表示されたら「削除する」ボタンを押します。&lt;/p&gt;

&lt;p&gt;その後「ISOイメージインストール」のポップアップで「キャンセル」を押してVPSのコンソールに戻りツールバーの「強制停止」ボタンを押して停止した後「起動」ボタンを押して起動します。&lt;/p&gt;

&lt;h2 id=&#34;インストール後の設定:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;インストール後の設定&lt;/h2&gt;

&lt;h3 id=&#34;adminユーザの公開鍵の設置:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;adminユーザの公開鍵の設置&lt;/h3&gt;

&lt;p&gt;ここでは、OS X側で秘密鍵・公開鍵を作成済みとし、秘密鍵は ~/.ssh/id_rsa、公開鍵は ~/.ssh/id_rsa.pub とします。&lt;/p&gt;

&lt;p&gt;OSX上で以下の操作を行い、公開鍵をサーバに転送します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;scp ~/.ssh/id_rsa.pub admin@サーバのIPアドレス:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;adminユーザのパスワードを聞かれるので入力します。&lt;/p&gt;

&lt;p&gt;その後sshでサーバにログインします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh admin@サーバのIPアドレス
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パスワードを入力すると以下のようなメッセージが表示されます。アドレスのXXX.XXX.XXX.XXXとRSA鍵のフィンガープリントはここでは伏せていますが実際は異なる値になります。「yes」と入力してログインしてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The authenticity of host &#39;XXX.XXX.XXX.XXX (XXX.XXX.XXX.XXX)&#39; can&#39;t be established.
RSA key fingerprint is yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy:yy.
Are you sure you want to continue connecting (yes/no)?
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;パスワードを入力してサーバにログインしたらサーバ上で以下のコマンドを実行し、カギ認証でログインできるようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir ~/.ssh
chmod 700 ~/.ssh
mv id_rsa.pub ~/.ssh/authorized_keys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;今度はOS X側で ~/.ssh/configというファイルが無い場合は新規作成した上で、以下の内容を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host 接続に使用するお好みのホスト名エイリアス
  Hostname サーバのIPアドレス
  User admin
  PasswordAuthentication no
  IdentityFile ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;IdentityFileの行は ~/.ssh/id_rsa はデフォルト値なので、この場合はこの行自体不要です。別のファイル名にしていた場合は設定が必要です。&lt;/p&gt;

&lt;p&gt;この設定を加えた状態で、OS Xから以下のようにコマンドを実行しパスワードを聞かれずにログインできれば成功です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh ホスト名エイリアス
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;sshパスワード認証の無効化:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;sshパスワード認証の無効化&lt;/h3&gt;

&lt;p&gt;鍵認証でssh接続できるようになったら、悪意を持った第三者の攻撃でパスワードを当ててログインされてしまうのを防ぐため、パスワードでのログインを無効にします。&lt;/p&gt;

&lt;p&gt;サーバ上で以下の手順を実行します。まず以下のコマンドを実行してrootユーザになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;su -
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rootユーザのパスワードを聞かれますので入力します(1行が長いのでブラウザでコピペする際は右の方までスクロールしてください)。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sed -i .orig -e &#39;s/^#\(PasswordAuthentication no\)/\1/;s/^#\(UsePAM\) yes/\1 no/;s/^#\(X11Forwarding\) yes/\1 no/&#39; /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;less /etc/ssh/sshd_config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で設定内容を確認します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;…(略)…
PasswordAuthentication no
…(略)…
UsePAM no
…(略)…
X11Forwarding no
…(略)…
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;となっていればOKですのでqを押してlessを終了します。&lt;/p&gt;

&lt;p&gt;以下のコマンドを実行してsshdを再起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/etc/rc.d/sshd restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に実際にパスワード認証が無効化されたことを確認します。&lt;/p&gt;

&lt;p&gt;一旦このrootユーザの接続は残しておいて、OS X上で別のターミナルを開き、~/.ssh/configを以下のように編集します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Host 接続に使用するお好みのホスト名エイリアス
  Hostname サーバのIPアドレス
  User admin
  PasswordAuthentication yes
  PubkeyAuthentication no
  #PasswordAuthentication no
  #IdentityFile ~/.ssh/id_rsa
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この状態で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh ホスト名エイリアス
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにコマンドを実行した時にパスワードを聞かれることなく以下のように表示されれば、パスワード認証は正しく無効化できています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Permission denied (publickey,keyboard-interactive).
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;上記の確認ができたらOS Xの~/.ssh/configは元の内容に戻しておいてください。&lt;/p&gt;

&lt;h3 id=&#34;セキュリティパッチの適用:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;セキュリティパッチの適用&lt;/h3&gt;

&lt;p&gt;先ほどのrootで接続していたターミナルに戻ってセキュリティパッチを適用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://www.freebsd.org/doc/ja_JP.eucJP/books/handbook/updating-upgrading-freebsdupdate.html&#34;&gt;18.2. FreeBSD Update&lt;/a&gt;の「セキュリティパッチの適用」の項を参考にします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=198030&#34;&gt;Bug 198030 – /usr/src/crypto/openssl/util/mkbuildinf.pl: No such file or directory on freebsd-update install&lt;/a&gt;のバグを回避するため
&lt;a href=&#34;https://bugs.freebsd.org/bugzilla/show_bug.cgi?id=198030#c7&#34;&gt;Comment 7&lt;/a&gt;の手順を実行してから、パッチを適用します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# freebsd-update fetch
# mkdir -p /usr/src/crypto/openssl/util
# freebsd-update install
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;freebsd-update patch&lt;/code&gt; を実行すると、アップデートを取得後moreコマンドが起動して更新されたファイル一覧を確認できます。スペースキーを押してページを進め、確認したらqを押して終了します。&lt;/p&gt;

&lt;h3 id=&#34;sudoのインストールと設定:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;sudoのインストールと設定&lt;/h3&gt;

&lt;p&gt;rootユーザで以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;pkg install -y sudo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;すると以下のようにpkgコマンド自体をインストールするか聞かれますので、yと入力します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;The package management tool is not yet installed on your system.
Do you want to fetch and install it now? [y/N]:
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;pkgとsudoのインストールが終わったら、以下のコマンドを実行してsudoの設定を変更します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;visudo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ここではwheelグループにsudoを許可します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# %wheel ALL=(ALL) ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;の行を&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;%wheel ALL=(ALL) ALL
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように変更して:wqで保存して終了します。&lt;/p&gt;

&lt;p&gt;sudoの設定を確認するため、rootのターミナルは一旦置いておいて、OS Xからsshでadminユーザでログインし、以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のようにメッセージが表示されますので、adminユーザのパスワードを入力します。
rootユーザのプロンプトが出れば成功です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -i

We trust you have received the usual lecture from the local System
Administrator. It usually boils down to these three things:

    #1) Respect the privacy of others.
    #2) Think before you type.
    #3) With great power comes great responsibility.

Password:
root@ホスト名からドメインを除いたもの:~ #
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;確認できたら、このターミナルでCtrl-Dを押してadminユーザに戻り、さらにCtrl-Dを押してログアウトします。
先程残しておいたrootユーザのターミナルも同様にしてログアウトします。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:a3e5dd67b515369d483f860a8ed67c3c&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;いくつかハマりどころがありましたが、さくらのVPSにFreeBSD 10.1をクリーンインストールできました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>mithril.jsを試してみた</title>
      <link>/blog/2015/05/12/tried_mithril_js/</link>
      <pubDate>Tue, 12 May 2015 22:02:03 +0900</pubDate>
      
      <guid>/blog/2015/05/12/tried_mithril_js/</guid>
      <description>

&lt;h2 id=&#34;はじめに:1b95d5ba24f1660fe99511183f8577c8&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/&#34;&gt;groongaのgoバインディングでWikipedia全文検索のサンプルウェブアプリを作ってみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;のフロントエンドを&lt;a href=&#34;https://lhorie.github.io/mithril/&#34;&gt;Mithril&lt;/a&gt;で書いてみました。&lt;/p&gt;

&lt;h2 id=&#34;参考にした記事:1b95d5ba24f1660fe99511183f8577c8&#34;&gt;参考にした記事&lt;/h2&gt;

&lt;p&gt;mithril.jsについてはまず以下の記事&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/shibukawa/items/890d24874655439932ec&#34;&gt;最速MVCフレームワークMithril.jsの速度の秘密 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/mmyoji/items/211679de86f567e741f4&#34;&gt;JavaScript - 速くて軽いらしいMithril.jsを試してみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を読み、その後本家の&lt;a href=&#34;https://lhorie.github.io/mithril/getting-started.html&#34;&gt;Guide&lt;/a&gt;の左のリンクから辿れる記事と&lt;a href=&#34;http://lhorie.github.io/mithril-blog/&#34;&gt;Learn Mithril&lt;/a&gt;の記事をひと通り読みました。&lt;/p&gt;

&lt;p&gt;今回は試していませんが、
&lt;a href=&#34;http://lhorie.github.io/mithril-blog/velocity-animations-in-mithril.html&#34;&gt;Velocity.js animations in Mithril&lt;/a&gt;の記事で、&lt;a href=&#34;http://julian.com/research/velocity/&#34;&gt;Velocity.js&lt;/a&gt;を組み合わせてアニメーションを実現する方法も紹介されていました。&lt;/p&gt;

&lt;h2 id=&#34;データバインディングの仕組み:1b95d5ba24f1660fe99511183f8577c8&#34;&gt;データバインディングの仕組み&lt;/h2&gt;

&lt;p&gt;mithril.jsを読み込むと &lt;code&gt;m&lt;/code&gt; というグローバル変数にmithrilのモジュールが定義されます。モジュールと言ってもビューの関数としても使いますし、他の関数の名前空間としても使っています。&lt;/p&gt;

&lt;p&gt;まずモデルの定義ですが、&lt;a href=&#34;https://lhorie.github.io/mithril/getting-started.html#model&#34;&gt;Getting Started&lt;/a&gt;の&lt;a href=&#34;https://lhorie.github.io/mithril/getting-started.html#model&#34;&gt;Model&lt;/a&gt;のところにあるように、&lt;a href=&#34;https://lhorie.github.io/mithril/mithril.prop.html&#34;&gt;m.prop&lt;/a&gt;を使って&lt;/p&gt;

&lt;p&gt;&lt;code&gt;プロパティ = m.prop(初期値)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;と書くことで、プロパティが作られます。プロパティは値ではなくてgetter-setterの関数になっていて、 &lt;code&gt;プロパティ()&lt;/code&gt; で値を取得、 &lt;code&gt;プロパティ(値)&lt;/code&gt; で値を設定します。&lt;/p&gt;

&lt;p&gt;モデル層はドメインモデルに限定して、UIの状態は&lt;a href=&#34;https://lhorie.github.io/mithril/getting-started.html#view-model&#34;&gt;View-Model&lt;/a&gt;として定義します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://lhorie.github.io/mithril/getting-started.html#controller&#34;&gt;Controller&lt;/a&gt;はビューモデルを保持し、ビューでのイベントハンドラやビューを操作する関数を定義します。&lt;/p&gt;

&lt;p&gt;HTMLの構造は&lt;a href=&#34;https://lhorie.github.io/mithril/getting-started.html#view&#34;&gt;View&lt;/a&gt;の例にあるように、 &lt;a href=&#34;https://lhorie.github.io/mithril/mithril.html&#34;&gt;m&lt;/a&gt; という関数を使って記述します。JavaScriptで書くのですが宣言的に書けるので、見やすいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;第一引数にCSSクエリ文字列を書くと、そのタグ名や属性を持った要素が作られます。&lt;/li&gt;
&lt;li&gt;第二引数は省略可能ですが、属性のハッシュを指定できます。&lt;/li&gt;
&lt;li&gt;最後の引数で子要素を指定します。複数の場合は配列、単一の子要素なら &lt;code&gt;m&lt;/code&gt; の呼び出し、テキスト要素なら文字列を指定します。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あとは&lt;a href=&#34;https://lhorie.github.io/mithril/mithril.mount.html&#34;&gt;m.mount&lt;/a&gt;か&lt;a href=&#34;https://lhorie.github.io/mithril/mithril.component.html&#34;&gt;m.component&lt;/a&gt;でマウントすると、モデルの値が変わったらビューの表示もmithrilが更新してくれます。&lt;/p&gt;

&lt;h2 id=&#34;今回作成したソース:1b95d5ba24f1660fe99511183f8577c8&#34;&gt;今回作成したソース&lt;/h2&gt;

&lt;p&gt;基本的な構造は&lt;a href=&#34;https://lhorie.github.io/mithril/components.html&#34;&gt;Components&lt;/a&gt;の&lt;a href=&#34;https://lhorie.github.io/mithril/components.html#classic-mvc&#34;&gt;Classic MVC&lt;/a&gt;のパターンを真似しました。&lt;/p&gt;

&lt;p&gt;ソースは&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/master/examples/search_wikipedia_webapp/public/index.html&#34;&gt;cgoroonga/index.html&lt;/a&gt;にあります。お手軽に試していたレベルなのでstyleタグやscriptタグもhtml内に書いちゃってます。&lt;/p&gt;

&lt;p&gt;コンポーネントの階層は以下のようになっています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;SearchWidget: 検索画面全体のウィジェット

&lt;ul&gt;
&lt;li&gt;SearchForm: 検索フォーム

&lt;ul&gt;
&lt;li&gt;SelectWidget: ドロップダウンウィジェット（検索期間選択用）&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;SearchResultWidget: 検索結果表示ウィジェット&lt;/li&gt;
&lt;li&gt;PaginationWidget: ページネーションウィジェット&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;検索フォームをサブミットした時とページネーションのリンクをクリックした時は、
&lt;a href=&#34;https://lhorie.github.io/mithril/components.html#the-observer-pattern&#34;&gt;The observer pattern&lt;/a&gt;の &lt;code&gt;Observable&lt;/code&gt; 経由で検索処理を実行しています。&lt;/p&gt;

&lt;p&gt;一方、検索期間のSelectWidgetの選択を切り替えた時は、SelectWidgetのコントローラの &lt;code&gt;onchange&lt;/code&gt; →SelectWidgetのビューモデルの &lt;code&gt;onchange&lt;/code&gt; →SearchWidgetのコントローラの &lt;code&gt;onchangetimespan&lt;/code&gt; と呼び出しを連鎖して検索処理を実行するようにしてみました。&lt;/p&gt;

&lt;p&gt;ビューの定義時に &lt;code&gt;m.component&lt;/code&gt; でサブコンポーネントを埋め込むときに引数でビューモデルやイベントハンドラを渡しておいて、ビューではそのビューモデルを参照し、イベントが起きたら引数で渡されていたイベントハンドラを呼び出すというパターンです。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:1b95d5ba24f1660fe99511183f8577c8&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;mithril.jsを使うとコンポーネントごとにMVCパターンで実装できて、コンポーネント間はObservableで連携するか、ビューでサブコンポーネントを利用する際に引数で渡したビューモデルとイベントハンドラで連携することが出来、見通しが良いと感じました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lhorie/mithril.js/blob/next/mithril.js&#34;&gt;mithril.jsのソース&lt;/a&gt;も現時点で1161行とコンパクトなのも魅力です。まだバージョン v0.2.0 ですが、今後が楽しみなフレームワークですね。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>groongaのgoバインディングでWikipedia全文検索のサンプルウェブアプリを作ってみた</title>
      <link>/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</link>
      <pubDate>Tue, 12 May 2015 21:24:11 +0900</pubDate>
      
      <guid>/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.io/blog/2015/04/27/cgoroonga/&#34;&gt;データ登録用にgroongaのC APIのgoバインディングを書いてみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の続きで、APIを追加実装し、Wikipedia全文検索のサンプルウェブアプリを作ってみました。&lt;/p&gt;

&lt;h2 id=&#34;ソースコード:4c3e94caa0d90f3caef8e5ee8fd93962&#34;&gt;ソースコード&lt;/h2&gt;

&lt;p&gt;ウェブアプリのソースは
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/tree/master/examples/search_wikipedia_webapp&#34;&gt;https://github.com/hnakamur/cgoroonga/tree/master/examples/search_wikipedia_webapp&lt;/a&gt;
にあります。&lt;/p&gt;

&lt;p&gt;GroongaのC APIについては&lt;a href=&#34;http://groonga.org/ja/docs/reference/api.html&#34;&gt;7.20. API — Groonga v5.0.3ドキュメント&lt;/a&gt;を見つつ、ドキュメント化されていないものは&lt;a href=&#34;https://github.com/groonga/groonga&#34;&gt;groongaのソース&lt;/a&gt;を見て、goバインディングを作りました。&lt;/p&gt;

&lt;p&gt;goバインディングもウェブアプリもとりあえず全文検索の動作確認ができればいいやということで、ゆるい感じで書いています。&lt;/p&gt;

&lt;p&gt;ウェブアプリのサーバサイドのソースは
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/master/examples/search_wikipedia_webapp/main.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/master/examples/search_wikipedia_webapp/main.go&lt;/a&gt;
で、groongaのgoバインディングのソースは
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga&#34;&gt;https://github.com/hnakamur/cgoroonga&lt;/a&gt;
の &lt;code&gt;*.go&lt;/code&gt; です。&lt;/p&gt;

&lt;h2 id=&#34;フロントエンドについては別記事で:4c3e94caa0d90f3caef8e5ee8fd93962&#34;&gt;フロントエンドについては別記事で&lt;/h2&gt;

&lt;p&gt;フロントエンドは&lt;a href=&#34;http://qiita.com/shibukawa/items/890d24874655439932ec&#34;&gt;最速MVCフレームワークMithril.jsの速度の秘密 - Qiita&lt;/a&gt;の記事を見て気になっていたので、&lt;a href=&#34;https://lhorie.github.io/mithril/&#34;&gt;Mithril&lt;/a&gt;で書いてみました。こちらについては別記事&lt;a href=&#34;/blog/blog/2015/05/12/tried_mithril_js/&#34;&gt;mithril.jsを試してみた&lt;/a&gt;に書きました。&lt;/p&gt;

&lt;h2 id=&#34;インデクスの作成:4c3e94caa0d90f3caef8e5ee8fd93962&#34;&gt;インデクスの作成&lt;/h2&gt;

&lt;p&gt;groongaコマンドで以下のようにして作成しました。約27分かかりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ echo &#39;column_create --table ArticleIndexes --name article_index --flags COLUMN_INDEX|WITH_POSITION|WITH_SECTION --type Articles --source _key,text&#39; | time groonga ~/work/groonga/db/wikipedia.db
[[0,1431052924.67975,1555.13576507568],true]
     1660.80 real      1135.40 user       146.29 sys
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Wikipediaのページタイトルと本文の両方を対象に検索したいので、 &lt;code&gt;--source&lt;/code&gt; には _keyカラム (タイトル) と text カラム (本文) の両方を指定しました。&lt;/p&gt;

&lt;h2 id=&#34;検索の応答は約80-250ms程度と満足な早さ:4c3e94caa0d90f3caef8e5ee8fd93962&#34;&gt;検索の応答は約80〜250ms程度と満足な早さ&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;動作環境

&lt;ul&gt;
&lt;li&gt;マシン: MacBook Pro 15inch (Retina, Mid 2012) SSD&lt;/li&gt;
&lt;li&gt;CPU: Intel Core i7 2.6GHz&lt;/li&gt;
&lt;li&gt;RAM: 16GB 1600MHz DDR3&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;データサイズ

&lt;ul&gt;
&lt;li&gt;データファイルの合計サイズ: 188MB&lt;/li&gt;
&lt;li&gt;データ件数: 約193万件&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code&gt;$ du -sm ~/work/groonga/db
18848 /Users/hnakamur/work/groonga/db
$ echo &#39;select Articles --limit 0&#39; | groonga ~/work/groonga/db/wikipedia.db
[[0,1431434283.68242,0.00117397308349609],[[[1932736],[[&amp;quot;_id&amp;quot;,&amp;quot;UInt32&amp;quot;],[&amp;quot;_key&amp;quot;,&amp;quot;ShortText&amp;quot;],[&amp;quot;text&amp;quot;,&amp;quot;Text&amp;quot;],[&amp;quot;updated_at&amp;quot;,&amp;quot;Time&amp;quot;]]]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;JSON形式の検索APIの応答が約80〜250ms程度で、快適に検索できました。
Groongaすごいですね！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Goでdeferの処理中のエラーを返す書き方を工夫してみた</title>
      <link>/blog/2015/04/27/write_function_for_go_defer/</link>
      <pubDate>Mon, 27 Apr 2015 02:06:02 +0900</pubDate>
      
      <guid>/blog/2015/04/27/write_function_for_go_defer/</guid>
      <description>&lt;p&gt;go-nutsのメーリングリストの記事
&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/Y4MCVZZ3c5sJ&#34;&gt;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/Y4MCVZZ3c5sJ&lt;/a&gt;
によるとdeferで呼ばれた関数の戻り値は捨てられるそうです。
&lt;a href=&#34;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/UlI77BM2PUkJ&#34;&gt;https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/UlI77BM2PUkJ&lt;/a&gt;
で戻り値の変数に代入するという方法が紹介されていました。&lt;/p&gt;

&lt;p&gt;これを参考に、deferでの後処理でエラーが起きた時はそのエラーを返す、ただし複数のエラーが起きた時は最初のエラーを返したいというときの書き方を考えてみました。&lt;/p&gt;

&lt;p&gt;最初に書いたのは、上の記事で紹介されていたように無名関数を即時呼び出しする方式です。
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/70aafdeb2eb754505efe60afa1ae6d995831a063/examples/add_record/main.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/70aafdeb2eb754505efe60afa1ae6d995831a063/examples/add_record/main.go&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func run() (err error) {
	err = grn.Init()
	if err != nil {
		return
	}
	defer func() {
		err2 := grn.Fin()
		if err2 != nil &amp;amp;&amp;amp; err == nil {
			err = err2
		}
	}()

	ctx, err := grn.CtxOpen(0)
	if err != nil {
		return
	}
	defer func() {
		err2 := ctx.Close()
		if err2 != nil &amp;amp;&amp;amp; err == nil {
			err = err2
		}
	}()

	var db *grn.Obj
	db, err = ctx.DBOpenOrCreate(&amp;quot;hello.db&amp;quot;, nil)
	if err != nil {
		return
	}
	defer func() {
		err2 := ctx.ObjClose(db)
		if err2 != nil &amp;amp;&amp;amp; err == nil {
			err = err2
		}
	}()

	keyType := ctx.At(grn.DB_SHORT_TEXT)
	table, err := ctx.TableOpenOrCreate(&amp;quot;table1&amp;quot;, &amp;quot;&amp;quot;,
		grn.OBJ_TABLE_HASH_KEY|grn.OBJ_PERSISTENT, keyType, nil)
	if err != nil {
		return
	}
	fmt.Printf(&amp;quot;table=%x\n&amp;quot;, table)
	defer func() {
		err2 := ctx.ObjClose(table)
		if err2 != nil &amp;amp;&amp;amp; err == nil {
			err = err2
		}
	}()
…(略)…
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;これでやりたいことは実現できているのですが、deferのところの行数が多すぎて読みにくいコードになっています。&lt;/p&gt;

&lt;p&gt;そこでこの部分を関数として定義するようにしてみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/add_record/main.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/add_record/main.go&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func run() (err error) {
	err = grn.Init()
	if err != nil {
		return
	}
	defer grn.FinDefer(&amp;amp;err)

	ctx, err := grn.CtxOpen(0)
	if err != nil {
		return
	}
	defer ctx.CloseDefer(&amp;amp;err)

	var db *grn.Obj
	db, err = ctx.DBOpenOrCreate(&amp;quot;hello.db&amp;quot;, nil)
	if err != nil {
		return
	}
	defer ctx.ObjCloseDefer(&amp;amp;err, db)

	keyType := ctx.At(grn.DB_SHORT_TEXT)
	table, err := ctx.TableOpenOrCreate(&amp;quot;table1&amp;quot;, &amp;quot;&amp;quot;,
		grn.OBJ_TABLE_HASH_KEY|grn.OBJ_PERSISTENT, keyType, nil)
	if err != nil {
		return
	}
	fmt.Printf(&amp;quot;table=%x\n&amp;quot;, table)
	defer ctx.ObjCloseDefer(&amp;amp;err, table)
…(略)…
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;関数定義は例えば &lt;code&gt;FinDefer&lt;/code&gt; なら
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/master/init.go#L25-L30&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/master/init.go#L25-L30&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;func FinDefer(err *error) {
	err2 := Fin()
	if err2 != nil &amp;amp;&amp;amp; *err == nil {
		*err = err2
	}
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようになります。他の関数も同様です。&lt;/p&gt;

&lt;p&gt;書き換えた &lt;code&gt;run()&lt;/code&gt; のほうが読みやすくていい感じです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>データ登録用にgroongaのC APIのgoバインディングを書いてみた</title>
      <link>/blog/2015/04/27/cgoroonga/</link>
      <pubDate>Mon, 27 Apr 2015 00:44:23 +0900</pubDate>
      
      <guid>/blog/2015/04/27/cgoroonga/</guid>
      <description>

&lt;h2 id=&#34;groongaで大量のデータを登録する方法を調べてみた:bd398b25ed8a2de22905a814e81be387&#34;&gt;groongaで大量のデータを登録する方法を調べてみた&lt;/h2&gt;

&lt;h3 id=&#34;方法1-loadコマンドの文字列を組み立ててgroongaコマンドの標準入力に流し込む:bd398b25ed8a2de22905a814e81be387&#34;&gt;方法1: loadコマンドの文字列を組み立ててgroongaコマンドの標準入力に流し込む&lt;/h3&gt;

&lt;p&gt;groongaのデータの登録はチュートリアルの&lt;a href=&#34;http://groonga.org/ja/docs/tutorial/introduction.html#load-records&#34;&gt;データのロード&lt;/a&gt;にあるように&lt;a href=&#34;http://groonga.org/ja/docs/reference/commands/load.html&#34;&gt;loadコマンド&lt;/a&gt;を使えば出来ます。&lt;/p&gt;

&lt;p&gt;外部ファイルから大量のデータを登録するときはどうするのかなと思って調べてみると、 groongaのソースの examples/dictionary/eijiro/ の例では &lt;code&gt;load&lt;/code&gt; コマンドの文字列を組み立てて &lt;code&gt;groonga&lt;/code&gt; コマンドの標準入力に流し込んでいました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/groonga/groonga/blob/59ef5d1d26b4ba47d163019a21a20519d349489b/examples/dictionary/eijiro/eijiro-import.sh#L10-L12&#34;&gt;https://github.com/groonga/groonga/blob/59ef5d1d26b4ba47d163019a21a20519d349489b/examples/dictionary/eijiro/eijiro-import.sh#L10-L12&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;if iconv -f UCS2 -t UTF8 $2 | ${base_dir}/eijiro2grn.rb | groonga $1 &amp;gt; /dev/null; then
  echo &amp;quot;eijiro data loaded.&amp;quot;
fi
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;方法2-groongaのc-apiを使う:bd398b25ed8a2de22905a814e81be387&#34;&gt;方法2: groongaのC APIを使う&lt;/h3&gt;

&lt;p&gt;この方法はお手軽ですが、エラー処理が難しそうと重い、さらに調べてみると、groongaのC APIを使ってデータ登録する例を見つけました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://createfield.com/C%E8%A8%80%E8%AA%9E%E3%81%A7Groonga%E3%81%AEAPI%E3%82%92%E4%BD%BF%E3%81%86%E6%96%B9%E6%B3%95&#34;&gt;C言語でGroongaのAPIを使う方法 - CreateField&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;go言語用のライブラリを作ってみました:bd398b25ed8a2de22905a814e81be387&#34;&gt;go言語用のライブラリを作ってみました&lt;/h2&gt;

&lt;p&gt;折角なのでCのライブラリのgo言語バインディングを作る練習を兼ねてgo言語用のライブラリを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/cgoroonga&#34;&gt;hnakamur/cgoroonga&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;テーブルとカラムを作ってレコードを1件登録するサンプルコード:bd398b25ed8a2de22905a814e81be387&#34;&gt;テーブルとカラムを作ってレコードを1件登録するサンプルコード&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/add_record/main.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/add_record/main.go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;OSX + homebrewという環境で試しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew install groonga
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でgroongaをインストールして、以下の手順で実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/hnakamur/cgoroonga
cd $GOPATH/src/github.com/hnakamur/cgoroonga/examples/add_record
go build
./add_record
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;wikipedia日本語版の記事データを登録するサンプルコード:bd398b25ed8a2de22905a814e81be387&#34;&gt;Wikipedia日本語版の記事データを登録するサンプルコード&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/import_wikipedia/main.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/import_wikipedia/main.go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;データファイルは
&lt;a href=&#34;http://dumps.wikimedia.org/jawiki/20150422/&#34;&gt;jawiki dump progress on 20150422&lt;/a&gt;
から以下の4つのファイルをダウンロードしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;jawiki-20150422-pages-articles1.xml.bz2&lt;/li&gt;
&lt;li&gt;jawiki-20150422-pages-articles2.xml.bz2&lt;/li&gt;
&lt;li&gt;jawiki-20150422-pages-articles3.xml.bz2&lt;/li&gt;
&lt;li&gt;jawiki-20150422-pages-articles4.xml.bz2&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Wikipediaのデータファイルはxmlをbzip2で圧縮した形式になっているので、Goの標準ライブラリの&lt;a href=&#34;http://golang.org/pkg/compress/bzip2/&#34;&gt;bzip2&lt;/a&gt;と&lt;a href=&#34;http://golang.org/pkg/encoding/xml/&#34;&gt;xml&lt;/a&gt;パッケージを使って読み込むようにしています。&lt;/p&gt;

&lt;p&gt;サイズの大きいXMLファイルを読み込んで処理するときにおすすめの方法が
&lt;a href=&#34;http://blog.davidsingleton.org/parsing-huge-xml-files-with-go/&#34;&gt;Parsing huge XML files with Go - david singleton&lt;/a&gt;で紹介されていたので、それを真似しました。ありがとうございます！&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd $GOPATH/src/github.com/hnakamur/cgoroonga/examples/import_wikipedia
go build
./import_wikipedia jawiki-20150422-pages-articles1.xml.bz2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように実行します。&lt;/p&gt;

&lt;h2 id=&#34;cライブラリのgoバインディングを書くときのtips:bd398b25ed8a2de22905a814e81be387&#34;&gt;Cライブラリのgoバインディングを書くときのtips&lt;/h2&gt;

&lt;p&gt;基本的には&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://golang.org/cmd/cgo/&#34;&gt;cgo - The Go Programming Language&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/golang/go/wiki/cgo&#34;&gt;cgo · golang/go Wiki&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;を読めばOKなのですが、ハマった点をメモしておきます。&lt;/p&gt;

&lt;h3 id=&#34;import-c-の上に空行を入れないように注意:bd398b25ed8a2de22905a814e81be387&#34;&gt;import &amp;ldquo;C&amp;rdquo;の上に空行を入れないように注意&lt;/h3&gt;

&lt;p&gt;たとえば
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/column.go#L7&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/column.go#L7&lt;/a&gt;
で &lt;code&gt;import &amp;quot;C&amp;quot;&lt;/code&gt; の上に空行を入れて &lt;code&gt;go build&lt;/code&gt; を実行すると以下の様なエラーになります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ go build
# github.com/hnakamur/cgoroonga
could not determine kind of name for C.free
could not determine kind of name for C.grn_column_create
could not determine kind of name for C.grn_obj_column
could not determine kind of name for C.grn_obj_flags
could not determine kind of name for C.strlen
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;cのマクロはgoから呼べないのでcの関数でラップする:bd398b25ed8a2de22905a814e81be387&#34;&gt;Cのマクロはgoから呼べないのでCの関数でラップする&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/cgoroonga.c&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/cgoroonga.c&lt;/a&gt;
のようにマクロをラップしたCの関数を書いて、それをgoから呼ぶようにします。&lt;/p&gt;

&lt;h3 id=&#34;エラーコードが有るエラーと無いエラーを統一的に扱うようにした:bd398b25ed8a2de22905a814e81be387&#34;&gt;エラーコードが有るエラーと無いエラーを統一的に扱うようにした&lt;/h3&gt;

&lt;p&gt;groongaのC APIはほとんどが&lt;a href=&#34;http://groonga.org/ja/docs/reference/api/grn_table.html&#34;&gt;7.20.21. grn_table — Groonga v5.0.2ドキュメント&lt;/a&gt;の &lt;a href=&#34;http://groonga.org/ja/docs/reference/api/grn_table.html#c.grn_table_delete&#34;&gt;grn_table_delete&lt;/a&gt;  のように &lt;a href=&#34;https://github.com/groonga/groonga/blob/v5.0.2/include/groonga/groonga.h#L44-L125&#34;&gt;grn_rc&lt;/a&gt; を返します。&lt;/p&gt;

&lt;p&gt;が、 &lt;a href=&#34;http://groonga.org/ja/docs/reference/api/grn_table.html#c.grn_table_create&#34;&gt;grn_table_create&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;grn_obj *grn_table_create(grn_ctx *ctx, const char *name, unsigned int name_size, const char *path, grn_obj_flags flags, grn_obj *key_type, grn_obj *value_type)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように &lt;code&gt;grn_rc&lt;/code&gt; を返さないAPIもあります。ドキュメントには明記されていませんが、Cの慣例としてエラーのときはおそらく戻り値が &lt;code&gt;NULL&lt;/code&gt; になるのだと予想します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/groonga/groonga/blob/v5.0.2/lib/db.c#L744-L930&#34;&gt;https://github.com/groonga/groonga/blob/v5.0.2/lib/db.c#L744-L930&lt;/a&gt; を見るとやはりNULLを返すケースが有りました。&lt;/p&gt;

&lt;p&gt;そこで、
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/error.go&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/error.go&lt;/a&gt;
のようにエラーコードが有るエラーと無いエラーを全てGoの変数として定義するようにしてみました。&lt;/p&gt;

&lt;p&gt;これにより
&lt;a href=&#34;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/import_wikipedia/main.go#L59-L63&#34;&gt;https://github.com/hnakamur/cgoroonga/blob/5eb6e092c4f6d53257b499cffacd51b8dd194ca3/examples/import_wikipedia/main.go#L59-L63&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	table, err := ctx.TableOpenOrCreate(&amp;quot;Articles&amp;quot;, &amp;quot;&amp;quot;,
		grn.OBJ_TABLE_HASH_KEY|grn.OBJ_PERSISTENT, keyType, nil)
	if err != nil {
		return
	}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにエラーを常に戻り値で受け取るように統一することができ、見通しのよいコードが実現できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:bd398b25ed8a2de22905a814e81be387&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;データ登録用にgroongaのC APIのgoバインディングを書きました。
C APIがエラーコードを返さない場合でもGo側ではエラーを返し &lt;code&gt;if err != nil&lt;/code&gt; というのようにエラーチェックの方式を統一することで、エラー処理の漏れに気づきやすくする事が出来ました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Groongaのチュートリアルを試してみた</title>
      <link>/blog/2015/04/26/tried_groonga_tutorial/</link>
      <pubDate>Sun, 26 Apr 2015 23:53:06 +0900</pubDate>
      
      <guid>/blog/2015/04/26/tried_groonga_tutorial/</guid>
      <description>

&lt;p&gt;Groongaのチュートリアルを試してみたメモです。
試した環境は Groonga 5.0.2, Ubuntu 14.04.2 です。&lt;/p&gt;

&lt;h2 id=&#34;セットアップ手順:f8779f2a67f29f8720bb9e60ed791493&#34;&gt;セットアップ手順&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://groonga.org/ja/docs/install/ubuntu.html#ppa-personal-package-archive&#34;&gt;2.4. Ubuntu — Groonga v5.0.2ドキュメント&lt;/a&gt;にそってセットアップしました。&lt;/p&gt;

&lt;p&gt;セットアップ手順は&lt;a href=&#34;https://github.com/hnakamur/groonga-dockerfiles/blob/b4d64e23eaf9afda47c31bc34794eb2e56b7614d/dockerfiles/trusty/Dockerfile&#34;&gt;Dockerfile&lt;/a&gt;にまとめておきました。&lt;/p&gt;

&lt;p&gt;さらにVirtualBox + VagrantでUbuntuにdockerとdocker-composeをインストールして、上のDockerfileでコンテナを作る手順を自動化するVagrantfileを作成して
&lt;a href=&#34;https://github.com/hnakamur/groonga-dockerfiles&#34;&gt;hnakamur/groonga-dockerfiles&lt;/a&gt;
で公開しています。&lt;/p&gt;

&lt;p&gt;VirtualBoxとVagrantをインストールしてあれば、以下の手順ですぐ試せます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/hnakamur/groonga-dockerfiles
cd groonga-dockerfiles
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;起動後コンテナを作って起動するまでには結構時間がかかります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でVMにログインして、以下のようにCommandでgroonga-httpdが実行されたら起動完了です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ cd /vagrant/dockerfiles
$ sudo docker-compose ps
      Name             Command             State              Ports
-------------------------------------------------------------------------
dockerfiles_groo   /usr/sbin          Up                 0.0.0.0:80-&amp;gt;1004
ngatrusty_1        /groonga-httpd                        1/tcp
                   -g ...
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;管理画面とgroongaコマンドの起動方法:f8779f2a67f29f8720bb9e60ed791493&#34;&gt;管理画面とgroongaコマンドの起動方法&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://192.168.33.12/&#34;&gt;http://192.168.33.12/&lt;/a&gt; でgroongaの管理画面にアクセスできます。&lt;/p&gt;

&lt;p&gt;groongaコマンドの起動方法は以下の通りです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でVMにログインし、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo docker exec -it dockerfiles_groongatrusty_1 /bin/bash
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でコンテナ内に入り&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo -u groonga groonga /var/lib/groonga/db/db
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でgroongaコマンドを実行します。&lt;/p&gt;

&lt;h3 id=&#34;groongaコマンドの実行ユーザをrootにするとハマるので注意:f8779f2a67f29f8720bb9e60ed791493&#34;&gt;groongaコマンドの実行ユーザをrootにするとハマるので注意&lt;/h3&gt;

&lt;p&gt;groongaコマンドはgroongaで実行するのが重要です。&lt;/p&gt;

&lt;p&gt;rootユーザで実行してしまうとエラーにはならないのですが、テーブルなどを作成してもgroongaの管理画面で表示されずハマりました。&lt;/p&gt;

&lt;p&gt;groongaのデータベースは最初は1つのファイルですが、テーブルなどを作るとファイルが追加で作成されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@b95446c72160:/# cd /var/lib/groonga/db
root@b95446c72160:/var/lib/groonga/db# ll
total 15332
drwxr-xr-x 2 groonga groonga     4096 Apr 26 14:34 ./
drwxr-xr-x 3 groonga groonga     4096 Apr 26 01:49 ../
-rw-r--r-- 1 groonga groonga     4096 Apr 26 14:33 db
-rw-r--r-- 1 groonga groonga 21245952 Apr 26 14:33 db.0000000
-rw-r--r-- 1 groonga groonga 16842752 Apr 26 14:34 db.0000100
-rw-r--r-- 1 groonga groonga 12857344 Apr 26 14:26 db.0000101
-rw-r--r-- 1 groonga groonga  8437760 Apr 26 14:28 db.0000102
-rw-r--r-- 1 groonga groonga  1085440 Apr 26 14:28 db.0000103
-rw-r--r-- 1 groonga groonga  4198400 Apr 26 14:28 db.0000103.c
-rw-r--r-- 1 groonga groonga  8437760 Apr 26 14:34 db.0000104
-rw-r--r-- 1 groonga groonga  4198400 Apr 26 14:34 db.0000105
-rw-r--r-- 1 groonga groonga  1085440 Apr 26 14:34 db.0000106
-rw-r--r-- 1 groonga groonga  4198400 Apr 26 14:34 db.0000106.c
-rw-r--r-- 1 groonga groonga  1048576 Apr 26 14:34 db.001
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;rootユーザでgroongaコマンドを実行すると作成されたファイルの所有者がrootユーザになり、groonga-httpdから見えないようです。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;chown groonga: /var/lib/groonga/db/db*&lt;/code&gt; で所有者をgroongaユーザに変更すれば見えるようになりました。&lt;/p&gt;

&lt;p&gt;ということで、上記のようにgroongaユーザでgroongaコマンドを実行するのが良いです。&lt;/p&gt;

&lt;h2 id=&#34;チュートリアルの一部手順でエラーが出てハマった:f8779f2a67f29f8720bb9e60ed791493&#34;&gt;チュートリアルの一部手順でエラーが出てハマった&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://groonga.org/ja/docs/tutorial.html&#34;&gt;4. チュートリアル — Groonga v5.0.2ドキュメント&lt;/a&gt;の手順で試してみました。ほとんどはすんなり実行できましたが、1箇所ハマりました。&lt;/p&gt;

&lt;h3 id=&#34;インデックス付きジオサーチのところでnonexistent-sourceというエラー:f8779f2a67f29f8720bb9e60ed791493&#34;&gt;インデックス付きジオサーチのところでnonexistent sourceというエラー&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://groonga.org/ja/docs/tutorial/index.html#geo-location-search-with-index&#34;&gt;4.6.3. インデックス付きジオサーチ&lt;/a&gt;のところで以下の様なエラーが出ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; table_create --name GeoIndex --flags TABLE_PAT_KEY --key_type WGS84GeoPoint
[[0,1429178015.01179,0.00191092491149902],true]
&amp;gt; column_create --table GeoIndex --name index_point --type Site --flags COLUMN_INDEX --source location
[[-22,1429178020.73797,0.00554323196411133,&amp;quot;[column][create] nonexistent source: &amp;lt;location&amp;gt;&amp;quot;,[[&amp;quot;proc_column_create_resolve_source_name&amp;quot;,&amp;quot;proc.c&amp;quot;,1774]]],false]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Siteテーブルは&lt;a href=&#34;http://groonga.org/ja/docs/tutorial/introduction.html#create-a-table&#34;&gt;4.1.5. テーブルの作成&lt;/a&gt;で&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;table_create --name Site --flags TABLE_HASH_KEY --key_type ShortText
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;として作成していますが、その後 &lt;code&gt;location&lt;/code&gt; カラムを作る箇所がなかったようです。&lt;/p&gt;

&lt;p&gt;2015-04-28追記 &lt;a href=&#34;https://twitter.com/kenhys/status/592901925089189889&#34;&gt;https://twitter.com/kenhys/status/592901925089189889&lt;/a&gt; でご指摘いただいたのですが、実は&lt;a href=&#34;http://groonga.org/ja/docs/tutorial/search.html#narrow-down-sort-by-using-location-information&#34;&gt;4.4.3. 位置情報を用いた絞込・ソート&lt;/a&gt;で &lt;code&gt;location&lt;/code&gt; カラムを作っているのを私が見落としていました。失礼いたしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;column_create --table Site --name location --type WGS84GeoPoint
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにカラムを作成すれば大丈夫でした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;table_create --name GeoIndex --flags TABLE_PAT_KEY --key_type WGS84GeoPoint
column_create --table GeoIndex --name index_point --type Site --flags COLUMN_INDEX --source location
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;でインデクス用のテーブルとカラムを作成して、&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;load --table Site
[
 {&amp;quot;_key&amp;quot;:&amp;quot;http://example.org/&amp;quot;,&amp;quot;location&amp;quot;:&amp;quot;128452975x503157902&amp;quot;},
 {&amp;quot;_key&amp;quot;:&amp;quot;http://example.net/&amp;quot;,&amp;quot;location&amp;quot;:&amp;quot;128487316x502920929&amp;quot;}
]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で、データをロードします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;gt; select --table Site --filter &#39;geo_in_circle(location, &amp;quot;128515259x503187188&amp;quot;, 5000)&#39; --output_columns _key,location
[[0,1430061299.24235,0.00105690956115723],[[[1],[[&amp;quot;_key&amp;quot;,&amp;quot;ShortText&amp;quot;],[&amp;quot;location&amp;quot;,&amp;quot;WGS84GeoPoint&amp;quot;]],[&amp;quot;http://example.org/&amp;quot;,&amp;quot;128452975x503157902&amp;quot;]]]]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で検索できました。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:f8779f2a67f29f8720bb9e60ed791493&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;2箇所ハマりましたが解決してとりあえず使えるようになりました。今後さらに調査していきたいと思います。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>vagrant box updateでboxファイルをアップグレードする</title>
      <link>/blog/2015/04/25/vagrant-box-update/</link>
      <pubDate>Sat, 25 Apr 2015 21:55:31 +0900</pubDate>
      
      <guid>/blog/2015/04/25/vagrant-box-update/</guid>
      <description>&lt;p&gt;Vagrant Cloudに上がっているUbuntu trustyのオフィシャルイメージ&lt;a href=&#34;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&#34;&gt;ubuntu/trusty64 | Atlas by HashiCorp&lt;/a&gt;をVagrantfileで参照していたら、 &lt;code&gt;vagrant up&lt;/code&gt; の際に以下の様なメッセージが表示される時がありました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
…(略)…
==&amp;gt; default: A newer version of the box &#39;ubuntu/trusty64&#39; is available! You currently
==&amp;gt; default: have version &#39;14.04&#39;. The latest is version &#39;20150422.0.0&#39;. Run
==&amp;gt; default: `vagrant box update` to update.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように実行するとアップデートが出来ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box update --box ubuntu/trusty64
Checking for updates to &#39;ubuntu/trusty64&#39;
Latest installed version: 14.04
Version constraints: &amp;gt; 14.04
Provider: virtualbox
Updating &#39;ubuntu/trusty64&#39; with provider &#39;virtualbox&#39; from version
&#39;14.04&#39; to &#39;20150422.0.0&#39;...
Loading metadata for box &#39;https://atlas.hashicorp.com/ubuntu/trusty64&#39;
Adding box &#39;ubuntu/trusty64&#39; (v20150422.0.0) for provider: virtualbox
Downloading: https://atlas.hashicorp.com/ubuntu/boxes/trusty64/versions/20150422.0.0/providers/virtualbox.box
Successfully added box &#39;ubuntu/trusty64&#39; (v20150422.0.0) for &#39;virtualbox&#39;!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アップデート完了後、box一覧を確認してみると以下のように新旧のバージョンが出力されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box list | grep &#39;ubuntu/trusty64&#39;
ubuntu/trusty64                               (virtualbox, 14.04)
ubuntu/trusty64                               (virtualbox, 20150422.0.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;検証用に古いバージョンを使うことはできるのかなと思ったら&lt;a href=&#34;https://docs.vagrantup.com/v2/boxes/versioning.html&#34;&gt;Box Versioning - Vagrant Documentation&lt;/a&gt;に書いてありました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.vm.box_version&lt;/code&gt; を指定すれば良いようです。
また &lt;code&gt;config.vm.box_check_update = false&lt;/code&gt; を指定すれば、boxの新バージョンが出ているかのチェックを無効にできるそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jetpackを試してみた</title>
      <link>/blog/2015/04/23/try-jetpack/</link>
      <pubDate>Thu, 23 Apr 2015 01:27:57 +0900</pubDate>
      
      <guid>/blog/2015/04/23/try-jetpack/</guid>
      <description>

&lt;h2 id=&#34;はじめに:d2be8c75ec3c908549cffd0ee3c6bc41&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/3ofcoins/jetpack#using-jetpack&#34;&gt;3ofcoins/jetpack&lt;/a&gt;はFreeBSD, Jail, ZFSを使った&lt;a href=&#34;https://github.com/appc/spec&#34;&gt;App Container Spec&lt;/a&gt;の実装です。まだプロトタイプレベルとのことです。Go言語で実装されています。&lt;/p&gt;

&lt;p&gt;masterの最新を試しました。今後のためにコミットハッシュをメモしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sunshine5:jetpack hnakamur$ g log -1
commit 0792b938c7f9bdd43f9d117bfdec6cd91e223ee5
Author: Maciej Pasternacki &amp;lt;maciej@3ofcoins.net&amp;gt;
Date:   Mon Apr 13 06:26:57 2015

    Make image building work with per-app rootfs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;セットアップ:d2be8c75ec3c908549cffd0ee3c6bc41&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;Vagrantfileが用意されているのでそれを使いました。
VirtualBox 4.3.26, Vagrant 1.7.2, OS X Yosemiteという環境で試しました。&lt;/p&gt;

&lt;p&gt;VagrantのAnsibleプロビジョナを利用しているので、予めホスト側にAnsibleをセットアップしておいてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant up
vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jetpackを使ってみる:d2be8c75ec3c908549cffd0ee3c6bc41&#34;&gt;Jetpackを使ってみる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/3ofcoins/jetpack#using-jetpack&#34;&gt;Using Jetpack&lt;/a&gt;の説明にそって、試してみました。&lt;/p&gt;

&lt;p&gt;引数無しで単に &lt;code&gt;jetpack&lt;/code&gt; と実行すると説明が出ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jetpack
Usage: jetpack [OPTIONS] COMMAND...
Options:
  -config=PATH  Configuration file (/usr/local/etc/jetpack.conf)
  -help, -h     Display this help screen
Commands:
  help                                    Display this help screen
  init                                    Initialize host
  info                                    Show global information
  test                                    Run integration tests
  image list [QUERY]                      List images
  image import ARCHIVE [MANIFEST]         Import image from an archive
  image IMAGE build [OPTIONS] COMMAND...  Build new image from an existing one
                    -dir=.                Location on build directory on host
                    -cp=PATH...           Copy additional files from host
  image IMAGE show                        Display image details
  image IMAGE export [PATH]               Export image to an AMI file
                                          Output to stdout if no PATH given
  image IMAGE destroy                     Destroy image
  pod list                                List pods
  pod create [FLAGS] IMAGE [IMAGE FLAGS] [IMAGE [IMAGE FLAGS] ...]
                                          Create new pod from image
             -help                        Show detailed help
  pod POD show                            Display pod details
  pod POD run                             Run pod&#39;s application
  pod POD console [USER]                  Open console inside the pod
  pod POD ps|top|killall [OPTIONS...]
                                          Manage pod&#39;s processes
  pod POD kill                Kill running pod
  pod POD destroy             Destroy pod
Needs Explanation:
  ARCHIVE, MANIFEST  May be filesystem paths or URLs.
            cp=PATH  This option can be given multiple times
              QUERY  Is an expression that looks like this:
                      - NAME[,LABEL=VALUE[,LABEL=VALUE[,...]]]
                      - NAME:VERSION (alias for NAME:version=VERSION)
              IMAGE  Can be:
                      - an UUID (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX),
                      - a checksum (sha512-...), or
                      - a QUERY (which can&#39;t be ambiguous).
          POD  Has to be an UUID for now
Helpful Aliases:
  i|img ... -- image ...
  p ... -- pod ...
  image, images -- image list
  pod, pods -- pod list
  image build|show|export|destroy IMAGE ... -- image IMAGE build|show|... ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;jetpack init&lt;/code&gt; でZFSのデータセットとディレクトリ構造を初期化します。が、これはプロビジョニングで実行済みだったようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jetpack init
/vagrant/jetpack/host.go:82: Host already initialized
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;jetpack info&lt;/code&gt; で状態を確認してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jetpack info
JetPack 0.0.1 (v0.0.1-81-g0792b93), compiled on 2015-04-22T15:38:43Z
ZFS Dataset zroot/jetpack
  Mountpoint  /var/jetpack
Configuration:
  root.zfs                zroot/jetpack
  root.zfs.mountpoint     /var/jetpack
  images.ami.store        no
  images.ami.compression  xz
  images.zfs.atime        off
  images.zfs.compress     lz4
  jail.interface          lo1
  jail.namePrefix         jetpack/
  debug                   off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;jetpack test&lt;/code&gt; でスモークテストを実行してみましたが、一般ユーザでは権限不足でした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jetpack test
ERROR: mkdir /var/jetpack/test.881699652: permission denied
run.Command[/usr/local/libexec/jetpack/test.integration dataset=zroot/jetpack]: exit status 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スモークテストという言葉は知らなかったのですが、本格的なテストの前の簡易テストという意味だそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nolan00267.blogspot.jp/2013/12/itsmoke-test.html&#34;&gt;ビジネス英語とアメリカ生活 | カリフォルニアの陽射しの中で: IT英語:　ソフトウェアの試験なのにSmoke Testとは、これいかに?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/im/articles/1111/07/news166.html&#34;&gt;情報システム用語事典：スモークテスト（すもーくてすと） - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sudoつきで実行すると、さっきよりは進みましたが &lt;code&gt;resolv.conf&lt;/code&gt; が無いというエラーになってしまいました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo jetpack test
...(snip)...
Pod dying since 51.336704525s, waiting...
Image 6d058709-d7f9-45c5-a40b-0f9a5c81a90b
  Hash       sha512-3d526a2a0e40605d1d5f50a6596f210ff26d7486867f12f4ffa395c3600028a01473c126c11b1030a4c299c82799b56a3493773d008743ae33f1230dc71384a1
  Origin     b73f4bf5-8988-4e0f-87f4-31723167e2ef
  Timestamp  2015-04-22 16:24:15.597136136 +0000 UTC
  Manifest freebsd-base
    Labels
      version  10.1.9
      os       freebsd
      arch     amd64
    Annotations
      timestamp  2015-04-22T16:24:15.595105431Z
jetpack image freebsd-base build -cp=/usr/local/share/jetpack/jetpack.image.mk  /usr/bin/make .jetpack.build.
open /var/jetpack/test.467360619/pods/4c518b91-afa8-4e28-86ca-4c4d0fedc313/rootfs/0/etc/resolv.conf: no such file or directory
/vagrant/jetpack/pod.go:281:
/vagrant/jetpack/pod.go:500:
/vagrant/jetpack/pod.go:501:
/vagrant/jetpack/image.go:331:
*** Error code 1

Stop.
make: stopped in /usr/local/share/examples/jetpack/example.showenv
ERROR: run.Command[make -C /usr/local/share/examples/jetpack/example.showenv]: exit status 1
run.Command[/usr/local/libexec/jetpack/test.integration dataset=zroot/jetpack]: exit status 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦置いておいて、先に進みます。&lt;/p&gt;

&lt;p&gt;rootユーザで &lt;code&gt;/usr/local/share/examples/jetpack&lt;/code&gt; 以下の &lt;code&gt;freebsd-base.release&lt;/code&gt;, &lt;code&gt;freebsd-base&lt;/code&gt;, &lt;code&gt;example.showenv&lt;/code&gt; イメージを順に作成します。&lt;/p&gt;

&lt;p&gt;まず &lt;code&gt;freebsd-base.release&lt;/code&gt; イメージを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -i
root@packer-freebsd-10:~ # cd /usr/local/share/examples/jetpack
root@packer-freebsd-10:/usr/local/share/examples/jetpack # cd freebsd-base.release/
root@packer-freebsd-10:/usr/local/share/examples/jetpack/freebsd-base.release # make
sha256 -c 2b028a894d25711ad496762622a52d74b1e32ee04693ad1cf056e3ddcdc23975 base.txz
SHA256 (base.txz) = 2b028a894d25711ad496762622a52d74b1e32ee04693ad1cf056e3ddcdc23975
jetpack image import base.txz manifest.json
-                                             100% of   63 MB 6067 kBps 00m11s
-                                             100% of  184  B  519 kBps 00m00s
Image 445da390-2e49-4b7f-921d-47ce6114cb02
  Hash       sha512-3e5767bda2018294312cce0d0ef2003cf886af246cbbfe5050a266a94bdcfe9df94c9e73ef4452b487cf8bdc8279806e70aef75ea8f644d24223cf227bc75df8
  Origin     base.txz
  Timestamp  2015-04-22 16:33:07.861508005 +0000 UTC
  Manifest freebsd-base/release
    Labels
      version  10.1
      os       freebsd
      arch     amd64
    Annotations
      timestamp  2015-04-22T16:33:18.685140617Z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;freebsd-base&lt;/code&gt; イメージを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@packer-freebsd-10:/usr/local/share/examples/jetpack/freebsd-base.release # cd ../freebsd-base
root@packer-freebsd-10:/usr/local/share/examples/jetpack/freebsd-base # make
jetpack image freebsd-base/release build -cp=/usr/local/share/jetpack/jetpack.image.mk  /usr/bin/make .jetpack.build.
sed -i &#39;&#39; &#39;s|^Components.*|Components world/base|&#39; /etc/freebsd-update.conf
install -v -m 0644 rc.conf /etc/rc.conf
install: rc.conf -&amp;gt; /etc/rc.conf
install -v -m 0600 entropy /entropy
install: entropy -&amp;gt; /entropy
patch /usr/sbin/freebsd-update &amp;lt; freebsd-update.patch
Hmm...  Looks like a unified diff to me...
The text leading up to this was:
--------------------------
|--- /usr/sbin/freebsd-update	2015-02-08 22:15:58.178818000 +0100
|+++ freebsd-update	2015-02-09 13:45:42.202917000 +0100
--------------------------
Patching file /usr/sbin/freebsd-update using Plan A...
Hunk #1 succeeded at 610 (offset -8 lines).
done
env PAGER=cat freebsd-update -s update6.freebsd.org fetch install
Looking up update6.freebsd.org mirrors... none found.
Fetching public key from update6.freebsd.org... done.
Fetching metadata signature for 10.1-RELEASE from update6.freebsd.org... done.
Fetching metadata index... done.
Fetching 2 metadata files... done.
Inspecting system... done.
Preparing to download files... done.
Fetching 706 patches.....10....20....30....40....50....60....70....80....90....100....110....120....130....140....150....160....170....180....190....200....210....220....230....240....250....260....270....280....290....300....310....320....330....340....350....360....370....380....390....400....410....420....430....440....450....460....470....480....490....500....510....520....530....540....550....560....570....580....590....600....610....620....630....640....650....660....670....680....690....700... done.
Applying patches... done.
Fetching 1 files... done.

The following files will be updated as part of updating to 10.1-RELEASE-p9:
/bin/freebsd-version
/boot/boot1.efi
/boot/boot1.efifat
...(略)...
/var/db/mergemaster.mtree
Installing updates... done.
rm -rf /var/db/freebsd-update/*
./manifest.json.sh &amp;gt; manifest.json
Pod dying since 64.761583ms, waiting...
...(略)...
Pod dying since 51.461102458s, waiting...
Image 9323ac42-0f39-4f42-90de-ac4de60420dd
  Hash       sha512-3fb309e4d9a998bd910ce07dbfcef447508ea2146fabd88056975abc224d49094b3ff22c61c6c3aae170ee5e69bff72c43fb6e1153ae4f68607246cb50cc4d3d
  Origin     445da390-2e49-4b7f-921d-47ce6114cb02
  Timestamp  2015-04-22 16:38:35.737407036 +0000 UTC
  Manifest freebsd-base
    Labels
      version  10.1.9
      os       freebsd
      arch     amd64
    Annotations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;freebsd-base&lt;/code&gt; イメージを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@packer-freebsd-10:/usr/local/share/examples/jetpack/freebsd-base # cd ../example.showenv/
root@packer-freebsd-10:/usr/local/share/examples/jetpack/example.showenv # make
jetpack image freebsd-base build -cp=/usr/local/share/jetpack/jetpack.image.mk  /usr/bin/make .jetpack.build.
open /var/jetpack/pods/eaa0ec11-a7ad-4170-ac30-472444b9f849/rootfs/0/etc/resolv.conf: no such file or directory
/vagrant/jetpack/pod.go:281:
/vagrant/jetpack/pod.go:500:
/vagrant/jetpack/pod.go:501:
/vagrant/jetpack/image.go:331:
*** Error code 1

Stop.
make: stopped in /usr/local/share/examples/jetpack/example.showenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スモークテストの時と同じエラーが出ました。
とりあえず今回はここまでとします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LXD 0.7ではlxc execでシェルの対話操作もできるようになっていました</title>
      <link>/blog/2015/04/23/try-lxd-0.7-with-vagrant/</link>
      <pubDate>Thu, 23 Apr 2015 00:08:30 +0900</pubDate>
      
      <guid>/blog/2015/04/23/try-lxd-0.7-with-vagrant/</guid>
      <description>

&lt;h2 id=&#34;はじめに:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/2014/12/01/lxd-the-linux-container-daemon/&#34;&gt;LXDを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の記事を書いて以来、LXD触る時間を作れてなかったのですが、久々に試してみました。&lt;/p&gt;

&lt;p&gt;今では&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxc/lxd&lt;/a&gt;にVagrantfileが同梱されているので、それを使うだけで簡単に試せます。&lt;/p&gt;

&lt;p&gt;VirtualBox 4.3.26, Vagrant 1.7.2, OS X Yosemiteという環境で試しました。&lt;/p&gt;

&lt;h2 id=&#34;操作手順:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;操作手順&lt;/h2&gt;

&lt;h3 id=&#34;vagrantでvmを起動:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;VagrantでVMを起動&lt;/h3&gt;

&lt;p&gt;まずOS X上で以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/lxc/lxd
cd lxd
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd/blob/lxd-0.7/Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt;を見てみると、Vagrantのシェルプロビジョナでgoとlxdをインストールするようになっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd/blob/lxd-0.7/scripts/vagrant/install-lxd.sh&#34;&gt;lxd/install-lxd.sh at lxd-0.7 · lxc/lxd&lt;/a&gt;を見てみると、&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxdのREADME&lt;/a&gt;と同様のセットアップ手順に加えてlxdをサービスとして登録して起動する処理まで含まれています。&lt;/p&gt;

&lt;h3 id=&#34;vmにログインしてlxcコマンドを試してみる:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;VMにログインしてlxcコマンドを試してみる&lt;/h3&gt;

&lt;p&gt;以下のコマンドを実行してVMにログインします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以降のコマンドはVM上で実行します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lxc&lt;/code&gt; と &lt;code&gt;lxd&lt;/code&gt; にはPATHが通った状態になっていることを確認しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ which lxc
/home/vagrant/go/bin/lxc
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ which lxd
/home/vagrant/go/bin/lxd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを確認してみると、 &lt;code&gt;lxc&lt;/code&gt;, &lt;code&gt;lxd&lt;/code&gt; ともに0.7でした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxd --version
0.7
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc --version
0.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd#first-steps&#34;&gt;lxdのREADMEのFirst steps&lt;/a&gt;に添って、ubuntuとdebianのイメージを取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ ./scripts/lxd-images import lxc ubuntu trusty amd64 --alias ubuntu --alias ubuntu/trusty
Downloading the GPG key for https://images.linuxcontainers.org
Downloading the image list for https://images.linuxcontainers.org
Validating the GPG signature of /tmp/tmpsccxc1fa/index.json.asc
Downloading the image: https://images.linuxcontainers.org/images/ubuntu/trusty/amd64/default/20150420_03:49/lxd.tar.xz
Validating the GPG signature of /tmp/tmpsccxc1fa/ubuntu-trusty-amd64-default-20150420_03:49.tar.xz.asc
Image imported as: c9176e837c0012d6d0eed221312ee9fc761765319701f57e65e63542ad9beade
Setup alias: ubuntu
Setup alias: ubuntu/trusty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;debianのほうは最初コピペミスでaliasに2回同じ値を指定してしまってエラーになりましたが、再度実行すると成功しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ scripts/lxd-images import lxc debian wheezy amd64 --alias debian --alias debian/wheezy --alias debian/wheezy
Downloading the GPG key for https://images.linuxcontainers.org
Downloading the image list for https://images.linuxcontainers.org
Validating the GPG signature of /tmp/tmp_d1gz0q6/index.json.asc
Downloading the image: https://images.linuxcontainers.org/images/debian/wheezy/amd64/default/20150419_22:42/lxd.tar.xz
Validating the GPG signature of /tmp/tmp_d1gz0q6/debian-wheezy-amd64-default-20150419_22:42.tar.xz.asc
Image imported as: cd398814f6e4e1e50799ba8249b80aa3558e5b05edf71a996a174def87569ae5
Setup alias: debian
Setup alias: debian/wheezy
Traceback (most recent call last):
  File &amp;quot;scripts/lxd-images&amp;quot;, line 410, in &amp;lt;module&amp;gt;
    args.func(parser, args)
  File &amp;quot;scripts/lxd-images&amp;quot;, line 367, in import_lxc
    setup_alias(parser, args, fingerprint)
  File &amp;quot;scripts/lxd-images&amp;quot;, line 330, in setup_alias
    lxd.aliases_create(alias, fingerprint)
  File &amp;quot;scripts/lxd-images&amp;quot;, line 83, in aliases_create
    raise Exception(&amp;quot;Failed to create alias: %s&amp;quot; % name)
Exception: Failed to create alias: debian/wheezy
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ scripts/lxd-images import lxc debian wheezy amd64 --alias debian --alias debian/wheezy --alias debian/wheezy/amd64
Downloading the GPG key for https://images.linuxcontainers.org
Downloading the image list for https://images.linuxcontainers.org
Validating the GPG signature of /tmp/tmpeqkwuvfw/index.json.asc
Downloading the image: https://images.linuxcontainers.org/images/debian/wheezy/amd64/default/20150419_22:42/lxd.tar.xz
Validating the GPG signature of /tmp/tmpeqkwuvfw/debian-wheezy-amd64-default-20150419_22:42.tar.xz.asc
This image is already in the store.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc launch ubuntuCreating container...done
Starting container...done
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc launch debian debian01
Creating container...done
Starting container...done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナの一覧を表示してみます。ubuntuのほうはコンテナ名を指定しなかったので、自動で付けられています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc list
+---------------------+---------+------------+------+-----------+
|        NAME         |  STATE  |    IPV4    | IPV6 | EPHEMERAL |
+---------------------+---------+------------+------+-----------+
| preterhuman-araceli | RUNNING | 10.0.3.188 |      | NO        |
| debian01            | RUNNING |            |      | NO        |
+---------------------+---------+------------+------+-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;debianのほうはIPアドレスが空になっていて、あれ？と思ったのですが、実行するタイミングが早すぎたようで、数秒立ってから再度実行するとアドレスが表示されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc list
+---------------------+---------+------------+------+-----------+
|        NAME         |  STATE  |    IPV4    | IPV6 | EPHEMERAL |
+---------------------+---------+------------+------+-----------+
| preterhuman-araceli | RUNNING | 10.0.3.188 |      | NO        |
| debian01            | RUNNING | 10.0.3.42  |      | NO        |
+---------------------+---------+------------+------+-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以前未実装だった &lt;code&gt;lxc shell&lt;/code&gt; の代わりに &lt;code&gt;lxc exec&lt;/code&gt; でコマンド実行やシェルでの対話操作ができるようになっていました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lxc exec コンテナ名 コマンド 引数&lt;/code&gt; のように指定すると、コンテナ内でコマンドを実行できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
6: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:16:3e:01:bd:a1 brd ff:ff:ff:ff:ff:ff
    inet 10.0.3.42/24 brd 10.0.3.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::216:3eff:fe01:bda1/64 scope link
       valid_lft forever preferred_lft forever
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec preterhuman-araceli ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
4: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:16:3e:5e:6c:79 brd ff:ff:ff:ff:ff:ff
    inet 10.0.3.188/24 brd 10.0.3.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::216:3eff:fe5e:6c79/64 scope link
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;uname -a&lt;/code&gt; のようなコマンドを &lt;code&gt;lxc exec コンテナ名 コマンド 引数&lt;/code&gt; のように指定するとlxcのオプションと解釈するようで、以下のエラーになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec preterhuman-araceli uname -a
error: flag provided but not defined: -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナ名のあとに &lt;code&gt;--&lt;/code&gt; を入れれば回避出来ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec preterhuman-araceli -- uname -a
Linux preterhuman-araceli 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただ、原因は不明なのですが、何回か実行してみると、時々何も出力されないことがありました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lxc exec コンテナ名 /bin/bash&lt;/code&gt; のようにコマンドにシェルを指定すると、コンテナ内でシェルが起動され対話操作が出来ました。ubuntuコンテナの実際の画面では &lt;code&gt;ls&lt;/code&gt; の結果もカラー表示されていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec preterhuman-araceli /bin/bash
root@preterhuman-araceli:~# ls
root@preterhuman-araceli:~# pwd
/root
root@preterhuman-araceli:~# cd /
root@preterhuman-araceli:/# ls -l
total 60
drwxr-xr-x   2 root   root    4096 Apr 20 03:55 bin
drwxr-xr-x   2 root   root    4096 Apr 10  2014 boot
drwxr-xr-x   5 root   root     420 Apr 22 13:51 dev
drwxr-xr-x  63 root   root    4096 Apr 22 13:51 etc
drwxr-xr-x   3 root   root    4096 Apr 20 03:55 home
drwxr-xr-x  12 root   root    4096 Apr 20 03:54 lib
drwxr-xr-x   2 root   root    4096 Apr 20 03:54 lib64
drwxr-xr-x   2 root   root    4096 Apr 20 03:53 media
drwxr-xr-x   2 root   root    4096 Apr 10  2014 mnt
drwxr-xr-x   2 root   root    4096 Apr 20 03:53 opt
dr-xr-xr-x 109 nobody nogroup    0 Apr 22 13:51 proc
drwx------   2 root   root    4096 Apr 20 03:53 root
drwxr-xr-x   9 root   root     380 Apr 22 13:51 run
drwxr-xr-x   2 root   root    4096 Apr 20 03:55 sbin
drwxr-xr-x   2 root   root    4096 Apr 20 03:53 srv
dr-xr-xr-x  13 nobody nogroup    0 Apr 22 13:51 sys
drwxrwxrwt   2 root   root    4096 Apr 20 03:55 tmp
drwxr-xr-x  10 root   root    4096 Apr 20 03:53 usr
drwxr-xr-x  11 root   root    4096 Apr 20 03:53 var
root@preterhuman-araceli:/# ls
bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
boot  etc  lib   media  opt  root  sbin  sys  usr
root@preterhuman-araceli:/# pwd
/
root@preterhuman-araceli:/# exit
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おわりに:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;以前試した時に比べて、かなり進歩してますね。&lt;/p&gt;

&lt;p&gt;ten_forwardさんのライブマイグレーションの記事とかも、今後試してみようと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/defiant/20150415/1429089615&#34;&gt;lxd を使ったライブマイグレーション (1) - TenForwardの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/defiant/20150415/1429090896&#34;&gt;lxd を使ったライブマイグレーション (2) - TenForwardの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>curlでダウンロードを中断後再開するときは-Cオプションが便利</title>
      <link>/blog/2015/04/19/use_curl_c_option_to_resume_download/</link>
      <pubDate>Sun, 19 Apr 2015 01:07:35 +0900</pubDate>
      
      <guid>/blog/2015/04/19/use_curl_c_option_to_resume_download/</guid>
      <description>&lt;p&gt;ISOイメージのようなサイズが大きなファイルを &lt;code&gt;curl&lt;/code&gt; でダウンロードしようとして途中で中断してしまって再開するときに、 &lt;code&gt;-C&lt;/code&gt; オプションが便利だったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://manpages.ubuntu.com/manpages/trusty/en/man1/curl.1.html&#34;&gt;curlのマニュアル&lt;/a&gt;の &lt;code&gt;-C&lt;/code&gt; オプションのところを見ると &lt;code&gt;-C オフセットのバイト数&lt;/code&gt; のように指定するのですが &lt;code&gt;-C -&lt;/code&gt; と書けば自動でファイルサイズを指定してくれることがわかりました。&lt;/p&gt;

&lt;p&gt;例えば以下のようにダウンロードしようとして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -O ftp://ftp3.jp.freebsd.org/pub/FreeBSD/ISO-IMAGES-amd64/10.1/FreeBSD-10.1-RELEASE-amd64-disc1.iso.xz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;途中でマシンをスリープしてしまったりして中断した時は、以下のコマンドで再開します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -O -C - ftp://ftp3.jp.freebsd.org/pub/FreeBSD/ISO-IMAGES-amd64/10.1/FreeBSD-10.1-RELEASE-amd64-disc1.iso.xz
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>サイズが大きなファイルのコピーにはrsyncの-Pオプションが便利</title>
      <link>/blog/2015/04/19/use_rsync_p_option_to_copy_large_file/</link>
      <pubDate>Sun, 19 Apr 2015 00:56:31 +0900</pubDate>
      
      <guid>/blog/2015/04/19/use_rsync_p_option_to_copy_large_file/</guid>
      <description>&lt;p&gt;Vagrantの自作boxファイルをインターネット上のサーバにアップロードするときなどに、 &lt;code&gt;rsync&lt;/code&gt; の &lt;code&gt;-P&lt;/code&gt; オプションが便利だったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://manpages.ubuntu.com/manpages/utopic/en/man1/rsync.1.html&#34;&gt;rsyncのマニュアル&lt;/a&gt; によると &lt;code&gt;-P&lt;/code&gt; オプションは &lt;code&gt;--partial --progress&lt;/code&gt; と同じとのこと。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--progress&lt;/code&gt; を指定されると以下の実行例のように、コピー中に進捗状況が表示され、完了した時に結果情報が出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rsync -P freebsd-10.1-amd64.box hoge
freebsd-10.1-amd64.box
   449371583 100%  112.62MB/s    0:00:03 (xfer#1, to-check=0/1)

sent 449426538 bytes  received 42 bytes  99872573.33 bytes/sec
total size is 449371583  speedup is 1.00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--partial&lt;/code&gt; を指定するとコピーが中断されてしまっても、コピーしかけのファイルが消されないので、再度実行すると続きからコピーを再開できます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoに移行した私のブログの記事追加手順</title>
      <link>/blog/2015/04/19/my_hugo_blog_workflow/</link>
      <pubDate>Sun, 19 Apr 2015 00:17:59 +0900</pubDate>
      
      <guid>/blog/2015/04/19/my_hugo_blog_workflow/</guid>
      <description>

&lt;h2 id=&#34;はじめに:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した | SOTA&lt;/a&gt;を参考に私のブログもしばらく前にHugoに移行しました。deeeetさん、ありがとうございます！&lt;/p&gt;

&lt;p&gt;で、ブログ書く間隔が開くと手順を忘れて、毎回hugoのドキュメントを読むのが面倒なので、自分用メモです。&lt;/p&gt;

&lt;h2 id=&#34;記事のファイルを作成:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;記事のファイルを作成&lt;/h2&gt;

&lt;p&gt;Octorpressのときのpermalinkを維持するために、記事ファイルのパスは &lt;code&gt;content/post/YYYY/MM/DD/foo.md&lt;/code&gt; というような感じになっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt; でファイルを作成する際は &lt;code&gt;content&lt;/code&gt; を除いた部分を指定して以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/2015/04/19/my_hugo_blog_workflow.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;記事を編集してローカルで表示確認:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;記事を編集してローカルで表示確認&lt;/h2&gt;

&lt;p&gt;以下のコマンドでローカルマシンでサーバを起動しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/blog/&#34;&gt;http://localhost:1313/blog/&lt;/a&gt; をブラウザで開いて編集した内容を確認します。&lt;/p&gt;

&lt;h2 id=&#34;テーマの調整:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;テーマの調整&lt;/h2&gt;

&lt;p&gt;私のブログでは &lt;a href=&#34;https://github.com/eliasson/liquorice&#34;&gt;eliasson/liquorice&lt;/a&gt; を改変した独自テーマ &lt;a href=&#34;https://github.com/hnakamur/liquorice-hn&#34;&gt;hnakamur/liquorice-hn&lt;/a&gt; を使っています。&lt;/p&gt;

&lt;p&gt;テーマを調整したい場合は &lt;a href=&#34;https://github.com/hnakamur/blog&#34;&gt;hnakamur/blog&lt;/a&gt; を &lt;code&gt;git clone&lt;/code&gt; したディレクトリの &lt;code&gt;themes/liquorice-hn&lt;/code&gt; フォルダ配下のファイルを書き換えます。&lt;/p&gt;

&lt;p&gt;CSSを変えた場合は &lt;a href=&#34;https://github.com/hnakamur/liquorice-hn#build-with-npm-run&#34;&gt;hnakamur/liquorice-hn&lt;/a&gt; の手順でminifyします。&lt;/p&gt;

&lt;p&gt;テーマの修正が終わったら、テーマの修正したファイル &lt;code&gt;git add&lt;/code&gt; して &lt;code&gt;git commit&lt;/code&gt; します。その後 &lt;a href=&#34;https://github.com/hnakamur/blog&#34;&gt;hnakamur/blog&lt;/a&gt; を &lt;code&gt;git clone&lt;/code&gt; したディレクトリで以下のコマンドを実行してgithubにpushします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git subtree push --prefix themes/liquorice-hn liquorice-hn master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初回のみの事前準備として以下のようにremoteを追加しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add liquorice-hn https://github.com/hnakamur/liquorice-hn
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;記事を発行:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;記事を発行&lt;/h2&gt;

&lt;p&gt;記事を書き終えて、ローカルで表示を確認したら、&lt;a href=&#34;https://github.com/hnakamur/blog&#34;&gt;hnakamur/blog&lt;/a&gt; を &lt;code&gt;git clone&lt;/code&gt; したディレクトリで以下のコマンドを実行してgithub-pages上のブログを更新します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./deploy.sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JXA (JavaScript for Automation)を使ってOSXの初期設定を半自動化してみた</title>
      <link>/blog/2015/04/06/jxa-osx-automation-with-javascript/</link>
      <pubDate>Mon, 06 Apr 2015 04:40:43 +0900</pubDate>
      
      <guid>/blog/2015/04/06/jxa-osx-automation-with-javascript/</guid>
      <description>

&lt;h2 id=&#34;概要:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;OSXを再インストールしたときなどキーボードやトラックパッドの設定を行いますが、
設定する項目が意外と多くて時間がかかります。&lt;/p&gt;

&lt;p&gt;そこでJXA (JavaScript for Automation)で自動化してみました。
全自動ではなく半自動化と書いているのはパスワードの入力などは手動で行う必要があるからです。&lt;/p&gt;

&lt;h2 id=&#34;きっかけはapplescriptのui-elementsの記事を読んだこと:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;きっかけはAppleScriptのUI elementsの記事を読んだこと&lt;/h2&gt;

&lt;p&gt;以前からAppleScriptでOSXの初期設定の自動化をやってみたかったのですが、
UI要素の調べ方がわからず諦めていました。&lt;/p&gt;

&lt;p&gt;StackOverflowの&lt;a href=&#34;http://apple.stackexchange.com/questions/40436/how-to-know-the-name-of-ui-elements-using-accessibility-inspector-or-any-other/87412#87412&#34;&gt;applescript - How to know the name of UI elements using Accessibility inspector (or any other tool) - Ask Different&lt;/a&gt;のコメントから
&lt;a href=&#34;http://n8henrie.com/2013/03/a-strategy-for-ui-scripting-in-applescript/&#34;&gt;n8henrie.com | A Strategy for UI Scripting in AppleScript&lt;/a&gt;という記事を見つけて、これがブレイクスルーになりました。&lt;/p&gt;

&lt;p&gt;で、いろいろ試していくうちにJavaScriptで書くほうがクロージャが使えて便利ということに気づいたのでJavaScriptに切り替えました。&lt;/p&gt;

&lt;p&gt;以下の記事が参考になりました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dtinth/JXA-Cookbook/wiki&#34;&gt;Home · dtinth/JXA-Cookbook Wiki · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zakuroishikuro/items/afab0e33ad2030ba2f92&#34;&gt;Macのキーボード入力、マウスクリックをJavaScriptで (JXA) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;自分用セットアップスクリプト:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;自分用セットアップスクリプト&lt;/h2&gt;

&lt;p&gt;私用のセットアップスクリプトを&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup&#34;&gt;hnakamur/my-macbook-initial-setup · GitHub&lt;/a&gt;に置きました。完全に自分仕様ですが、ライセンスはMITなので適宜変更してご利用ください。&lt;/p&gt;

&lt;h2 id=&#34;applescriptやjxaで設定している内容:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;AppleScriptやJXAで設定している内容&lt;/h2&gt;

&lt;p&gt;最初はAppleScriptで書いていたので一部はそのままです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Store経由でのXcodeのインストール&lt;/li&gt;
&lt;li&gt;Xcodeコマンドラインツールのインストール&lt;/li&gt;
&lt;li&gt;キーボードの設定

&lt;ul&gt;
&lt;li&gt;リピート率の設定&lt;/li&gt;
&lt;li&gt;ControlとCapsの入れ替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;トラックパッドの設定

&lt;ul&gt;
&lt;li&gt;使う機能と使わない機能の設定&lt;/li&gt;
&lt;li&gt;ドラッグロック設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ショートカットキーの設定

&lt;ul&gt;
&lt;li&gt;次のウィンドウのショートカットキー変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スクリーンロックのタイミング調整&lt;/li&gt;
&lt;li&gt;キーボードの入力ソースにGoogle日本語入力のひらがなを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;のショートカット追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mstarke.github.io/MacPass/&#34;&gt;MacPass&lt;/a&gt;のメニューショートカット設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;applescriptに比べてjxaが嬉しいところ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;AppleScriptに比べてJXAが嬉しいところ&lt;/h2&gt;

&lt;p&gt;上にも書きましたが、クロージャが使えるのが便利です。&lt;/p&gt;

&lt;p&gt;例えば特定の要素が出現するまで待つために以下の様な関数を定義しました。
&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isInvalidIndexError(e) {
  return e.toString() === &#39;Error: Invalid index.&#39;
}
function waitUntilSuccess(f) {
  var ret
  do {
    delay(1)
    try {
      ret = f()
    } catch (e) {
      if (!isInvalidIndexError(e)) {
        throw e
      }
    }
  } while (!ret)
  return ret
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで使用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var storeProc = Application(&#39;System Events&#39;).processes.byName(&#39;App Store&#39;)
  storeProc.frontmost = true
  var win = storeProc.windows.byName(&#39;App Store&#39;)
  // Search for Xcode
  var textField = waitUntilSuccess(function() {
    return win.toolbars[0].groups[6].textFields[0]
  })
  textField.value = &#39;Xcode&#39;
  textField.buttons[0].click()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;try catchを使わずにUI要素の存在をチェックするのは、上のように深い要素だと
面倒なので、アクセスするコードを動かしてみて &lt;code&gt;Error: Invalid index.&lt;/code&gt; の
エラーが出たら要素が存在しないと判断するようにしています。&lt;/p&gt;

&lt;h2 id=&#34;うまくいってないところ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;うまくいってないところ&lt;/h2&gt;

&lt;h3 id=&#34;sparkのショートカット追加がうまくいかないときがある:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;Sparkのショートカット追加がうまくいかないときがある&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;というアプリを使って
ショートカットを登録しておくと、キーボードの1ストロークで登録したアプリの
起動や起動済みの場合は最前面に持ってこれるので愛用しています。&lt;/p&gt;

&lt;p&gt;フリーですがソースは非公開で設定ファイル形式も不明なのでJXAで登録しています。&lt;/p&gt;

&lt;p&gt;しかし、アプリケーションのパスを選ぶところが、うまくいくときと行かない時があります。ファイル選択画面でパスを/から入力すると選べるのでその方式で実装しているのですが、 例えばFinderのパスを &lt;code&gt;/System/Library/CoreServices/Finder.app&lt;/code&gt; のように入力してreturnキーを押す操作をJXAで行うと、そのフォルダの中が開いた状態になってしまう時があります。&lt;/p&gt;

&lt;p&gt;カラムビューにすると成功するようだったので⌘3を押して切り替えるようにしてみたのですが、2秒ディレイを入れても全体を通して実行していると途中から失敗することがあります。&lt;/p&gt;

&lt;p&gt;その後run.shを書き換えてSparkのショートカット設定の部分だけ実行すると、うまくいきます。なぜ全体を通して実行した時は失敗するのかが謎です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;上記のように一部問題はありますが、大部分の操作は自動化できたので、全て手動で設定するのに比べるとずいぶん楽になりました。JXA (JavaScript for Automation)便利です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homebrew Caskを使わずにdmgファイルのアプリをコマンドでインストールする</title>
      <link>/blog/2015/04/06/install-apps-without-homebrew-cask/</link>
      <pubDate>Mon, 06 Apr 2015 00:45:50 +0900</pubDate>
      
      <guid>/blog/2015/04/06/install-apps-without-homebrew-cask/</guid>
      <description>

&lt;h2 id=&#34;なぜhomebrew-caskをやめたか:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;なぜHomebrew Caskをやめたか&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://t-wada.hatenablog.jp/entry/mac-provisioning-by-ansible&#34;&gt;Mac の開発環境構築を自動化する (2015 年初旬編) - t-wadaのブログ&lt;/a&gt;でもHomebrew Caskの不安な点について書かれていますが、私もHomebrew Caskは便利と思いつつも止めたいなと思っていました。&lt;/p&gt;

&lt;p&gt;私が使うアプリに関してはほとんどがアプリ側で最新版のお知らせとバージョンアップの仕組みを持っています。あとHomebrew Caskは/opt/homebrew-cask/以下に実体を置いて~/Applications/や/Applications/にシンボリックリンクを貼るようになっています。&lt;/p&gt;

&lt;p&gt;私はそこまで複雑な仕組みは要らないので、初期インストールがコマンドで半自動化できれば十分です。&lt;/p&gt;

&lt;h2 id=&#34;dmgファイルのアプリをコマンドラインからインストールする:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイルのアプリをコマンドラインからインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22934083/install-dmg-package-on-mac-os-from-terminal/22940943#22940943&#34;&gt;osx - Install dmg package on MAC OS from Terminal - Stack Overflow&lt;/a&gt;や&lt;a href=&#34;http://commandlinemac.blogspot.jp/2008/12/installing-dmg-application-from-command.html&#34;&gt;Command Line Mac: Installing a .dmg application from the command line&lt;/a&gt;を見て実際にやってみました。&lt;/p&gt;

&lt;p&gt;ソースは&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup&#34;&gt;hnakamur/my-macbook-initial-setup · GitHub&lt;/a&gt;にあります。&lt;/p&gt;

&lt;p&gt;以下のアプリをdmgファイルからインストールしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/splhack/macvim-kaoriya&#34;&gt;splhack/macvim-kaoriya · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://calibre-ebook.com/&#34;&gt;calibre - E-book management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.jp/chrome/browser/desktop/index.html&#34;&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mozilla.org/ja/firefox/new/&#34;&gt;Firefox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.jp/ime/&#34;&gt;Google 日本語入力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iterm2.com/&#34;&gt;iTerm2 - Mac OS Terminal Replacement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://java.com/ja/download/&#34;&gt;Java (JRE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://grandperspectiv.sourceforge.net/&#34;&gt;GrandPerspective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www-jp.mysql.com/products/workbench/&#34;&gt;MySQL Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mstarke.github.io/MacPass/&#34;&gt;MacPass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;Oracle VM VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xquartz.macosforge.org/landing/&#34;&gt;XQuartz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dmgファイルのマウントとアンマウント:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイルのマウントとアンマウント&lt;/h2&gt;

&lt;p&gt;共通の処理として、dmgファイルのマウントは &lt;code&gt;hdiutil attach&lt;/code&gt; 、アンマウントは &lt;code&gt;hdiutil detach&lt;/code&gt; コマンドで行います。&lt;/p&gt;

&lt;p&gt;マウントした時の /Volumes/〜 のディレクトリ名は &lt;code&gt;hdiutil attach&lt;/code&gt; の実行結果の最後の行から取得できます。&lt;/p&gt;

&lt;p&gt;最初は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mount_dir=`hdiutil attach $dmg_file | awk &#39;END{print $NF}&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにして最後の行の一番右のフィールドを取得していましたが、 &lt;code&gt;/Volumes/Google Chrome&lt;/code&gt; のように空白を含む場合があることがわかりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22934083/install-dmg-package-on-mac-os-from-terminal/22940943#22940943&#34;&gt;osx - Install dmg package on MAC OS from Terminal - Stack Overflow&lt;/a&gt;では第1フィールドと第2フィールドを消して第3フィールド以降にしていますが、試してみると余分な空白（実際はタブと判明）が付いてきました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hdiutil attach&lt;/code&gt; の結果をファイルに落として見てみたら、空白に加えてタブで区切られていてタブで区切るほうがシンプルなことがわかりました。&lt;/p&gt;

&lt;p&gt;そこで、以下のようにして取得するようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インストール方法のパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;インストール方法のパターン&lt;/h2&gt;

&lt;p&gt;上記のアプリの範囲では4パターンありました。&lt;/p&gt;

&lt;h3 id=&#34;dmgファイル内に-appフォルダがあるパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイル内に〜.appフォルダがあるパターン&lt;/h3&gt;

&lt;p&gt;Chromeなどがこのパターンです。&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/ditto.1.html&#34;&gt;ditto&lt;/a&gt;コマンドで/Applications/〜.appにコピーするようにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L731-L740&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L731-L740&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_google_chrome() {
  download_url=https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg
  dmg_file=${download_url##*/}

  curl -LO $download_url
  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
  sudo /usr/bin/ditto &amp;quot;$mount_dir/Google Chrome.app&amp;quot; &amp;quot;/Applications/Google Chrome.app&amp;quot;
  hdiutil detach &amp;quot;$mount_dir&amp;quot;
  rm $dmg_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dmgファイル内に-pkgのインストーラがあるパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイル内に*.pkgのインストーラがあるパターン&lt;/h3&gt;

&lt;p&gt;Google日本語入力などがこのパターンです。OSXの&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/installer.8.html&#34;&gt;installer&lt;/a&gt;コマンドでインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L742-L751&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L742-L751&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_google_japanese_input() {
  download_url=https://dl.google.com/japanese-ime/latest/GoogleJapaneseInput.dmg
  dmg_file=${download_url##*/}

  curl -LO $download_url
  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
  sudo installer -pkg $mount_dir/GoogleJapaneseInput.pkg -target /
  hdiutil detach &amp;quot;$mount_dir&amp;quot;
  rm $dmg_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dmgファイル内に独自形式のインストーラがあるパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイル内に独自形式のインストーラがあるパターン&lt;/h3&gt;

&lt;p&gt;Javaがこのパターンでした。インストーラを実行してインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L762-L772&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L762-L772&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_java() {
  download_url=http://javadl.sun.com/webapps/download/AutoDL?BundleId=105219
  dmg_file=jre.dmg

  curl -L -o $dmg_file &amp;quot;$download_url&amp;quot;
  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
  java_dir=&amp;quot;${mount_dir##*/}&amp;quot;
  sudo &amp;quot;$mount_dir/${java_dir}.app/Contents/MacOS/MacJREInstaller&amp;quot;
  hdiutil detach &amp;quot;$mount_dir&amp;quot;
  rm $dmg_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zipファイル内に-appがあるパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;zipファイル内に〜.appがあるパターン&lt;/h3&gt;

&lt;p&gt;iTerm2などがこのパターンです。unzipコマンドの-dオプションで解凍先を/Applicationsにして解凍してインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L753-L760&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L753-L760&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_iterm2() {
  download_url=https://iterm2.com/downloads/stable/iTerm2_v2_0.zip
  zip_file=${download_url##*/}

  curl -LO $download_url
  sudo unzip $zip_file -d /Applications
  rm $zip_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Homebrew Caskを使わずにコマンドラインでOSXのアプリのインストールを半自動化しました。全自動ではなく半自動化といっているのは、アプリによってパスワード入力が必要だったり、ダイアログが表示されてボタンを押す必要があるからです。&lt;/p&gt;

&lt;p&gt;アプリのバージョンが今後上がった時にダウンロードURLを再度調べる必要があるのが面倒ではありますが、OSXを一からセットアップするのはたまにしか行わないのでよしとします。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>