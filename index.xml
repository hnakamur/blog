<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hnakamur&#39;s blog</title>
    <link>https://hnakamur.github.io/blog/</link>
    <description>Recent content on hnakamur&#39;s blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-jp</language>
    <lastBuildDate>Tue, 22 Sep 2020 18:47:59 +0900</lastBuildDate>
    
	<atom:link href="https://hnakamur.github.io/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>psgreptree というコマンドラインツールを Rust で書いた</title>
      <link>https://hnakamur.github.io/blog/2020/09/22/wrote-psgreptree-in-rust/</link>
      <pubDate>Tue, 22 Sep 2020 18:47:59 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/09/22/wrote-psgreptree-in-rust/</guid>
      <description>はじめに 私は仕事で Ubuntu の物理サーバーに ssh して LC_TIME=C ps auxwwf | grep [n]ginx とか LC_TIME=C ps auxwwf | grep -E &#39;(nginx|traffic)&#39; | grep -v grep のようなコマンドを実行することがよくあります。 しかし、ヘッダ</description>
    </item>
    
    <item>
      <title>Windows10上のGlobalProtectでVPN接続後にプログラムを最上位の特権で実行する</title>
      <link>https://hnakamur.github.io/blog/2020/08/14/run-program-with-highest-runlevel-when-globalprotect-vpn-connected-on-windows10/</link>
      <pubDate>Fri, 14 Aug 2020 11:16:18 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/08/14/run-program-with-highest-runlevel-when-globalprotect-vpn-connected-on-windows10/</guid>
      <description>はじめに 勤務先で共有されているVPN用のルート追加プログラムがあるのですが、 今まではショートカットを作ってGlobalProtectでVPN</description>
    </item>
    
    <item>
      <title>Rustで書かれたUIツールキットdruid 0.6.0を試した</title>
      <link>https://hnakamur.github.io/blog/2020/08/13/tried-rust-ui-toolkit-druid-0.6.0/</link>
      <pubDate>Thu, 13 Aug 2020 19:07:20 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/08/13/tried-rust-ui-toolkit-druid-0.6.0/</guid>
      <description>はじめに Rust で書かれた UI Toolkit の OrbTk 0.3.1-alpha2 を試してみた · hnakamur&amp;rsquo;s blog の「おわりに」に書いたツールキットのうちgtk-rsとicedは試して gtk-rs 0.9.0を試した ·</description>
    </item>
    
    <item>
      <title>Rustで書かれたGUIライブラリーのicedを試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/08/11/tried-rust-gui-library-iced/</link>
      <pubDate>Tue, 11 Aug 2020 22:11:09 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/08/11/tried-rust-gui-library-iced/</guid>
      <description>はじめに Rust で書かれた UI Toolkit の OrbTk 0.3.1-alpha2 を試してみた · hnakamur&amp;rsquo;s blog の最後に書いていた hecrj/iced: A cross-platform GUI library for Rust, inspired by Elm も試してみたのでメモです。 ToDo サンプルアプリケーションを</description>
    </item>
    
    <item>
      <title>gtk-rs 0.9.0を試した</title>
      <link>https://hnakamur.github.io/blog/2020/08/10/tried-gtk-rs-0.9.0/</link>
      <pubDate>Mon, 10 Aug 2020 14:45:42 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/08/10/tried-gtk-rs-0.9.0/</guid>
      <description>はじめに gtk-rs/gtk: GTK+ 3.x bindings and wrappers for Rust 0.9.0 を試したメモです。 rustup.rs - The Rust toolchain installer はインストールしてセットアップ済みとします。 Windows 10 Building から Requirements を開いて Windows のセクションを参考</description>
    </item>
    
    <item>
      <title>Rust で書かれた UI Toolkit の OrbTk 0.3.1-alpha2 を試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/08/10/tried-rust-ui-toolkit-orbtk-0.3.1-alpha2/</link>
      <pubDate>Mon, 10 Aug 2020 07:58:44 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/08/10/tried-rust-ui-toolkit-orbtk-0.3.1-alpha2/</guid>
      <description>はじめに Rust の GUI ライブラリーを GUI — list of Rust libraries/crates // Lib.rs で見て、成熟してそうなのは gtk のようですが、 OrbTk — Rust GUI library // Lib.rs というのも気になったので試してみました。</description>
    </item>
    
    <item>
      <title>sysstatのバイナリファイルフォーマット</title>
      <link>https://hnakamur.github.io/blog/2020/08/09/sysstat-binary-file-format/</link>
      <pubDate>Sun, 09 Aug 2020 16:31:09 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/08/09/sysstat-binary-file-format/</guid>
      <description>はじめに sysstat のバイナリファイルのフォーマットを調べてみたメモです。 Documents のページを見てみましたが、ファイルフォーマットについての記述は見つけられま</description>
    </item>
    
    <item>
      <title>ksarでsysstatのメトリックをグラフで表示</title>
      <link>https://hnakamur.github.io/blog/2020/08/09/show-sysstat-metric-graph-with-ksar/</link>
      <pubDate>Sun, 09 Aug 2020 09:28:33 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/08/09/show-sysstat-metric-graph-with-ksar/</guid>
      <description>はじめに サーバーのメトリックを確認するのに sysstat の sar コマンドが便利ですが、 ksar でグラフで見るほうがさらに便利です。 ということで手順をメモしておきま</description>
    </item>
    
    <item>
      <title>Goで時刻をモックする</title>
      <link>https://hnakamur.github.io/blog/2020/08/07/mock-time-in-go/</link>
      <pubDate>Fri, 07 Aug 2020 09:56:52 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/08/07/mock-time-in-go/</guid>
      <description>はじめに 初めてこの話題を聞いたのは umeda.go #2 で発表してきた - kawaken&amp;rsquo;s blog でした（スライドは Goの時刻に関するテスト）。 その節は良いお話をありがとうございま</description>
    </item>
    
    <item>
      <title>Envoy と envoy-filter-example をビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2020/08/02/build-envoy-on-ubuntu-20.04/</link>
      <pubDate>Sun, 02 Aug 2020 15:55:58 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/08/02/build-envoy-on-ubuntu-20.04/</guid>
      <description>はじめに Sonmuさんのツイート で紹介されていた How we migrated Dropbox from Nginx to Envoy - Dropbox を読みました。 nginx や Go でプロキシーサーバーを構築することについて、ずっと気</description>
    </item>
    
    <item>
      <title>pgregory.net/rapidを使ってGoでProperty Based Testingをやってみた</title>
      <link>https://hnakamur.github.io/blog/2020/07/26/tried-go-property-based-testing-with-pgregory.net-rapid/</link>
      <pubDate>Sun, 26 Jul 2020 16:54:19 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/07/26/tried-go-property-based-testing-with-pgregory.net-rapid/</guid>
      <description>はじめに 以前から Go で Property Based Testing をやってみたいと思っていたのですが @objectxplosive さんの ツイート を見て pgregory.net/rapid package · pkg.go.dev を試してみたのでメモです。 Property Based Testing について @dgryski さんの ツ</description>
    </item>
    
    <item>
      <title>React Native for Windows &#43; macOS を試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/07/25/tried-react-native-windows-and-macos/</link>
      <pubDate>Sat, 25 Jul 2020 10:38:36 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/07/25/tried-react-native-windows-and-macos/</guid>
      <description>はじめに voluntas さんの ツイート と MS Build SK119 React Native: Build cross platform apps that target Windows, Mac, and more! - YouTube の紹介動画を見て自分でも試してみたのでメモです。 React Native for Windows 必要なソフトウェアのイン</description>
    </item>
    
    <item>
      <title>carbon-relay-ngのAggregationについてのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/06/16/carbon-relay-ng-aggregator-code-reading/</link>
      <pubDate>Tue, 16 Jun 2020 21:49:01 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/06/16/carbon-relay-ng-aggregator-code-reading/</guid>
      <description>はじめに grafana/carbon-relay-ng: Fast carbon relay+aggregator with admin interfaces for making changes online - production ready の aggregator/aggregator.go と aggregator/processor.go あたりのコードを読んだメモです。 今回の焦点は Sum の実装とその使われ方です。 Sum 構造体の定義 aggregator/processor.go#L282-L301 // Sum aggregates to</description>
    </item>
    
    <item>
      <title>Ubuntu 20.04 LTS デスクトップでのfcitxとMozcの設定手順</title>
      <link>https://hnakamur.github.io/blog/2020/06/11/setup-fcitx-mozc-on-ubuntu-20.04-desktop/</link>
      <pubDate>Thu, 11 Jun 2020 15:56:12 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/06/11/setup-fcitx-mozc-on-ubuntu-20.04-desktop/</guid>
      <description>例によって自分用メモです。 英語キーボードを使っていて、言語は英語でインストールした想定です。 キーボードのCapsLockとCtrl入れ替え sudo</description>
    </item>
    
    <item>
      <title>WSL2のUbuntuでsystemdとsnapdとLXDとdockerを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2020/05/30/run-systemd-snapd-and-lxd-on-wsl2-ubuntu/</link>
      <pubDate>Sat, 30 May 2020 15:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/05/30/run-systemd-snapd-and-lxd-on-wsl2-ubuntu/</guid>
      <description>はじめに WSL2のUbuntuとDocker Desktop for Windowsを試してみた · hnakamur&amp;rsquo;s blog で Docker は動いたので、次は LXD を動かそうと調べました。 すると WSL2 では</description>
    </item>
    
    <item>
      <title>KeePassとKeeAgentでWSL2用にssh-agentを動かす</title>
      <link>https://hnakamur.github.io/blog/2020/05/29/run-ssh-agent-with-keepass-and-keeagent-for-wsl2/</link>
      <pubDate>Fri, 29 May 2020 19:59:34 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/05/29/run-ssh-agent-with-keepass-and-keeagent-for-wsl2/</guid>
      <description>はじめに wsl-ssh-agentでWindows Subsystem for LinuxからWindowsのssh-agentを使う設定手順 · hnakamur&amp;rsquo;s blog は快適だったのです</description>
    </item>
    
    <item>
      <title>WSL2のUbuntuとDocker Desktop for Windowsを試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/05/28/setup-wsl2-ubuntu-and-docker-desktop-for-windows/</link>
      <pubDate>Thu, 28 May 2020 19:46:07 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/05/28/setup-wsl2-ubuntu-and-docker-desktop-for-windows/</guid>
      <description>Docker Desktop for Windows を使わない方法もあります （2020-05-31 追記） WSL2のUbuntuでsystemdとsnapdとLXDを動かしてみた · hnakamur&amp;rsquo;s blog の</description>
    </item>
    
    <item>
      <title>macOSのpfでGlobalProtect用にNATを設定する</title>
      <link>https://hnakamur.github.io/blog/2020/05/25/setup-nat-with-macos-pf-for-globalprotect/</link>
      <pubDate>Mon, 25 May 2020 14:57:27 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/05/25/setup-nat-with-macos-pf-for-globalprotect/</guid>
      <description>はじめに macOS で GlobalProtect - Palo Alto Networks でVPNに接続した際に Multipass で作成したHypervisor.frameworkベースのVMとそのVM上のLXDコンテナから</description>
    </item>
    
    <item>
      <title>macOSでHypervisor.frameworkのVMのサブネットIPアドレスを変える</title>
      <link>https://hnakamur.github.io/blog/2020/05/25/change-macos-hypervisor.framework-vm-subnet-ip-address/</link>
      <pubDate>Mon, 25 May 2020 14:10:55 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/05/25/change-macos-hypervisor.framework-vm-subnet-ip-address/</guid>
      <description>はじめに Troubleshooting networking on macOS | Multipass documentation に Hypervisor.framework のVMのIPアドレスの変更方法が書いてあるのを見つけて試してみたのでメモ。 multipass のVM停止 multipass stop vmnet の設定変更 /Library/Preferences/SystemConfiguration/com.apple.vmnet.plist という設定</description>
    </item>
    
    <item>
      <title>Windows Terminalの私の設定</title>
      <link>https://hnakamur.github.io/blog/2020/05/16/my-settings-for-windows-terminal/</link>
      <pubDate>Sat, 16 May 2020 21:25:21 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/05/16/my-settings-for-windows-terminal/</guid>
      <description>Windows Terminal のインストール Windows Terminal User Documentation を見ると Windows Terminal は Microsoft Store からインストール可能です。 私は Releases · microsoft/terminal の Assets からインストーラをダウンロードしてインストールしています</description>
    </item>
    
    <item>
      <title>OpenSSLのSSL_sendfileとパッチを当てたnginxでLinuxのkTLSを試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/04/29/tried-ssl_sendfile-with-openssl-and-nginx/</link>
      <pubDate>Wed, 29 Apr 2020 17:51:58 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/04/29/tried-ssl_sendfile-with-openssl-and-nginx/</guid>
      <description>試したきっかけ Can a Rust web server beat nginx in serving static files? : rust に以下のようなコメントがありました。 nginx は sendfile を使っているが TLS では使えない。 Netflix は FreeBSD カーネルにパッチを当て</description>
    </item>
    
    <item>
      <title>ルートパーティションをZFSにしてUbuntu 20.04 LTSをインストールしてみた</title>
      <link>https://hnakamur.github.io/blog/2020/04/26/ubuntu-20.04-root-on-zfs/</link>
      <pubDate>Sun, 26 Apr 2020 15:13:33 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/04/26/ubuntu-20.04-root-on-zfs/</guid>
      <description>はじめに 実はルートパーティションをZFSにするのは以前から試してみたいと思っていました。 Trying Out Ubuntu 20.04 With ZFS + Zsys Automated APT Snapshots - Phoronix をみて Ubuntu 20.04 LTS のデスクトップ</description>
    </item>
    
    <item>
      <title>gbpとsbuildとPPAでUbuntu 20.04 LTS用のdebパッケージをビルド</title>
      <link>https://hnakamur.github.io/blog/2020/04/24/build-deb-for-ubuntu-focal-with-gbp-sbuild-ppa/</link>
      <pubDate>Fri, 24 Apr 2020 19:49:58 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/04/24/build-deb-for-ubuntu-focal-with-gbp-sbuild-ppa/</guid>
      <description>はじめに このブログの過去記事でも書いたように（とっちらかってますが、いつか整理したい）、私は git-buildpackage と sbuild と PPA で Ubuntu 18.04 LTS (以下 bionic と略) 用のカスタム deb パ</description>
    </item>
    
    <item>
      <title>xmllintコマンドでのXMLスキーマを使ったバリデーションのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/04/12/xmllint-schema-validation-code-reading/</link>
      <pubDate>Sun, 12 Apr 2020 11:40:04 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/04/12/xmllint-schema-validation-code-reading/</guid>
      <description>はじめに SAML Security · OWASP Cheat Sheet Series の Validate Signatures を見ると、SAMLのXMLはローカルに置いた信頼できるスキーマファイルでバリデートせよと書かれています。 そこで実</description>
    </item>
    
    <item>
      <title>io_uringのサンプルを試してみた</title>
      <link>https://hnakamur.github.io/blog/2020/04/07/tried_io_uring_example/</link>
      <pubDate>Tue, 07 Apr 2020 17:34:14 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/04/07/tried_io_uring_example/</guid>
      <description>はじめに io_uring について以下の素晴らしい入門記事を知ったので試してみたメモです。 io_uring By Example: An Article Series - Unixism io_uring by example: Part 1 - Introduction - Unixism io_uring By Example: Part 2 - Queuing multiple requests - Unixism io_uring By Example: Part 3</description>
    </item>
    
    <item>
      <title>fsyncを使うようにビルドしたLMDBのdebパッケージを作った</title>
      <link>https://hnakamur.github.io/blog/2020/03/31/lmdb-deb-built-with-fsync/</link>
      <pubDate>Tue, 31 Mar 2020 20:46:39 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/03/31/lmdb-deb-built-with-fsync/</guid>
      <description>はじめに Introducing Quicksilver: Configuration Distribution at Internet Scale で LMDB というキーバリューストアを知ったので、いろいろ調査したメモ。 Cloudflare での LMDB の使い方 上の記事によると Cloudflare で DNS 用のデータストア</description>
    </item>
    
    <item>
      <title>LuaJIT FFIでモジュールを書く時のハウツー</title>
      <link>https://hnakamur.github.io/blog/2020/03/21/how-to-write-luajit-ffi-module/</link>
      <pubDate>Sat, 21 Mar 2020 23:10:18 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/03/21/how-to-write-luajit-ffi-module/</guid>
      <description>はじめに XMLSecでの証明書検証のコードリーディング · hnakamur&amp;rsquo;s blog の結果を元に hnakamur/nginx-lua-saml-service-provider で SAML レスポンスを検証する処理を外部コマンド呼び出し方式から LuaJIT FFI での</description>
    </item>
    
    <item>
      <title>XMLSecでの証明書検証のコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/03/17/xmlsec-verify-code-reading/</link>
      <pubDate>Tue, 17 Mar 2020 20:01:08 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/03/17/xmlsec-verify-code-reading/</guid>
      <description>はじめに nginx luaでSAMLのService Providerを作ってみた · hnakamur&amp;rsquo;s blog の hnakamur/nginx-lua-saml-service-provider ですがレスポンスのXMLを検証する処理は非同期ではなく同期的</description>
    </item>
    
    <item>
      <title>wsl-ssh-agentでWindows Subsystem for LinuxからWindowsのssh-agentを使う設定手順</title>
      <link>https://hnakamur.github.io/blog/2020/03/06/setup-wsl-ssh-agent/</link>
      <pubDate>Fri, 06 Mar 2020 18:48:43 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/03/06/setup-wsl-ssh-agent/</guid>
      <description>はじめに Windows 10 に OpenSSH クライアントをインストール · hnakamur&amp;rsquo;s blog で Windows の ssh-agent を使いだしてから Windows Subsystem for Linux （以下WSLと略）からも使いたいと思うようになりました。 調べ</description>
    </item>
    
    <item>
      <title>tmuxで複数サーバー同時オペレーションのセッション共有</title>
      <link>https://hnakamur.github.io/blog/2020/03/05/tmux-multi-ssh-share-script/</link>
      <pubDate>Thu, 05 Mar 2020 18:00:51 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/03/05/tmux-multi-ssh-share-script/</guid>
      <description>はじめに 職場で tmuxで複数サーバの同時オペレーション – NaviPlus Engineers&amp;rsquo; Blog のスクリプトを使わせて頂いているのですが、リモートワークに伴って他のユーザーの</description>
    </item>
    
    <item>
      <title>BadgerのErrConflictについて</title>
      <link>https://hnakamur.github.io/blog/2020/02/29/badger-errconflict/</link>
      <pubDate>Sat, 29 Feb 2020 16:34:32 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/02/29/badger-errconflict/</guid>
      <description>はじめに badger の README.md の Read-write transactions に ErrConflict について以下のように説明があります。 An ErrConflict error will be reported in case of a conflict. Depending on the state of your application, you have the option to retry the operation if you receive this error. 一方 DB の NewWriteBatch メソッド</description>
    </item>
    
    <item>
      <title>BadgerのErrTxnTooBigについて</title>
      <link>https://hnakamur.github.io/blog/2020/02/29/badger-errtxntoobig/</link>
      <pubDate>Sat, 29 Feb 2020 15:44:41 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/02/29/badger-errtxntoobig/</guid>
      <description>はじめに badgerのREADME の Read-write transactions に Badger の ErrTxnTooBig について以下のような説明がありました。 An ErrTxnTooBig will be reported in case the number of pending writes/deletes in the transaction exceeds a certain limit. In that case, it is best to commit</description>
    </item>
    
    <item>
      <title>Hyper-VとmultipassでUbuntu VMを起動してcloud-initで初期化する手順</title>
      <link>https://hnakamur.github.io/blog/2020/02/22/ubuntu-cloud-init-hyper-v-multipass/</link>
      <pubDate>Sat, 22 Feb 2020 23:45:32 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/02/22/ubuntu-cloud-init-hyper-v-multipass/</guid>
      <description>Windows では multipass から Hyper-V に移行してました 仮想マシンマネージャmultipassをWindowsとmacOSで試してみた hnakamur&amp;rsquo;s blog を書いた後しばらく使っていま</description>
    </item>
    
    <item>
      <title>PowerShellでZIPファイルを解凍する</title>
      <link>https://hnakamur.github.io/blog/2020/02/22/extract-zip-on-powershell/</link>
      <pubDate>Sat, 22 Feb 2020 23:30:22 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/02/22/extract-zip-on-powershell/</guid>
      <description>PowerShell の Expand-Archive で ZIP ファイルを解凍 逆引き！PowerShellで圧縮ファイル(ZIP)の解凍する方法【Expand-Archive】 | 【ﾁｪｼｬわら】</description>
    </item>
    
    <item>
      <title>Windows 10 に OpenSSH クライアントをインストール</title>
      <link>https://hnakamur.github.io/blog/2020/02/22/install-openssh-client-to-windows10/</link>
      <pubDate>Sat, 22 Feb 2020 23:08:54 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/02/22/install-openssh-client-to-windows10/</guid>
      <description>はじめに Windows Subsystem for Linux で ssh クライアントをしばらく使っていたのですが、 Windows 10にオンデマンド機能のOpenSSHサーバをインストールする方法：企業ユー</description>
    </item>
    
    <item>
      <title>PowershellでEmacsライクなキーバインドを使う</title>
      <link>https://hnakamur.github.io/blog/2020/02/22/powershell-emacs-like-keybindings/</link>
      <pubDate>Sat, 22 Feb 2020 22:09:32 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/02/22/powershell-emacs-like-keybindings/</guid>
      <description>はじめに PSReadLine で PowerShell を bash のキーバインドにする - Qiita と PowerShellのキーバインドをEmacs風にする【PSReadLine】 - メモ.org を参</description>
    </item>
    
    <item>
      <title>Linuxのvm_swapinessについてコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/2020/02/16/linux-vm-swappiness-code-reading/</link>
      <pubDate>Sun, 16 Feb 2020 20:10:48 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/02/16/linux-vm-swappiness-code-reading/</guid>
      <description>はじめに スワップの弁護：よくある誤解を解く と 大規模システムでの Linux のメモリ管理 を読んで Linux のスワップについて理解を深めたところで、実際のコードを</description>
    </item>
    
    <item>
      <title>bboltのフリーリストのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/01/03/bbolt-freelist-code-reading/</link>
      <pubDate>Fri, 03 Jan 2020 20:21:58 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/01/03/bbolt-freelist-code-reading/</guid>
      <description>freelist 型と関連する型 freelist.go#L9-L36 // txPending holds a list of pgids and corresponding allocation txns // that are pending to be freed. type txPending struct { ids []pgid alloctx []txid // txids allocating the ids lastReleaseBegin txid // beginning txid of last matching releaseRange } // pidSet holds the set of starting pgids which have the same span size type pidSet map[pgid]struct{} // freelist represents</description>
    </item>
    
    <item>
      <title>bboltのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2020/01/02/bbolt-code-reading/</link>
      <pubDate>Thu, 02 Jan 2020 11:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2020/01/02/bbolt-code-reading/</guid>
      <description>はじめに etcd-io/bbolt: An embedded key/value database for Go. は B+Tree を使った Go で書かれたキーバリューストアです。 Project Status を見ると開発のフェーズとしては安定期に入っていて、 API、ファイル</description>
    </item>
    
    <item>
      <title>VictoriaMetricsのデータディレクトリ構造</title>
      <link>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-data-directory-structure/</link>
      <pubDate>Mon, 30 Dec 2019 16:19:41 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-data-directory-structure/</guid>
      <description>VictoriaMatricsのデータディレクトリの例 sudo tree -F /var/lib/viectoriametrics で調べたVictoriaMetricsのデータディレクトリ構造の例を以下に示し</description>
    </item>
    
    <item>
      <title>VictoriaMetrics/fastcacheのコードリーディングその2</title>
      <link>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part2/</link>
      <pubDate>Mon, 30 Dec 2019 05:11:55 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part2/</guid>
      <description>はじめに VictoriMetrics/fastcacheのコードリーディングその1 の後、新しいコミットが入っていたので今回の対象は 2dd9480 です。 今</description>
    </item>
    
    <item>
      <title>VictoriaMetrics/fastcacheのコードリーディングその1</title>
      <link>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part1/</link>
      <pubDate>Mon, 30 Dec 2019 01:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/30/victoriametrics-fastcache-code-reading-part1/</guid>
      <description>はじめに VictoriaMetrics/fastcache のコードリーディングのメモです。対象バージョンはこの記事を書いた時点の最新コミット c9a5939 です。 仕様 VictoriaMetrics/fastcache は VictoriaMetrics/VictoriaMetrics のメトリクス名の管理に使ってい</description>
    </item>
    
    <item>
      <title>VictoriMetrics/fastcacheによるGoのGC負荷の回避方法</title>
      <link>https://hnakamur.github.io/blog/2019/12/29/victoriametrics-fastcache/</link>
      <pubDate>Sun, 29 Dec 2019 16:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/29/victoriametrics-fastcache/</guid>
      <description>背景 VictoriaMetrics で foo.bar.baz といったメトリクス名からIDへのマッピングは VictoriaMetrics/fastcache というキーバリューストアで保管されています。ということで調査したメモ。 ベンチマーク ベ</description>
    </item>
    
    <item>
      <title>cgoとunsafeについてのメモ</title>
      <link>https://hnakamur.github.io/blog/2019/12/29/cgo-and-unsafe/</link>
      <pubDate>Sun, 29 Dec 2019 03:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/29/cgo-and-unsafe/</guid>
      <description>背景 まず大前提として cgo や unsafe を使ったプログラムは Go の将来のバージョンで動く保証がないので極力避けるべきです（unsafeについてはGo 1 and the Future</description>
    </item>
    
    <item>
      <title>VictoriaMetricsのクエリのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2019/12/24/victoria-metrics-query-code-reading/</link>
      <pubDate>Tue, 24 Dec 2019 08:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/24/victoria-metrics-query-code-reading/</guid>
      <description>VictoriaMetrics/VictoriaMetrics: VictoriaMetrics - fast, cost-effective and scalable time series database, long-term remote storage for Prometheus の v1.31.2 のコードリーディングのメモ。 今回は Prometheus QL 互換のクエリ回りを見る。 メイン メインのリクエストハンドラ。 app/victoria-metrics/main.go#L52-L63 func requestHandler(w http.ResponseWriter, r</description>
    </item>
    
    <item>
      <title>VictoriaMetricsにgraphite形式でデータ投入のコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2019/12/23/victoria-metrics-code-reading/</link>
      <pubDate>Mon, 23 Dec 2019 22:55:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/23/victoria-metrics-code-reading/</guid>
      <description>VictoriaMetrics/VictoriaMetrics: VictoriaMetrics - fast, cost-effective and scalable time series database, long-term remote storage for Prometheus の v1.31.2 のコードリーディングのメモ。 graphite 形式で投入したデータがどう格納されるかを調べたい。 app/vminsert/graphite パッケージの serveTCP 関数から insertHandler</description>
    </item>
    
    <item>
      <title>tcpdumpとss -antpを同時に実行するシェルスクリプトの例</title>
      <link>https://hnakamur.github.io/blog/2019/12/23/tcpdump-and-ss-script/</link>
      <pubDate>Mon, 23 Dec 2019 22:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/23/tcpdump-and-ss-script/</guid>
      <description>仕事で調査の時に書いた tcpdump と ss -antp を同時に実行するスクリプトの例をメモ。 tcpdump で複数のポートを調べたいときはtcpdumpを複数起動せずにportを</description>
    </item>
    
    <item>
      <title>VictoriaMetricsのインストール</title>
      <link>https://hnakamur.github.io/blog/2019/12/23/install-victoria-metrics/</link>
      <pubDate>Mon, 23 Dec 2019 00:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/23/install-victoria-metrics/</guid>
      <description>参考: github.com/VictoriaMetrics/VictoriaMetrics の production build 予め Downloads - The Go Programming Language の手順で Go の最新版をインストールしておきます。 VictoriaMetrics の git レポジトリを clone して最新版のリリースに切り替えます。 git clone https://github.com/VictoriaMetrics/VictoriaMetrics cd</description>
    </item>
    
    <item>
      <title>aptでgrafanaをインストール</title>
      <link>https://hnakamur.github.io/blog/2019/12/22/install-grafana-via-apt/</link>
      <pubDate>Sun, 22 Dec 2019 23:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/22/install-grafana-via-apt/</guid>
      <description>参考: Install on Debian/Ubuntu | Grafana Labs grafana の apt レポジトリの GPG 鍵を追加します。 curl -sSL https://packages.grafana.com/gpg.key | sudo apt-key add - apt-transport-https をまだ入れていない場合はインストールします。 sudo apt -y install apt-transport-https apt line を追加しま</description>
    </item>
    
    <item>
      <title>DockerでZFSストレージドライバを使う</title>
      <link>https://hnakamur.github.io/blog/2019/12/21/configure-docker-with-zfs/</link>
      <pubDate>Sat, 21 Dec 2019 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/12/21/configure-docker-with-zfs/</guid>
      <description>参考: Use the ZFS storage driver | Docker Documentation /var/lib/docker を /var/lib/docker.bak にリネームして /var/lib/docker を作り直しパーミションを合わせます。 sudo mv /var/lib/docker{,.bak} sudo mkdir /var/lib/docker sudo 711 /var/lib/docker 以下では tank1 というボリュームが既にある想定で</description>
    </item>
    
    <item>
      <title>CoreDNSをWindowsのサービスとして登録するためのラッパをGoで書いてみた</title>
      <link>https://hnakamur.github.io/blog/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</link>
      <pubDate>Wed, 30 Oct 2019 15:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</guid>
      <description>はじめに Windows の Hyper-V の Linux 上でサーバサイドの開発をしていると Windows 上のウェブブラウザや Windows Subsystem for Linux の curl からアクセスする際に好みの FQDN でアクセスできるようにした</description>
    </item>
    
    <item>
      <title>Hyper-VのWindows NAT機能を使ってVMのIPアドレスを固定</title>
      <link>https://hnakamur.github.io/blog/2019/10/29/static-ip-address-with-hyper-v-nat/</link>
      <pubDate>Tue, 29 Oct 2019 12:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/10/29/static-ip-address-with-hyper-v-nat/</guid>
      <description>はじめに multipassでVMを作成すると vEthernet (Default Switch) という仮想イーサネットアダプタが使用されますが、Windowsの再起動のたびにIPアドレス</description>
    </item>
    
    <item>
      <title>multipassのVM作成時にcloud-initでLXDをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2019/10/21/setup-lxd-on-multipass-using-cloud-init/</link>
      <pubDate>Mon, 21 Oct 2019 06:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/10/21/setup-lxd-on-multipass-using-cloud-init/</guid>
      <description>はじめに multipass ではVMの作成時に multipass launch の --cloud-init オプションで cloud-init を使って初期化を行えます。 LXD をセットアップする手順を試行錯誤したのでメモです。 参考資料 cloud-init の</description>
    </item>
    
    <item>
      <title>multipassのVMにsshで接続</title>
      <link>https://hnakamur.github.io/blog/2019/10/21/access-multipass-vm-via-ssh/</link>
      <pubDate>Mon, 21 Oct 2019 06:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/10/21/access-multipass-vm-via-ssh/</guid>
      <description>はじめに multipass shell サブコマンドでmultipassで作成したVMにアクセスできますが、ホストから ssh したいケースもあります。 というわけでセットアップ</description>
    </item>
    
    <item>
      <title>仮想マシンマネージャmultipassをWindowsとmacOSで試してみた</title>
      <link>https://hnakamur.github.io/blog/2019/10/17/multipass-on-windows-and-macos/</link>
      <pubDate>Thu, 17 Oct 2019 06:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/10/17/multipass-on-windows-and-macos/</guid>
      <description>はじめに multipass は私は Linux で Snapcraft - Snaps are universal Linux packages のチュートリアルで snap パッケージを作ってみた時にインストールされたのが初めての出会いでしたが、その時はなんか</description>
    </item>
    
    <item>
      <title>LXDでUbuntuコンテナにロケールとタイムゾーンを設定するプロファイル</title>
      <link>https://hnakamur.github.io/blog/2019/08/15/lxd-profile-to-set-locale-and-timezone-to-ubuntu-container/</link>
      <pubDate>Thu, 15 Aug 2019 12:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/08/15/lxd-profile-to-set-locale-and-timezone-to-ubuntu-container/</guid>
      <description>はじめに How to preconfigure LXD containers with cloud-init – Mi blog lah! に cloud-init を使って Ubuntu コンテナの初期化時にロケールとタイムゾーンを設定する方法が紹介されていたのでメモしておきます。 Ubuntu</description>
    </item>
    
    <item>
      <title>LXDでコンテナの初期化に使われるテンプレート</title>
      <link>https://hnakamur.github.io/blog/2019/08/15/lxd-container-temlates/</link>
      <pubDate>Thu, 15 Aug 2019 11:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/08/15/lxd-container-temlates/</guid>
      <description>はじめに Custom network configuration with cloud-init - LXD - system container manager に説明がありますが、LXDのコンテナイメージにはいくつかのテンプレートファイルがメタデータとして含まれていて、</description>
    </item>
    
    <item>
      <title>Goで書き込み中のファイルをHTTPレスポンスとして返す</title>
      <link>https://hnakamur.github.io/blog/2019/01/31/serve-file-as-http-response-while-writing-in-go/</link>
      <pubDate>Thu, 31 Jan 2019 11:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2019/01/31/serve-file-as-http-response-while-writing-in-go/</guid>
      <description>はじめに Goで別のgoroutineで書き込み中のファイルをHTTPレスポンスとして返せないかなと思って試行錯誤してみたところ、出来たのでメ</description>
    </item>
    
    <item>
      <title>PXEブートでVyOSをインストール</title>
      <link>https://hnakamur.github.io/blog/2018/10/08/install-vyos-with-pxe-boot/</link>
      <pubDate>Mon, 08 Oct 2018 18:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/10/08/install-vyos-with-pxe-boot/</guid>
      <description>はじめに 半年前くらいに yamamasa23 さんの真似して中古で買った Quad Beagle ZG に PXE ブートで VyOS をインストールしてみたメモです。 手順は PXE - VyOS Wiki を参考にしました。 私は EdgeRouter-Lite</description>
    </item>
    
    <item>
      <title>nginx luaでSAMLのService Providerを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2018/07/31/saml-service-provider-with-nginx-lua/</link>
      <pubDate>Tue, 31 Jul 2018 10:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/07/31/saml-service-provider-with-nginx-lua/</guid>
      <description>はじめに nginxとshibbolethでSAML2のシングルサインオンを試してみた では Service Provider – Shibboleth Consortium を使いましたが、汎用的な分、設定方法のドキ</description>
    </item>
    
    <item>
      <title>macOS→VagrantのUbuntu→LXDコンテナへのポートフォワーディング</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-macos-vagrant-lxd/</link>
      <pubDate>Thu, 05 Jul 2018 16:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-macos-vagrant-lxd/</guid>
      <description>はじめに VagrantでUbuntu 18.04 LTSとLXDをインストールする手順 で構築したLXDの環境で、macOS→VagrantのUbuntu</description>
    </item>
    
    <item>
      <title>VagrantでUbuntu 18.04 LTSとLXDをインストールする手順</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/</link>
      <pubDate>Thu, 05 Jul 2018 15:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/</guid>
      <description>はじめに 私自身は職場でも自宅でも Ubuntu MATE 18.04 LTS を使っていてVagrantはもう使っていません。 ですが職場の同僚が macOS を使っていてLXDの環境をセット</description>
    </item>
    
    <item>
      <title>LXDのコンテナイメージのエクスポート・インポート</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/export-and-import-lxd-container-image/</link>
      <pubDate>Thu, 05 Jul 2018 14:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/07/05/export-and-import-lxd-container-image/</guid>
      <description>はじめに nginxとshibbolethでSAML2のシングルサインオンを試してみた で使ったCentOS7のLXDコンテナのイメージをエクス</description>
    </item>
    
    <item>
      <title>LXDのproxyを使ってポートフォワーディング</title>
      <link>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-using-lxd-proxy/</link>
      <pubDate>Thu, 05 Jul 2018 08:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/07/05/port-forwarding-using-lxd-proxy/</guid>
      <description>はじめに LXDのコンテナでnginxを動かして、ホストからChromeなどのブラウザでアクセスしたいことがよくあります。 LXDのイシューを見</description>
    </item>
    
    <item>
      <title>nginxとshibbolethでSAML2のシングルサインオンを試してみた</title>
      <link>https://hnakamur.github.io/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</link>
      <pubDate>Wed, 04 Jul 2018 16:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</guid>
      <description>はじめに 勤務先でSAML2のシングルサインオンについて調査していたところ Is this module compatible with SAML 2 in HTTP POST mode? · Issue #16 · nginx-shib/nginx-http-shibboleth というイシューを見つけました。 この nginx-http-shibboleth</description>
    </item>
    
    <item>
      <title>go-carbonのdebパッケージをsbuildとPPAでビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</link>
      <pubDate>Fri, 15 Jun 2018 10:55:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</guid>
      <description>はじめに lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister のdebパッケージをsbuildとPPAでビルドしたときのメモです。 成果物は以下に有ります。 PPA: go-carbon : Hiroaki Nakamura d</description>
    </item>
    
    <item>
      <title>sbuildで外部レポジトリを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</link>
      <pubDate>Fri, 15 Jun 2018 10:12:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/15/use-extra-repository-in-sbuild/</guid>
      <description>はじめに 外部レポジトリのdebパッケージに依存したdebパッケージをsbuildでビルドするための手順メモです。 以下の2つの方法がありますが</description>
    </item>
    
    <item>
      <title>PPAでのビルドの予行演習にsbuildを使う</title>
      <link>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</link>
      <pubDate>Wed, 13 Jun 2018 18:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</guid>
      <description>はじめに PPAでビルドする前に手元でビルドが通ることを確認したくてpbuilderを使っていましたが、pbuilderではビルドが通るのにP</description>
    </item>
    
    <item>
      <title>universal-ctagsのUbuntu 18.04 LTS用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Fri, 08 Jun 2018 00:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</guid>
      <description>はじめに ctagsというと Ubuntu 18.04 LTS には exuberant-ctags (1:5.9~svn20110310-11) というパッケージがあります。ですが、バージョン番号のsvnの後の日付が2011年とあるようにかなり古</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTSでsbuildをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</link>
      <pubDate>Thu, 07 Jun 2018 21:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</guid>
      <description>はじめに 手元でpbuilderでdebパッケージのビルドが通ってからPPAでビルドしたらテストの1つがエラーになるという問題が起きてしまい、</description>
    </item>
    
    <item>
      <title>nginxのコードリーディングにrtagsを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</link>
      <pubDate>Wed, 23 May 2018 22:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/23/use-rtags-for-nginx-code-reading/</guid>
      <description>はじめに Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した で作成したrtagsを使ってnginxのコードリーディングをするための手順メモで</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Wed, 23 May 2018 14:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</guid>
      <description>はじめに rtagsのdebパッケージを作成した のときのメモを端折りすぎて、Ubuntu 18.04 LTS用に rtags 2.18のパッケージを作ろうと思ったら苦</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTSにSlack 3.2.0-beta.2をインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/22/install-slack-3.2.0-beta.2-on-ubuntu-18.04-lts/</link>
      <pubDate>Tue, 22 May 2018 15:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/22/install-slack-3.2.0-beta.2-on-ubuntu-18.04-lts/</guid>
      <description>はじめに Ubuntu MATE 18.04 LTSにSlack 3.2.0-beta.2をインストールしたときのメモです。 snapパッケージでのインストール Linux版 Slack (</description>
    </item>
    
    <item>
      <title>Ubuntuのデスクトップ環境でsshのパスフレーズ入力を1回だけにする</title>
      <link>https://hnakamur.github.io/blog/2018/05/21/input-ssh-passphrase-only-once-on-ubuntu-desktop/</link>
      <pubDate>Mon, 21 May 2018 16:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/21/input-ssh-passphrase-only-once-on-ubuntu-desktop/</guid>
      <description>Ubuntuのデスクトップ環境でssh-agentを使ってsshのパスフレーズ入力を1回だけで良いようにするための設定メモです。 といっても、</description>
    </item>
    
    <item>
      <title>ClamAVをUbuntu MATE 18.04 LTSにセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/05/21/setup-clamav-on-ubuntu-mate-18.04-lts/</link>
      <pubDate>Mon, 21 May 2018 15:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/21/setup-clamav-on-ubuntu-mate-18.04-lts/</guid>
      <description>はじめに Ubuntu MATE 18.04 LTSの環境にオープンソースのアンチウィルスソフト ClamAV をセットアップしてみたメモです。例によっていろいろ試行錯誤した後に思い出し</description>
    </item>
    
    <item>
      <title>Ubuntu MATE 18.04 LTSの私用設定メモ</title>
      <link>https://hnakamur.github.io/blog/2018/05/21/my-settings-on-ubunt-mate/</link>
      <pubDate>Mon, 21 May 2018 12:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/21/my-settings-on-ubunt-mate/</guid>
      <description>はじめに USキーボードのThinkPad T480sとThinkPad X260にUbuntu MATE 18.04 LTSをセットアップしました。ということで自分</description>
    </item>
    
    <item>
      <title>debパッケージを使ってnginxモジュールをビルド・デバッグする</title>
      <link>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</link>
      <pubDate>Thu, 10 May 2018 09:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/10/build-and-debug-nginx-module-using-deb-package/</guid>
      <description>はじめに 私は 私のnginxのカスタムrpmとdebをビルドする手順 でサードパーティモジュールを含んだnginxのパッケージをビルドしています</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04でVPN切断後にホスト名解決が動くようにするための回避策</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/workaround-to-get-dns-working-after-vpn-disconnection-on-ubuntu-18.04/</link>
      <pubDate>Sun, 06 May 2018 20:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/06/workaround-to-get-dns-working-after-vpn-disconnection-on-ubuntu-18.04/</guid>
      <description>はじめに Ubuntu 17.10でL2TPのVPN接続を試してみた でVPN切断後にホスト名解決が動かなくなるのでWifiを一旦オフにしてオンにしていたの</description>
    </item>
    
    <item>
      <title>Ubuntuでsnapを使って最新バージョンのgoをインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</link>
      <pubDate>Sun, 06 May 2018 15:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</guid>
      <description>結論 私が今後あちこちの環境でインストールすることになるので結論を先にメモしておきます。 Ubuntuでsnapを使ってgo 1.10.xの最新版</description>
    </item>
    
    <item>
      <title>GNOME上でEmacsライクなキーバインディングを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/use-emacs-like-keybindings-on-gnome/</link>
      <pubDate>Sun, 06 May 2018 14:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/06/use-emacs-like-keybindings-on-gnome/</guid>
      <description>はじめに 元々macOSのChromeでURL欄を編集するときにEmacsライクなキーバインディングを使うのに慣れていたので、GNOMEのCh</description>
    </item>
    
    <item>
      <title>MacBook Pro上のUbuntu 18.04でサスペンドが動くようにする</title>
      <link>https://hnakamur.github.io/blog/2018/05/06/make-suspend-working-in-ubuntu-18.04-on-macbook-pro/</link>
      <pubDate>Sun, 06 May 2018 09:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/06/make-suspend-working-in-ubuntu-18.04-on-macbook-pro/</guid>
      <description>はじめに MacBook Pro 15-inch, Mid 2012 (機種ID: MacBookPro10,1)にUbuntu 18.04をインストールしてみたのですが、動かしたまま画面を閉じる</description>
    </item>
    
    <item>
      <title>GNOMEの端末でssh-addを自動実行</title>
      <link>https://hnakamur.github.io/blog/2018/05/05/run-ssh-add-on-gnome-terminal/</link>
      <pubDate>Sat, 05 May 2018 00:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/05/run-ssh-add-on-gnome-terminal/</guid>
      <description>はじめに UbuntuのGNOME環境では「自動起動するアプリケーションの設定」でSSH鍵エージェントが設定されています。 端末を起動したときに</description>
    </item>
    
    <item>
      <title>GNOME Shellの時刻表示に日付や秒を表示</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/display-date-and-seconds-on-gnome-shell/</link>
      <pubDate>Fri, 04 May 2018 21:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/04/display-date-and-seconds-on-gnome-shell/</guid>
      <description>はじめに How do I change the date format in Gnome 3 shell? - Ask Ubuntu を参考にしました。 日本語環境の場合デフォルトでは「金曜日 21 : 32」のようになっていました。 日付を表示 以下</description>
    </item>
    
    <item>
      <title>pbuilderで特定のディストリビューションのchroot環境を作成</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/create-pbuilder-chroot-of-specified-distribution/</link>
      <pubDate>Fri, 04 May 2018 21:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/04/create-pbuilder-chroot-of-specified-distribution/</guid>
      <description>はじめに Ubuntu 18.04上のpbuilderでUbuntu 16.04用のchroot環境を作成するというようにホストと違うディストリビューション</description>
    </item>
    
    <item>
      <title>apt-markを使ってdebパッケージのバージョン固定</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</link>
      <pubDate>Fri, 04 May 2018 21:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/04/hold-deb-package-version-using-apt-mark/</guid>
      <description>はじめに nginx にはmainline版とstable版がありますが、 どのバージョンのnginxを使うべきか？ - 考える人、コードを書く人 を参考に私は</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04でaptを使ってchromeをインストール</title>
      <link>https://hnakamur.github.io/blog/2018/05/04/install-chrome-using-apt-on-ubuntu-18.04/</link>
      <pubDate>Fri, 04 May 2018 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/04/install-chrome-using-apt-on-ubuntu-18.04/</guid>
      <description>はじめに How to install google chrome on ubuntu 18.04 / 18.10 を参考にUbuntu 18.04でaptを使ってchromeをインストールしたメモです。 インストール手順 curl https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key</description>
    </item>
    
    <item>
      <title>macOS High SierraとUbuntu 18.04でVeraCryptを使う</title>
      <link>https://hnakamur.github.io/blog/2018/05/02/use-veracrypt-on-mac-os-high-sierra-and-ubuntu-18.04/</link>
      <pubDate>Wed, 02 May 2018 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/02/use-veracrypt-on-mac-os-high-sierra-and-ubuntu-18.04/</guid>
      <description>はじめに VeraCryptでデータパーティションを暗号化してみた ではWindows 10とUbuntu 17.10のデュアルブート環境でデータ用</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04でcopr-cliのdebパッケージを作ったときのメモ</title>
      <link>https://hnakamur.github.io/blog/2018/05/01/build-copr-cli-deb-package-for-ubuntu18.04/</link>
      <pubDate>Tue, 01 May 2018 12:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/01/build-copr-cli-deb-package-for-ubuntu18.04/</guid>
      <description>はじめに Ubuntu16.04でrpmビルド用にmockとcopr-cliをセットアップ に書いた copr-cli パッケージのビルド手順をサボってメモしてな</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04でgit-buildpackageとfreightを使うときのメモ</title>
      <link>https://hnakamur.github.io/blog/2018/05/01/ubuntu-18.04-git-buildpackage-freight/</link>
      <pubDate>Tue, 01 May 2018 12:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/05/01/ubuntu-18.04-git-buildpackage-freight/</guid>
      <description>はじめに git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順 freightでプライベートdebレポジト</description>
    </item>
    
    <item>
      <title>Ubuntu 16.04上にUbuntu 18.04のPXEブートサーバをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/04/24/ubuntu18.04-pxe-boot-server-on-ubuntu16.04/</link>
      <pubDate>Tue, 24 Apr 2018 01:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/04/24/ubuntu18.04-pxe-boot-server-on-ubuntu16.04/</guid>
      <description>はじめに Ubuntu 16.04をルーター化 したところに Ubuntu 18.04のPXEブートサーバをセットアップしたメモです。 Ubuntu 18.04はリリース前の 2018-</description>
    </item>
    
    <item>
      <title>Ubuntu 16.04をルーター化</title>
      <link>https://hnakamur.github.io/blog/2018/04/23/setup-router-on-ubuntu16.04/</link>
      <pubDate>Mon, 23 Apr 2018 00:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/04/23/setup-router-on-ubuntu16.04/</guid>
      <description>はじめに LANポートが2つついているFUJITSU PRIMERGY TX1310 M1でUbuntu 16.04をルーター化したメモです。 Ubuntu 14.04のルーター化 - Qiita を参</description>
    </item>
    
    <item>
      <title>VeraCryptでデータパーティションを暗号化してみた</title>
      <link>https://hnakamur.github.io/blog/2018/04/22/use-veracrypt-for-data-partition/</link>
      <pubDate>Sun, 22 Apr 2018 20:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/04/22/use-veracrypt-for-data-partition/</guid>
      <description>はじめに Windows 10とUbuntu 16.04のデュアルブート環境でデータ用のパーティションを VeraCrypt - Free Open source disk encryption with strong security for the Paranoid で暗号化して 両方からマウント</description>
    </item>
    
    <item>
      <title>Ubuntu16.04でrpmビルド用にmockとcopr-cliをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/</link>
      <pubDate>Sat, 21 Apr 2018 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/</guid>
      <description>はじめに Ubuntu 16.04で mock でローカルでrpmをビルドするための環境構築の手順メモです。 Copr Build Service でrpmをビルドする際に、ビルドが通ることを事前に</description>
    </item>
    
    <item>
      <title>Ubuntu16.04でセカンダリIPアドレス追加</title>
      <link>https://hnakamur.github.io/blog/2018/04/21/add-secondary-ip-address-on-ubuntu-16.04/</link>
      <pubDate>Sat, 21 Apr 2018 12:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/04/21/add-secondary-ip-address-on-ubuntu-16.04/</guid>
      <description>networking - How do I add an additional IP address to /etc/network/interfaces? - Ask Ubuntu とそこでコメントされていた NetworkConfiguration - Debian Wiki の iproute2 method を見て試してみたメモです。 NetworkConfiguration - Debian Wiki の iproute2 method で書かれていたのは /etc/network/interfaces で同じネッ</description>
    </item>
    
    <item>
      <title>私のgoのrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/2018/04/05/building-my-golang-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 11:21:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/04/05/building-my-golang-rpm-and-deb/</guid>
      <description>はじめに golangの非公式rpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている 手順をピックアップしながら</description>
    </item>
    
    <item>
      <title>私のnginxのカスタムrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 08:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/04/05/building-my-custom-nginx-rpm-and-deb/</guid>
      <description>はじめに nginxのカスタムrpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている 手順をピックアップしながら</description>
    </item>
    
    <item>
      <title>Windows10のパーティションを縮小するために移動できないファイルを消す</title>
      <link>https://hnakamur.github.io/blog/2018/04/02/delete-unmovable-files-to-shrink-windows10-partition/</link>
      <pubDate>Mon, 02 Apr 2018 00:16:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/04/02/delete-unmovable-files-to-shrink-windows10-partition/</guid>
      <description>はじめに WindowsとUbuntuでデュアルブートするためにWindowsのパーティションを縮小 するのですが、前回試したときは移動できない</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10でスクリーンショットを作成してgimpで編集</title>
      <link>https://hnakamur.github.io/blog/2018/03/31/create-and-edit-screenshots-with-gimp-on-ubuntu-17.10/</link>
      <pubDate>Sat, 31 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/03/31/create-and-edit-screenshots-with-gimp-on-ubuntu-17.10/</guid>
      <description>はじめに Ubuntu 17.10でスクリーンショットを作成してgimpで編集する際の手順メモです。 スクリーンショット作成 GNOMEのスクリーンショットの</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10でL2TPのVPN接続を試してみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/31/l2tp-vpn-on-ubuntu-17.10/</link>
      <pubDate>Sat, 31 Mar 2018 08:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/03/31/l2tp-vpn-on-ubuntu-17.10/</guid>
      <description>はじめに Ubuntu 17.10でL2TPのVPN接続を試してみたのでメモです。 以下の手順の一部は接続先の設定に依存して変動がありえます。 セットアップ 必</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10とgnomeとIBus mozcのキーボードショートカットを自分好みに設定</title>
      <link>https://hnakamur.github.io/blog/2018/03/30/ubuntu-17.10-gnome-ibus-mozc-keyboard-shortcut/</link>
      <pubDate>Fri, 30 Mar 2018 16:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/03/30/ubuntu-17.10-gnome-ibus-mozc-keyboard-shortcut/</guid>
      <description>はじめに 私はThinkPadとMacBook ProでともにUSキーボードを使っています。 Windows、macOS、Ubuntuでウィンドウ</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10とWindows10でデュアルブート構成にしてみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-windows10-dual-boot/</link>
      <pubDate>Fri, 23 Mar 2018 20:15:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-windows10-dual-boot/</guid>
      <description>はじめに Ubuntu 17.10とmacOS High Sierraでデュアルブート構成にしてみた の後、ThinkPad X260でUbuntu 17.10とWind</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10とmacOS High Sierraでデュアルブート構成にしてみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/</link>
      <pubDate>Fri, 23 Mar 2018 14:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/</guid>
      <description>はじめに 個人的にLinuxデスクトップの機運が高まってきたので、Ubuntu 17.10のデスクトップ環境を試してみました。 例によって自分用メ</description>
    </item>
    
    <item>
      <title>EdgeRouter LiteでDuckDNSとCloudFlareでダイナミックDNSを試してみた</title>
      <link>https://hnakamur.github.io/blog/2018/03/19/use-duckdns-and-cloudflare-dyndns-on-edgerouter/</link>
      <pubDate>Mon, 19 Mar 2018 17:26:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/03/19/use-duckdns-and-cloudflare-dyndns-on-edgerouter/</guid>
      <description>EdgeRouter X - 5. ダイナミック DNS の設定 ( DDNS ) | yabe.jp という素晴らしい記事を見つけて、試してみたメモです。 私の環境では設定対象のネットワークインターフェース</description>
    </item>
    
    <item>
      <title>特定のドメインの証明書の有効期限をコマンドで確認する</title>
      <link>https://hnakamur.github.io/blog/2018/03/13/show-certificate-validity/</link>
      <pubDate>Tue, 13 Mar 2018 11:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/03/13/show-certificate-validity/</guid>
      <description>職場で見かけたので、ちょっとアレンジしてメモ。 openssl s_client -connect example.com:443 -showcerts &amp;lt; /dev/null 2&amp;gt; /dev/null \ | openssl x509 -text | grep -A 2 Validity 実行例。 $ openssl s_client -connect example.com:443 -showcerts &amp;lt; /dev/null 2&amp;gt; /dev/null | openssl x509 -text | grep -A 2 Validity Validity Not Before: Nov 3</description>
    </item>
    
    <item>
      <title>goで書いたコードがヒープ割り当てになるかを確認する方法</title>
      <link>https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/</link>
      <pubDate>Tue, 30 Jan 2018 06:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/01/30/go-heap-allocations/</guid>
      <description>はじめに Allocation Efficiency in High-Performance Go Services · Segment Blog という記事を読みました。素晴らしいのでぜひ一読をお勧めします。 この記事は自分の理解と実際に試してみた結果のメモです</description>
    </item>
    
    <item>
      <title>rustのHTTPライブラリについて情報収集した</title>
      <link>https://hnakamur.github.io/blog/2018/01/29/rust-http-libraries/</link>
      <pubDate>Mon, 29 Jan 2018 05:08:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/01/29/rust-http-libraries/</guid>
      <description>はじめに rustのHTTPライブラリの現状について検索して軽く情報収集したので、 HTTPに関連したIOライブラリも含めてメモしておきます。 非</description>
    </item>
    
    <item>
      <title>rustupでrustをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2018/01/29/setup-rust-with-rustup/</link>
      <pubDate>Mon, 29 Jan 2018 01:06:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/01/29/setup-rust-with-rustup/</guid>
      <description>はじめに Ubuntu 16.04の環境にrustをセットアップしたときのメモです。 インストール手順のドキュメント rustup の Installation には www.rustup.rs の手順に従うように書いてあり</description>
    </item>
    
    <item>
      <title>go1.10rc1のdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</link>
      <pubDate>Sun, 28 Jan 2018 21:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2018/01/28/build-go-1.10rc1-deb/</guid>
      <description>はじめに golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした 以降go1.9.xのdebパッケージを git-buildpackage で作っていましたが、今回</description>
    </item>
    
    <item>
      <title>lua-nginx-moduleのshared dictの空き容量について</title>
      <link>https://hnakamur.github.io/blog/2017/10/11/lua-nginx-shared-dict-free-space/</link>
      <pubDate>Wed, 11 Oct 2017 11:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/10/11/lua-nginx-shared-dict-free-space/</guid>
      <description>はじめに openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers の ngx.shared.DICT は複数ワーカープロセス間でデータを共有することができ、非常に便利です。 使用する際は lua_shared_dict ディレクティブ で以下のよ</description>
    </item>
    
    <item>
      <title>Goでcontext非対応の関数をcontext対応にするラッパ関数を書いた</title>
      <link>https://hnakamur.github.io/blog/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</link>
      <pubDate>Thu, 05 Oct 2017 20:32:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</guid>
      <description>はじめに Goの net/http.Server でグレースフルシャットダウンを行う際の注意点として Go1.8のGraceful Shutdownとgo-gracedownの対</description>
    </item>
    
    <item>
      <title>lua-nginx-moduleのshared dictのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/09/27/code-reading-lua-nginx-shared-dict/</link>
      <pubDate>Wed, 27 Sep 2017 08:57:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/27/code-reading-lua-nginx-shared-dict/</guid>
      <description>はじめに openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers の ngx.shared.DICT を使う際 lua_shared_dict ディレクティブで http { lua_shared_dict dogs 10m; ... } のように dict のサイズを指定しますが、容量が足りているかを確認するため実</description>
    </item>
    
    <item>
      <title>ChromeとFirefoxの拡張機能を書くのにasync/awaitを使ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/09/18/use-async-await-in-writing-chrome-and-firefox-extensions/</link>
      <pubDate>Mon, 18 Sep 2017 12:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/18/use-async-await-in-writing-chrome-and-firefox-extensions/</guid>
      <description>はじめに 私はChromeとFirefox用に以下の拡張機能を書いて使っています。 FormatLink-Chrome FormatLink-Firefox 今回UIを改変する際についでに async と await を使って書くように変</description>
    </item>
    
    <item>
      <title>Goのプロファイラを使ってメモリ割り当て回数を減らす</title>
      <link>https://hnakamur.github.io/blog/2017/09/14/reduce-memory-allocations-using-go-profiler/</link>
      <pubDate>Thu, 14 Sep 2017 22:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/14/reduce-memory-allocations-using-go-profiler/</guid>
      <description>はじめに Goのプロファイラを使ってメモリ割り当て回数を減らすように自分のプログラムを改善するのを試してみたのでメモです。 参考資料 プロファイラ</description>
    </item>
    
    <item>
      <title>rtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2017/09/05/built-rtags-deb/</link>
      <pubDate>Tue, 05 Sep 2017 23:07:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/05/built-rtags-deb/</guid>
      <description>はじめに 最強のC/C++インデクサー &amp;ldquo;Rtags&amp;rdquo; を本気で使う - Qiita で Andersbakken/rtags: A c/c++ client/server indexer for c/c++/objc[++] with integration for Emacs based on clang. の存在を知り、deb パッケージを作ってみたのでメモです。</description>
    </item>
    
    <item>
      <title>terminal機能を有効にしたvim8のdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/2017/09/05/built-terminal-enabled-vim8-deb/</link>
      <pubDate>Tue, 05 Sep 2017 22:38:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/05/built-terminal-enabled-vim8-deb/</guid>
      <description>はじめに terminal機能を有効にしたvim8のdebパッケージを作成したのでメモです。 インストール方法 ビルドしたパッケージは vim : Hiroaki Nakamura で公</description>
    </item>
    
    <item>
      <title>pbuilderのchroot環境にレポジトリを追加する</title>
      <link>https://hnakamur.github.io/blog/2017/09/02/add-repositories-to-pbuilder-chroot-images/</link>
      <pubDate>Sat, 02 Sep 2017 16:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/02/add-repositories-to-pbuilder-chroot-images/</guid>
      <description>はじめに pbuilder を使っていくつかdebパッケージを作ってみて、chroot環境をカスタマイズするベストプラクティスが自分の中で出来たのでメモです。</description>
    </item>
    
    <item>
      <title>add-apt-repositoryを使わずにPPAをapt-lineに追加する方法</title>
      <link>https://hnakamur.github.io/blog/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</link>
      <pubDate>Sat, 02 Sep 2017 11:47:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</guid>
      <description>はじめに PPAのページにはPPAを追加するには add-apt-respository コマンドを使うように書かれています。 例えば gcc-7 などを配布しているPPA Toolchain test builds : “PPA for Ubuntu Toolchain Uploads</description>
    </item>
    
    <item>
      <title>git-buildpackageとfreightでパスフレーズをファイルから入力させる</title>
      <link>https://hnakamur.github.io/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</link>
      <pubDate>Mon, 28 Aug 2017 22:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</guid>
      <description>はじめに git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順 の gbp buildpackage でソースパッケージをビルドする時と f</description>
    </item>
    
    <item>
      <title>ngx_http_limit_req_moduleのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/08/17/nginx-limit-req-code-reading/</link>
      <pubDate>Thu, 17 Aug 2017 09:38:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/08/17/nginx-limit-req-code-reading/</guid>
      <description>はじめに Module ngx_http_limit_req_module を使おうと思ってコードを読んでみたのでメモです。 leaky bucket 上記のドキュメントに &amp;ldquo;leaky bucket&amp;rdquo; を使ってリクエスト数の制御を行っていると書かれていま</description>
    </item>
    
    <item>
      <title>freightでプライベートdebレポジトリ作成</title>
      <link>https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/</link>
      <pubDate>Sat, 05 Aug 2017 17:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/08/05/create-private-deb-repository-with-freight/</guid>
      <description>はじめに CentOS だとカスタムrpmを作って yum install rpmファイル名 で依存パッケージとともにインストールできますが、Ubuntuだと dpkg -i debファイル名</description>
    </item>
    
    <item>
      <title>golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</link>
      <pubDate>Sat, 05 Aug 2017 10:15:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/08/05/built-golang-1.9rc1-deb-package/</guid>
      <description>はじめに Ubuntu · golang/go Wiki で紹介されている Golang Backports : Simon Eisenmann を改変してgo 1.9rc1のUbuntu 16.04用debパッケージをビルドしたのでメモです。 golang 1.9</description>
    </item>
    
    <item>
      <title>badgerのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/07/22/code-reading-of-badger/</link>
      <pubDate>Sat, 22 Jul 2017 21:57:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/22/code-reading-of-badger/</guid>
      <description>はじめに 約一年前に LSM-TreeとRocksDB、TiDB、CockroachDBが気になる を書いた後、結局RocksDB触ってなかったの</description>
    </item>
    
    <item>
      <title>nginx&#43;luaのカスタムdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</link>
      <pubDate>Tue, 18 Jul 2017 15:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/18/created-nginx-lua-custom-deb-package/</guid>
      <description>はじめに ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた 、 git-buildpackag</description>
    </item>
    
    <item>
      <title>git-buildpackageのpatch-queue機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</link>
      <pubDate>Fri, 14 Jul 2017 11:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/14/tried-git-buildpackage-patch-queue/</guid>
      <description>はじめに ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた で quilt を使ったパッチ適用を経験して</description>
    </item>
    
    <item>
      <title>ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</link>
      <pubDate>Fri, 14 Jul 2017 06:07:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</guid>
      <description>はじめに Nginxのリバースプロキシでバックエンドとhttp2通信する - ASnoKaze blog で紹介されていたngx_http_v2_upstreamモジュー</description>
    </item>
    
    <item>
      <title>グレースフルリスタートを支援するサーバ起動のGoライブラリを自作した</title>
      <link>https://hnakamur.github.io/blog/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</link>
      <pubDate>Sat, 08 Jul 2017 21:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</guid>
      <description>はじめに サーバプロセスを無停止で実行ファイルを更新し再起動できるグレースフルリスタートは 非常に便利な仕組みです。 今までは Go言語でGrace</description>
    </item>
    
    <item>
      <title>git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順</title>
      <link>https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/</link>
      <pubDate>Wed, 05 Jul 2017 21:04:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/05/how-to-build-deb-with-git-buildpackage/</guid>
      <description>はじめに .. _git-buildpackage: https://honk.sigxcpu.org/piki/projects/git-buildpackage/ git-buildpackage_ を使ってカスタムdebパッケージをビルドして Personal Package Archives : Ubuntu (PPA) にアップロードする手順のメモです。 自分で試行錯誤してまとめた手順なの</description>
    </item>
    
    <item>
      <title>gpgで秘密鍵を作成する</title>
      <link>https://hnakamur.github.io/blog/2017/07/01/generate-secret-key-with-gpg/</link>
      <pubDate>Sat, 01 Jul 2017 17:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/07/01/generate-secret-key-with-gpg/</guid>
      <description>はじめに gpgの秘密鍵はdebパッケージを署名するために以前作成していたのですが、ググって適当に済ませていたので手順をメモしておきます。 GPG Cheat</description>
    </item>
    
    <item>
      <title>zerologを参考にしてltsvlogを改良してみた</title>
      <link>https://hnakamur.github.io/blog/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</link>
      <pubDate>Sun, 28 May 2017 21:52:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</guid>
      <description>はじめに こちらも少し前の話なのですがブログに書いておきます。 ( ꒪⌓꒪)さんのツイート: &amp;ldquo;zero allocation をうたう logger #golang / “GitHub - rs/zerolog: Zero Allocation JSON Logger</description>
    </item>
    
    <item>
      <title>EdgeRouter LiteでIPv6の静的ルーティング設定</title>
      <link>https://hnakamur.github.io/blog/2017/05/28/edgerouter-lite-static-ipv6-routing/</link>
      <pubDate>Sun, 28 May 2017 12:04:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/05/28/edgerouter-lite-static-ipv6-routing/</guid>
      <description>はじめに IIJmioひかりとEdgeRouter-LiteでDS-Liteを試してみた の後、多少調整して一旦自分の希望通りの動きで落ち着いた</description>
    </item>
    
    <item>
      <title>IIJmioひかりとEdgeRouter-LiteでDS-Liteを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/05/13/tried-ds-lite-with-iij-mio-hikari-and-edgerouter-lite/</link>
      <pubDate>Sat, 13 May 2017 16:23:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/05/13/tried-ds-lite-with-iij-mio-hikari-and-edgerouter-lite/</guid>
      <description>はじめに 会社の同僚と話していて、私もそろそろIPv6に触れる機会を作っておかないとまずいなと思い、IIJmioひかりとIPoEとひかり電話を</description>
    </item>
    
    <item>
      <title>EdgeOSのドキュメントのリンクまとめ</title>
      <link>https://hnakamur.github.io/blog/2017/05/13/edge-os-document-links/</link>
      <pubDate>Sat, 13 May 2017 15:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/05/13/edge-os-document-links/</guid>
      <description>はじめに EdgeOSの設定項目の階層構造を理解する にも一部書きましたが、EdgeOSのドキュメントのリンクをまとめておきます。 公式ドキュメン</description>
    </item>
    
    <item>
      <title>EdgeOSの設定項目の階層構造を理解する</title>
      <link>https://hnakamur.github.io/blog/2017/05/13/understanding-edge-os-config-hierarchy-structure/</link>
      <pubDate>Sat, 13 May 2017 10:48:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/05/13/understanding-edge-os-config-hierarchy-structure/</guid>
      <description>はじめに EdgeRouter Lite (ERLite-3)をCLI (Command Line Interface)で設定しているうちにようやく基本が理解できたのでメモです。 EdgeOSとは EdgeOS</description>
    </item>
    
    <item>
      <title>自宅サーバExpress5800/S70タイプRBのCPUをCore i5 650に換装してみた</title>
      <link>https://hnakamur.github.io/blog/2017/05/03/replace-cpu-to-core-i5-in-express5800/</link>
      <pubDate>Wed, 03 May 2017 21:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/05/03/replace-cpu-to-core-i5-in-express5800/</guid>
      <description>はじめに 私は NEC Express5800／S70 タイプRB - usyWiki を2011年に買って自宅サーバとして活用しています。一時期使って無い時期もありまし</description>
    </item>
    
    <item>
      <title>EdgeRouter Lite (ERLite-3)のファームウェアアップデート</title>
      <link>https://hnakamur.github.io/blog/2017/05/03/update-edgerouter-lite-firmware/</link>
      <pubDate>Wed, 03 May 2017 07:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/05/03/update-edgerouter-lite-firmware/</guid>
      <description>はじめに 17,000円で買えるVyOSっぽいOSが動くルーター EdgeRouter Lite(ERLite-3)を使ってみる — どこか遠くでのんびり怠惰に暮らした</description>
    </item>
    
    <item>
      <title>go-whisperをコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/29/go-whisper-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 17:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/04/29/go-whisper-code-reading/</guid>
      <description>はじめに go-carbonのTCPレシーバについてコードリーディングしてみた の続きです。 go-whisperのレポジトリは lomik/go-whisper: A Go port of Graphite&amp;rsquo;s Whisper timeseries database</description>
    </item>
    
    <item>
      <title>go-carbonのTCPレシーバについてコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/29/go-carbon-tcp-receiver-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 11:15:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/04/29/go-carbon-tcp-receiver-code-reading/</guid>
      <description>はじめに lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister のTCPレシーバについてコードを読んでみたのでメモです。 対象のコミットは https://github.com/lomik/go-carbon/tree/42b9832d13240ff044c86768e8d0dc1f356d9458 です。 TCPレシーバの生成 (app *App)</description>
    </item>
    
    <item>
      <title>MastodonのER図を生成してみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/24/mastodon-er-diagram/</link>
      <pubDate>Mon, 24 Apr 2017 00:28:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/04/24/mastodon-er-diagram/</guid>
      <description>はじめに voormedia/rails-erd: Generate Entity-Relationship Diagrams for Rails applications を使って tootsuite/mastodon: A GNU Social-compatible microblogging server のER図を生成してみました、というだけの記事です。 Relax Ruby version requirement (#1901) · tootsuite/mastodon@0611209 のコミットに対して 生成したPDFが</description>
    </item>
    
    <item>
      <title>github.com/deoxxa/donを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/21/tried-don/</link>
      <pubDate>Fri, 21 Apr 2017 02:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/04/21/tried-don/</guid>
      <description>はじめに deoxxa/don: Less than half of mastodon. はGoによる tootsuite/mastodon の実装です。 まだ開発中で、タイトルによるとmastodonの機能の半分以下らしいです。 この記事はdonをと</description>
    </item>
    
    <item>
      <title>github.com/facebookgo/graceパッケージでグレースフルリスタートを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</link>
      <pubDate>Thu, 13 Apr 2017 07:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</guid>
      <description>はじめに go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた でcarbonapiが facebookgo/grace: Graceful restart &amp;amp; zero downtime deploy for Go servers. を使っていることに気づ</description>
    </item>
    
    <item>
      <title>go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/04/13/built-go-carbon-and-carbonapi-rpm/</link>
      <pubDate>Thu, 13 Apr 2017 05:13:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/04/13/built-go-carbon-and-carbonapi-rpm/</guid>
      <description>はじめに go, go-carbon, carbonapiのrpmをfedora coprでビルドしたのでメモです。 goのrpmはCentOS 6と7、go-carbonと</description>
    </item>
    
    <item>
      <title>LXDのdnsmasqで名前解決するための設定</title>
      <link>https://hnakamur.github.io/blog/2017/03/26/modify-resolv-conf-for-lxd-dnsmasq/</link>
      <pubDate>Sun, 26 Mar 2017 09:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/03/26/modify-resolv-conf-for-lxd-dnsmasq/</guid>
      <description>はじめに Ubuntu 16.04のLXDでホストマシンでコンテナ名で名前解決するための設定メモです。 ブリッジを使ったネットワーク構成での話です。 $ ip a show</description>
    </item>
    
    <item>
      <title>LXDでネストした非特権コンテナを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/03/21/tried-nested-unprivileged-lxd-containers/</link>
      <pubDate>Tue, 21 Mar 2017 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/03/21/tried-nested-unprivileged-lxd-containers/</guid>
      <description>はじめに https://twitter.com/ten_forward/status/844107303099932676 https://twitter.com/ten_forward/status/844142416282054658 というツイートを受けて自分でもLXDでネストした非特権コンテナを試してみました。 環境はUbuntu 16.04です。 lxdのバージ</description>
    </item>
    
    <item>
      <title>video.jsのHLSライブラリを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/03/21/tried-videojs-hls-library/</link>
      <pubDate>Tue, 21 Mar 2017 14:52:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/03/21/tried-videojs-hls-library/</guid>
      <description>はじめに MPEG DASHを知る - Qiita を見て、HTML5のvideoタグでHLSと Dash-Industry-Forum/dash.js: A reference client implementation for the playback of MPEG DASH via Javascript and compliant browsers. でMPEG DASHを試してみたところ</description>
    </item>
    
    <item>
      <title>WindowsでCtrlとCapsを入れ替えた状態でControl&#43;タップするためのSynapticsタッチパッドドライバの設定</title>
      <link>https://hnakamur.github.io/blog/2017/03/04/use-control-tap-with-control-caps-swapped-keyboard-and-synaptics-touchpad-driver/</link>
      <pubDate>Sat, 04 Mar 2017 10:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/03/04/use-control-tap-with-control-caps-swapped-keyboard-and-synaptics-touchpad-driver/</guid>
      <description>はじめに 英字キーボードのThinkpad X260でWindows 10を使っていてレジストリで左ControlキーとCapsLockを入れ替え</description>
    </item>
    
    <item>
      <title>iptables-saveのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/03/03/iptables-save-code-reading/</link>
      <pubDate>Fri, 03 Mar 2017 23:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/03/03/iptables-save-code-reading/</guid>
      <description>はじめに iptables-restoreのコードリーディング の続きです。 iptables-save でルールを出力する部分のコードリーディングのメモです。 iptables_save_main 関数からの</description>
    </item>
    
    <item>
      <title>iptablesのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/26/iptables-code-reading/</link>
      <pubDate>Sun, 26 Feb 2017 11:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/26/iptables-code-reading/</guid>
      <description>はじめに iptables-restoreのコードリーディング の続きです。 サーバ上の iptables の現状の設定が、自分が意図した設定と一致しているか確認し</description>
    </item>
    
    <item>
      <title>CentOS 7のepelでインストールしたpython3.4でvenvを使うとエラーになる件の回避策</title>
      <link>https://hnakamur.github.io/blog/2017/02/25/workaround-for-epel-python3.4-venv-on-centos7/</link>
      <pubDate>Sat, 25 Feb 2017 00:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/25/workaround-for-epel-python3.4-venv-on-centos7/</guid>
      <description>はじめに CentOS 7のpythonパッケージは2.7.xなので、3系を使うには別途インストールする必要があります。 EPELの python34`` パッケージを使うと ``python3 -m</description>
    </item>
    
    <item>
      <title>iptables-restoreのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/24/iptables-restore-code-reading/</link>
      <pubDate>Fri, 24 Feb 2017 00:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/24/iptables-restore-code-reading/</guid>
      <description>はじめに iptables-restore のコードリーディングをしてみました。 対象バージョンは CentOS 7 のパッケージに合わせて 1.4.21 です。 $ rpm -qf `which iptables-restore` iptables-1.4.21-17.el7.x86_64 プロジェクトページは netfilter/iptables project homepage - The netfilter.org</description>
    </item>
    
    <item>
      <title>procpsのpgrepのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/23/pgrep-in-procps-code-reading/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/23/pgrep-in-procps-code-reading/</guid>
      <description>はじめに procps-ngのpgrepのコードリーディング に続いて CentOS 6 の pgrep についてもコードリーディングしてみました。 pgrep を含むパッケージは procps で</description>
    </item>
    
    <item>
      <title>procps-ngのpgrepのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/23/pgrep-in-procps-ng-code-reading/</link>
      <pubDate>Thu, 23 Feb 2017 00:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/23/pgrep-in-procps-ng-code-reading/</guid>
      <description>はじめに CentOS 7の環境でApache Traffic Server 7.0.0のサービスを起動すると traffic_cop, traffic_manager, traffic_server という3つのプロセスが立ち上がります。 [root@ats7 ~]# ps auxww | grep traffic root 20837 0.0 0.0 143076 6276 ?</description>
    </item>
    
    <item>
      <title>monitのhttpのタイムアウトのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/21/monit-http-timeout-code-reading/</link>
      <pubDate>Tue, 21 Feb 2017 11:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/21/monit-http-timeout-code-reading/</guid>
      <description>はじめに monitのイベントループのコードリーディング からの続きです。 socket_create関数からの流れ monitのif failed urlのコー</description>
    </item>
    
    <item>
      <title>monitのイベントループのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/20/monit-event-loop-code-reading/</link>
      <pubDate>Mon, 20 Feb 2017 16:46:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/20/monit-event-loop-code-reading/</guid>
      <description>はじめに monitのif failed urlのコードリーディング からの続きです。 Event_post関数の実装 src/event.c#L123-L222 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142</description>
    </item>
    
    <item>
      <title>monitのif failed urlのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2017/02/20/monit-if-failed-url-code-reading/</link>
      <pubDate>Mon, 20 Feb 2017 11:14:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/20/monit-if-failed-url-code-reading/</guid>
      <description>はじめに 以下のページで紹介されているような if failed url ... の挙動をコードリーディングしてみたメモです。 HOWTO use monit to monitor sites and alert users · fak3r Monit でお手軽に外部のサーバ</description>
    </item>
    
    <item>
      <title>ブログのソフトウェアをHugoからPelicanに切り替えた</title>
      <link>https://hnakamur.github.io/blog/2017/02/19/switch-from-hugo-to-pelican-for-blog-software/</link>
      <pubDate>Sun, 19 Feb 2017 23:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/19/switch-from-hugo-to-pelican-for-blog-software/</guid>
      <description>はじめに Hugo はビルドも速くて快適に使わせてもらっていました。ただ、コードブロックのシンタクスハイライトを使いたいと思って Syntax Highlighting を読んだときにHu</description>
    </item>
    
    <item>
      <title>Facebookの時系列データベースGorillaのデータ圧縮方式を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/02/12/tried-facebook-gorilla-time-series-database-compression/</link>
      <pubDate>Sun, 12 Feb 2017 23:00:03 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/02/12/tried-facebook-gorilla-time-series-database-compression/</guid>
      <description>はじめに Beringei: A high-performance time series storage engine | Engineering Blog | Facebook Code という記事を読んで、Facebookが2015年に &amp;ldquo;Gorilla: A Fast, Scalable, In-Memory Time Series Database&amp;rdquo; という論文でGorillaという時系列デ</description>
    </item>
    
    <item>
      <title>さくらのクラウドでPackerとTerraformを使ってContainer Linuxの環境構築をしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/02/use-container-linux-on-sakura-cloud-using-packer-and-terraform/</link>
      <pubDate>Mon, 02 Jan 2017 15:34:23 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/01/02/use-container-linux-on-sakura-cloud-using-packer-and-terraform/</guid>
      <description>はじめに さくらのクラウドでPackerとTerraformを使ってCoreOS Container Linuxの環境構築をしてみたのでメモです。 パブリックアーカ</description>
    </item>
    
    <item>
      <title>KubernetesのSecrets機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/01/tried-kubernetes-secrets/</link>
      <pubDate>Sun, 01 Jan 2017 16:31:08 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/01/01/tried-kubernetes-secrets/</guid>
      <description>はじめに Running a Single-Instance Stateful Application - Kubernetes ではMySQLのrootユーザのパスワードを設定のyamlファイルに直接書いていましたが、 安全に管理するためにはSec</description>
    </item>
    
    <item>
      <title>Kuberntesでデータ領域をNFSマウントしてMySQLを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/01/tried-mysql-and-nfs-on-kubernetes/</link>
      <pubDate>Sun, 01 Jan 2017 12:38:24 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/01/01/tried-mysql-and-nfs-on-kubernetes/</guid>
      <description>はじめに minikubeとVirtualBoxでNFSのpersistent volumeを試してみた · hnakamur&amp;rsquo;s blog at githubの結果を踏まえて、 Running</description>
    </item>
    
    <item>
      <title>minikubeとVirtualBoxでNFSのpersistent volumeを試してみた</title>
      <link>https://hnakamur.github.io/blog/2017/01/01/use-nfs-persistent-volume-on-minikube-virtualbox/</link>
      <pubDate>Sun, 01 Jan 2017 09:40:35 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2017/01/01/use-nfs-persistent-volume-on-minikube-virtualbox/</guid>
      <description>はじめに Tutorials - KubernetesのStateful Applicationsを試そうと思って少し読んだ所、 persistent volume というものを用意する必要があるこ</description>
    </item>
    
    <item>
      <title>minikubeでKubernetesのチュートリアルをやってみた</title>
      <link>https://hnakamur.github.io/blog/2016/12/31/tried-kubernetes-tutorial-with-minikube/</link>
      <pubDate>Sat, 31 Dec 2016 16:24:33 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/12/31/tried-kubernetes-tutorial-with-minikube/</guid>
      <description>はじめに 検索してたら Why Kubernetes is winning the container war | Hacker News というHacker Newsのスレッドを見つけました。 実際に勝つどうかはともかく、実際に使っている人や</description>
    </item>
    
    <item>
      <title>LXD で privileged な CentOS 7コンテナを作る</title>
      <link>https://hnakamur.github.io/blog/2016/10/22/lxd-privileged-centos-container/</link>
      <pubDate>Sat, 22 Oct 2016 18:54:49 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/10/22/lxd-privileged-centos-container/</guid>
      <description>小ネタのメモです。 先日 LXD 2.0.5 で CentOS 7 コンテナを起動して journalctl -xe を実行すると以下のようなエラーが出ていました。 Oct 22 09:53:58 centos systemd-sysctl[36]: Failed to write &#39;16&#39; to &#39;/proc/sys/kernel/sysrq&#39;: Permission denied Oct 22 09:53:58 centos systemd-sysctl[36]: Failed to</description>
    </item>
    
    <item>
      <title>Go言語のos.Chtimesで設定可能な最大日時は 2262-04-11 23:47:16.854775807 &#43;0000 UTC</title>
      <link>https://hnakamur.github.io/blog/2016/10/22/max-time-for-golang-os-chtimes/</link>
      <pubDate>Sat, 22 Oct 2016 18:32:50 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/10/22/max-time-for-golang-os-chtimes/</guid>
      <description>os.Chtimes のソース src/os/file_posix.go - The Go Programming Language go/file_posix.go at go1.7.3 · golang/go を見ると、引数は time.Time なのですが、 syscall.Timespec に変換するときに time の UnixNano() を使っています。 UnixNano() は 1970-01-01T00:00:00Z からの通算ミリ秒です。 UnixNano() で int64 の最</description>
    </item>
    
    <item>
      <title>LocaleOverlaySwaggerというgoaプラグインを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/10/22/localeoverlayswagger-goa-plugin/</link>
      <pubDate>Sat, 22 Oct 2016 16:52:02 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/10/22/localeoverlayswagger-goa-plugin/</guid>
      <description>まず Swagger 仕様を複数ファイル出力する goa プラグイン Multiswagger を試してみました まずは Swagger 仕様を複数ファイル出力する goa プラグイン Multiswagger を作った - tchsskのブログ</description>
    </item>
    
    <item>
      <title>pgpool-IIを使ってPostgreSQLのアクティブ・スタンバイ(1&#43;1構成)を試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/09/15/experiment-postgresql-active-standby-using-pgpool-ii/</link>
      <pubDate>Thu, 15 Sep 2016 06:28:34 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/09/15/experiment-postgresql-active-standby-using-pgpool-ii/</guid>
      <description>はじめに pgool-IIを使ってPostgreSQLのアクティブ・スタンバイ(1+1構成)を試したのでメモです。 以下のページを参考にしました</description>
    </item>
    
    <item>
      <title>Pacemakerを使ってPostgreSQLのアクティブ・スタンバイ(1&#43;1構成)を試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/08/21/experiment-postgresql-active-standby-cluster-using-pacemaker/</link>
      <pubDate>Sun, 21 Aug 2016 11:23:01 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/08/21/experiment-postgresql-active-standby-cluster-using-pacemaker/</guid>
      <description>はじめに STONITH無し、quorum無しのアクティブ・スタンバイ(1+1構成)がとりあえず動くところまでは来たので、一旦メモです。 参考資</description>
    </item>
    
    <item>
      <title>LXDコンテナ上でPacemakerを使って仮想IPとApacheのアクティブ・パッシブ・クラスタを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/08/12/experiment-vip-and-apache-with-pacemaker-on-lxd-containers/</link>
      <pubDate>Fri, 12 Aug 2016 18:54:27 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/08/12/experiment-vip-and-apache-with-pacemaker-on-lxd-containers/</guid>
      <description>Cluster Labs - Pacemaker Documentation の &amp;ldquo;Pacemaker 1.1 for Corosync 2.x and pcs&amp;rdquo; の &amp;ldquo;Clusters from Scratch (en-US)&amp;rdquo; を参考にしつつ、多少手順を変更して試してみました。 実験用コンテナの環境構築 コンテナの作成 LXDのdnsm</description>
    </item>
    
    <item>
      <title>LXDのdnsmasqの固定IP設定をSIGHUPで更新する</title>
      <link>https://hnakamur.github.io/blog/2016/08/12/update-lxd-dnsmasq-dhcp-hosts-config-with-sighup/</link>
      <pubDate>Fri, 12 Aug 2016 06:38:18 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/08/12/update-lxd-dnsmasq-dhcp-hosts-config-with-sighup/</guid>
      <description>LXDコンテナで固定IPアドレスを使うための設定 · hnakamur&amp;rsquo;s blog at github では /etc/dnsmasq.conf に直接 dhcp-host で設定を書いていましたが、変更するためには lxd-bridge の再起動が必要でした。 そ</description>
    </item>
    
    <item>
      <title>LXDのDHCPで使っていないIPアドレスを一括で解放するスクリプトを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/08/11/release-all-unused-addresses-of-lxd-bridge/</link>
      <pubDate>Thu, 11 Aug 2016 22:58:21 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/08/11/release-all-unused-addresses-of-lxd-bridge/</guid>
      <description>LXDコンテナで固定IPアドレスを使うための設定 · hnakamur&amp;rsquo;s blog at github の設定を行ってもIPアドレスが指定通りにならないことがありました。 journal -xe で見てみると</description>
    </item>
    
    <item>
      <title>ブログ記事「Go言語(Golang) はまりどころと解決策」についてのコメント</title>
      <link>https://hnakamur.github.io/blog/2016/08/02/about-go-pitfalls/</link>
      <pubDate>Tue, 02 Aug 2016 05:57:52 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/08/02/about-go-pitfalls/</guid>
      <description>Go言語(Golang) はまりどころと解決策の記事についてのコメント記事を誰かが書くだろうと思ってスルーしてましたが、見かけないので書いてみ</description>
    </item>
    
    <item>
      <title>LXDコンテナでPostgreSQLの非同期リプリケーションを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/07/23/tried-postgresql-async-replication-in-lxd-containers/</link>
      <pubDate>Sat, 23 Jul 2016 21:13:52 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/07/23/tried-postgresql-async-replication-in-lxd-containers/</guid>
      <description>ストリーミング・レプリケーションの構築 — Let&amp;rsquo;s Postgres と PostgreSQL9.1ためしてみた【非同期レプリケーション編】 - ごろねこ日記 を読んで、2台</description>
    </item>
    
    <item>
      <title>私のソースコードの書き方</title>
      <link>https://hnakamur.github.io/blog/2016/07/16/my-way-of-writing-source-codes/</link>
      <pubDate>Sat, 16 Jul 2016 01:37:48 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/07/16/my-way-of-writing-source-codes/</guid>
      <description>はじめに ソースコードって実際のところどういうふうに書いていますか？｜Rui Ueyama｜note を読んで参考になるなーと思ったのですが、はて</description>
    </item>
    
    <item>
      <title>1台のサーバに異なる設定でApache Traffic Serverを複数立ち上げるためのビルド設定</title>
      <link>https://hnakamur.github.io/blog/2016/07/02/config-for-multiple-installations-of-apache-traffic-server/</link>
      <pubDate>Sat, 02 Jul 2016 01:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/07/02/config-for-multiple-installations-of-apache-traffic-server/</guid>
      <description>はじめに Apache Traffic ServerにはHierarchical Cachingという機能があって、キャッシュを親と子の2階層にすることが出来ます。 Cen</description>
    </item>
    
    <item>
      <title>lxd_containerというAnsibleモジュールを書いたときに学んだtips</title>
      <link>https://hnakamur.github.io/blog/2016/07/01/tips_for_writing_ansible_module/</link>
      <pubDate>Fri, 01 Jul 2016 22:44:12 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/07/01/tips_for_writing_ansible_module/</guid>
      <description>はじめに lxd_containerというAnsibleのモジュールを書いたときに学んだtipsのメモです。 モジュールでデバッグ出力は出来ない</description>
    </item>
    
    <item>
      <title>分散SQLデータベースCockroachDBのキーバリューストレージのデバッグコマンドを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/30/experiment-cockroachdb-key-value-store/</link>
      <pubDate>Thu, 30 Jun 2016 06:40:12 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/30/experiment-cockroachdb-key-value-store/</guid>
      <description>はじめに LSM-TreeとRocksDB、TiDB、CockroachDBが気になる で紹介した CockroachDB は What is CockroachDB? によるとスケールアウトできる分散SQ</description>
    </item>
    
    <item>
      <title>連番ファイル名の命名規則について実験してみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/22/experimented_with_naming_for_many_sequential_numbered_files/</link>
      <pubDate>Wed, 22 Jun 2016 23:40:27 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/22/experimented_with_naming_for_many_sequential_numbered_files/</guid>
      <description>はじめに 0〜1,000,000といった連番のファイルを作るときに、1つのディレクトリに全てのファイルを入れると、遅くなるとか取り扱いが面倒に</description>
    </item>
    
    <item>
      <title>LSM-TreeとRocksDB、TiDB、CockroachDBが気になる</title>
      <link>https://hnakamur.github.io/blog/2016/06/20/lsm-tree-and-rocksdb/</link>
      <pubDate>Mon, 20 Jun 2016 22:23:54 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/20/lsm-tree-and-rocksdb/</guid>
      <description>はじめに キーバリューストアについて調べていたらLSM-Treeというデータ構造とRocksDBが気になったということで調査メモです。ただし、</description>
    </item>
    
    <item>
      <title>sleuthというGoのライブラリでサービスディスカバリを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/15/tried-service-discovery-with-sleuth/</link>
      <pubDate>Wed, 15 Jun 2016 06:56:10 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/15/tried-service-discovery-with-sleuth/</guid>
      <description>はじめに Service autodiscovery in Go with sleuth - darian.afという記事を見かけて試してみたのでメモです。 github.com/ursiform/sleuthのセ</description>
    </item>
    
    <item>
      <title>gistを作成するGoのCLIを見つけた</title>
      <link>https://hnakamur.github.io/blog/2016/06/14/go_cli_to_create_a_gist/</link>
      <pubDate>Tue, 14 Jun 2016 00:52:22 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/14/go_cli_to_create_a_gist/</guid>
      <description>delta24/gist: A command line gister in Goです。期待通りに動かない点があったのでプルリクエストを送ったら、すぐにマージされました。 インストール Goはインストール済みと</description>
    </item>
    
    <item>
      <title>Goのシリアライゼーションのベンチマークを自分でも試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/13/tried_go_serialization_benchmarks/</link>
      <pubDate>Mon, 13 Jun 2016 23:34:16 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/13/tried_go_serialization_benchmarks/</guid>
      <description>2015年12月の記事ですが最速という噂のFlatbuffersの速度のヒミツと、導入方法の紹介(Go) - Qiitaを読んで、「gobは遅い</description>
    </item>
    
    <item>
      <title>GoでLTSV形式でログ出力するライブラリを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/06/13/wrote_go_ltsvlog_library/</link>
      <pubDate>Mon, 13 Jun 2016 21:42:53 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/13/wrote_go_ltsvlog_library/</guid>
      <description>なぜ書いたか Goで高機能なサードパーティのログ出力ライブラリと言えばSirupsen/logrusが有名です。私もdoloopwhile/l</description>
    </item>
    
    <item>
      <title>Goで複数のリモートのワーカーにジョブを実行させるremoteworkersというパッケージを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/06/12/wrote_remoteworkers_go_pacakge/</link>
      <pubDate>Sun, 12 Jun 2016 21:53:35 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/12/wrote_remoteworkers_go_pacakge/</guid>
      <description>なぜ書いたか 仕事で複数のサーバで同じ処理を実行して結果を集めたいというニーズがあって、各サーバをgRPCのサーバにするという実装でとりあえず</description>
    </item>
    
    <item>
      <title>Goで複数のリモートのワーカーにジョブを実行させるremoteworkersというパッケージを書いた</title>
      <link>https://hnakamur.github.io/blog/2016/06/12/wrote_remoteworkers_go_package/</link>
      <pubDate>Sun, 12 Jun 2016 21:53:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/12/wrote_remoteworkers_go_package/</guid>
      <description>なぜ書いたか 仕事で複数のサーバで同じ処理を実行して結果を集めたいというニーズがあって、各サーバをgRPCのサーバにするという実装でとりあえず</description>
    </item>
    
    <item>
      <title>GoのMessagePackのライブラリのベンチマークをしてみた</title>
      <link>https://hnakamur.github.io/blog/2016/06/04/benchmark_go_msgpack_libraries/</link>
      <pubDate>Sat, 04 Jun 2016 22:17:52 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/06/04/benchmark_go_msgpack_libraries/</guid>
      <description>Go の msgpack ライブラリ比較 - Qiitaの記事が最終更新日から1年以上経過しているとのことなので、現在の最新のコミットで試してみました。 github.com/vmihailenco/msgpack を go get する</description>
    </item>
    
    <item>
      <title>LXDのREST APIクライアントライブラリpylxdを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/tried-pylxd/</link>
      <pubDate>Sat, 07 May 2016 21:17:35 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/07/tried-pylxd/</guid>
      <description>Python Package Index (PyPI)の pylxd 2.0.0のページにインストール方法と使い方の例が書いてあるので、これに沿って試しました。 インストール Ubuntu 16.04だと</description>
    </item>
    
    <item>
      <title>LXDのREST APIをcurlで試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-rest-api-with-curl/</link>
      <pubDate>Sat, 07 May 2016 21:17:34 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-rest-api-with-curl/</guid>
      <description>LXDのREST API Linux Containers - LXD - REST APIとlxd/rest-api.md at master · lxc/lxdにLXDのREST APIについて説明があります。 また</description>
    </item>
    
    <item>
      <title>AnsibleのLXDコネクションプラグインを試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/tried-ansible-lxd-connection-plugin/</link>
      <pubDate>Sat, 07 May 2016 20:32:13 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/07/tried-ansible-lxd-connection-plugin/</guid>
      <description>LXDを使うとなるとAnsibleのLXDコネクションプラグインが欲しいなと思ってansible/ansibleのgithubのレポジトリを</description>
    </item>
    
    <item>
      <title>LXDコンテナで固定IPアドレスを使うための設定</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/how-to-use-fixed-ip-address-for-a-lxd-container/</link>
      <pubDate>Sat, 07 May 2016 18:01:51 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/07/how-to-use-fixed-ip-address-for-a-lxd-container/</guid>
      <description>2016-08-12 追記 lxd-bridge サービスを再起動せずに固定IPアドレス設定を更新できるようにするための設定方法を LXDのdnsmasqの固定IP設定をSIGHUPで</description>
    </item>
    
    <item>
      <title>LXCの特定の1つのコンテナの起動状態をシェルスクリプトで確認したいときのお勧めの方法</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/script-to-check-running-status-of-lxd-container/</link>
      <pubDate>Sat, 07 May 2016 14:12:49 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/07/script-to-check-running-status-of-lxd-container/</guid>
      <description>イマイチな方法1: lxc listの出力をawkで加工 lxc list -h を見ると lxc list [resource] [filters] [--format table|json] [-c columns] [--fast] というコマンドラインになっていて、 -c オプションで表示するカラ</description>
    </item>
    
    <item>
      <title>Ubuntu 16.04 LTSでLXD 2.0をセットアップして使ってみる</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/start-using-lxd-2.0-on-ubuntu-16.04/</link>
      <pubDate>Sat, 07 May 2016 14:12:49 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/07/start-using-lxd-2.0-on-ubuntu-16.04/</guid>
      <description>参考記事 公式ドキュメントのLinux Containers - LXD - はじめに - コマンドラインによくまとまっているのですが、より詳細には The LXD 2.0 Story (Prologue) | Ubuntu Insights にリストアップ</description>
    </item>
    
    <item>
      <title>Ubuntu 16.04 LTSでLXD 2.0を試してみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-2.0-on-ubuntu-16.04/</link>
      <pubDate>Sat, 07 May 2016 14:12:49 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/07/tried-lxd-2.0-on-ubuntu-16.04/</guid>
      <description>はじめに LXC 2.0でCentOS 7のコンテナを動かしてみた · hnakamur&amp;rsquo;s blog at githubでLXC 2.0を試しましたが、今度はLXD 2.0を試してみました</description>
    </item>
    
    <item>
      <title>Ubuntuでホームディレクトリを暗号化するのを止めた</title>
      <link>https://hnakamur.github.io/blog/2016/05/02/uninstall-encrypted-home-on-ubuntu/</link>
      <pubDate>Mon, 02 May 2016 12:28:08 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/02/uninstall-encrypted-home-on-ubuntu/</guid>
      <description>背景 MacをPXEサーバにしてExpress5800/S70タイプRBにUbuntu16.04をインストールしてみた · hnakamur&amp;rsquo;s blog at githubでホ</description>
    </item>
    
    <item>
      <title>Ubuntu 16.04でNo-IPのダイナミックDNSサービスを使ってみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/02/use-no-ip-dynamic-dns-on-ubuntu-16.04/</link>
      <pubDate>Mon, 02 May 2016 09:39:31 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/02/use-no-ip-dynamic-dns-on-ubuntu-16.04/</guid>
      <description>背景 MacをPXEサーバにしてExpress5800/S70タイプRBにUbuntu16.04をインストールしてみた · hnakamur&amp;rsquo;s blog at githubで自</description>
    </item>
    
    <item>
      <title>MacをPXEサーバにしてExpress5800/S70タイプRBにUbuntu16.04をインストールしてみた</title>
      <link>https://hnakamur.github.io/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/</link>
      <pubDate>Sun, 01 May 2016 22:36:19 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/05/01/install_ubuntu_xenial_with_pxe_boot/</guid>
      <description>背景 Goで書いたプログラムをMacBook Pro上で負荷試験をしていたら、ビーチボールカーソルが回りっぱなしになって大変でした。そういえば、</description>
    </item>
    
    <item>
      <title>go-daemonとgoのos.StartProcess()のコードを読んでみた</title>
      <link>https://hnakamur.github.io/blog/2016/04/23/go-daemon-and-golang-os-startprocess-code-reading/</link>
      <pubDate>Sat, 23 Apr 2016 16:45:09 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/04/23/go-daemon-and-golang-os-startprocess-code-reading/</guid>
      <description>発端: Goでデーモンを書くのは無理と思っていたら実は出来るらしい Goでデーモンを書くのは無理と以前どこかで読んだ気がします。 ところが、Pyt</description>
    </item>
    
    <item>
      <title>LXC 2.0でCentOS 7のコンテナを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2016/04/19/run_centos7_containers_on_lxc2/</link>
      <pubDate>Tue, 19 Apr 2016 06:37:15 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/04/19/run_centos7_containers_on_lxc2/</guid>
      <description>はじめに なぜDockerではなくLXCを使うのか コンテナと言えばDockerが有名です。Docker 1.9からネットワーク機能が大幅に良くな</description>
    </item>
    
    <item>
      <title>「サーバ/インフラエンジニア養成読本 DevOps編」の献本を頂きました</title>
      <link>https://hnakamur.github.io/blog/2016/02/22/software_design_plus_devops_review/</link>
      <pubDate>Mon, 22 Feb 2016 21:30:52 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/02/22/software_design_plus_devops_review/</guid>
      <description>「最速攻略！ Ansible 2によるサーバ構築」という特集を書かれた新原 雅司さんから「サーバ/インフラエンジニア養成読本 DevOps編」の献本を頂きました</description>
    </item>
    
    <item>
      <title>Apache Traffic Server を GDB で動かす</title>
      <link>https://hnakamur.github.io/blog/2016/02/12/run-apache-traffic-server-with-gdb/</link>
      <pubDate>Fri, 12 Feb 2016 00:02:11 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/02/12/run-apache-traffic-server-with-gdb/</guid>
      <description>はじめに WEB+DB PRESS Vol.69｜技術評論社 にあった アリエル・ネットワーク㈱の井上さんによる「大規模コードリーディング」の特集を読んで、静的解析 (コ</description>
    </item>
    
    <item>
      <title>Apache Traffic Server のコードリーディング</title>
      <link>https://hnakamur.github.io/blog/2016/02/11/apache-traffic-server-code-reading/</link>
      <pubDate>Thu, 11 Feb 2016 23:11:50 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/02/11/apache-traffic-server-code-reading/</guid>
      <description>Apache Traffic Server のコードリーディングを少しやってみたので、将来の自分に向けてメモ。 コードリーディングの方法についての参考文献 WEB+DB PRESS Vol.69｜技術評論</description>
    </item>
    
    <item>
      <title>rsyslogで信頼性のあるログ転送について調べたメモ</title>
      <link>https://hnakamur.github.io/blog/2016/01/08/reliable_log_forward_with_rsyslog/</link>
      <pubDate>Fri, 08 Jan 2016 01:12:13 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2016/01/08/reliable_log_forward_with_rsyslog/</guid>
      <description>事の発端は fluentd を使ってみようかと思って fluentd(td-agent)のインストールと設定 を読んだことで す。fluentd のデメリットのとこ</description>
    </item>
    
    <item>
      <title>ambiguous width cjk patchを当てたhomebrew用tmux</title>
      <link>https://hnakamur.github.io/blog/2015/12/29/homebrew-tmux-ambiguous-width-cjk-patch/</link>
      <pubDate>Tue, 29 Dec 2015 00:53:53 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/12/29/homebrew-tmux-ambiguous-width-cjk-patch/</guid>
      <description>ほぼHomebrewでサクッとpatchを当てる - Qiitaのそのままですが、tmuxのバージョンを2.1に上げたものをhnakamur/h</description>
    </item>
    
    <item>
      <title>CentOS 7用にPython2最新版のrpmを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2015/12/19/build_latest_python2_rpm_for_centos7/</link>
      <pubDate>Sat, 19 Dec 2015 11:51:30 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/12/19/build_latest_python2_rpm_for_centos7/</guid>
      <description>はじめに coprのAPIをcurlで呼び出す · hnakamur&amp;rsquo;s blog at githubにも書きましたが、CentOS 7のPythonは古くてhttps通信時にIn</description>
    </item>
    
    <item>
      <title>direnvでgo1.5.2とgo1.6beta1を切り替える設定</title>
      <link>https://hnakamur.github.io/blog/2015/12/19/switch_go1.5.2_and_go1.6beta1_with_direnv/</link>
      <pubDate>Sat, 19 Dec 2015 01:45:25 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/12/19/switch_go1.5.2_and_go1.6beta1_with_direnv/</guid>
      <description>はじめに go1.6beta1がリリースされました。go1.5.2と切り替えて使いたいので、direnv/direnv用の設定を書きました。 設</description>
    </item>
    
    <item>
      <title>Mockやcoprでrpmをビルドする際にサードパーティのレポジトリを追加する方法</title>
      <link>https://hnakamur.github.io/blog/2015/12/18/add_third_party_to_build_on_mock_and_copr/</link>
      <pubDate>Fri, 18 Dec 2015 01:43:28 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/12/18/add_third_party_to_build_on_mock_and_copr/</guid>
      <description>はじめに Mockやcoprでrpmをビルドする際にCentOS標準のレポジトリ以外のサードパーティのレポジトリのrpmに依存したい場合があり</description>
    </item>
    
    <item>
      <title>mockを使ったrpmビルドが失敗した時の調査方法</title>
      <link>https://hnakamur.github.io/blog/2015/12/16/how_to_debug_errors_in_rpm_build_using_mock/</link>
      <pubDate>Wed, 16 Dec 2015 01:10:33 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/12/16/how_to_debug_errors_in_rpm_build_using_mock/</guid>
      <description>はじめに nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました · hnakamur&amp;rsquo;s blog at githubで</description>
    </item>
    
    <item>
      <title>coprのAPIをcurlで呼び出す</title>
      <link>https://hnakamur.github.io/blog/2015/12/16/calling_copr_api_with_curl/</link>
      <pubDate>Wed, 16 Dec 2015 00:06:39 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/12/16/calling_copr_api_with_curl/</guid>
      <description>はじめに coprを利用するには以下の3つの手段があります。 ウェブ管理画面を使う スクリーンショットつきのチュートリアル copr-cliというコ</description>
    </item>
    
    <item>
      <title>nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました</title>
      <link>https://hnakamur.github.io/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</link>
      <pubDate>Tue, 15 Dec 2015 04:19:16 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/12/15/using_mock_and_copr_to_build_nginx_rpm_on_docker/</guid>
      <description>はじめに Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた · hnakamur&amp;rsquo;s blog at githubとmockコマ</description>
    </item>
    
    <item>
      <title>rpmのspecファイルのSourceにGitHubの任意のコミットのtarballのURLを指定するときの良い書き方</title>
      <link>https://hnakamur.github.io/blog/2015/12/06/good_rpm_spec_source_url_syntax_for_tarball_on_github/</link>
      <pubDate>Sun, 06 Dec 2015 00:07:23 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/12/06/good_rpm_spec_source_url_syntax_for_tarball_on_github/</guid>
      <description>Packaging:SourceURL - FedoraProjectで知ったtipsの紹介です。 GitHubでプロジェクトの[Download ZIP]ボタンを押すと、ソースをZI</description>
    </item>
    
    <item>
      <title>mockコマンドでrpmをビルドする</title>
      <link>https://hnakamur.github.io/blog/2015/12/05/build_rpm_with_mock/</link>
      <pubDate>Sat, 05 Dec 2015 22:10:26 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/12/05/build_rpm_with_mock/</guid>
      <description>2015-12-15 追記 nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました · hnakamur&amp;rsquo;s blog at githubとい</description>
    </item>
    
    <item>
      <title>Travis CIとcopr.fedoraproject.orgを使ってrpmをビルド・配布するのを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/</link>
      <pubDate>Thu, 26 Nov 2015 22:33:57 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/11/26/use_travis_and_copr_to_build_and_host_rpm/</guid>
      <description>2015-12-15 追記 nginxのカスタムrpmをmockでビルドできることを確認してからcoprでビルド・配布する環境を作りました · hnakamur&amp;rsquo;s blog at githubとい</description>
    </item>
    
    <item>
      <title>mattn/gomにGoのvendoringサポートが追加されました</title>
      <link>https://hnakamur.github.io/blog/2015/10/22/gom_got_go_vendoring_support/</link>
      <pubDate>Thu, 22 Oct 2015 01:22:10 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/10/22/gom_got_go_vendoring_support/</guid>
      <description>以前Go言語のDependency/Vendoringの問題と今後．gbあるいはGo1.5 | SOTAを読んだのですが、その時は様子見にしてい</description>
    </item>
    
    <item>
      <title>MySQL APT repositoryからMySQL 5.7.xをインストールするスクリプト</title>
      <link>https://hnakamur.github.io/blog/2015/09/22/noninteractive_install_from_mysql_apt_repository_on_ubuntu_trusty/</link>
      <pubDate>Tue, 22 Sep 2015 22:35:21 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/09/22/noninteractive_install_from_mysql_apt_repository_on_ubuntu_trusty/</guid>
      <description>Ubuntu 14.04 (Trusty)にMySQL APT RepositoryからMySQL 5.7 (Development Release)を インストールするスクリプトを書きました。 Vagra</description>
    </item>
    
    <item>
      <title>Goでグローバルなバッファを使いまわしてスタックトレースを取得するライブラリを書いてみた</title>
      <link>https://hnakamur.github.io/blog/2015/08/31/go_stacktrace_library_with_global_buffer/</link>
      <pubDate>Mon, 31 Aug 2015 00:43:56 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/08/31/go_stacktrace_library_with_global_buffer/</guid>
      <description>背景と経緯 Goでもエラー処理にpanicを使えばスタックトレースが出力されます。でも、ライブラリでは panic するとエラー処理して続行したいときに困</description>
    </item>
    
    <item>
      <title>自分のグローバルアドレスをOpenDNSとdigコマンドで調べる方法を試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/08/12/get_my_global_ip_address_with_opendns/</link>
      <pubDate>Wed, 12 Aug 2015 07:14:59 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/08/12/get_my_global_ip_address_with_opendns/</guid>
      <description>linux - How can I get my external IP address in bash? - Unix &amp;amp; Linux Stack Exchangeを読んで試してみたのでメモです。 この記事を読むまでは curl -s http://ifconfig.me しか知りませんでした。 処理時間を</description>
    </item>
    
    <item>
      <title>Ubuntu 14.04のPython3でvenvを使う手順のメモ</title>
      <link>https://hnakamur.github.io/blog/2015/07/26/use_python3_venv_on_ubuntu_14.04/</link>
      <pubDate>Sun, 26 Jul 2015 23:09:17 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/07/26/use_python3_venv_on_ubuntu_14.04/</guid>
      <description>Ubuntu 14.04のPython3でvenv環境をつくろうとしたらエラーになったのですが、thefourtheye&amp;rsquo;s Tech Blog: Python&amp;rsquo;s venv problem with ensurepip in</description>
    </item>
    
    <item>
      <title>HomebrewのPython2とPython3でvirtualenv環境を作成する手順メモ</title>
      <link>https://hnakamur.github.io/blog/2015/07/26/how_to_use_venv_with_homebrew_python2_and_3/</link>
      <pubDate>Sun, 26 Jul 2015 02:28:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/07/26/how_to_use_venv_with_homebrew_python2_and_3/</guid>
      <description>はじめに ここしばらくriywo/anyenvとyyuu/pyenvでPython 2.7.10をPython 3.4.3を使い分けてきたのですが</description>
    </item>
    
    <item>
      <title>GeForce搭載の旧モデルMacBook ProでCaffeをビルドする手順メモ</title>
      <link>https://hnakamur.github.io/blog/2015/07/26/build_caffe_on_macbook_with_geforce/</link>
      <pubDate>Sun, 26 Jul 2015 00:53:52 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/07/26/build_caffe_on_macbook_with_geforce/</guid>
      <description>はじめに GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモでCUDA 7.0.29をインストールしたMac</description>
    </item>
    
    <item>
      <title>GeForce搭載の旧モデルMacBook ProでPyCUDAを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/07/25/setup_pycuda_on_macbook_pro_with_geforce/</link>
      <pubDate>Sat, 25 Jul 2015 18:31:56 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/07/25/setup_pycuda_on_macbook_pro_with_geforce/</guid>
      <description>はじめに GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモでCUDAをセットアップした後、PyCUDAも</description>
    </item>
    
    <item>
      <title>GeForce搭載の旧モデルMacBook ProでCUDAをセットアップする手順のメモ</title>
      <link>https://hnakamur.github.io/blog/2015/07/25/setup_cuda_on_macbook_pro_with_geforce/</link>
      <pubDate>Sat, 25 Jul 2015 17:37:59 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/07/25/setup_cuda_on_macbook_pro_with_geforce/</guid>
      <description>はじめに MacBook Pro現行モデルの技術仕様を見ると最上位機種のグラフィックスチップはIntel Iris Pro GraphicsとAMD Radeon R9 M370Xとなってお</description>
    </item>
    
    <item>
      <title>OSX上でmultirustを使ったrustfmtのインストール手順</title>
      <link>https://hnakamur.github.io/blog/2015/07/19/install_rustfmt/</link>
      <pubDate>Sun, 19 Jul 2015 00:33:15 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/07/19/install_rustfmt/</guid>
      <description>OSXではbuilding cargo atop multirust fails, dyn link problems (Mac OS X) · Issue #43 · brson/multirustのイシューのコメント106758695にあるように rustfmt の実</description>
    </item>
    
    <item>
      <title>manyrustという複数バージョンのrustインストールスクリプトを書いた</title>
      <link>https://hnakamur.github.io/blog/2015/07/18/manyrust/</link>
      <pubDate>Sat, 18 Jul 2015 23:13:32 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/07/18/manyrust/</guid>
      <description>multirustがあるのに、なぜ新たに書いたのか rustのインストールはInstall · The Rust Programming Languageにあるように複数のチャネルか</description>
    </item>
    
    <item>
      <title>xhyveでFreeBSDを動かしてみた</title>
      <link>https://hnakamur.github.io/blog/2015/07/12/running_freebsd_on_xhyve/</link>
      <pubDate>Sun, 12 Jul 2015 06:34:46 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/07/12/running_freebsd_on_xhyve/</guid>
      <description>下記の記事を参考に動かしただけですが、後々使うときに手順を忘れているはずなのでメモ。 xhyve で FreeBSD を動かしてみた - blog.holidayworking.org FreeBSD on xhyve でディスクをマウントするこ</description>
    </item>
    
    <item>
      <title>Cybozu Garoon APIのファイル管理の部分だけのgoライブラリを書いた</title>
      <link>https://hnakamur.github.io/blog/2015/06/15/garoon_go_client/</link>
      <pubDate>Mon, 15 Jun 2015 20:24:16 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/06/15/garoon_go_client/</guid>
      <description>はじめに Cybozu Garoon APIのファイル管理のうち、フォルダ一覧取得、フォルダ内のファイル一覧取得、ファイルダウンロードのAPIを呼び出すライブラリをG</description>
    </item>
    
    <item>
      <title>mecab-ipadicでconfigure実行したらmatrix.defが無いというエラー</title>
      <link>https://hnakamur.github.io/blog/2015/06/14/mecab-ipadic-matrix.def-missing/</link>
      <pubDate>Sun, 14 Jun 2015 16:40:05 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/06/14/mecab-ipadic-matrix.def-missing/</guid>
      <description>TL;DR https://github.com/taku910/mecab/tree/master/mecab-ipadic を取得して ./configure --with-charset=&amp;quot;utf-8&amp;quot; と実行したら configure: error: cannot find sources (matrix.def) in . or .. というエラーが出て困ってます。解決策を知っている方ぜひ教えてください。 経緯と詳細な手順 rm</description>
    </item>
    
    <item>
      <title>Homebrewを辞めてMacPorts 2.3.3を入れてpkgngをビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2015/06/11/tried_macports/</link>
      <pubDate>Thu, 11 Jun 2015 01:09:08 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/06/11/tried_macports/</guid>
      <description>はじめに https://twitter.com/shibu_jp/status/598332736638582785 と 第2回 パッケージ管理システム「pkg 1.5」と基本的な使い方：BSD界隈四方山話｜gihyo.jp … 技術評論社で、実験段階ですが</description>
    </item>
    
    <item>
      <title>xhyveを試してみました</title>
      <link>https://hnakamur.github.io/blog/2015/06/11/tried_xhyve/</link>
      <pubDate>Thu, 11 Jun 2015 00:45:38 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/06/11/tried_xhyve/</guid>
      <description>xhyve – Lightweight Virtualization on OS X Based on bhyve | pagetable.comに沿って試してみました。 確認した環境 MacBook Pro (Retina, Mid 2012) OS X Yosemite 10.10.3 ソースからビルド cd お好みの作業ディレク</description>
    </item>
    
    <item>
      <title>Go言語用のメモリマップトファイルのライブラリを探してみた</title>
      <link>https://hnakamur.github.io/blog/2015/06/03/go_mmap_libraries/</link>
      <pubDate>Wed, 03 Jun 2015 06:29:01 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/06/03/go_mmap_libraries/</guid>
      <description>ふとGo言語でメモリマップトファイルを扱えるライブラリってあるのかなと気になったので探してみました。 標準ライブラリ Goのホームページでmma</description>
    </item>
    
    <item>
      <title>LuaのGo実装GopherLuaを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/06/03/tried_gopher_lua/</link>
      <pubDate>Wed, 03 Jun 2015 05:29:03 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/06/03/tried_gopher_lua/</guid>
      <description>はじめに inforno :: LuaのGo言語実装を公開しましたを以前読んでましたが、試してなかったので試しました。 Lua: aboutの&amp;quot;What is Lua</description>
    </item>
    
    <item>
      <title>Vagrant &#43; Virtualboxでのディスク追加</title>
      <link>https://hnakamur.github.io/blog/2015/06/01/add_secondary_disk_to_vagrant_virtualbox/</link>
      <pubDate>Mon, 01 Jun 2015 06:04:04 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/06/01/add_secondary_disk_to_vagrant_virtualbox/</guid>
      <description>Vagrant + Virtualboxでのディスク追加についてのメモです。 ディスク追加の設定 http://stackoverflow.com/questions/21050496/vagrant-virtualbox-second-disk-path/26743144#26743144 https://gist.github.com/leifg/4713995#comment-1206250 を参考に以下のようにしました。 # -*- mode: ruby -*- # vi: set ft=ruby : Vagrant.configure(2) do |config| config.vm.box</description>
    </item>
    
    <item>
      <title>goでglogを使うときのメモ</title>
      <link>https://hnakamur.github.io/blog/2015/05/31/how_to_use_glog/</link>
      <pubDate>Sun, 31 May 2015 02:30:02 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/05/31/how_to_use_glog/</guid>
      <description>go言語におけるロギングについての記事とglog - GoDocを読んで試してみました。 flag.Parse() を呼ぶ必要があり、最後に glog.Flush() を呼ぶ必要があるので main で defer で</description>
    </item>
    
    <item>
      <title>FreeBSD 10.1 amd64でRustをビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/2015/05/17/build_rust_on_freebsd/</link>
      <pubDate>Sun, 17 May 2015 07:51:14 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/05/17/build_rust_on_freebsd/</guid>
      <description>Install · The Rust Programming Language を見ると現在のところRustのバイナリが提供されているのはLinux, Mac, Windowsのみです。 FreeBSD 10.1 amd64でソースからビルド</description>
    </item>
    
    <item>
      <title>さくらのVPSにFreeBSD 10.1をクリーンインストールした時のメモ</title>
      <link>https://hnakamur.github.io/blog/2015/05/16/install_freebsd10.1_on_sakura_vps/</link>
      <pubDate>Sat, 16 May 2015 11:39:29 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/05/16/install_freebsd10.1_on_sakura_vps/</guid>
      <description>はじめに さくらのVPSにFreeBSD 10.1をクリーンインストールしてみましたので、手順をメモしておきます。作業した環境は MacBook Pro (USキーボ</description>
    </item>
    
    <item>
      <title>mithril.jsを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/05/12/tried_mithril_js/</link>
      <pubDate>Tue, 12 May 2015 22:02:03 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/05/12/tried_mithril_js/</guid>
      <description>はじめに groongaのgoバインディングでWikipedia全文検索のサンプルウェブアプリを作ってみた · hnakamur&amp;rsquo;s blog at githubのフロントエンド</description>
    </item>
    
    <item>
      <title>groongaのgoバインディングでWikipedia全文検索のサンプルウェブアプリを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</link>
      <pubDate>Tue, 12 May 2015 21:24:11 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/05/12/cgoroonga_wikipedia_search_webapp/</guid>
      <description>データ登録用にgroongaのC APIのgoバインディングを書いてみた · hnakamur&amp;rsquo;s blog at githubの続きで、APIを追加実装し、Wikipedia全</description>
    </item>
    
    <item>
      <title>Goでdeferの処理中のエラーを返す書き方を工夫してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/27/write_function_for_go_defer/</link>
      <pubDate>Mon, 27 Apr 2015 02:06:02 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/27/write_function_for_go_defer/</guid>
      <description>go-nutsのメーリングリストの記事 https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/Y4MCVZZ3c5sJ によるとdeferで呼ばれた関数の戻り値は捨てられるそうです。 https://groups.google.com/d/msg/golang-nuts/qTTBENO_Em0/UlI77BM2PUkJ で戻り値の変数に代入するという方法が</description>
    </item>
    
    <item>
      <title>データ登録用にgroongaのC APIのgoバインディングを書いてみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/27/cgoroonga/</link>
      <pubDate>Mon, 27 Apr 2015 00:44:23 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/27/cgoroonga/</guid>
      <description>groongaで大量のデータを登録する方法を調べてみた 方法1: loadコマンドの文字列を組み立ててgroongaコマンドの標準入力に流し込む</description>
    </item>
    
    <item>
      <title>Groongaのチュートリアルを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/26/tried_groonga_tutorial/</link>
      <pubDate>Sun, 26 Apr 2015 23:53:06 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/26/tried_groonga_tutorial/</guid>
      <description>Groongaのチュートリアルを試してみたメモです。 試した環境は Groonga 5.0.2, Ubuntu 14.04.2 です。 セットアップ手順 2.4. Ubuntu — Groonga v5.0.2ドキュメントにそってセット</description>
    </item>
    
    <item>
      <title>vagrant box updateでboxファイルをアップグレードする</title>
      <link>https://hnakamur.github.io/blog/2015/04/25/vagrant-box-update/</link>
      <pubDate>Sat, 25 Apr 2015 21:55:31 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/25/vagrant-box-update/</guid>
      <description>Vagrant Cloudに上がっているUbuntu trustyのオフィシャルイメージubuntu/trusty64 | Atlas by HashiCorpをVagran</description>
    </item>
    
    <item>
      <title>jetpackを試してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/23/try-jetpack/</link>
      <pubDate>Thu, 23 Apr 2015 01:27:57 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/23/try-jetpack/</guid>
      <description>はじめに 3ofcoins/jetpackはFreeBSD, Jail, ZFSを使ったApp Container Specの実装です。まだプロトタイプレベルとのことです。G</description>
    </item>
    
    <item>
      <title>LXD 0.7ではlxc execでシェルの対話操作もできるようになっていました</title>
      <link>https://hnakamur.github.io/blog/2015/04/23/try-lxd-0.7-with-vagrant/</link>
      <pubDate>Thu, 23 Apr 2015 00:08:30 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/23/try-lxd-0.7-with-vagrant/</guid>
      <description>はじめに LXDを試してみた · hnakamur&amp;rsquo;s blog at githubの記事を書いて以来、LXD触る時間を作れてなかったのですが、久々に試してみました。 今ではlxc</description>
    </item>
    
    <item>
      <title>curlでダウンロードを中断後再開するときは-Cオプションが便利</title>
      <link>https://hnakamur.github.io/blog/2015/04/19/use_curl_c_option_to_resume_download/</link>
      <pubDate>Sun, 19 Apr 2015 01:07:35 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/19/use_curl_c_option_to_resume_download/</guid>
      <description>ISOイメージのようなサイズが大きなファイルを curl でダウンロードしようとして途中で中断してしまって再開するときに、 -C オプションが便利だったので</description>
    </item>
    
    <item>
      <title>サイズが大きなファイルのコピーにはrsyncの-Pオプションが便利</title>
      <link>https://hnakamur.github.io/blog/2015/04/19/use_rsync_p_option_to_copy_large_file/</link>
      <pubDate>Sun, 19 Apr 2015 00:56:31 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/19/use_rsync_p_option_to_copy_large_file/</guid>
      <description>Vagrantの自作boxファイルをインターネット上のサーバにアップロードするときなどに、 rsync の -P オプションが便利だったのでメモ。 rsyncの</description>
    </item>
    
    <item>
      <title>Hugoに移行した私のブログの記事追加手順</title>
      <link>https://hnakamur.github.io/blog/2015/04/19/my_hugo_blog_workflow/</link>
      <pubDate>Sun, 19 Apr 2015 00:17:59 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/19/my_hugo_blog_workflow/</guid>
      <description>はじめに OctopressからHugoへ移行した | SOTAを参考に私のブログもしばらく前にHugoに移行しました。deeeetさん、ありがと</description>
    </item>
    
    <item>
      <title>JXA (JavaScript for Automation)を使ってOSXの初期設定を半自動化してみた</title>
      <link>https://hnakamur.github.io/blog/2015/04/06/jxa-osx-automation-with-javascript/</link>
      <pubDate>Mon, 06 Apr 2015 04:40:43 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/06/jxa-osx-automation-with-javascript/</guid>
      <description>概要 OSXを再インストールしたときなどキーボードやトラックパッドの設定を行いますが、 設定する項目が意外と多くて時間がかかります。 そこでJXA</description>
    </item>
    
    <item>
      <title>Homebrew Caskを使わずにdmgファイルのアプリをコマンドでインストールする</title>
      <link>https://hnakamur.github.io/blog/2015/04/06/install-apps-without-homebrew-cask/</link>
      <pubDate>Mon, 06 Apr 2015 00:45:50 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/04/06/install-apps-without-homebrew-cask/</guid>
      <description>なぜHomebrew Caskをやめたか Mac の開発環境構築を自動化する (2015 年初旬編) - t-wadaのブログでもHomebrew Caskの不安な点に</description>
    </item>
    
    <item>
      <title>Riot.jsでタグエディターのサンプルを作ってみた</title>
      <link>https://hnakamur.github.io/blog/2015/02/28/riot-tag-editor-example/</link>
      <pubDate>Sat, 28 Feb 2015 21:12:37 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/02/28/riot-tag-editor-example/</guid>
      <description>Riot.js Riot.jsについてはRiot.js 2.0 情報まとめ - Qiitaに良いまとめがありますのでそちらをどうぞ。良いまとめをありがとうございます。</description>
    </item>
    
    <item>
      <title>Windows UI Automation APIを使うためのGoライブラリw32uiautomationを書いた</title>
      <link>https://hnakamur.github.io/blog/2015/02/22/w32uiautomation/</link>
      <pubDate>Sun, 22 Feb 2015 00:09:24 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/02/22/w32uiautomation/</guid>
      <description>なぜ ウェブアプリ開発をしているとInternet Explorerでの動作確認のためmodern.IEが欠かせません。が、インストール直後は英</description>
    </item>
    
    <item>
      <title>Build UIAutomation samples in Windows SDK 7.1</title>
      <link>https://hnakamur.github.io/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</guid>
      <description>Windows SDK 7.1 をインストール Download Microsoft Windows SDK for Windows 7 and .NET Framework 4 from Official Microsoft Download Centerからダウンロード、インストールします。後でMSBuild.exeを使うため、I</description>
    </item>
    
    <item>
      <title>LXDを試してみた</title>
      <link>https://hnakamur.github.io/blog/2014/12/01/lxd-the-linux-container-daemon/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2014/12/01/lxd-the-linux-container-daemon/</guid>
      <description>はじめに LXDに関するページをいくつか紹介します。 [lxc-users] LXD an &amp;ldquo;hypervisor&amp;rdquo; for containers (based on liblxc) LXCメーリングリストに投稿されたLXDのアナウンスメール LXDのホーム</description>
    </item>
    
    <item>
      <title>Diagram as a Code</title>
      <link>https://hnakamur.github.io/blog/2014/09/07/diagram-as-a-code/</link>
      <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2014/09/07/diagram-as-a-code/</guid>
      <description>この記事はpplogに書いた記事 https://www.pplog.net/u/hnakamur2 の転載です。 背景 プログラマである私は、既存の作図ツールやシステムに不満があります。こうなってたらいいのにと</description>
    </item>
    
    <item>
      <title>OSX上でPythonのPILの代わりにPillowをインストールする</title>
      <link>https://hnakamur.github.io/blog/2014/06/10/install-python-pillow-on-osx/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2014/06/10/install-python-pillow-on-osx/</guid>
      <description>試したバージョン Python: 2.7.7 OSX: 10.8.5 以前作ったGoogle App Engine OAuth 2.0 sampleについて問合せを受けたので、動作確認しようと思ったらPILのインストールで</description>
    </item>
    
    <item>
      <title>久々にoctopressをアップデート</title>
      <link>https://hnakamur.github.io/blog/2014/06/10/upgrade-octopress/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2014/06/10/upgrade-octopress/</guid>
      <description>octopressをアップデートした時にハマったのでメモ。 アップデート手順はoctopressをアップデートしてisolateを使い始めた -</description>
    </item>
    
    <item>
      <title>Chef-soloとAnsibleとFabricを試した感想</title>
      <link>https://hnakamur.github.io/blog/2013/09/01/tried-chef-ansible-fabric/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2013/09/01/tried-chef-ansible-fabric/</guid>
      <description>Chef-soloとAnsibleとFabricを試してみたので感想をメモ。どれもそんなに深くは使い込んではいない。 このメモは自分の脳内の考</description>
    </item>
    
    <item>
      <title>Vagrant 1.1.5とSaharaを試した</title>
      <link>https://hnakamur.github.io/blog/2013/04/03/how-to-setup-vagrant-1-dot-1-5-and-sahara/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2013/04/03/how-to-setup-vagrant-1-dot-1-5-and-sahara/</guid>
      <description>Vagrantと1.0.xと1.1.xについて バージョン1.1.xの位置づけについては以下の記事を参照。 Vagrant 1.1, VMware Fusion - HashiCorp 変更履歴は vagrant/CHANGELOG.md at master · mitchellh/vagrant · G</description>
    </item>
    
    <item>
      <title>lua, V8, ruby, mrubyでfib(39)の実行時間比較</title>
      <link>https://hnakamur.github.io/blog/2013/03/12/fib-39-benchmark-in-luajit/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2013/03/12/fib-39-benchmark-in-luajit/</guid>
      <description>lua, V8, ruby, mrubyでfib(39)の実行時間比較 - hnakamur&amp;rsquo;s blog at githubが@matzさんにツイートされたのを受けて、各処理系の最新版で再度試してみ</description>
    </item>
    
    <item>
      <title>d3.jsを使ったツールチップあり複数折れ線グラフのサンプルを作った</title>
      <link>https://hnakamur.github.io/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js/</guid>
      <description>D3.js - Data-Driven Documentsを使ってツールチップあり複数折れ線グラフのサンプルを作ったのでメモ。 サンプルMulti-Series Line Chartのサ</description>
    </item>
    
    <item>
      <title>EC2で同じリージョンの全ホストのプライベートIPを起動時にhostsに自動登録</title>
      <link>https://hnakamur.github.io/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region/</link>
      <pubDate>Sat, 16 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region/</guid>
      <description>Elastic IPの上限数にひっかかって使えない自体に遭遇したので作りました。 Elastic IP アドレス上限緩和申請 | アマゾン ウェブ サービス（AWS 日本語） から緩和申</description>
    </item>
    
    <item>
      <title>IAM管理コンソールでAWSの管理画面用のユーザを作成</title>
      <link>https://hnakamur.github.io/blog/2013/02/09/create-aim-user/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2013/02/09/create-aim-user/</guid>
      <description>AWS (Amazon Web Services)の管理コンソールを複数人で使う場合に大元のIDとパスワードを共有するのは避けたい場合、IAMでユーザを作成するのがよ</description>
    </item>
    
    <item>
      <title>S3 error: Either the Signature query string parameter or the Authorization header should be specified</title>
      <link>https://hnakamur.github.io/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified/</guid>
      <description>現象 ApacheからAmazon S3にmod_proxyでリクエストを送ったら、ステータスが400になり、 &amp;ldquo;Either the Signature query string parameter or the Authorization header should be specified, not bot</description>
    </item>
    
    <item>
      <title>Unboundで在宅時に自宅サーバの名前解決</title>
      <link>https://hnakamur.github.io/blog/2013/02/02/use-unbound-dns-server/</link>
      <pubDate>Sat, 02 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2013/02/02/use-unbound-dns-server/</guid>
      <description>背景 私の自宅ではブロードバンドルータがグローバルIPを持っていて、DNSで自分のドメイン(以下ではexample.comとして説明します)の</description>
    </item>
    
    <item>
      <title>VirtualBox4でCentOS6.2をインストール</title>
      <link>https://hnakamur.github.io/blog/2012/07/03/virtualbox4decentos6-dot-2woinsutoru/</link>
      <pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/07/03/virtualbox4decentos6-dot-2woinsutoru/</guid>
      <description>VirtualBoxのインストール Downloads – Oracle VM VirtualBox からダウンロードしてインストールしてください。 ネットワークインストールのISOイメージをダウンロ</description>
    </item>
    
    <item>
      <title>node-http-proxyでバーチャルホストで振り分けつつhttp/https-&gt;websocketリバースプロキシの実験</title>
      <link>https://hnakamur.github.io/blog/2012/06/27/node-http-proxy/</link>
      <pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/06/27/node-http-proxy/</guid>
      <description>以下の2つのページを参考に、node-http-proxyでバーチャルホストで振り分けつつ http/httpsからwebsocketにリバー</description>
    </item>
    
    <item>
      <title>node.jsのfs.watch()で設定ファイルが更新されたらリロード</title>
      <link>https://hnakamur.github.io/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo/</link>
      <pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo/</guid>
      <description>javascript - Auto-reload of files in Node.js - Stack Overflowによると、モジュールをリロードするにはisaacs/node-supervisorがよさそうです。 が、今回</description>
    </item>
    
    <item>
      <title>daemontoolsのインストール手順</title>
      <link>https://hnakamur.github.io/blog/2012/06/21/how-to-install-daemontools/</link>
      <pubDate>Thu, 21 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/06/21/how-to-install-daemontools/</guid>
      <description>CentOS6.2で確認。 OS起動時にdaemontoolsを起動する設定はHow to start daemontoolsを参照。 yum install -y make gcc rpm-build &amp;amp;&amp;amp; rpm -ivh http://mirrors.qmailtoaster.com/daemontools-toaster-0.76-1.3.6.src.rpm &amp;amp;&amp;amp; rpmbuild</description>
    </item>
    
    <item>
      <title>daemontoolsの使い方</title>
      <link>https://hnakamur.github.io/blog/2012/06/21/how-to-use-daemontools/</link>
      <pubDate>Thu, 21 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/06/21/how-to-use-daemontools/</guid>
      <description>daemontoolsを使う | Netsphere Laboratoriesを参考にしました。ありがとうございます。 私的ルール 無効化したサービスは/servic</description>
    </item>
    
    <item>
      <title>パスフレーズ無しの秘密鍵と自己証明書をコマンド一発で作る</title>
      <link>https://hnakamur.github.io/blog/2012/06/21/how-to-create-self-signed-certificate/</link>
      <pubDate>Thu, 21 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/06/21/how-to-create-self-signed-certificate/</guid>
      <description>以下はワイルドカード証明書の例です。適宜変更して使います。 openssl req -new -newkey rsa:2048 -x509 -nodes -days 365 -set_serial 0 \ -subj &#39;/C=JP/ST=Kanagawa/L=Yokohama City/CN=*.example.com&#39; \ -out wildcard.example.com.crt -keyout wildcard.example.com.key 証明書の内容確認 # openssl x509 -in wildcard.example.com.crt -text Certificate: Data: Version: 3 (0x2) Serial Number:</description>
    </item>
    
    <item>
      <title>/etc/sudoers.d/を使う→やっぱり止め</title>
      <link>https://hnakamur.github.io/blog/2012/05/04/use-slash-etc-slash-sudoers-dot-d-slash/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/05/04/use-slash-etc-slash-sudoers-dot-d-slash/</guid>
      <description>これまでいつも/etc/sudoersを編集していたのですが、よくみるとファイル末尾に ## Read drop-in files from /etc/sudoers.d (the # here does not mean a comment) #includedir /etc/sudoers.d と書いてあって、/et</description>
    </item>
    
    <item>
      <title>CentOS6でchef-soloとknife-soloをセットアップ</title>
      <link>https://hnakamur.github.io/blog/2012/05/04/setup-chef-solo-and-knife-solo-on-centos6/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/05/04/setup-chef-solo-and-knife-solo-on-centos6/</guid>
      <description>なぜ？ chef-soloで作業環境構築の自動化 | ひげろぐ を参考に、Chefサーバは使いたくないけど、chef-soloとknifeを使いたい</description>
    </item>
    
    <item>
      <title>lua, V8, ruby, mrubyでfib(39)の実行時間比較 2013-03-12版</title>
      <link>https://hnakamur.github.io/blog/2012/05/04/fib-39-benchmark-in-lua/</link>
      <pubDate>Fri, 04 May 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/05/04/fib-39-benchmark-in-lua/</guid>
      <description>2013-03-13追記 この記事が@matzさんにツイートされたのを受けて、各処理系の最新版で再度試してみました。 lua, V8, ruby, mrubyでfib(</description>
    </item>
    
    <item>
      <title>macruby-nightly-2012-03-07をXcode 4.3.1で試す</title>
      <link>https://hnakamur.github.io/blog/2012/03/11/try-macruby-nightly-2012-03-07-with-xcode-4-dot-3-1/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/03/11/try-macruby-nightly-2012-03-07-with-xcode-4-dot-3-1/</guid>
      <description>おまいらもMacRubyでMacアプリ作ろう - @sugamasao.blog.title # =&amp;gt; ”コードで世界を変えたい”を見て、ファイルやプロジェクトのテンプレートを追加すればXco</description>
    </item>
    
    <item>
      <title>Xcode 4.2.1でMacRuby 0.10を試す</title>
      <link>https://hnakamur.github.io/blog/2012/03/11/try-macruby-0-dot-10-with-xcode-4-dot-2-1/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/03/11/try-macruby-0-dot-10-with-xcode-4-dot-2-1/</guid>
      <description>Xcode 4.1やXcode 4.3.1ではうまくいかずXcode 4.2.1ならOKだった 最終的にうまく行ったバージョンの組み合わせは以下の通りです。</description>
    </item>
    
    <item>
      <title>Xcode 4.3.1のファイルテンプレートをカスタマイズ</title>
      <link>https://hnakamur.github.io/blog/2012/03/11/custom-file-template-for-xcode-4-dot-3-1/</link>
      <pubDate>Sun, 11 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/03/11/custom-file-template-for-xcode-4-dot-3-1/</guid>
      <description>Creating Custom Xcode 4 File Templatesを参考に作成してみました。 Apple提供のファイルテンプレートは /Developer/Platforms/iPhoneOS.platform/Developer/Library/Xcode/Templates/File Templates にあるとのこと。ですが、Xcode 4.3.1</description>
    </item>
    
    <item>
      <title>mod_xsendfileでダウンロード後にサーバ上のファイル自動削除</title>
      <link>https://hnakamur.github.io/blog/2012/03/03/delete-on-close-using-mod-xsendfile/</link>
      <pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/03/03/delete-on-close-using-mod-xsendfile/</guid>
      <description>mod_xsendfileのホームページ上でリリースされているバージョン0.12には含まれていませんが、Githubのレポジトリのソースでは</description>
    </item>
    
    <item>
      <title>octopressでgithubにブログ開設</title>
      <link>https://hnakamur.github.io/blog/2012/03/03/how-to-setup-octopress/</link>
      <pubDate>Sat, 03 Mar 2012 00:00:00 +0000</pubDate>
      
      <guid>https://hnakamur.github.io/blog/2012/03/03/how-to-setup-octopress/</guid>
      <description>rbenvとoctopressをインストールしてgithubにブログを作る手順のメモです。 rbenvをインストール sstephenson/rbenv sstephenson/ruby-build を参考にインストールし</description>
    </item>
    
  </channel>
</rss>