<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hnakamur&#39;s blog at github</title>
    <link>/blog/</link>
    <description>Recent content on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sat, 25 Apr 2015 21:55:31 +0900</lastBuildDate>
    <atom:link href="/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>vagrant box updateでboxファイルをアップグレードする</title>
      <link>/blog/2015/04/25/vagrant-box-update/</link>
      <pubDate>Sat, 25 Apr 2015 21:55:31 +0900</pubDate>
      
      <guid>/blog/2015/04/25/vagrant-box-update/</guid>
      <description>&lt;p&gt;Vagrant Cloudに上がっているUbuntu trustyのオフィシャルイメージ&lt;a href=&#34;https://atlas.hashicorp.com/ubuntu/boxes/trusty64&#34;&gt;ubuntu/trusty64 | Atlas by HashiCorp&lt;/a&gt;をVagrantfileで参照していたら、 &lt;code&gt;vagrant up&lt;/code&gt; の際に以下の様なメッセージが表示される時がありました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant up
…(略)…
==&amp;gt; default: A newer version of the box &#39;ubuntu/trusty64&#39; is available! You currently
==&amp;gt; default: have version &#39;14.04&#39;. The latest is version &#39;20150422.0.0&#39;. Run
==&amp;gt; default: `vagrant box update` to update.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以下のように実行するとアップデートが出来ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box update --box ubuntu/trusty64
Checking for updates to &#39;ubuntu/trusty64&#39;
Latest installed version: 14.04
Version constraints: &amp;gt; 14.04
Provider: virtualbox
Updating &#39;ubuntu/trusty64&#39; with provider &#39;virtualbox&#39; from version
&#39;14.04&#39; to &#39;20150422.0.0&#39;...
Loading metadata for box &#39;https://atlas.hashicorp.com/ubuntu/trusty64&#39;
Adding box &#39;ubuntu/trusty64&#39; (v20150422.0.0) for provider: virtualbox
Downloading: https://atlas.hashicorp.com/ubuntu/boxes/trusty64/versions/20150422.0.0/providers/virtualbox.box
Successfully added box &#39;ubuntu/trusty64&#39; (v20150422.0.0) for &#39;virtualbox&#39;!
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;アップデート完了後、box一覧を確認してみると以下のように新旧のバージョンが出力されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ vagrant box list | grep &#39;ubuntu/trusty64&#39;
ubuntu/trusty64                               (virtualbox, 14.04)
ubuntu/trusty64                               (virtualbox, 20150422.0.0)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;検証用に古いバージョンを使うことはできるのかなと思ったら&lt;a href=&#34;https://docs.vagrantup.com/v2/boxes/versioning.html&#34;&gt;Box Versioning - Vagrant Documentation&lt;/a&gt;に書いてありました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;config.vm.box_version&lt;/code&gt; を指定すれば良いようです。
また &lt;code&gt;config.vm.box_check_update = false&lt;/code&gt; を指定すれば、boxの新バージョンが出ているかのチェックを無効にできるそうです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>jetpackを試してみた</title>
      <link>/blog/2015/04/23/try-jetpack/</link>
      <pubDate>Thu, 23 Apr 2015 01:27:57 +0900</pubDate>
      
      <guid>/blog/2015/04/23/try-jetpack/</guid>
      <description>

&lt;h2 id=&#34;はじめに:d2be8c75ec3c908549cffd0ee3c6bc41&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/3ofcoins/jetpack#using-jetpack&#34;&gt;3ofcoins/jetpack&lt;/a&gt;はFreeBSD, Jail, ZFSを使った&lt;a href=&#34;https://github.com/appc/spec&#34;&gt;App Container Spec&lt;/a&gt;の実装です。まだプロトタイプレベルとのことです。Go言語で実装されています。&lt;/p&gt;

&lt;p&gt;masterの最新を試しました。今後のためにコミットハッシュをメモしておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sunshine5:jetpack hnakamur$ g log -1
commit 0792b938c7f9bdd43f9d117bfdec6cd91e223ee5
Author: Maciej Pasternacki &amp;lt;maciej@3ofcoins.net&amp;gt;
Date:   Mon Apr 13 06:26:57 2015

    Make image building work with per-app rootfs
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;セットアップ:d2be8c75ec3c908549cffd0ee3c6bc41&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;Vagrantfileが用意されているのでそれを使いました。
VirtualBox 4.3.26, Vagrant 1.7.2, OS X Yosemiteという環境で試しました。&lt;/p&gt;

&lt;p&gt;VagrantのAnsibleプロビジョナを利用しているので、予めホスト側にAnsibleをセットアップしておいてください。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant up
vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;jetpackを使ってみる:d2be8c75ec3c908549cffd0ee3c6bc41&#34;&gt;Jetpackを使ってみる&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/3ofcoins/jetpack#using-jetpack&#34;&gt;Using Jetpack&lt;/a&gt;の説明にそって、試してみました。&lt;/p&gt;

&lt;p&gt;引数無しで単に &lt;code&gt;jetpack&lt;/code&gt; と実行すると説明が出ます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jetpack
Usage: jetpack [OPTIONS] COMMAND...
Options:
  -config=PATH  Configuration file (/usr/local/etc/jetpack.conf)
  -help, -h     Display this help screen
Commands:
  help                                    Display this help screen
  init                                    Initialize host
  info                                    Show global information
  test                                    Run integration tests
  image list [QUERY]                      List images
  image import ARCHIVE [MANIFEST]         Import image from an archive
  image IMAGE build [OPTIONS] COMMAND...  Build new image from an existing one
                    -dir=.                Location on build directory on host
                    -cp=PATH...           Copy additional files from host
  image IMAGE show                        Display image details
  image IMAGE export [PATH]               Export image to an AMI file
                                          Output to stdout if no PATH given
  image IMAGE destroy                     Destroy image
  pod list                                List pods
  pod create [FLAGS] IMAGE [IMAGE FLAGS] [IMAGE [IMAGE FLAGS] ...]
                                          Create new pod from image
             -help                        Show detailed help
  pod POD show                            Display pod details
  pod POD run                             Run pod&#39;s application
  pod POD console [USER]                  Open console inside the pod
  pod POD ps|top|killall [OPTIONS...]
                                          Manage pod&#39;s processes
  pod POD kill                Kill running pod
  pod POD destroy             Destroy pod
Needs Explanation:
  ARCHIVE, MANIFEST  May be filesystem paths or URLs.
            cp=PATH  This option can be given multiple times
              QUERY  Is an expression that looks like this:
                      - NAME[,LABEL=VALUE[,LABEL=VALUE[,...]]]
                      - NAME:VERSION (alias for NAME:version=VERSION)
              IMAGE  Can be:
                      - an UUID (XXXXXXXX-XXXX-XXXX-XXXX-XXXXXXXX),
                      - a checksum (sha512-...), or
                      - a QUERY (which can&#39;t be ambiguous).
          POD  Has to be an UUID for now
Helpful Aliases:
  i|img ... -- image ...
  p ... -- pod ...
  image, images -- image list
  pod, pods -- pod list
  image build|show|export|destroy IMAGE ... -- image IMAGE build|show|... ...
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;jetpack init&lt;/code&gt; でZFSのデータセットとディレクトリ構造を初期化します。が、これはプロビジョニングで実行済みだったようです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jetpack init
/vagrant/jetpack/host.go:82: Host already initialized
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;jetpack info&lt;/code&gt; で状態を確認してみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jetpack info
JetPack 0.0.1 (v0.0.1-81-g0792b93), compiled on 2015-04-22T15:38:43Z
ZFS Dataset zroot/jetpack
  Mountpoint  /var/jetpack
Configuration:
  root.zfs                zroot/jetpack
  root.zfs.mountpoint     /var/jetpack
  images.ami.store        no
  images.ami.compression  xz
  images.zfs.atime        off
  images.zfs.compress     lz4
  jail.interface          lo1
  jail.namePrefix         jetpack/
  debug                   off
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;jetpack test&lt;/code&gt; でスモークテストを実行してみましたが、一般ユーザでは権限不足でした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ jetpack test
ERROR: mkdir /var/jetpack/test.881699652: permission denied
run.Command[/usr/local/libexec/jetpack/test.integration dataset=zroot/jetpack]: exit status 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スモークテストという言葉は知らなかったのですが、本格的なテストの前の簡易テストという意味だそうです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://nolan00267.blogspot.jp/2013/12/itsmoke-test.html&#34;&gt;ビジネス英語とアメリカ生活 | カリフォルニアの陽射しの中で: IT英語:　ソフトウェアの試験なのにSmoke Testとは、これいかに?&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.itmedia.co.jp/im/articles/1111/07/news166.html&#34;&gt;情報システム用語事典：スモークテスト（すもーくてすと） - ITmedia エンタープライズ&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;sudoつきで実行すると、さっきよりは進みましたが &lt;code&gt;resolv.conf&lt;/code&gt; が無いというエラーになってしまいました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo jetpack test
...(snip)...
Pod dying since 51.336704525s, waiting...
Image 6d058709-d7f9-45c5-a40b-0f9a5c81a90b
  Hash       sha512-3d526a2a0e40605d1d5f50a6596f210ff26d7486867f12f4ffa395c3600028a01473c126c11b1030a4c299c82799b56a3493773d008743ae33f1230dc71384a1
  Origin     b73f4bf5-8988-4e0f-87f4-31723167e2ef
  Timestamp  2015-04-22 16:24:15.597136136 +0000 UTC
  Manifest freebsd-base
    Labels
      version  10.1.9
      os       freebsd
      arch     amd64
    Annotations
      timestamp  2015-04-22T16:24:15.595105431Z
jetpack image freebsd-base build -cp=/usr/local/share/jetpack/jetpack.image.mk  /usr/bin/make .jetpack.build.
open /var/jetpack/test.467360619/pods/4c518b91-afa8-4e28-86ca-4c4d0fedc313/rootfs/0/etc/resolv.conf: no such file or directory
/vagrant/jetpack/pod.go:281:
/vagrant/jetpack/pod.go:500:
/vagrant/jetpack/pod.go:501:
/vagrant/jetpack/image.go:331:
*** Error code 1

Stop.
make: stopped in /usr/local/share/examples/jetpack/example.showenv
ERROR: run.Command[make -C /usr/local/share/examples/jetpack/example.showenv]: exit status 1
run.Command[/usr/local/libexec/jetpack/test.integration dataset=zroot/jetpack]: exit status 2
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;一旦置いておいて、先に進みます。&lt;/p&gt;

&lt;p&gt;rootユーザで &lt;code&gt;/usr/local/share/examples/jetpack&lt;/code&gt; 以下の &lt;code&gt;freebsd-base.release&lt;/code&gt;, &lt;code&gt;freebsd-base&lt;/code&gt;, &lt;code&gt;example.showenv&lt;/code&gt; イメージを順に作成します。&lt;/p&gt;

&lt;p&gt;まず &lt;code&gt;freebsd-base.release&lt;/code&gt; イメージを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ sudo -i
root@packer-freebsd-10:~ # cd /usr/local/share/examples/jetpack
root@packer-freebsd-10:/usr/local/share/examples/jetpack # cd freebsd-base.release/
root@packer-freebsd-10:/usr/local/share/examples/jetpack/freebsd-base.release # make
sha256 -c 2b028a894d25711ad496762622a52d74b1e32ee04693ad1cf056e3ddcdc23975 base.txz
SHA256 (base.txz) = 2b028a894d25711ad496762622a52d74b1e32ee04693ad1cf056e3ddcdc23975
jetpack image import base.txz manifest.json
-                                             100% of   63 MB 6067 kBps 00m11s
-                                             100% of  184  B  519 kBps 00m00s
Image 445da390-2e49-4b7f-921d-47ce6114cb02
  Hash       sha512-3e5767bda2018294312cce0d0ef2003cf886af246cbbfe5050a266a94bdcfe9df94c9e73ef4452b487cf8bdc8279806e70aef75ea8f644d24223cf227bc75df8
  Origin     base.txz
  Timestamp  2015-04-22 16:33:07.861508005 +0000 UTC
  Manifest freebsd-base/release
    Labels
      version  10.1
      os       freebsd
      arch     amd64
    Annotations
      timestamp  2015-04-22T16:33:18.685140617Z
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;freebsd-base&lt;/code&gt; イメージを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@packer-freebsd-10:/usr/local/share/examples/jetpack/freebsd-base.release # cd ../freebsd-base
root@packer-freebsd-10:/usr/local/share/examples/jetpack/freebsd-base # make
jetpack image freebsd-base/release build -cp=/usr/local/share/jetpack/jetpack.image.mk  /usr/bin/make .jetpack.build.
sed -i &#39;&#39; &#39;s|^Components.*|Components world/base|&#39; /etc/freebsd-update.conf
install -v -m 0644 rc.conf /etc/rc.conf
install: rc.conf -&amp;gt; /etc/rc.conf
install -v -m 0600 entropy /entropy
install: entropy -&amp;gt; /entropy
patch /usr/sbin/freebsd-update &amp;lt; freebsd-update.patch
Hmm...  Looks like a unified diff to me...
The text leading up to this was:
--------------------------
|--- /usr/sbin/freebsd-update	2015-02-08 22:15:58.178818000 +0100
|+++ freebsd-update	2015-02-09 13:45:42.202917000 +0100
--------------------------
Patching file /usr/sbin/freebsd-update using Plan A...
Hunk #1 succeeded at 610 (offset -8 lines).
done
env PAGER=cat freebsd-update -s update6.freebsd.org fetch install
Looking up update6.freebsd.org mirrors... none found.
Fetching public key from update6.freebsd.org... done.
Fetching metadata signature for 10.1-RELEASE from update6.freebsd.org... done.
Fetching metadata index... done.
Fetching 2 metadata files... done.
Inspecting system... done.
Preparing to download files... done.
Fetching 706 patches.....10....20....30....40....50....60....70....80....90....100....110....120....130....140....150....160....170....180....190....200....210....220....230....240....250....260....270....280....290....300....310....320....330....340....350....360....370....380....390....400....410....420....430....440....450....460....470....480....490....500....510....520....530....540....550....560....570....580....590....600....610....620....630....640....650....660....670....680....690....700... done.
Applying patches... done.
Fetching 1 files... done.

The following files will be updated as part of updating to 10.1-RELEASE-p9:
/bin/freebsd-version
/boot/boot1.efi
/boot/boot1.efifat
...(略)...
/var/db/mergemaster.mtree
Installing updates... done.
rm -rf /var/db/freebsd-update/*
./manifest.json.sh &amp;gt; manifest.json
Pod dying since 64.761583ms, waiting...
...(略)...
Pod dying since 51.461102458s, waiting...
Image 9323ac42-0f39-4f42-90de-ac4de60420dd
  Hash       sha512-3fb309e4d9a998bd910ce07dbfcef447508ea2146fabd88056975abc224d49094b3ff22c61c6c3aae170ee5e69bff72c43fb6e1153ae4f68607246cb50cc4d3d
  Origin     445da390-2e49-4b7f-921d-47ce6114cb02
  Timestamp  2015-04-22 16:38:35.737407036 +0000 UTC
  Manifest freebsd-base
    Labels
      version  10.1.9
      os       freebsd
      arch     amd64
    Annotations
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;次に &lt;code&gt;freebsd-base&lt;/code&gt; イメージを作ります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;root@packer-freebsd-10:/usr/local/share/examples/jetpack/freebsd-base # cd ../example.showenv/
root@packer-freebsd-10:/usr/local/share/examples/jetpack/example.showenv # make
jetpack image freebsd-base build -cp=/usr/local/share/jetpack/jetpack.image.mk  /usr/bin/make .jetpack.build.
open /var/jetpack/pods/eaa0ec11-a7ad-4170-ac30-472444b9f849/rootfs/0/etc/resolv.conf: no such file or directory
/vagrant/jetpack/pod.go:281:
/vagrant/jetpack/pod.go:500:
/vagrant/jetpack/pod.go:501:
/vagrant/jetpack/image.go:331:
*** Error code 1

Stop.
make: stopped in /usr/local/share/examples/jetpack/example.showenv
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;スモークテストの時と同じエラーが出ました。
とりあえず今回はここまでとします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LXD 0.7ではlxc execでシェルの対話操作もできるようになっていました</title>
      <link>/blog/2015/04/23/try-lxd-0.7-with-vagrant/</link>
      <pubDate>Thu, 23 Apr 2015 00:08:30 +0900</pubDate>
      
      <guid>/blog/2015/04/23/try-lxd-0.7-with-vagrant/</guid>
      <description>

&lt;h2 id=&#34;はじめに:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/2014/12/01/lxd-the-linux-container-daemon/&#34;&gt;LXDを試してみた · hnakamur&amp;rsquo;s blog at github&lt;/a&gt;の記事を書いて以来、LXD触る時間を作れてなかったのですが、久々に試してみました。&lt;/p&gt;

&lt;p&gt;今では&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxc/lxd&lt;/a&gt;にVagrantfileが同梱されているので、それを使うだけで簡単に試せます。&lt;/p&gt;

&lt;p&gt;VirtualBox 4.3.26, Vagrant 1.7.2, OS X Yosemiteという環境で試しました。&lt;/p&gt;

&lt;h2 id=&#34;操作手順:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;操作手順&lt;/h2&gt;

&lt;h3 id=&#34;vagrantでvmを起動:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;VagrantでVMを起動&lt;/h3&gt;

&lt;p&gt;まずOS X上で以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git clone https://github.com/lxc/lxd
cd lxd
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd/blob/lxd-0.7/Vagrantfile&#34;&gt;Vagrantfile&lt;/a&gt;を見てみると、Vagrantのシェルプロビジョナでgoとlxdをインストールするようになっています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd/blob/lxd-0.7/scripts/vagrant/install-lxd.sh&#34;&gt;lxd/install-lxd.sh at lxd-0.7 · lxc/lxd&lt;/a&gt;を見てみると、&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxdのREADME&lt;/a&gt;と同様のセットアップ手順に加えてlxdをサービスとして登録して起動する処理まで含まれています。&lt;/p&gt;

&lt;h3 id=&#34;vmにログインしてlxcコマンドを試してみる:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;VMにログインしてlxcコマンドを試してみる&lt;/h3&gt;

&lt;p&gt;以下のコマンドを実行してVMにログインします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant ssh
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以降のコマンドはVM上で実行します。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lxc&lt;/code&gt; と &lt;code&gt;lxd&lt;/code&gt; にはPATHが通った状態になっていることを確認しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ which lxc
/home/vagrant/go/bin/lxc
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ which lxd
/home/vagrant/go/bin/lxd
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;バージョンを確認してみると、 &lt;code&gt;lxc&lt;/code&gt;, &lt;code&gt;lxd&lt;/code&gt; ともに0.7でした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxd --version
0.7
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc --version
0.7
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd#first-steps&#34;&gt;lxdのREADMEのFirst steps&lt;/a&gt;に添って、ubuntuとdebianのイメージを取得します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ ./scripts/lxd-images import lxc ubuntu trusty amd64 --alias ubuntu --alias ubuntu/trusty
Downloading the GPG key for https://images.linuxcontainers.org
Downloading the image list for https://images.linuxcontainers.org
Validating the GPG signature of /tmp/tmpsccxc1fa/index.json.asc
Downloading the image: https://images.linuxcontainers.org/images/ubuntu/trusty/amd64/default/20150420_03:49/lxd.tar.xz
Validating the GPG signature of /tmp/tmpsccxc1fa/ubuntu-trusty-amd64-default-20150420_03:49.tar.xz.asc
Image imported as: c9176e837c0012d6d0eed221312ee9fc761765319701f57e65e63542ad9beade
Setup alias: ubuntu
Setup alias: ubuntu/trusty
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;debianのほうは最初コピペミスでaliasに2回同じ値を指定してしまってエラーになりましたが、再度実行すると成功しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ scripts/lxd-images import lxc debian wheezy amd64 --alias debian --alias debian/wheezy --alias debian/wheezy
Downloading the GPG key for https://images.linuxcontainers.org
Downloading the image list for https://images.linuxcontainers.org
Validating the GPG signature of /tmp/tmp_d1gz0q6/index.json.asc
Downloading the image: https://images.linuxcontainers.org/images/debian/wheezy/amd64/default/20150419_22:42/lxd.tar.xz
Validating the GPG signature of /tmp/tmp_d1gz0q6/debian-wheezy-amd64-default-20150419_22:42.tar.xz.asc
Image imported as: cd398814f6e4e1e50799ba8249b80aa3558e5b05edf71a996a174def87569ae5
Setup alias: debian
Setup alias: debian/wheezy
Traceback (most recent call last):
  File &amp;quot;scripts/lxd-images&amp;quot;, line 410, in &amp;lt;module&amp;gt;
    args.func(parser, args)
  File &amp;quot;scripts/lxd-images&amp;quot;, line 367, in import_lxc
    setup_alias(parser, args, fingerprint)
  File &amp;quot;scripts/lxd-images&amp;quot;, line 330, in setup_alias
    lxd.aliases_create(alias, fingerprint)
  File &amp;quot;scripts/lxd-images&amp;quot;, line 83, in aliases_create
    raise Exception(&amp;quot;Failed to create alias: %s&amp;quot; % name)
Exception: Failed to create alias: debian/wheezy
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ scripts/lxd-images import lxc debian wheezy amd64 --alias debian --alias debian/wheezy --alias debian/wheezy/amd64
Downloading the GPG key for https://images.linuxcontainers.org
Downloading the image list for https://images.linuxcontainers.org
Validating the GPG signature of /tmp/tmpeqkwuvfw/index.json.asc
Downloading the image: https://images.linuxcontainers.org/images/debian/wheezy/amd64/default/20150419_22:42/lxd.tar.xz
Validating the GPG signature of /tmp/tmpeqkwuvfw/debian-wheezy-amd64-default-20150419_22:42.tar.xz.asc
This image is already in the store.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナを起動します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc launch ubuntuCreating container...done
Starting container...done
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc launch debian debian01
Creating container...done
Starting container...done
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナの一覧を表示してみます。ubuntuのほうはコンテナ名を指定しなかったので、自動で付けられています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc list
+---------------------+---------+------------+------+-----------+
|        NAME         |  STATE  |    IPV4    | IPV6 | EPHEMERAL |
+---------------------+---------+------------+------+-----------+
| preterhuman-araceli | RUNNING | 10.0.3.188 |      | NO        |
| debian01            | RUNNING |            |      | NO        |
+---------------------+---------+------------+------+-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;debianのほうはIPアドレスが空になっていて、あれ？と思ったのですが、実行するタイミングが早すぎたようで、数秒立ってから再度実行するとアドレスが表示されました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc list
+---------------------+---------+------------+------+-----------+
|        NAME         |  STATE  |    IPV4    | IPV6 | EPHEMERAL |
+---------------------+---------+------------+------+-----------+
| preterhuman-araceli | RUNNING | 10.0.3.188 |      | NO        |
| debian01            | RUNNING | 10.0.3.42  |      | NO        |
+---------------------+---------+------------+------+-----------+
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以前未実装だった &lt;code&gt;lxc shell&lt;/code&gt; の代わりに &lt;code&gt;lxc exec&lt;/code&gt; でコマンド実行やシェルでの対話操作ができるようになっていました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;lxc exec コンテナ名 コマンド 引数&lt;/code&gt; のように指定すると、コンテナ内でコマンドを実行できます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
6: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP qlen 1000
    link/ether 00:16:3e:01:bd:a1 brd ff:ff:ff:ff:ff:ff
    inet 10.0.3.42/24 brd 10.0.3.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::216:3eff:fe01:bda1/64 scope link
       valid_lft forever preferred_lft forever
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec preterhuman-araceli ip a
1: lo: &amp;lt;LOOPBACK,UP,LOWER_UP&amp;gt; mtu 65536 qdisc noqueue state UNKNOWN group default
    link/loopback 00:00:00:00:00:00 brd 00:00:00:00:00:00
    inet 127.0.0.1/8 scope host lo
       valid_lft forever preferred_lft forever
    inet6 ::1/128 scope host
       valid_lft forever preferred_lft forever
4: eth0: &amp;lt;BROADCAST,MULTICAST,UP,LOWER_UP&amp;gt; mtu 1500 qdisc pfifo_fast state UP group default qlen 1000
    link/ether 00:16:3e:5e:6c:79 brd ff:ff:ff:ff:ff:ff
    inet 10.0.3.188/24 brd 10.0.3.255 scope global eth0
       valid_lft forever preferred_lft forever
    inet6 fe80::216:3eff:fe5e:6c79/64 scope link
       valid_lft forever preferred_lft forever
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;uname -a&lt;/code&gt; のようなコマンドを &lt;code&gt;lxc exec コンテナ名 コマンド 引数&lt;/code&gt; のように指定するとlxcのオプションと解釈するようで、以下のエラーになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec preterhuman-araceli uname -a
error: flag provided but not defined: -a
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コンテナ名のあとに &lt;code&gt;--&lt;/code&gt; を入れれば回避出来ました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec preterhuman-araceli -- uname -a
Linux preterhuman-araceli 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 x86_64 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ただ、原因は不明なのですが、何回か実行してみると、時々何も出力されないことがありました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec debian01 -- uname -a
Linux debian01 3.13.0-48-generic #80-Ubuntu SMP Thu Mar 12 11:16:15 UTC 2015 x86_64 GNU/Linux
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;lxc exec コンテナ名 /bin/bash&lt;/code&gt; のようにコマンドにシェルを指定すると、コンテナ内でシェルが起動され対話操作が出来ました。ubuntuコンテナの実際の画面では &lt;code&gt;ls&lt;/code&gt; の結果もカラー表示されていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$ lxc exec preterhuman-araceli /bin/bash
root@preterhuman-araceli:~# ls
root@preterhuman-araceli:~# pwd
/root
root@preterhuman-araceli:~# cd /
root@preterhuman-araceli:/# ls -l
total 60
drwxr-xr-x   2 root   root    4096 Apr 20 03:55 bin
drwxr-xr-x   2 root   root    4096 Apr 10  2014 boot
drwxr-xr-x   5 root   root     420 Apr 22 13:51 dev
drwxr-xr-x  63 root   root    4096 Apr 22 13:51 etc
drwxr-xr-x   3 root   root    4096 Apr 20 03:55 home
drwxr-xr-x  12 root   root    4096 Apr 20 03:54 lib
drwxr-xr-x   2 root   root    4096 Apr 20 03:54 lib64
drwxr-xr-x   2 root   root    4096 Apr 20 03:53 media
drwxr-xr-x   2 root   root    4096 Apr 10  2014 mnt
drwxr-xr-x   2 root   root    4096 Apr 20 03:53 opt
dr-xr-xr-x 109 nobody nogroup    0 Apr 22 13:51 proc
drwx------   2 root   root    4096 Apr 20 03:53 root
drwxr-xr-x   9 root   root     380 Apr 22 13:51 run
drwxr-xr-x   2 root   root    4096 Apr 20 03:55 sbin
drwxr-xr-x   2 root   root    4096 Apr 20 03:53 srv
dr-xr-xr-x  13 nobody nogroup    0 Apr 22 13:51 sys
drwxrwxrwt   2 root   root    4096 Apr 20 03:55 tmp
drwxr-xr-x  10 root   root    4096 Apr 20 03:53 usr
drwxr-xr-x  11 root   root    4096 Apr 20 03:53 var
root@preterhuman-araceli:/# ls
bin   dev  home  lib64  mnt  proc  run   srv  tmp  var
boot  etc  lib   media  opt  root  sbin  sys  usr
root@preterhuman-araceli:/# pwd
/
root@preterhuman-araceli:/# exit
vagrant@vagrant-ubuntu-trusty-64:~/go/src/github.com/lxc/lxd$
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;おわりに:f3d0284a2992e3586ec4652ee9f1d00b&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;以前試した時に比べて、かなり進歩してますね。&lt;/p&gt;

&lt;p&gt;ten_forwardさんのライブマイグレーションの記事とかも、今後試してみようと思います。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/defiant/20150415/1429089615&#34;&gt;lxd を使ったライブマイグレーション (1) - TenForwardの日記&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.hatena.ne.jp/defiant/20150415/1429090896&#34;&gt;lxd を使ったライブマイグレーション (2) - TenForwardの日記&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>curlでダウンロードを中断後再開するときは-Cオプションが便利</title>
      <link>/blog/2015/04/19/use_curl_c_option_to_resume_download/</link>
      <pubDate>Sun, 19 Apr 2015 01:07:35 +0900</pubDate>
      
      <guid>/blog/2015/04/19/use_curl_c_option_to_resume_download/</guid>
      <description>&lt;p&gt;ISOイメージのようなサイズが大きなファイルを &lt;code&gt;curl&lt;/code&gt; でダウンロードしようとして途中で中断してしまって再開するときに、 &lt;code&gt;-C&lt;/code&gt; オプションが便利だったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://manpages.ubuntu.com/manpages/trusty/en/man1/curl.1.html&#34;&gt;curlのマニュアル&lt;/a&gt;の &lt;code&gt;-C&lt;/code&gt; オプションのところを見ると &lt;code&gt;-C オフセットのバイト数&lt;/code&gt; のように指定するのですが &lt;code&gt;-C -&lt;/code&gt; と書けば自動でファイルサイズを指定してくれることがわかりました。&lt;/p&gt;

&lt;p&gt;例えば以下のようにダウンロードしようとして&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -O ftp://ftp3.jp.freebsd.org/pub/FreeBSD/ISO-IMAGES-amd64/10.1/FreeBSD-10.1-RELEASE-amd64-disc1.iso.xz
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;途中でマシンをスリープしてしまったりして中断した時は、以下のコマンドで再開します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;curl -O -C - ftp://ftp3.jp.freebsd.org/pub/FreeBSD/ISO-IMAGES-amd64/10.1/FreeBSD-10.1-RELEASE-amd64-disc1.iso.xz
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>サイズが大きなファイルのコピーにはrsyncの-Pオプションが便利</title>
      <link>/blog/2015/04/19/use_rsync_p_option_to_copy_large_file/</link>
      <pubDate>Sun, 19 Apr 2015 00:56:31 +0900</pubDate>
      
      <guid>/blog/2015/04/19/use_rsync_p_option_to_copy_large_file/</guid>
      <description>&lt;p&gt;Vagrantの自作boxファイルをインターネット上のサーバにアップロードするときなどに、 &lt;code&gt;rsync&lt;/code&gt; の &lt;code&gt;-P&lt;/code&gt; オプションが便利だったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://manpages.ubuntu.com/manpages/utopic/en/man1/rsync.1.html&#34;&gt;rsyncのマニュアル&lt;/a&gt; によると &lt;code&gt;-P&lt;/code&gt; オプションは &lt;code&gt;--partial --progress&lt;/code&gt; と同じとのこと。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;--progress&lt;/code&gt; を指定されると以下の実行例のように、コピー中に進捗状況が表示され、完了した時に結果情報が出力されます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rsync -P freebsd-10.1-amd64.box hoge
freebsd-10.1-amd64.box
   449371583 100%  112.62MB/s    0:00:03 (xfer#1, to-check=0/1)

sent 449426538 bytes  received 42 bytes  99872573.33 bytes/sec
total size is 449371583  speedup is 1.00
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--partial&lt;/code&gt; を指定するとコピーが中断されてしまっても、コピーしかけのファイルが消されないので、再度実行すると続きからコピーを再開できます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Hugoに移行した私のブログの記事追加手順</title>
      <link>/blog/2015/04/19/my_hugo_blog_workflow/</link>
      <pubDate>Sun, 19 Apr 2015 00:17:59 +0900</pubDate>
      
      <guid>/blog/2015/04/19/my_hugo_blog_workflow/</guid>
      <description>

&lt;h2 id=&#34;はじめに:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://deeeet.com/writing/2014/12/25/hugo/&#34;&gt;OctopressからHugoへ移行した | SOTA&lt;/a&gt;を参考に私のブログもしばらく前にHugoに移行しました。deeeetさん、ありがとうございます！&lt;/p&gt;

&lt;p&gt;で、ブログ書く間隔が開くと手順を忘れて、毎回hugoのドキュメントを読むのが面倒なので、自分用メモです。&lt;/p&gt;

&lt;h2 id=&#34;記事のファイルを作成:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;記事のファイルを作成&lt;/h2&gt;

&lt;p&gt;Octorpressのときのpermalinkを維持するために、記事ファイルのパスは &lt;code&gt;content/post/YYYY/MM/DD/foo.md&lt;/code&gt; というような感じになっています。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hugo new&lt;/code&gt; でファイルを作成する際は &lt;code&gt;content&lt;/code&gt; を除いた部分を指定して以下のようにします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo new post/2015/04/19/my_hugo_blog_workflow.md
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;記事を編集してローカルで表示確認:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;記事を編集してローカルで表示確認&lt;/h2&gt;

&lt;p&gt;以下のコマンドでローカルマシンでサーバを起動しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;hugo server --watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/blog/&#34;&gt;http://localhost:1313/blog/&lt;/a&gt; をブラウザで開いて編集した内容を確認します。&lt;/p&gt;

&lt;h2 id=&#34;テーマの調整:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;テーマの調整&lt;/h2&gt;

&lt;p&gt;私のブログでは &lt;a href=&#34;https://github.com/eliasson/liquorice&#34;&gt;eliasson/liquorice&lt;/a&gt; を改変した独自テーマ &lt;a href=&#34;https://github.com/hnakamur/liquorice-hn&#34;&gt;hnakamur/liquorice-hn&lt;/a&gt; を使っています。&lt;/p&gt;

&lt;p&gt;テーマを調整したい場合は &lt;a href=&#34;https://github.com/hnakamur/blog&#34;&gt;hnakamur/blog&lt;/a&gt; を &lt;code&gt;git clone&lt;/code&gt; したディレクトリの &lt;code&gt;themes/liquorice-hn&lt;/code&gt; フォルダ配下のファイルを書き換えます。&lt;/p&gt;

&lt;p&gt;CSSを変えた場合は &lt;a href=&#34;https://github.com/hnakamur/liquorice-hn#build-with-npm-run&#34;&gt;hnakamur/liquorice-hn&lt;/a&gt; の手順でminifyします。&lt;/p&gt;

&lt;p&gt;テーマの修正が終わったら、テーマの修正したファイル &lt;code&gt;git add&lt;/code&gt; して &lt;code&gt;git commit&lt;/code&gt; します。その後 &lt;a href=&#34;https://github.com/hnakamur/blog&#34;&gt;hnakamur/blog&lt;/a&gt; を &lt;code&gt;git clone&lt;/code&gt; したディレクトリで以下のコマンドを実行してgithubにpushします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git subtree push --prefix themes/liquorice-hn liquorice-hn master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;初回のみの事前準備として以下のようにremoteを追加しておきます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git remote add liquorice-hn https://github.com/hnakamur/liquorice-hn
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;記事を発行:6b00b00d433df82a395447ef0b37d2fc&#34;&gt;記事を発行&lt;/h2&gt;

&lt;p&gt;記事を書き終えて、ローカルで表示を確認したら、&lt;a href=&#34;https://github.com/hnakamur/blog&#34;&gt;hnakamur/blog&lt;/a&gt; を &lt;code&gt;git clone&lt;/code&gt; したディレクトリで以下のコマンドを実行してgithub-pages上のブログを更新します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./deploy.sh
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>JXA (JavaScript for Automation)を使ってOSXの初期設定を半自動化してみた</title>
      <link>/blog/2015/04/06/jxa-osx-automation-with-javascript/</link>
      <pubDate>Mon, 06 Apr 2015 04:40:43 +0900</pubDate>
      
      <guid>/blog/2015/04/06/jxa-osx-automation-with-javascript/</guid>
      <description>

&lt;h2 id=&#34;概要:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;概要&lt;/h2&gt;

&lt;p&gt;OSXを再インストールしたときなどキーボードやトラックパッドの設定を行いますが、
設定する項目が意外と多くて時間がかかります。&lt;/p&gt;

&lt;p&gt;そこでJXA (JavaScript for Automation)で自動化してみました。
全自動ではなく半自動化と書いているのはパスワードの入力などは手動で行う必要があるからです。&lt;/p&gt;

&lt;h2 id=&#34;きっかけはapplescriptのui-elementsの記事を読んだこと:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;きっかけはAppleScriptのUI elementsの記事を読んだこと&lt;/h2&gt;

&lt;p&gt;以前からAppleScriptでOSXの初期設定の自動化をやってみたかったのですが、
UI要素の調べ方がわからず諦めていました。&lt;/p&gt;

&lt;p&gt;StackOverflowの&lt;a href=&#34;http://apple.stackexchange.com/questions/40436/how-to-know-the-name-of-ui-elements-using-accessibility-inspector-or-any-other/87412#87412&#34;&gt;applescript - How to know the name of UI elements using Accessibility inspector (or any other tool) - Ask Different&lt;/a&gt;のコメントから
&lt;a href=&#34;http://n8henrie.com/2013/03/a-strategy-for-ui-scripting-in-applescript/&#34;&gt;n8henrie.com | A Strategy for UI Scripting in AppleScript&lt;/a&gt;という記事を見つけて、これがブレイクスルーになりました。&lt;/p&gt;

&lt;p&gt;で、いろいろ試していくうちにJavaScriptで書くほうがクロージャが使えて便利ということに気づいたのでJavaScriptに切り替えました。&lt;/p&gt;

&lt;p&gt;以下の記事が参考になりました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/dtinth/JXA-Cookbook/wiki&#34;&gt;Home · dtinth/JXA-Cookbook Wiki · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/zakuroishikuro/items/afab0e33ad2030ba2f92&#34;&gt;Macのキーボード入力、マウスクリックをJavaScriptで (JXA) - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;自分用セットアップスクリプト:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;自分用セットアップスクリプト&lt;/h2&gt;

&lt;p&gt;私用のセットアップスクリプトを&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup&#34;&gt;hnakamur/my-macbook-initial-setup · GitHub&lt;/a&gt;に置きました。完全に自分仕様ですが、ライセンスはMITなので適宜変更してご利用ください。&lt;/p&gt;

&lt;h2 id=&#34;applescriptやjxaで設定している内容:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;AppleScriptやJXAで設定している内容&lt;/h2&gt;

&lt;p&gt;最初はAppleScriptで書いていたので一部はそのままです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;App Store経由でのXcodeのインストール&lt;/li&gt;
&lt;li&gt;Xcodeコマンドラインツールのインストール&lt;/li&gt;
&lt;li&gt;キーボードの設定

&lt;ul&gt;
&lt;li&gt;リピート率の設定&lt;/li&gt;
&lt;li&gt;ControlとCapsの入れ替え&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;トラックパッドの設定

&lt;ul&gt;
&lt;li&gt;使う機能と使わない機能の設定&lt;/li&gt;
&lt;li&gt;ドラッグロック設定&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;ショートカットキーの設定

&lt;ul&gt;
&lt;li&gt;次のウィンドウのショートカットキー変更&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;スクリーンロックのタイミング調整&lt;/li&gt;
&lt;li&gt;キーボードの入力ソースにGoogle日本語入力のひらがなを追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;のショートカット追加&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mstarke.github.io/MacPass/&#34;&gt;MacPass&lt;/a&gt;のメニューショートカット設定&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;applescriptに比べてjxaが嬉しいところ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;AppleScriptに比べてJXAが嬉しいところ&lt;/h2&gt;

&lt;p&gt;上にも書きましたが、クロージャが使えるのが便利です。&lt;/p&gt;

&lt;p&gt;例えば特定の要素が出現するまで待つために以下の様な関数を定義しました。
&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L9-L26&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;function isInvalidIndexError(e) {
  return e.toString() === &#39;Error: Invalid index.&#39;
}
function waitUntilSuccess(f) {
  var ret
  do {
    delay(1)
    try {
      ret = f()
    } catch (e) {
      if (!isInvalidIndexError(e)) {
        throw e
      }
    }
  } while (!ret)
  return ret
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;こんな感じで使用します。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L39-L47&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  var storeProc = Application(&#39;System Events&#39;).processes.byName(&#39;App Store&#39;)
  storeProc.frontmost = true
  var win = storeProc.windows.byName(&#39;App Store&#39;)
  // Search for Xcode
  var textField = waitUntilSuccess(function() {
    return win.toolbars[0].groups[6].textFields[0]
  })
  textField.value = &#39;Xcode&#39;
  textField.buttons[0].click()
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;try catchを使わずにUI要素の存在をチェックするのは、上のように深い要素だと
面倒なので、アクセスするコードを動かしてみて &lt;code&gt;Error: Invalid index.&lt;/code&gt; の
エラーが出たら要素が存在しないと判断するようにしています。&lt;/p&gt;

&lt;h2 id=&#34;うまくいってないところ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;うまくいってないところ&lt;/h2&gt;

&lt;h3 id=&#34;sparkのショートカット追加がうまくいかないときがある:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;Sparkのショートカット追加がうまくいかないときがある&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;というアプリを使って
ショートカットを登録しておくと、キーボードの1ストロークで登録したアプリの
起動や起動済みの場合は最前面に持ってこれるので愛用しています。&lt;/p&gt;

&lt;p&gt;フリーですがソースは非公開で設定ファイル形式も不明なのでJXAで登録しています。&lt;/p&gt;

&lt;p&gt;しかし、アプリケーションのパスを選ぶところが、うまくいくときと行かない時があります。ファイル選択画面でパスを/から入力すると選べるのでその方式で実装しているのですが、 例えばFinderのパスを &lt;code&gt;/System/Library/CoreServices/Finder.app&lt;/code&gt; のように入力してreturnキーを押す操作をJXAで行うと、そのフォルダの中が開いた状態になってしまう時があります。&lt;/p&gt;

&lt;p&gt;カラムビューにすると成功するようだったので⌘3を押して切り替えるようにしてみたのですが、2秒ディレイを入れても全体を通して実行していると途中から失敗することがあります。&lt;/p&gt;

&lt;p&gt;その後run.shを書き換えてSparkのショートカット設定の部分だけ実行すると、うまくいきます。なぜ全体を通して実行した時は失敗するのかが謎です。&lt;/p&gt;

&lt;h2 id=&#34;まとめ:8c1e75d8144c8839eafe92c2446ba3ac&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;上記のように一部問題はありますが、大部分の操作は自動化できたので、全て手動で設定するのに比べるとずいぶん楽になりました。JXA (JavaScript for Automation)便利です。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Homebrew Caskを使わずにdmgファイルのアプリをコマンドでインストールする</title>
      <link>/blog/2015/04/06/install-apps-without-homebrew-cask/</link>
      <pubDate>Mon, 06 Apr 2015 00:45:50 +0900</pubDate>
      
      <guid>/blog/2015/04/06/install-apps-without-homebrew-cask/</guid>
      <description>

&lt;h2 id=&#34;なぜhomebrew-caskをやめたか:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;なぜHomebrew Caskをやめたか&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://t-wada.hatenablog.jp/entry/mac-provisioning-by-ansible&#34;&gt;Mac の開発環境構築を自動化する (2015 年初旬編) - t-wadaのブログ&lt;/a&gt;でもHomebrew Caskの不安な点について書かれていますが、私もHomebrew Caskは便利と思いつつも止めたいなと思っていました。&lt;/p&gt;

&lt;p&gt;私が使うアプリに関してはほとんどがアプリ側で最新版のお知らせとバージョンアップの仕組みを持っています。あとHomebrew Caskは/opt/homebrew-cask/以下に実体を置いて~/Applications/や/Applications/にシンボリックリンクを貼るようになっています。&lt;/p&gt;

&lt;p&gt;私はそこまで複雑な仕組みは要らないので、初期インストールがコマンドで半自動化できれば十分です。&lt;/p&gt;

&lt;h2 id=&#34;dmgファイルのアプリをコマンドラインからインストールする:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイルのアプリをコマンドラインからインストールする&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22934083/install-dmg-package-on-mac-os-from-terminal/22940943#22940943&#34;&gt;osx - Install dmg package on MAC OS from Terminal - Stack Overflow&lt;/a&gt;や&lt;a href=&#34;http://commandlinemac.blogspot.jp/2008/12/installing-dmg-application-from-command.html&#34;&gt;Command Line Mac: Installing a .dmg application from the command line&lt;/a&gt;を見て実際にやってみました。&lt;/p&gt;

&lt;p&gt;ソースは&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup&#34;&gt;hnakamur/my-macbook-initial-setup · GitHub&lt;/a&gt;にあります。&lt;/p&gt;

&lt;p&gt;以下のアプリをdmgファイルからインストールしています。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/splhack/macvim-kaoriya&#34;&gt;splhack/macvim-kaoriya · GitHub&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://calibre-ebook.com/&#34;&gt;calibre - E-book management&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.jp/chrome/browser/desktop/index.html&#34;&gt;Chrome&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.mozilla.org/ja/firefox/new/&#34;&gt;Firefox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.google.co.jp/ime/&#34;&gt;Google 日本語入力&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://iterm2.com/&#34;&gt;iTerm2 - Mac OS Terminal Replacement&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://java.com/ja/download/&#34;&gt;Java (JRE)&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://grandperspectiv.sourceforge.net/&#34;&gt;GrandPerspective&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www-jp.mysql.com/products/workbench/&#34;&gt;MySQL Workbench&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://mstarke.github.io/MacPass/&#34;&gt;MacPass&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.shadowlab.org/Software/spark.php&#34;&gt;Spark&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.virtualbox.org/&#34;&gt;Oracle VM VirtualBox&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://xquartz.macosforge.org/landing/&#34;&gt;XQuartz&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;dmgファイルのマウントとアンマウント:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイルのマウントとアンマウント&lt;/h2&gt;

&lt;p&gt;共通の処理として、dmgファイルのマウントは &lt;code&gt;hdiutil attach&lt;/code&gt; 、アンマウントは &lt;code&gt;hdiutil detach&lt;/code&gt; コマンドで行います。&lt;/p&gt;

&lt;p&gt;マウントした時の /Volumes/〜 のディレクトリ名は &lt;code&gt;hdiutil attach&lt;/code&gt; の実行結果の最後の行から取得できます。&lt;/p&gt;

&lt;p&gt;最初は&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mount_dir=`hdiutil attach $dmg_file | awk &#39;END{print $NF}&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようにして最後の行の一番右のフィールドを取得していましたが、 &lt;code&gt;/Volumes/Google Chrome&lt;/code&gt; のように空白を含む場合があることがわかりました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/22934083/install-dmg-package-on-mac-os-from-terminal/22940943#22940943&#34;&gt;osx - Install dmg package on MAC OS from Terminal - Stack Overflow&lt;/a&gt;では第1フィールドと第2フィールドを消して第3フィールド以降にしていますが、試してみると余分な空白（実際はタブと判明）が付いてきました。&lt;/p&gt;

&lt;p&gt;&lt;code&gt;hdiutil attach&lt;/code&gt; の結果をファイルに落として見てみたら、空白に加えてタブで区切られていてタブで区切るほうがシンプルなことがわかりました。&lt;/p&gt;

&lt;p&gt;そこで、以下のようにして取得するようにしました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;インストール方法のパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;インストール方法のパターン&lt;/h2&gt;

&lt;p&gt;上記のアプリの範囲では4パターンありました。&lt;/p&gt;

&lt;h3 id=&#34;dmgファイル内に-appフォルダがあるパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイル内に〜.appフォルダがあるパターン&lt;/h3&gt;

&lt;p&gt;Chromeなどがこのパターンです。&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man1/ditto.1.html&#34;&gt;ditto&lt;/a&gt;コマンドで/Applications/〜.appにコピーするようにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L731-L740&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L731-L740&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_google_chrome() {
  download_url=https://dl.google.com/chrome/mac/stable/GGRO/googlechrome.dmg
  dmg_file=${download_url##*/}

  curl -LO $download_url
  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
  sudo /usr/bin/ditto &amp;quot;$mount_dir/Google Chrome.app&amp;quot; &amp;quot;/Applications/Google Chrome.app&amp;quot;
  hdiutil detach &amp;quot;$mount_dir&amp;quot;
  rm $dmg_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dmgファイル内に-pkgのインストーラがあるパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイル内に*.pkgのインストーラがあるパターン&lt;/h3&gt;

&lt;p&gt;Google日本語入力などがこのパターンです。OSXの&lt;a href=&#34;https://developer.apple.com/library/mac/documentation/Darwin/Reference/ManPages/man8/installer.8.html&#34;&gt;installer&lt;/a&gt;コマンドでインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L742-L751&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L742-L751&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_google_japanese_input() {
  download_url=https://dl.google.com/japanese-ime/latest/GoogleJapaneseInput.dmg
  dmg_file=${download_url##*/}

  curl -LO $download_url
  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
  sudo installer -pkg $mount_dir/GoogleJapaneseInput.pkg -target /
  hdiutil detach &amp;quot;$mount_dir&amp;quot;
  rm $dmg_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;dmgファイル内に独自形式のインストーラがあるパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;dmgファイル内に独自形式のインストーラがあるパターン&lt;/h3&gt;

&lt;p&gt;Javaがこのパターンでした。インストーラを実行してインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L762-L772&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L762-L772&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_java() {
  download_url=http://javadl.sun.com/webapps/download/AutoDL?BundleId=105219
  dmg_file=jre.dmg

  curl -L -o $dmg_file &amp;quot;$download_url&amp;quot;
  mount_dir=`hdiutil attach $dmg_file | awk -F &#39;\t&#39; &#39;END{print $NF}&#39;`
  java_dir=&amp;quot;${mount_dir##*/}&amp;quot;
  sudo &amp;quot;$mount_dir/${java_dir}.app/Contents/MacOS/MacJREInstaller&amp;quot;
  hdiutil detach &amp;quot;$mount_dir&amp;quot;
  rm $dmg_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;zipファイル内に-appがあるパターン:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;zipファイル内に〜.appがあるパターン&lt;/h3&gt;

&lt;p&gt;iTerm2などがこのパターンです。unzipコマンドの-dオプションで解凍先を/Applicationsにして解凍してインストールします。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L753-L760&#34;&gt;https://github.com/hnakamur/my-macbook-initial-setup/blob/df0eb48db189d39de9103a53c06f85a5acfaf347/run.sh#L753-L760&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;install_iterm2() {
  download_url=https://iterm2.com/downloads/stable/iTerm2_v2_0.zip
  zip_file=${download_url##*/}

  curl -LO $download_url
  sudo unzip $zip_file -d /Applications
  rm $zip_file
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;まとめ:e5cdad194e217182b14d7b79b7d8fb9a&#34;&gt;まとめ&lt;/h2&gt;

&lt;p&gt;Homebrew Caskを使わずにコマンドラインでOSXのアプリのインストールを半自動化しました。全自動ではなく半自動化といっているのは、アプリによってパスワード入力が必要だったり、ダイアログが表示されてボタンを押す必要があるからです。&lt;/p&gt;

&lt;p&gt;アプリのバージョンが今後上がった時にダウンロードURLを再度調べる必要があるのが面倒ではありますが、OSXを一からセットアップするのはたまにしか行わないのでよしとします。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Riot.jsでタグエディターのサンプルを作ってみた</title>
      <link>/blog/2015/02/28/riot-tag-editor-example/</link>
      <pubDate>Sat, 28 Feb 2015 21:12:37 +0900</pubDate>
      
      <guid>/blog/2015/02/28/riot-tag-editor-example/</guid>
      <description>

&lt;h2 id=&#34;riot-js:62bcf495a627c2361816a64f97964c76&#34;&gt;Riot.js&lt;/h2&gt;

&lt;p&gt;Riot.jsについては&lt;a href=&#34;http://qiita.com/cognitom/items/54ae38c9a50dbbe28367&#34;&gt;Riot.js 2.0 情報まとめ - Qiita&lt;/a&gt;に良いまとめがありますのでそちらをどうぞ。良いまとめをありがとうございます。&lt;/p&gt;

&lt;h2 id=&#34;本家が提供しているtodoアプリをgoemonでライブリロードして開発を高速化するサンプル:62bcf495a627c2361816a64f97964c76&#34;&gt;本家が提供しているToDoアプリをgoemonでライブリロードして開発を高速化するサンプル&lt;/h2&gt;

&lt;p&gt;今回のタグエディターの前に、環境整備ということで本家が提供しているToDoアプリをgoemonでライブリロードして開発を高速化するサンプルを作ってみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/riotjs-todo-goemon-livereload-example&#34;&gt;hnakamur/riotjs-todo-goemon-livereload-example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://muut.com/riotjs/guide/&#34;&gt;Riot developer guide&lt;/a&gt;にあるアプリからどのように変更したかはgitのコミットを小分けにしてあるので、そちらをご参照ください。
&lt;a href=&#34;https://github.com/hnakamur/riotjs-todo-goemon-livereload-example/commits/master&#34;&gt;Commits · hnakamur/riotjs-todo-goemon-livereload-example&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;タグエディターのサンプルをriot-jsでも作ってみた:62bcf495a627c2361816a64f97964c76&#34;&gt;タグエディターのサンプルをRiot.jsでも作ってみた&lt;/h2&gt;

&lt;p&gt;で、本題のタグエディターのサンプルです。以前にjQuery, Backbone.js, Vue.jsで同じものを作っていました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/ac5f04930d0c08f141e5&#34;&gt;jQuery - タグ・エディターを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/bfdade12bc5db21fa771&#34;&gt;Backbone.jsでタグ・エディターを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/a73ff28621e06193a228&#34;&gt;vue.jsでタグ・エディターを作ってみた - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;今回はRiot.jsで作ってみました。&lt;/p&gt;

&lt;p&gt;ソース: &lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon&#34;&gt;hnakamur/riot-tag-editor-live-reload-example-with-goemon&lt;/a&gt;
コンパイル済みのデモ: &lt;a href=&#34;https://hnakamur.github.io/riot-tag-editor-live-reload-example-with-goemon/demo/&#34;&gt;Riot tag editor example&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;セットアップ手順はソースの&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/master/README.md&#34;&gt;README&lt;/a&gt;を参照してください。&lt;/p&gt;

&lt;p&gt;タグエディターのタグのソースは&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/master/assets/tag-editor.tag&#34;&gt;tag-editor.tag&lt;/a&gt;です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;&amp;lt;tag-editor&amp;gt;
  &amp;lt;div class=&amp;quot;tag-editor-field&amp;quot; onclick={ click }&amp;gt;
    &amp;lt;div class=&amp;quot;tag-editor-tag tag-editor-tag-measure&amp;quot;&amp;gt;
      &amp;lt;div id=&amp;quot;measure&amp;quot; class=&amp;quot;tag-editor-text&amp;quot;&amp;gt;&amp;lt;/div&amp;gt;
      &amp;lt;a class=&amp;quot;tag-editor-delete&amp;quot;&amp;gt;x&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;div each={ tags } class=&amp;quot;tag-editor-tag&amp;quot;&amp;gt;
      &amp;lt;div class=&amp;quot;tag-editor-text&amp;quot;&amp;gt;{ name }&amp;lt;/div&amp;gt;
      &amp;lt;a class=&amp;quot;tag-editor-delete&amp;quot; onclick={ parent.clickDelete }&amp;gt;x&amp;lt;/a&amp;gt;
    &amp;lt;/div&amp;gt;
    &amp;lt;input name=&amp;quot;editor&amp;quot; class=&amp;quot;tag-editor-input&amp;quot; style=&amp;quot;width: 0&amp;quot; onkeyup={ keyup } onkeydown={ keydown } onblur={ blur }&amp;gt;
  &amp;lt;/div&amp;gt;

  &amp;lt;script&amp;gt;
    this.tags = opts.tags
    this.separator = /[, ]+/

    click(e) {
      adjustEditorWidth(this)
      this.editor.focus()
      return false
    }

    keyup(e) {
      var val = this.editor.value
      if (this.separator.test(val)) {
        mayInsertTags(this)
      } else {
        adjustEditorWidth(this)
      }
      return false
    }

    keydown(e) {
      if (e.which == 13 /* Enter */ &amp;amp;&amp;amp; this.editor.value !== &#39;&#39;) {
        mayInsertTags(this)
        return true
      } else if (e.which == 8 /* Backspace */ &amp;amp;&amp;amp; this.editor.value === &#39;&#39; &amp;amp;&amp;amp; this.tags.length &amp;gt; 0) {
        this.tags.pop()
      }
      return true
    }

    blur(e) {
      mayInsertTags(this)
      return true
    }

    clickDelete(e) {
      e.stopPropagation()
      this.tags.splice(this.tags.indexOf(e.item), 1)
      return false
    }

    function adjustEditorWidth(elem) {
      elem.measure.innerText = elem.editor.value + &#39;WW&#39;
      elem.editor.style.width = elem.measure.offsetWidth + &#39;px&#39;
    }

    function mayInsertTags(elem) {
      var values = elem.editor.value.split(elem.separator),
          i = 0,
          len = values.length,
          value
      elem.editor.value = &#39;&#39;
      adjustEditorWidth(elem)
      for (; i &amp;lt; len; i++) {
        value = values[i]
        if (value !== &#39;&#39; &amp;amp;&amp;amp; !containsTag(elem, value)) {
          elem.tags.push({name: value})
        }
      }
    }

    function containsTag(elem, tag) {
      var i = 0, 
          len = elem.tags.length
      for (; i &amp;lt; len; i++) {
        if (elem.tags[i].name === tag) {
          return true
        }
      }
      return false
    }
  &amp;lt;/script&amp;gt;

&amp;lt;/tag-editor&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;HTMLのタグとJavaScriptのコードを一箇所にかけて、イベントもonclickとかで書くので、コンパクトで見やすいです。
onclickとかに指定した関数は &lt;code&gt;function&lt;/code&gt; なしで書けるようになっていますが、そうでない関数には &lt;code&gt;function&lt;/code&gt; を明記する必要がありました。&lt;/p&gt;

&lt;p&gt;タグエディターを利用する側のHTMLのコードは以下の様な感じで、こちらもシンプルです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/assets/index.html#L31-L41&#34;&gt;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/assets/index.html#L31-L41&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;script src=&amp;quot;tag-editor.tag&amp;quot; type=&amp;quot;riot/tag&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/g/riot@2.0(riot.min.js+compiler.min.js)&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
    riot.mount(&#39;tag-editor&#39;, {
      tags: [
        {name: &#39;foo&#39;},
        {name: &#39;bar&#39;},
      ]
    })
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;プリコンパイル済みのソースの作成:62bcf495a627c2361816a64f97964c76&#34;&gt;プリコンパイル済みのソースの作成&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;riot assets/ demo/
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で &lt;code&gt;assets/tag-editor.tag&lt;/code&gt; から &lt;code&gt;demo/tag-editor.js&lt;/code&gt; が生成されます。&lt;/p&gt;

&lt;p&gt;利用する側のHTMLは以下のようにします。 riot.jsの読み込み方法と、タグエディターのソースを読み込む順番が開発時とは違うので要注意です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/demo/index.html#L30-L40&#34;&gt;https://github.com/hnakamur/riot-tag-editor-live-reload-example-with-goemon/blob/621d58d0d9774c710f61ad993da451cf948fce22/demo/index.html#L30-L40&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;script src=&amp;quot;https://cdn.jsdelivr.net/riot/2.0/riot.min.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;
    &amp;lt;script src=&amp;quot;tag-editor.js&amp;quot;&amp;gt;&amp;lt;/script&amp;gt;

    &amp;lt;script&amp;gt;
    riot.mount(&#39;tag-editor&#39;, {
      tags: [
        {name: &#39;foo&#39;},
        {name: &#39;bar&#39;},
      ]
    })
    &amp;lt;/script&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;riot-jsの魅力:62bcf495a627c2361816a64f97964c76&#34;&gt;Riot.jsの魅力&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://muut.com/riotjs/compare.html&#34;&gt;Riot vs React vs Polymer&lt;/a&gt;を見ても、riot.min.jsは6.7KBとコンパクトなのが魅力です。それでいてカスタムタグもすっきりシンプルに書けますし。これは今後に期待ですね！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Windows UI Automation APIを使うためのGoライブラリw32uiautomationを書いた</title>
      <link>/blog/2015/02/22/w32uiautomation/</link>
      <pubDate>Sun, 22 Feb 2015 00:09:24 +0900</pubDate>
      
      <guid>/blog/2015/02/22/w32uiautomation/</guid>
      <description>

&lt;h1 id=&#34;なぜ:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;なぜ&lt;/h1&gt;

&lt;p&gt;ウェブアプリ開発をしているとInternet Explorerでの動作確認のため&lt;a href=&#34;https://www.modern.ie/ja-jp&#34;&gt;modern.IE&lt;/a&gt;が欠かせません。が、インストール直後は英語環境になっているので、日本語環境での動作確認のためにはセットアップが必要です。&lt;/p&gt;

&lt;p&gt;セットアップ手順は以下のQiitaの記事に書いたのですが、手数が多くて面倒でした。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/5f2f9e817dd0de60abb2&#34;&gt;VirtualBox - modern.IEのWindows 7で日本語の表示と入力をできるようにする - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/cd37c9c8826afe4b4dda&#34;&gt;Windows8.xのmodern.IEで日本語を入力、表示できるようにする。 - Qiita&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;それを自動化するコマンドラインツール&lt;a href=&#34;https://github.com/hnakamur/moderniejapanizer&#34;&gt;moderniejapanizer&lt;/a&gt;を作りました。実は2年ぐらい前に&lt;a href=&#34;https://www.autoitscript.com/site/autoit/&#34;&gt;AutoIt&lt;/a&gt;を使って作り始めたのですが自動制御がうまくいかないときがあって挫折していました。昨年暮れぐらいから再挑戦して、今回は勉強を兼ねてGoで実装してみました。&lt;/p&gt;

&lt;p&gt;日本語化のほとんどはWin32 APIとレジストリの操作で実現できたのですが、Windows 8で言語に日本語を追加して英語を削除する操作だけはWin32 APIやレジストリで実現する方法を見つけられませんでした。&lt;/p&gt;

&lt;p&gt;そこでコントロールパネルの操作をUIオートメーションで行うことにしました。
mattnさんの&lt;a href=&#34;https://github.com/mattn/go-ole&#34;&gt;go-ole&lt;/a&gt;を利用して、UIオートメーション APIの一部をGoで実装したのが、&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation&#34;&gt;hnakamur/w32uiautomation&lt;/a&gt;です。&lt;/p&gt;

&lt;p&gt;UIオートメーションAPIの全部をカバーするつもりはなくて自分が使う部分だけを実装しています。とりあえず動くようにはなりましたが、まだまだ試行錯誤中なのでAPIは互換性無く変更予定です。&lt;/p&gt;

&lt;h1 id=&#34;windows-ui-オートメーションについて:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;Windows UI オートメーションについて&lt;/h1&gt;

&lt;p&gt;下記のページに説明とリファレンスがありました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/ja-jp/library/ms747327(v=vs.110%29.aspx&#34;&gt;UI オートメーションの概要&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee684009(v=vs.85%29.aspx&#34;&gt;UI Automation (Windows)&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;また、始めの一歩として以下の記事も参考にさせて頂きました。ありがとうございます！&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://180.cocolog-nifty.com/blog/2011/10/ui-automationjs.html&#34;&gt;UI AutomationをJScript.NETで動かす: korokaraのブログ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://d.sunnyone.org/2014/09/windowsuiui-automation-powershell.html&#34;&gt;WindowsアプリのUI自動操作をUI Automation PowerShell Extensionで行う | d.sunnyone.org&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h1 id=&#34;w32uiautomationの実装について:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;w32uiautomationの実装について&lt;/h1&gt;

&lt;h2 id=&#34;uiオートメーションapiはidispatchインタフェースを実装していない:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;UIオートメーションAPIはIDispatchインタフェースを実装していない&lt;/h2&gt;

&lt;p&gt;実はw32uiautomationを実装する前に、&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa387099(v=vs.85%29.aspx&#34;&gt;Windows Update Agent API (Windows)&lt;/a&gt;の実装も作りました。 &lt;a href=&#34;https://github.com/hnakamur/windowsupdate&#34;&gt;hnakamur/windowsupdate&lt;/a&gt;です。これはWindows 7で日本語の言語パックをWindows Update経由でインストールするために作りました。&lt;/p&gt;

&lt;p&gt;Windows Update Agent APIの各インタフェースは例えば&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/aa385821(v=vs.85%29.aspx&#34;&gt;IAutomaticUpdates interface (Windows)&lt;/a&gt;のように&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ms221608(v=vs.85%29.aspx&#34;&gt;IDispatch interface (Automation)&lt;/a&gt;を実装しています。&lt;/p&gt;

&lt;p&gt;ですので、 &lt;a href=&#34;https://github.com/hnakamur/windowsupdate/blob/a878b9dbfeadeb768f27011d6bfd97bfecdd5d9d/search.go#L32&#34;&gt;https://github.com/hnakamur/windowsupdate/blob/a878b9dbfeadeb768f27011d6bfd97bfecdd5d9d/search.go#L32&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;	searcher, err := toIDispatchErr(oleutil.CallMethod((*ole.IDispatch)(s), &amp;quot;CreateUpdateSearcher&amp;quot;))
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のように&lt;a href=&#34;https://github.com/mattn/go-ole/blob/7d0136ad48c228000c2abdea549674c498110124/oleutil/oleutil.go#L47&#34;&gt;oleutil.CallMethod&lt;/a&gt;などのoleutilパッケージの各種メソッドを使ってWindows Update Agent APIのメソッド呼び出しやプロパティ値の設定・取得を動的に行うことが出来ます。&lt;/p&gt;

&lt;p&gt;一方、UIオートメーションAPIのほうは、&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee671406(v=vs.85%29.aspx&#34;&gt;IUIAutomation interface (Windows)&lt;/a&gt;のようにIDsipatchインタフェースは実装しておらず、IUnknownインタフェースを実装しているだけです。&lt;/p&gt;

&lt;p&gt;そこで、UIオートメーションのインタフェースごとにGoのstructを定義していく必要があります。&lt;/p&gt;

&lt;p&gt;mattnさんのgo-oleの&lt;a href=&#34;https://github.com/mattn/go-ole/blob/master/iunknown.go&#34;&gt;iunknown.go&lt;/a&gt;や&lt;a href=&#34;https://github.com/mattn/go-ole/blob/master/idispatch.go&#34;&gt;idispatch.go&lt;/a&gt;を見よう見まねで実装してみました。きちんと理解せず雰囲気で書いているので、おかしなところがあるかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;iuiautomationelement-findfirstは実装してみたが挙動が変:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;IUIAutomationElement::FindFirstは実装してみたが挙動が変&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee696029(v=vs.85%29.aspx&#34;&gt;IUIAutomationElement::FindFirst method (Windows)&lt;/a&gt;は&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L113-L115&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L113-L115&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L141-L155&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L141-L155&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりで実装しています。実行すると戻り値の*IUIAutomationElementはnilではない値になって目的のUI要素が見つかっているようです。しかし、&lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=8279&#34;&gt;Microsoft Windows SDK for Windows 7 and .NET Framework 4&lt;/a&gt;同梱のinspect.exeで見るとnameプロパティに空ではない値が設定されているのに&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomationelement.go#L129&#34;&gt;Get_CurrentName&lt;/a&gt;などで名前を取得してみると空文字になってしまうというトラブルに見舞われました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee671529(v=vs.85%29.aspx&#34;&gt;IUIAutomation::CreatePropertyCondition&lt;/a&gt;でVARIANT型を引数で渡すところがあって、VARIANT型のサイズはuintptrのサイズより大きいので分割してsyscall.Syscallファミリーの関数を呼ぶ必要があります。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/variant_386.go#L14-L22&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/variant_386.go#L14-L22&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomation_386.go#L11-L29&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/iuiautomation_386.go#L11-L29&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;あたりで実装しているのですが、どこかおかしいのかもしれません。&lt;/p&gt;

&lt;h2 id=&#34;回避策としてtreewalkerで自前で探すメソッドを実装:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;回避策としてTreeWalkerで自前で探すメソッドを実装&lt;/h2&gt;

&lt;p&gt;FindFirstがうまく動かせなかったので、回避策としてTreeWalkerで自前で探すメソッドを実装してみました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/search.go&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/e469741ce0aeaf5b4f8661a0887f9004a01688ab/search.go&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;幅優先探索でUI要素のツリーを探すようにしています。
また、ウィンドウがまだ存在しない場合はポーリングして存在するまで待ってから返す関数も実装しています。&lt;/p&gt;

&lt;h2 id=&#34;現状だとウィンドウ切り替わり時にsleepを入れる必要がある:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;現状だとウィンドウ切り替わり時にSleepを入れる必要がある&lt;/h2&gt;

&lt;p&gt;実際に試してみるとウィンドウを開いた後すぐにUI要素を探そうとすると見つからない場合がありました。おそらくウィンドウ内のUI要素が作られる前のタイミングで探そうとしているのだと思います。&lt;/p&gt;

&lt;p&gt;ただ上記のようにポーリングをしているのでUI要素が作られれば見つかると想定していたのですが、実際はいつまでもポーリングを続けてしまいました。&lt;/p&gt;

&lt;p&gt;しかたがないので、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/moderniejapanizer/blob/fcc9eb9f51560916ae8831e9c042a789ced298cf/imeja.go#L58&#34;&gt;https://github.com/hnakamur/moderniejapanizer/blob/fcc9eb9f51560916ae8831e9c042a789ced298cf/imeja.go#L58&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;のようにウィンドウが切り替わった後、ウィンドウを探す前に1秒のスリープを入れています。が、これだとマシンが重い状態だと1秒では足りなくてUI要素が見つからずにポーリングし続けてしまうケースが起こりえます。&lt;/p&gt;

&lt;h2 id=&#34;iuiautomation-addstructurechangedeventhandlerを使いたいがgoの関数をコールバックしてもらう方法がわからず挫折中:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;IUIAutomation::AddStructureChangedEventHandlerを使いたいがGoの関数をコールバックしてもらう方法がわからず挫折中&lt;/h2&gt;

&lt;p&gt;おそらくあるべき姿としてはポーリングではなく&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee671512(v=vs.85%29.aspx&#34;&gt;IUIAutomation::AddStructureChangedEventHandler method (Windows)&lt;/a&gt;を使うのだと思います。&lt;/p&gt;

&lt;p&gt;が、&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee696197(v=vs.85%29.aspx&#34;&gt;IUIAutomationStructureChangedEventHandler interface (Windows)&lt;/a&gt;の&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee696198(v=vs.85%29.aspx&#34;&gt;IUIAutomationStructureChangedEventHandler::HandleStructureChangedEvent method (Windows)&lt;/a&gt;をGoの関数で書いてコールバックで読んでもらう方法がわからず挫折中です。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/commit/c76d7dfb476cd13723bed6da5581639d66b6ffbb&#34;&gt;Trying AddStructureChangedEventHandler but no luck yet · c76d7df · hnakamur/w32uiautomation&lt;/a&gt;でよくわからないまま雰囲気でトライしてみたのですが、実行時エラーになってしまいました。&lt;/p&gt;

&lt;h1 id=&#34;とりあえず当初の目的には使えていますが-まだまだ改良が必要:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;とりあえず当初の目的には使えていますが、まだまだ改良が必要&lt;/h1&gt;

&lt;p&gt;なのですが、行き詰まっているのでなにかアドバイスありましたらぜひお願いします。&lt;/p&gt;

&lt;h1 id=&#34;2015-02-23-01-07頃追記:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;2015-02-23 01:07頃追記&lt;/h1&gt;

&lt;h2 id=&#34;uiautomationelement-findfirstがちゃんと動くようになりました:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;UIAutomationElement::FindFirstがちゃんと動くようになりました&lt;/h2&gt;

&lt;p&gt;やはり &lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/0c48ebfdce27726587ae6797643b29b7fe0b99f7/variant_386.go#L14&#34;&gt;VariantToUintptrArray&lt;/a&gt;がバグっていました。
&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/commit/0c48ebfdce27726587ae6797643b29b7fe0b99f7&#34;&gt;Fix 32bit VariantToUintptrArray · 0c48ebf · hnakamur/w32uiautomation&lt;/a&gt;で修正しました。&lt;/p&gt;

&lt;p&gt;FindFirstがちゃんと動くようになったので、回避策で作ったTreeWalkerで自前で探すメソッドは削除しました。&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/commit/733229d4bd779da9e44241b4b581951ff1c4643e&#34;&gt;Remove WaitFindFirstWithBreadthFirstSearch in favor of FindFirst. · 733229d · hnakamur/w32uiautomation&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;コールバックを使うためのsyscall-newcallbackという関数を見つけました:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;コールバックを使うためのsyscall.NewCallbackという関数を見つけました&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/golang/go/blob/edadffa2f3464c48a234f3cf2fc092a03f91824f/src/syscall/syscall_windows.go#L113-L118&#34;&gt;go/syscall_windows.go at edadffa2f3464c48a234f3cf2fc092a03f91824f · golang/go&lt;/a&gt;で定義されていました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Converts a Go function to a function pointer conforming
// to the stdcall calling convention. This is useful when
// interoperating with Windows code requiring callbacks.
func NewCallback(fn interface{}) uintptr {
	return compileCallback(fn, true)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;後日試してみたいと思います。&lt;/p&gt;

&lt;h1 id=&#34;2015-02-23-05-00頃追記:c243ed5a9e0d5bc9add7115bec606b23&#34;&gt;2015-02-23 05:00頃追記&lt;/h1&gt;

&lt;p&gt;実は&lt;a href=&#34;https://github.com/mattn/go-ole/blob/master/example/winsock/winsock.go&#34;&gt;go-ole/winsock.go&lt;/a&gt;がコールバックを使うサンプルになっていることに気づきました。&lt;/p&gt;

&lt;p&gt;またまた見よう見まねで&lt;a href=&#34;https://msdn.microsoft.com/en-us/library/windows/desktop/ee696197(v=vs.85%29.aspx&#34;&gt;IUIAutomationStructureChangedEventHandler interface&lt;/a&gt;を使えるところまでこぎつけました。
&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/pull/2&#34;&gt;Add structure changed event handler by hnakamur · Pull Request #2 · hnakamur/w32uiautomation&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;早速これを活用して、FindFirstで見つからなかったら見つかるまでループするというWaitFindFirstをSleepではなくUI要素が追加されるまで待って繰り返すように改良しました。
&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/8fe8ac469892d3e07e008341a3d4a2fc2b611a4a/waitfind.go#L10-L49&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/8fe8ac469892d3e07e008341a3d4a2fc2b611a4a/waitfind.go#L10-L49&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;winsockのサンプルではコールバックを待つ間メッセージループを回すコードは
&lt;a href=&#34;https://github.com/mattn/go-ole/blob/7d0136ad48c228000c2abdea549674c498110124/example/winsock/winsock.go#L133-L137&#34;&gt;https://github.com/mattn/go-ole/blob/7d0136ad48c228000c2abdea549674c498110124/example/winsock/winsock.go#L133-L137&lt;/a&gt;
のようになっていました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/w32uiautomation/blob/8fe8ac469892d3e07e008341a3d4a2fc2b611a4a/waitfind.go#L10-L49&#34;&gt;https://github.com/hnakamur/w32uiautomation/blob/8fe8ac469892d3e07e008341a3d4a2fc2b611a4a/waitfind.go#L10-L49&lt;/a&gt;
のほうは参照カウンタが0以外の間ループを回すのではなくて、waitingフラグがtrueの間回すようにしています。で、コールバックでお目当てのイベント、つまりUI要素が追加されたイベントだったらwaitingフラグをfalseにしています。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/hnakamur/moderniejapanizer&#34;&gt;hnakamur/moderniejapanizer&lt;/a&gt;も新しいWaitFindFirstを使うように更新しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Build UIAutomation samples in Windows SDK 7.1</title>
      <link>/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</guid>
      <description>

&lt;h2 id=&#34;windows-sdk-7-1-をインストール:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;Windows SDK 7.1 をインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=8279&#34;&gt;Download Microsoft Windows SDK for Windows 7 and .NET Framework 4 from Official Microsoft Download Center&lt;/a&gt;からダウンロード、インストールします。後でMSBuild.exeを使うため、Installation Optionsのツリーでは.NET Developmentを外さずに入れるようにしてください。&lt;/p&gt;

&lt;h2 id=&#34;サンプルソースをコピー:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;サンプルソースをコピー&lt;/h2&gt;

&lt;p&gt;サンプルソースは C:\Program Files\Microsoft SDKs\Windows\v7.1\Samples\winui\uiautomation\ にありますが、ここだと一般ユーザで書き込みができないのでホームディレクトリ以下に作業ディレクトリを作ってコピーします。&lt;/p&gt;

&lt;h2 id=&#34;ビルド用にコマンドプロンプトを起動:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;ビルド用にコマンドプロンプトを起動&lt;/h2&gt;

&lt;p&gt;[スタートメニュー]/[Microsoft Windows SDK v7.1]/[Windows SDK 7.1 Command Prompt]メニューでコマンドプロンプトを起動します（通常のコマンドプロンプトだとMSBuild.exeがPATHに入っていません）。&lt;/p&gt;

&lt;h2 id=&#34;サンプルのビルド:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;サンプルのビルド&lt;/h2&gt;

&lt;p&gt;例としてUIAFragmentProviderのサンプルをビルドする場合です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd C:\Users\user\Documents\uiautomation_samples\UIAFragmentProvider\CPP
vcupgrade UIAFragmentProvider.vcproj
setenv /x86
msbuild UIAFragmentProvider.vcxproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C:\Users\user\Documents\uiautomation_samples\UIAFragmentProvider\CPP\Debug\UIAFragmentProvider.exe が生成されます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LXDを試してみた</title>
      <link>/blog/2014/12/01/lxd-the-linux-container-daemon/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/01/lxd-the-linux-container-daemon/</guid>
      <description>

&lt;h2 id=&#34;はじめに:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;LXDに関するページをいくつか紹介します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.linuxcontainers.org/pipermail/lxc-users/2014-November/007978.html&#34;&gt;[lxc-users] LXD an &amp;ldquo;hypervisor&amp;rdquo; for containers (based on liblxc)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;LXCメーリングリストに投稿されたLXDのアナウンスメール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;LXDのホームページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxc/lxd githubレポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://insights.ubuntu.com/2014/11/04/lxd-the-linux-container-daemon/&#34;&gt;Dustin KirklandさんによるLXDの紹介 (2分7秒)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;LXDの発音は&lt;a href=&#34;https://www.youtube.com/watch?v=U-lXf85Mhno&amp;amp;t=1m18s&#34;&gt;1分18秒あたり&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zdnet.com/ubuntu-lxd-not-a-docker-replacement-a-docker-enhancement-7000035463/&#34;&gt;Ubuntu LXD: Not a Docker replacement, a Docker enhancement | ZDNet&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;「LXDはdockerを置き換えるものではなく強化するもの」というタイトルの解説記事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目指しているのは以下の様なものらしいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトでセキュア

&lt;ul&gt;
&lt;li&gt;コンテナを非rootユーザで稼働できる&lt;/li&gt;
&lt;li&gt;コンテナを隔離して安全に動かせる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンテナでは単一プロセスを動かすだけではなく完全なOS環境を動かす&lt;/li&gt;
&lt;li&gt;リモートのイメージ管理サービスと連携してライブマイグレーションを可能にする&lt;/li&gt;
&lt;li&gt;OpenStackとも連携&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セットアップ:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;Ubuntu 14.04で試しました。
バイナリパッケージをインストールする手順とソースからビルドする手順を書いておきますが、実際に試したのは後者です。正確には最初前者を試したのですが、その後何してよいかドキュメントが見当たらないので後者を試した感じです。&lt;/p&gt;

&lt;h3 id=&#34;バイナリパッケージをインストールする手順:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;バイナリパッケージをインストールする手順&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;The next hypervisor: LXD is fast, secure container management for Linux | Cloud | Ubuntu&lt;/a&gt;の&amp;rdquo;Getting started with LXD&amp;rdquo;に書いてあります。&lt;/p&gt;

&lt;p&gt;add-apt-repositoryを使うため事前にsoftware-properties-commonパッケージをインストールしておく必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install software-properties-common
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;その後以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository cloud-archive:juno
sudo apt-get update
sudo apt-get install nova-compute-flex
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ソースからビルドする手順:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;ソースからビルドする手順&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd#installing-the-dependencies&#34;&gt;lxc/lxd&lt;/a&gt;の手順に従います。&lt;/p&gt;

&lt;p&gt;以下のコマンドで依存ライブラリをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install lxc lxc-dev mercurial git pkg-config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Goをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install software-properties-common
sudo add-apt-repository ppa:ubuntu-lxc/lxd-daily
sudo apt-get update
sudo apt-get install golang
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GOPATHのディレクトリを作成して、GOPATH環境変数を設定します。
以下はbashを使っている想定で ~/.bashrc に追加してシェルを再起動する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/go
echo &#39;export GOPATH=$HOME/go&#39; &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go getしてソースディレクトリに移動してビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/lxc/lxd
cd $GOPATH/src/github.com/lxc/lxd
go get -v -d ./...
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;./lxc/lxcと./lxd/lxdという2つの実行ファイルが作られます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@ubuntu-1404:~/go/src/github.com/lxc/lxd$ file ./lxc/lxc ./lxd/lxd
./lxc/lxc: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=a317752267685a543f724c02c2fb827e03564236, not stripped
./lxd/lxd: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=8f4ff9b64ecda66a2269c18fd5c440620d548da3, not stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lxdはlxdのデーモンです。lxcはlxdに通信するクライアントプログラムです。&lt;a href=&#34;http://gopkg.in/lxc/go-lxc.v2&#34;&gt;go-lxc.v2 - gopkg.in/lxc/go-lxc.v2&lt;/a&gt;というLXCのGoバインディングライブラリを使用しています。&lt;/p&gt;

&lt;h2 id=&#34;セットアップ-1:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;ビルド後以下の環境整備が必要です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /var/lib/lxd
sudo chown $USER:$USER /var/lib/lxd
echo &amp;quot;$USER:1000000:65536&amp;quot; | sudo tee -a /etc/subuid /etc/subgid
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使い方:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;使い方&lt;/h2&gt;

&lt;h3 id=&#34;lxdの起動:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxdの起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxd/lxd &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ作成:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc create iamge:ubuntu foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;READMEでは &lt;code&gt;image:ubuntu&lt;/code&gt; をつけていませんが、これだと以下の様なエラーになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc create baz
error: Only the default ubuntu image is supported. Try `lxc create images:ubuntu foo`.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ起動:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc start foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ一覧表示:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ一覧表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、通常のlxcとはコンテナの管理が別になっているのか(要確認)、 &lt;code&gt;lxc-ls&lt;/code&gt; しても fooは表示されませんでした。&lt;/p&gt;

&lt;h3 id=&#34;lxcのコンテナ停止:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ停止&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc stop foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ停止-1:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ停止&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc delete foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxc-shellが未実装:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxc shellが未実装！&lt;/h3&gt;

&lt;p&gt;コンテナでコマンドを実行してみたいところなのですが、 &lt;code&gt;lxc shell&lt;/code&gt; というサブコマンドは未実装だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc help
Usage: lxc [subcommand] [options]
Available commands:
  config     - Manage configuration.
  create     - lxc create images:ubuntu &amp;lt;name&amp;gt;
  delete     - lxc delete &amp;lt;resource&amp;gt;
  finger     - Fingers the lxd instance to check if it is up and working.
  freeze     - Changes a containers state to freeze.
  help       - Presents details on how to use lxd.
  list       - Lists the available resources.
  remote     - Manage remote lxc servers.
  restart    - Changes a containers state to restart.
  shell      - Start a shell or specified command (NOT IMPLEMENTED) in a container.
  start      - Changes a containers state to start.
  stop       - Changes a containers state to stop.
  unfreeze   - Changes a containers state to unfreeze.
  version    - Prints the version number of lxd.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースを見ても &lt;a href=&#34;https://github.com/lxc/lxd/blob/a315c07c632188f7d37fa8dbbe3f1b7d87ab34de/lxc/shell.go#L38-L42&#34;&gt;lxd/shell.go at a315c07c632188f7d37fa8dbbe3f1b7d87ab34de · lxc/lxd&lt;/a&gt; のあたりにTODOと書かれています。&lt;/p&gt;

&lt;p&gt;ただ、&lt;a href=&#34;https://github.com/lxc/go-lxc&#34;&gt;lxc/go-lxc&lt;/a&gt;のソースを見ると、コンテナ内でコマンドを実行するための関数はあるのですが、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/go-lxc/blob/bc0a9447e0be56f8e35d0affe83a92e638308e2f/container.go#L422-L423&#34;&gt;https://github.com/lxc/go-lxc/blob/bc0a9447e0be56f8e35d0affe83a92e638308e2f/container.go#L422-L423&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Execute executes the given command in a temporary container.
func (c *Container) Execute(args ...string) ([]byte, error) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンド実行後に標準出力の結果を戻り値で受け取るようになっています。&lt;/p&gt;

&lt;p&gt;シェルを起動してインタラクティブに入出力するには、標準入力、標準出力、標準エラー出力をストリームのようにリアルタイムにやりとりするような関数が必要だと思います。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;早く &lt;code&gt;lxc shell&lt;/code&gt; が実装されて欲しいですね！&lt;/p&gt;

&lt;p&gt;2015-04-23 追記&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/2015/04/23/try-lxd-0.7-with-vagrant/&#34;&gt;LXD 0.7ではlxc execでシェルの対話操作もできるようになっていました&lt;/a&gt;に書きましたが、 &lt;code&gt;lxc exec コンテナ名 /bin/bash&lt;/code&gt; でシェルの対話操作もできるようになっていました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diagram as a Code</title>
      <link>/blog/2014/09/07/diagram-as-a-code/</link>
      <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/09/07/diagram-as-a-code/</guid>
      <description>

&lt;p&gt;この記事はpplogに書いた記事 &lt;a href=&#34;https://www.pplog.net/u/hnakamur2&#34;&gt;https://www.pplog.net/u/hnakamur2&lt;/a&gt; の転載です。&lt;/p&gt;

&lt;h2 id=&#34;背景:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;プログラマである私は、既存の作図ツールやシステムに不満があります。こうなってたらいいのにという点を整理してみます。&lt;/p&gt;

&lt;h3 id=&#34;図の変更履歴をわかりやすい形で見たい:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;図の変更履歴をわかりやすい形で見たい&lt;/h3&gt;

&lt;p&gt;ここでの前提として図は概要をつかむためのものと考えています。&lt;/p&gt;

&lt;p&gt;データベースのテーブル定義から完全なE-R図を自動作成したり、ソースコードから全ての属性を含んだクラス図を作るといったケースは今回の想定外です。&lt;/p&gt;

&lt;p&gt;私が図が欲しいと思うのは概要を把握したい場合なので、むしろ枝葉末節は省いて大まかな構造だけを見たいわけです。何が重要で何が枝葉末節かは人の主観が入るので、図の元ネタは人が書くことになります。となるとバージョン管理して変更履歴を追えるようにしたいと思うのは自然でしょう。&lt;/p&gt;

&lt;p&gt;文書はAsciiDocなどのテキスト形式で書けばgitでバージョン管理で差分も見られます。しかし、図はどうするか。バイナリ形式だと差分を表示しても理解できないですし、SVGなら差分は表示可能ですが理解しやすいとは言えないと思います。&lt;/p&gt;

&lt;h3 id=&#34;図の要素を半自動で配置したい:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;図の要素を半自動で配置したい&lt;/h3&gt;

&lt;p&gt;たいていのGUIの作図ツールでは図の要素をマウスで配置するようになっています。整列メニューがあったりはしますが、サイズを幅だけ揃える機能はなかったりして1つずつちまちまと設定することになります。&lt;/p&gt;

&lt;p&gt;一方、PlantUMLのようにテキストで図の要素を記述する仕組みの場合、完全自動で配置されるシステムが多いです。というより手動配置のものは見たことが無いです。&lt;/p&gt;

&lt;p&gt;要素数が少ないうちは自動配置でも良いのですが、多くなってくると不満が強くなってきます。関連する要素を近くにひとかたまりで配置して、他のグループとは遠くに配置したいのです。また、グループの中でもどの順序で並べるかは明示的に指定したい。&lt;/p&gt;

&lt;p&gt;同様に、要素間を結ぶ線の引き回しの配置も半自動にしたい。図に要素を追加していく時に、配置を調整するわけですが、接続線の配置が完全手動だと修正が面倒すぎます。かと言って完全自動だと、引き回しの配置が希望通りにならなくて不満が出ます。&lt;/p&gt;

&lt;p&gt;ということで、接続線の配置のルールの一部は自動化して、残りは手動で指定するという半自動方式が欲しいわけです。&lt;/p&gt;

&lt;h2 id=&#34;解決案:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;解決案&lt;/h2&gt;

&lt;p&gt;ということで、図の要素のテキストと配置のうち手動で指定したい部分だけをユーザが指定するテキストデータとして記述し、残りはプログラムで自動化すれば良いのではという考えが浮かびました。&lt;/p&gt;

&lt;p&gt;これはまさに&lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js - Data-Driven Documents&lt;/a&gt;の名前の通りの考え方です。データドリブンでドキュメントを作るわけです。&lt;/p&gt;

&lt;p&gt;インフラ界隈で言われているInfrastracture as a Codeという言葉にのっかると、Diagram as a Codeとも言えると思います。2つ合わせるとData-Driven Diagram as a Codeかなw&lt;/p&gt;

&lt;p&gt;まだ荒削りですけど、実際にd3.jsを使ったサンプルプログラムを書いて試しています。
&lt;a href=&#34;http://qiita.com/hnakamur/items/cd7610f63f5275e774a4&#34;&gt;d3.jsでクラス図を書いてみた - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AsciiDocの文書に埋め込むためにasciidoctor-diagramのプラグインも作っています。
&lt;a href=&#34;https://github.com/hnakamur/asciidoctor-diagram-d3js&#34;&gt;https://github.com/hnakamur/asciidoctor-diagram-d3js&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;diagram-as-a-codeのノウハウを共有し合えるようになりたい:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;Diagram as a Codeのノウハウを共有し合えるようになりたい&lt;/h2&gt;

&lt;p&gt;図の要素や接続線を半自動で配置するためには、幾何学の計算アルゴリズムが重要になってきます。例えば、&lt;a href=&#34;http://qiita.com/hnakamur/items/3ce1e90aecd36883add6&#34;&gt;d3.js - 円の中心までベジェ曲線を引くときに円との交点に矢印終端を配置するサンプル - Qiita&lt;/a&gt;でもベジェ曲線と円の交点を求める計算が必要です。ネットの情報を見ながら独学でやっているだけだと、時間もかかるし挫折しがちです。&lt;/p&gt;

&lt;p&gt;ということで、Diagram as a Codeの流れが広まって、幾何学の計算のノウハウを共有し合えるようになると嬉しいなあというのが願いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>久々にoctopressをアップデート</title>
      <link>/blog/2014/06/10/upgrade-octopress/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/06/10/upgrade-octopress/</guid>
      <description>

&lt;p&gt;octopressをアップデートした時にハマったのでメモ。
アップデート手順は&lt;a href=&#34;http://blog.n-z.jp/blog/2013-12-21-update-octopress.html&#34;&gt;octopressをアップデートしてisolateを使い始めた - @znz blog&lt;/a&gt;の「octopress のアップデート」の部分を参考にしました。ありがとうございます。&lt;/p&gt;

&lt;h2 id=&#34;octopressのアップデート:6dd973bdad9933eb852512ee60bcacb7&#34;&gt;Octopressのアップデート&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://octopress.org/docs/updating/&#34;&gt;Updating Octopress - Octopress&lt;/a&gt;の&amp;rdquo;How to Update&amp;rdquo;のコマンドを順に実行しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull octopress master     # Get the latest Octopress
bundle install                # Keep gems updated
rake update_source            # update the template&#39;s source
rake update_style             # update the template&#39;s style
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git pullではconflictsが起きたので、適宜修正しました。基本的にはHEAD側を採用。&lt;/p&gt;

&lt;h2 id=&#34;sass-globbingをgemfileに追加:6dd973bdad9933eb852512ee60bcacb7&#34;&gt;sass-globbingをGemfileに追加。&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rake generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行した時に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadError on line [&amp;quot;161&amp;quot;] of /Users/hnakamur/octopress/vendor/bundle/ruby/2.1.0/gems/compass-0.12.6/lib/compass/configuration/data.rb: cannot load such file -- sass-globbing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というエラーが出ました。&lt;/p&gt;

&lt;p&gt;Gemfileにsass-globbingを追加して、&lt;code&gt;bundle&lt;/code&gt;でインストールするとエラーは解消しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OSX上でPythonのPILの代わりにPillowをインストールする</title>
      <link>/blog/2014/06/10/install-python-pillow-on-osx/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/06/10/install-python-pillow-on-osx/</guid>
      <description>&lt;p&gt;試したバージョン&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python: 2.7.7&lt;/li&gt;
&lt;li&gt;OSX: 10.8.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前作った&lt;a href=&#34;https://github.com/hnakamur/gae-oauth2-sample/&#34;&gt;Google App Engine OAuth 2.0 sample&lt;/a&gt;について問合せを受けたので、動作確認しようと思ったらPILのインストールでエラーになってしまいました。
とりあえず、このサンプルではPIL無くても問題なかったので、&lt;a href=&#34;https://github.com/hnakamur/gae-oauth2-sample/blob/master/pip_install&#34;&gt;pip_install&lt;/a&gt;からPILを外して試しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://derivecv.tumblr.com/post/79130719546&#34;&gt;【ライブラリ】Pillow : PIL (Python Imaging Library )の現代的フォーク版 | DERiVE ブログ &amp;amp; メルマガ&lt;/a&gt;によるとPILは開発停止していて&lt;a href=&#34;http://pillow.readthedocs.org/en/latest/&#34;&gt;Pillow — Pillow v2.4.0 (PIL fork)&lt;/a&gt;を使うのが良いそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/19532125/cant-install-pil-after-mac-os-x-10-9&#34;&gt;python - Can&amp;rsquo;t install PIL after Mac OS X 10.9 - Stack Overflow&lt;/a&gt;を見るとPillowのインストールには&lt;a href=&#34;http://xquartz.macosforge.org/landing/&#34;&gt;XQuartz&lt;/a&gt;が必要らしいです。&lt;/p&gt;

&lt;p&gt;調べてみると、&lt;a href=&#34;http://caskroom.io/&#34;&gt;Homebrew Cask&lt;/a&gt;に&lt;a href=&#34;https://github.com/caskroom/homebrew-cask/blob/master/Casks/xquartz.rb&#34;&gt;xquartz.rb&lt;/a&gt;が含まれていました。
ということで、OSXでのインストール手順は以下で行けました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew cask install xquartz
pip install Pillow
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
  </channel>
</rss>