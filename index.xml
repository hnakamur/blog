<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>hnakamur&#39;s blog at github</title>
    <link>http://localhost:1313/blog/</link>
    <description>Recent content on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 25 Jan 2015 00:00:00 +0000</lastBuildDate>
    <atom:link href="http://localhost:1313/blog/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Build UIAutomation samples in Windows SDK 7.1</title>
      <link>http://localhost:1313/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</link>
      <pubDate>Sun, 25 Jan 2015 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2015/01/25/build-uiautomation-samples-in-windows-sdk-7-dot-1/</guid>
      <description>

&lt;h2 id=&#34;windows-sdk-7-1-をインストール:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;Windows SDK 7.1 をインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.microsoft.com/en-us/download/details.aspx?id=8279&#34;&gt;Download Microsoft Windows SDK for Windows 7 and .NET Framework 4 from Official Microsoft Download Center&lt;/a&gt;からダウンロード、インストールします。後でMSBuild.exeを使うため、Installation Optionsのツリーでは.NET Developmentを外さずに入れるようにしてください。&lt;/p&gt;

&lt;h2 id=&#34;サンプルソースをコピー:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;サンプルソースをコピー&lt;/h2&gt;

&lt;p&gt;サンプルソースは C:\Program Files\Microsoft SDKs\Windows\v7.1\Samples\winui\uiautomation\ にありますが、ここだと一般ユーザで書き込みができないのでホームディレクトリ以下に作業ディレクトリを作ってコピーします。&lt;/p&gt;

&lt;h2 id=&#34;ビルド用にコマンドプロンプトを起動:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;ビルド用にコマンドプロンプトを起動&lt;/h2&gt;

&lt;p&gt;[スタートメニュー]/[Microsoft Windows SDK v7.1]/[Windows SDK 7.1 Command Prompt]メニューでコマンドプロンプトを起動します（通常のコマンドプロンプトだとMSBuild.exeがPATHに入っていません）。&lt;/p&gt;

&lt;h2 id=&#34;サンプルのビルド:baab9f326fb87396bcfbc77e61adeda6&#34;&gt;サンプルのビルド&lt;/h2&gt;

&lt;p&gt;例としてUIAFragmentProviderのサンプルをビルドする場合です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cd C:\Users\user\Documents\uiautomation_samples\UIAFragmentProvider\CPP
vcupgrade UIAFragmentProvider.vcproj
setenv /x86
msbuild UIAFragmentProvider.vcxproj
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;C:\Users\user\Documents\uiautomation_samples\UIAFragmentProvider\CPP\Debug\UIAFragmentProvider.exe が生成されます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>LXDを試してみた</title>
      <link>http://localhost:1313/blog/2014/12/01/lxd-the-linux-container-daemon/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/12/01/lxd-the-linux-container-daemon/</guid>
      <description>

&lt;h2 id=&#34;はじめに:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;LXDに関するページをいくつか紹介します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.linuxcontainers.org/pipermail/lxc-users/2014-November/007978.html&#34;&gt;[lxc-users] LXD an &amp;ldquo;hypervisor&amp;rdquo; for containers (based on liblxc)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;LXCメーリングリストに投稿されたLXDのアナウンスメール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;LXDのホームページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxc/lxd githubレポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://insights.ubuntu.com/2014/11/04/lxd-the-linux-container-daemon/&#34;&gt;Dustin KirklandさんによるLXDの紹介 (2分7秒)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;LXDの発音は&lt;a href=&#34;https://www.youtube.com/watch?v=U-lXf85Mhno&amp;amp;t=1m18s&#34;&gt;1分18秒あたり&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zdnet.com/ubuntu-lxd-not-a-docker-replacement-a-docker-enhancement-7000035463/&#34;&gt;Ubuntu LXD: Not a Docker replacement, a Docker enhancement | ZDNet&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;「LXDはdockerを置き換えるものではなく強化するもの」というタイトルの解説記事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目指しているのは以下の様なものらしいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトでセキュア

&lt;ul&gt;
&lt;li&gt;コンテナを非rootユーザで稼働できる&lt;/li&gt;
&lt;li&gt;コンテナを隔離して安全に動かせる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンテナでは単一プロセスを動かすだけではなく完全なOS環境を動かす&lt;/li&gt;
&lt;li&gt;リモートのイメージ管理サービスと連携してライブマイグレーションを可能にする&lt;/li&gt;
&lt;li&gt;OpenStackとも連携&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セットアップ:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;Ubuntu 14.04で試しました。
バイナリパッケージをインストールする手順とソースからビルドする手順を書いておきますが、実際に試したのは後者です。正確には最初前者を試したのですが、その後何してよいかドキュメントが見当たらないので後者を試した感じです。&lt;/p&gt;

&lt;h3 id=&#34;バイナリパッケージをインストールする手順:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;バイナリパッケージをインストールする手順&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;The next hypervisor: LXD is fast, secure container management for Linux | Cloud | Ubuntu&lt;/a&gt;の&amp;rdquo;Getting started with LXD&amp;rdquo;に書いてあります。&lt;/p&gt;

&lt;p&gt;add-apt-repositoryを使うため事前にsoftware-properties-commonパッケージをインストールしておく必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install software-properties-common
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;その後以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository cloud-archive:juno
sudo apt-get update
sudo apt-get install nova-compute-flex
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ソースからビルドする手順:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;ソースからビルドする手順&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd#installing-the-dependencies&#34;&gt;lxc/lxd&lt;/a&gt;の手順に従います。&lt;/p&gt;

&lt;p&gt;以下のコマンドで依存ライブラリをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install lxc lxc-dev mercurial git pkg-config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Goをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install software-properties-common
sudo add-apt-repository ppa:ubuntu-lxc/lxd-daily
sudo apt-get update
sudo apt-get install golang
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GOPATHのディレクトリを作成して、GOPATH環境変数を設定します。
以下はbashを使っている想定で ~/.bashrc に追加してシェルを再起動する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/go
echo &#39;export GOPATH=$HOME/go&#39; &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go getしてソースディレクトリに移動してビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/lxc/lxd
cd $GOPATH/src/github.com/lxc/lxd
go get -v -d ./...
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;./lxc/lxcと./lxd/lxdという2つの実行ファイルが作られます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@ubuntu-1404:~/go/src/github.com/lxc/lxd$ file ./lxc/lxc ./lxd/lxd
./lxc/lxc: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=a317752267685a543f724c02c2fb827e03564236, not stripped
./lxd/lxd: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=8f4ff9b64ecda66a2269c18fd5c440620d548da3, not stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lxdはlxdのデーモンです。lxcはlxdに通信するクライアントプログラムです。&lt;a href=&#34;http://gopkg.in/lxc/go-lxc.v2&#34;&gt;go-lxc.v2 - gopkg.in/lxc/go-lxc.v2&lt;/a&gt;というLXCのGoバインディングライブラリを使用しています。&lt;/p&gt;

&lt;h2 id=&#34;セットアップ-1:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;ビルド後以下の環境整備が必要です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /var/lib/lxd
sudo chown $USER:$USER /var/lib/lxd
echo &amp;quot;$USER:1000000:65536&amp;quot; | sudo tee -a /etc/subuid /etc/subgid
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使い方:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;使い方&lt;/h2&gt;

&lt;h3 id=&#34;lxdの起動:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxdの起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxd/lxd &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ作成:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc create iamge:ubuntu foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;READMEでは &lt;code&gt;image:ubuntu&lt;/code&gt; をつけていませんが、これだと以下の様なエラーになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc create baz
error: Only the default ubuntu image is supported. Try `lxc create images:ubuntu foo`.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ起動:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc start foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ一覧表示:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ一覧表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、通常のlxcとはコンテナの管理が別になっているのか(要確認)、 &lt;code&gt;lxc-ls&lt;/code&gt; しても fooは表示されませんでした。&lt;/p&gt;

&lt;h3 id=&#34;lxcのコンテナ停止:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ停止&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc stop foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ停止-1:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxcのコンテナ停止&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc delete foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxc-shellが未実装:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;lxc shellが未実装！&lt;/h3&gt;

&lt;p&gt;コンテナでコマンドを実行してみたいところなのですが、 &lt;code&gt;lxc shell&lt;/code&gt; というサブコマンドは未実装だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc help
Usage: lxc [subcommand] [options]
Available commands:
  config     - Manage configuration.
  create     - lxc create images:ubuntu &amp;lt;name&amp;gt;
  delete     - lxc delete &amp;lt;resource&amp;gt;
  finger     - Fingers the lxd instance to check if it is up and working.
  freeze     - Changes a containers state to freeze.
  help       - Presents details on how to use lxd.
  list       - Lists the available resources.
  remote     - Manage remote lxc servers.
  restart    - Changes a containers state to restart.
  shell      - Start a shell or specified command (NOT IMPLEMENTED) in a container.
  start      - Changes a containers state to start.
  stop       - Changes a containers state to stop.
  unfreeze   - Changes a containers state to unfreeze.
  version    - Prints the version number of lxd.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースを見ても &lt;a href=&#34;https://github.com/lxc/lxd/blob/a315c07c632188f7d37fa8dbbe3f1b7d87ab34de/lxc/shell.go#L38-L42&#34;&gt;lxd/shell.go at a315c07c632188f7d37fa8dbbe3f1b7d87ab34de · lxc/lxd&lt;/a&gt; のあたりにTODOと書かれています。&lt;/p&gt;

&lt;p&gt;ただ、&lt;a href=&#34;https://github.com/lxc/go-lxc&#34;&gt;lxc/go-lxc&lt;/a&gt;のソースを見ると、コンテナ内でコマンドを実行するための関数はあるのですが、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/go-lxc/blob/bc0a9447e0be56f8e35d0affe83a92e638308e2f/container.go#L422-L423&#34;&gt;https://github.com/lxc/go-lxc/blob/bc0a9447e0be56f8e35d0affe83a92e638308e2f/container.go#L422-L423&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Execute executes the given command in a temporary container.
func (c *Container) Execute(args ...string) ([]byte, error) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンド実行後に標準出力の結果を戻り値で受け取るようになっています。&lt;/p&gt;

&lt;p&gt;シェルを起動してインタラクティブに入出力するには、標準入力、標準出力、標準エラー出力をストリームのようにリアルタイムにやりとりするような関数が必要だと思います。&lt;/p&gt;

&lt;h2 id=&#34;おわりに:2647017d90d6d4b3d5db0bad1b2c22fd&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;早く &lt;code&gt;lxc shell&lt;/code&gt; が実装されて欲しいですね！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Diagram as a Code</title>
      <link>http://localhost:1313/blog/2014/09/07/diagram-as-a-code/</link>
      <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/09/07/diagram-as-a-code/</guid>
      <description>

&lt;p&gt;この記事はpplogに書いた記事 &lt;a href=&#34;https://www.pplog.net/u/hnakamur2&#34;&gt;https://www.pplog.net/u/hnakamur2&lt;/a&gt; の転載です。&lt;/p&gt;

&lt;h2 id=&#34;背景:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;プログラマである私は、既存の作図ツールやシステムに不満があります。こうなってたらいいのにという点を整理してみます。&lt;/p&gt;

&lt;h3 id=&#34;図の変更履歴をわかりやすい形で見たい:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;図の変更履歴をわかりやすい形で見たい&lt;/h3&gt;

&lt;p&gt;ここでの前提として図は概要をつかむためのものと考えています。&lt;/p&gt;

&lt;p&gt;データベースのテーブル定義から完全なE-R図を自動作成したり、ソースコードから全ての属性を含んだクラス図を作るといったケースは今回の想定外です。&lt;/p&gt;

&lt;p&gt;私が図が欲しいと思うのは概要を把握したい場合なので、むしろ枝葉末節は省いて大まかな構造だけを見たいわけです。何が重要で何が枝葉末節かは人の主観が入るので、図の元ネタは人が書くことになります。となるとバージョン管理して変更履歴を追えるようにしたいと思うのは自然でしょう。&lt;/p&gt;

&lt;p&gt;文書はAsciiDocなどのテキスト形式で書けばgitでバージョン管理で差分も見られます。しかし、図はどうするか。バイナリ形式だと差分を表示しても理解できないですし、SVGなら差分は表示可能ですが理解しやすいとは言えないと思います。&lt;/p&gt;

&lt;h3 id=&#34;図の要素を半自動で配置したい:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;図の要素を半自動で配置したい&lt;/h3&gt;

&lt;p&gt;たいていのGUIの作図ツールでは図の要素をマウスで配置するようになっています。整列メニューがあったりはしますが、サイズを幅だけ揃える機能はなかったりして1つずつちまちまと設定することになります。&lt;/p&gt;

&lt;p&gt;一方、PlantUMLのようにテキストで図の要素を記述する仕組みの場合、完全自動で配置されるシステムが多いです。というより手動配置のものは見たことが無いです。&lt;/p&gt;

&lt;p&gt;要素数が少ないうちは自動配置でも良いのですが、多くなってくると不満が強くなってきます。関連する要素を近くにひとかたまりで配置して、他のグループとは遠くに配置したいのです。また、グループの中でもどの順序で並べるかは明示的に指定したい。&lt;/p&gt;

&lt;p&gt;同様に、要素間を結ぶ線の引き回しの配置も半自動にしたい。図に要素を追加していく時に、配置を調整するわけですが、接続線の配置が完全手動だと修正が面倒すぎます。かと言って完全自動だと、引き回しの配置が希望通りにならなくて不満が出ます。&lt;/p&gt;

&lt;p&gt;ということで、接続線の配置のルールの一部は自動化して、残りは手動で指定するという半自動方式が欲しいわけです。&lt;/p&gt;

&lt;h2 id=&#34;解決案:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;解決案&lt;/h2&gt;

&lt;p&gt;ということで、図の要素のテキストと配置のうち手動で指定したい部分だけをユーザが指定するテキストデータとして記述し、残りはプログラムで自動化すれば良いのではという考えが浮かびました。&lt;/p&gt;

&lt;p&gt;これはまさに&lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js - Data-Driven Documents&lt;/a&gt;の名前の通りの考え方です。データドリブンでドキュメントを作るわけです。&lt;/p&gt;

&lt;p&gt;インフラ界隈で言われているInfrastracture as a Codeという言葉にのっかると、Diagram as a Codeとも言えると思います。2つ合わせるとData-Driven Diagram as a Codeかなw&lt;/p&gt;

&lt;p&gt;まだ荒削りですけど、実際にd3.jsを使ったサンプルプログラムを書いて試しています。
&lt;a href=&#34;http://qiita.com/hnakamur/items/cd7610f63f5275e774a4&#34;&gt;d3.jsでクラス図を書いてみた - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AsciiDocの文書に埋め込むためにasciidoctor-diagramのプラグインも作っています。
&lt;a href=&#34;https://github.com/hnakamur/asciidoctor-diagram-d3js&#34;&gt;https://github.com/hnakamur/asciidoctor-diagram-d3js&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;diagram-as-a-codeのノウハウを共有し合えるようになりたい:fbff6c22bf54ae1bcf4f229e9e4f3abd&#34;&gt;Diagram as a Codeのノウハウを共有し合えるようになりたい&lt;/h2&gt;

&lt;p&gt;図の要素や接続線を半自動で配置するためには、幾何学の計算アルゴリズムが重要になってきます。例えば、&lt;a href=&#34;http://qiita.com/hnakamur/items/3ce1e90aecd36883add6&#34;&gt;d3.js - 円の中心までベジェ曲線を引くときに円との交点に矢印終端を配置するサンプル - Qiita&lt;/a&gt;でもベジェ曲線と円の交点を求める計算が必要です。ネットの情報を見ながら独学でやっているだけだと、時間もかかるし挫折しがちです。&lt;/p&gt;

&lt;p&gt;ということで、Diagram as a Codeの流れが広まって、幾何学の計算のノウハウを共有し合えるようになると嬉しいなあというのが願いです。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>OSX上でPythonのPILの代わりにPillowをインストールする</title>
      <link>http://localhost:1313/blog/2014/06/10/install-python-pillow-on-osx/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/06/10/install-python-pillow-on-osx/</guid>
      <description>&lt;p&gt;試したバージョン&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Python: 2.7.7&lt;/li&gt;
&lt;li&gt;OSX: 10.8.5&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;以前作った&lt;a href=&#34;https://github.com/hnakamur/gae-oauth2-sample/&#34;&gt;Google App Engine OAuth 2.0 sample&lt;/a&gt;について問合せを受けたので、動作確認しようと思ったらPILのインストールでエラーになってしまいました。
とりあえず、このサンプルではPIL無くても問題なかったので、&lt;a href=&#34;https://github.com/hnakamur/gae-oauth2-sample/blob/master/pip_install&#34;&gt;pip_install&lt;/a&gt;からPILを外して試しました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://derivecv.tumblr.com/post/79130719546&#34;&gt;【ライブラリ】Pillow : PIL (Python Imaging Library )の現代的フォーク版 | DERiVE ブログ &amp;amp; メルマガ&lt;/a&gt;によるとPILは開発停止していて&lt;a href=&#34;http://pillow.readthedocs.org/en/latest/&#34;&gt;Pillow — Pillow v2.4.0 (PIL fork)&lt;/a&gt;を使うのが良いそうです。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/19532125/cant-install-pil-after-mac-os-x-10-9&#34;&gt;python - Can&amp;rsquo;t install PIL after Mac OS X 10.9 - Stack Overflow&lt;/a&gt;を見るとPillowのインストールには&lt;a href=&#34;http://xquartz.macosforge.org/landing/&#34;&gt;XQuartz&lt;/a&gt;が必要らしいです。&lt;/p&gt;

&lt;p&gt;調べてみると、&lt;a href=&#34;http://caskroom.io/&#34;&gt;Homebrew Cask&lt;/a&gt;に&lt;a href=&#34;https://github.com/caskroom/homebrew-cask/blob/master/Casks/xquartz.rb&#34;&gt;xquartz.rb&lt;/a&gt;が含まれていました。
ということで、OSXでのインストール手順は以下で行けました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;brew cask install xquartz
pip install Pillow
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>久々にoctopressをアップデート</title>
      <link>http://localhost:1313/blog/2014/06/10/upgrade-octopress/</link>
      <pubDate>Tue, 10 Jun 2014 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2014/06/10/upgrade-octopress/</guid>
      <description>

&lt;p&gt;octopressをアップデートした時にハマったのでメモ。
アップデート手順は&lt;a href=&#34;http://blog.n-z.jp/blog/2013-12-21-update-octopress.html&#34;&gt;octopressをアップデートしてisolateを使い始めた - @znz blog&lt;/a&gt;の「octopress のアップデート」の部分を参考にしました。ありがとうございます。&lt;/p&gt;

&lt;h2 id=&#34;octopressのアップデート:6dd973bdad9933eb852512ee60bcacb7&#34;&gt;Octopressのアップデート&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://octopress.org/docs/updating/&#34;&gt;Updating Octopress - Octopress&lt;/a&gt;の&amp;rdquo;How to Update&amp;rdquo;のコマンドを順に実行しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;git pull octopress master     # Get the latest Octopress
bundle install                # Keep gems updated
rake update_source            # update the template&#39;s source
rake update_style             # update the template&#39;s style
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;git pullではconflictsが起きたので、適宜修正しました。基本的にはHEAD側を採用。&lt;/p&gt;

&lt;h2 id=&#34;sass-globbingをgemfileに追加:6dd973bdad9933eb852512ee60bcacb7&#34;&gt;sass-globbingをGemfileに追加。&lt;/h2&gt;

&lt;pre&gt;&lt;code&gt;bundle exec rake generate
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行した時に&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;LoadError on line [&amp;quot;161&amp;quot;] of /Users/hnakamur/octopress/vendor/bundle/ruby/2.1.0/gems/compass-0.12.6/lib/compass/configuration/data.rb: cannot load such file -- sass-globbing
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というエラーが出ました。&lt;/p&gt;

&lt;p&gt;Gemfileにsass-globbingを追加して、&lt;code&gt;bundle&lt;/code&gt;でインストールするとエラーは解消しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Chef-soloとAnsibleとFabricを試した感想</title>
      <link>http://localhost:1313/blog/2013/09/01/tried-chef-ansible-fabric/</link>
      <pubDate>Sun, 01 Sep 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/09/01/tried-chef-ansible-fabric/</guid>
      <description>

&lt;p&gt;Chef-soloとAnsibleとFabricを試してみたので感想をメモ。どれもそんなに深くは使い込んではいない。&lt;/p&gt;

&lt;p&gt;このメモは自分の脳内の考えを整理するためのもので、人が使うことについてどうこう言うつもりはないです。&lt;/p&gt;

&lt;h2 id=&#34;chef-solo:3fccd7895b8e69ec7083f038c938f3c6&#34;&gt;Chef-solo&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;書いてみたcookbookはこちら。&lt;a href=&#34;https://github.com/hnakamur/chef-cookbooks&#34;&gt;hnakamur/chef-cookbooks&lt;/a&gt; &lt;a href=&#34;https://github.com/hnakamur/chef-repo&#34;&gt;hnakamur/chef-repo&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;クックブックは手順を書くのではなくて結果を書くというのがどうも本質的に違うと私は思ってしまう。料理のレシピだって手順を書くし。書結果がこうあるべきというのはserverspecが出来た今となってはそちらに任せて、クックブックは本来手順を書くべきものだと思う。&lt;/li&gt;
&lt;li&gt;RubyのDSLだけど結局上から順に評価されるので、実は手続きを書いていることになっている。でもファイル単位でしか再利用できないので、一部だけ使いたいと思ってコピペするしかなくなるのが悲しい。&lt;/li&gt;
&lt;li&gt;Berkshelfでコミュニティクックブックをダウンロードして、ラッパークックブックを書くのがベストプラクティスってのが、無駄な苦行に思えてどうしても受け入れられない。自分のニーズに合わせて一から書くほうが早いしコンパクトで見やすい。これってDSLだからそうなるのかなー。&lt;/li&gt;
&lt;li&gt;もしDSLではなくRubyのクラスとして定義するようになっていて、各タスクをメソッドとして定義するようになっていたら、もっと再利用しやすかったのではないかと思う。それってむしろrakeのほうが近い気がする。&lt;a href=&#34;http://rubyhitsquad.com/Vlad_the_Deployer.html&#34;&gt;Vlad the Deployer&lt;/a&gt;とかVladから切りだされた&lt;a href=&#34;http://rubygems.org/gems/rake-remote_task&#34;&gt;rake-remote_task | RubyGems.org | your community gem host&lt;/a&gt;ベースで組み立てる感じ。なんでVladは人気出なかったのかな～。Capistranoよりいいと思うんだけど。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;ansible:3fccd7895b8e69ec7083f038c938f3c6&#34;&gt;Ansible&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;書いてみたplaybookはこちら。&lt;a href=&#34;https://github.com/hnakamur/ansible-playbooks&#34;&gt;hnakamur/ansible-playbooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;手続きを記述するのにyamlというのは力不足。基本は順次処理で実行条件で実行するしないの制御ができるだけ。単一のタスクではパラメータでループはできるけど、複数のタスクをまとめてループとかはできない。&lt;/li&gt;
&lt;li&gt;モジュールとして用意されている処理はすっきり書けるが、そうでない場合はshellモジュールでゴリゴリ書くか自前モジュールを作るかになる。自前モジュールを作るのは簡単だが配布の仕組みが確立されていないので、自前でコピーする必要がある。&lt;/li&gt;
&lt;li&gt;やはり手続きはプログラミング言語で記述するほうが自由度は高いと感じた。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;2013-09-02 追記&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;訂正です。自作モジュール配布の仕組みは標準で用意されていました。libraryフォルダにモジュールを置いておけば自動で読み込まれます。&lt;a href=&#34;http://www.ansibleworks.com/docs/bestpractices.html#bundling-ansible-modules-with-playbooks&#34;&gt;Bundling Ansible Modules With Playbooks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;それ以外の場所に置きたい場合は環境変数ANSIBLE_LIBRARYを設定するかコマンドラインオプションに&amp;ndash;module-pathを指定すればOKです。 &lt;a href=&#34;http://www.ansibleworks.com/docs/moduledev.html#module-development&#34;&gt;Module Development | AnsibleWorks&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://twitter.com/r_rudi&#34;&gt;しろう&lt;/a&gt;さん、&lt;a href=&#34;https://twitter.com/r_rudi/status/374375071000702976&#34;&gt;ご指摘&lt;/a&gt;ありがとうございました！&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;fabric:3fccd7895b8e69ec7083f038c938f3c6&#34;&gt;Fabric&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;書いてみたfabfileはこちら。&lt;a href=&#34;https://github.com/hnakamur/my-fabfiles&#34;&gt;hnakamur/my-fabfiles&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;Pythonで手続きを書けるので、処理の流れは自由に書けて良い。&lt;/li&gt;
&lt;li&gt;rpmがインストール済みならダウンロードしないといった処理も自然に書ける。chefやansibleだと素直に書くとsha256sumを計算するという処理が毎回走ってしまう。自分で条件判定処理を記述して実行条件をつければ可能だが、ごちゃごちゃして見づらくなる。&lt;/li&gt;
&lt;li&gt;細かく関数に分けておけば必要なところだけの再利用も簡単。&lt;/li&gt;
&lt;li&gt;Ansibleのモジュールのようなものも、ユーティリティ関数を書くだけの話なので、レシピを書くのとなんら変わらない。レシピとモジュールの開発を同じ枠組みでできるのは便利。モジュールつくって本家にpull requestとかしなくてもすぐ使えるし。&lt;/li&gt;
&lt;li&gt;基本的にはコマンドを順次実行するだけという思想なので、冪等性について考慮した設計になってないのは不便。&lt;/li&gt;
&lt;li&gt;vagrantでfabricでprovisionするプラグインも作ってみた。 &lt;a href=&#34;https://github.com/hnakamur/vagrant-fabric-provisioner&#34;&gt;hnakamur/vagrant-fabric-provisioner&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;テンプレートからファイル生成も標準では毎回上書きされてしまう。Ansibleと同じようにチェックサムを計算して違う時だけ上書きするような関数を自作してみた。&lt;a href=&#34;https://github.com/hnakamur/my-fabfiles/blob/master/fabfile/common/lib/template.py&#34;&gt;my-fabfiles/fabfile/common/lib/template.py at master · hnakamur/my-fabfiles&lt;/a&gt; 変更したかどうかも戻り値で返すようにした。これによって変更した場合だけサービス再起動とかは可能になった。&lt;/li&gt;
&lt;li&gt;が、本当はchefのnotificationのように、ホスト毎の処理が終わった後にサービス再起動をまとめて実行したいところ。post-processキューみたいな仕組みが必要そう。&lt;/li&gt;
&lt;li&gt;処理をpythonで書けるのはいいのだが、リモートでの処理は基本コマンド実行になるのでpythonで直接ファイルを読み書きとかは出来ない。これがもどかしい感じ。&lt;/li&gt;
&lt;li&gt;今バージョン1.7で2.0でオーバーホールするRoadmapのようだがどうなっていくかまだわからない感じ。&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;思いつき:3fccd7895b8e69ec7083f038c938f3c6&#34;&gt;思いつき&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;ふと思いついたのだが、Goでライブラリを用意してレシピもGoで書くのは面白いかも。&lt;/li&gt;
&lt;li&gt;Goならクロスコンパイルも簡単なので、ターゲットマシン用のバイナリを生成してrsync/scpでコピーしてターゲットマシン上で実行するという手が使える。するとファイルの読み書きもコマンド実行でもGoの関数からでもどちらでも実行できる。&lt;/li&gt;
&lt;li&gt;dockerみたいに一つのバイナリで複数の役割を持てせるようにすれば、デーモンとして実行しておいて、さらにsshからコマンド実行して制御ということも可能かも。あるいはエージェントみたいにして相互通信とかサーバと通信して連携するという道も有り得る。&lt;/li&gt;
&lt;li&gt;よくよく考えたら別にGoでなくても、言語処理系とライブラリとレシピのファイルをrsyncで送り込んで実行すれば同じか。&lt;/li&gt;
&lt;li&gt;でもGoならタスクキューとか作ってgoroutineで並列処理したり、channelで連携制御したりというのが書きやすそうなので夢は広がるな〜。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;まずはローカルでコマンド実行するとか、テンプレートからファイル生成する（但し変更が無い場合は上書きしない）ユーティリティ関数群のライブラリを作ってみようということで今作り中。&lt;/p&gt;

&lt;p&gt;他にもいろいろやることがあるので、ツールとして完成するところまで行くかは期待薄。でも、ツールとしては完成しなくてもユーティリティ関数のライブラリでも有効活用できるしGoの勉強にもなるので、気が向いた時にマイペースでやってみよう。&lt;/p&gt;

&lt;p&gt;2013-09-02 追記その2&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;http://qiita.com/hnakamur/items/b20458110777c3ceea3a&#34;&gt;Ansibleで自作モジュールを作成してplaybookと一緒に配布 - Qiita [キータ]&lt;/a&gt;に書きましたが、Ansibleのモジュール作成は簡単です。一定のルールに従ってスクリプトファイルを作るだけです。&lt;/li&gt;
&lt;li&gt;しかも、今頃気づいたのですが、モジュールはターゲットマシン上で実行されます。なので、例えばPythonで書く場合は直接ターゲットマシン上のファイルを読み書きできるわけです。&lt;/li&gt;
&lt;li&gt;ということで、FabricはPythonだけどターゲットマシン上で実行されないのでもどかしいと思っていた問題はAnsibleのモジュールでは無関係です。&lt;/li&gt;
&lt;li&gt;あとは、処理のフローが複雑な箇所はモジュールとして実装することにすれば、全体の流れはyamlで順次処理というのでも殆どの場合はカバーできるような気がしてきました。&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Vagrant 1.1.5とSaharaを試した</title>
      <link>http://localhost:1313/blog/2013/04/03/how-to-setup-vagrant-1-dot-1-5-and-sahara/</link>
      <pubDate>Wed, 03 Apr 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/04/03/how-to-setup-vagrant-1-dot-1-5-and-sahara/</guid>
      <description>

&lt;h2 id=&#34;vagrantと1-0-xと1-1-xについて:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;Vagrantと1.0.xと1.1.xについて&lt;/h2&gt;

&lt;p&gt;バージョン1.1.xの位置づけについては以下の記事を参照。
&lt;a href=&#34;http://www.hashicorp.com/blog/vagrant-1-1-and-vmware.html&#34;&gt;Vagrant 1.1, VMware Fusion - HashiCorp&lt;/a&gt;
変更履歴は &lt;a href=&#34;https://github.com/mitchellh/vagrant/blob/master/CHANGELOG.md&#34;&gt;vagrant/CHANGELOG.md at master · mitchellh/vagrant · GitHub&lt;/a&gt;。&lt;/p&gt;

&lt;p&gt;gem installで入れられるのは1.0.x系のみ。現在は1.0.7。
&lt;a href=&#34;http://rubygems.org/search?utf8=%E2%9C%93&amp;amp;query=vagrant&#34;&gt;search | RubyGems.org | your community gem host&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;vagrant-1-1-5のインストール:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;Vagrant 1.1.5のインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.vagrantup.com/&#34;&gt;Vagrant&lt;/a&gt;
→ &lt;a href=&#34;http://downloads.vagrantup.com/&#34;&gt;Vagrant - Downloads&lt;/a&gt;
→ &lt;a href=&#34;http://downloads.vagrantup.com/tags/v1.1.5&#34;&gt;Vagrant - Downloads v1.1.5&lt;/a&gt;
と進み、Vagrant.dmgをダウンロードしてインストール&lt;/p&gt;

&lt;h2 id=&#34;path設定:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;PATH設定&lt;/h2&gt;

&lt;p&gt;vagrantコマンドにPATHを通します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;cat &amp;lt;&amp;lt;&#39;EOF&#39; &amp;gt;&amp;gt; ~/.bash_profile
export PATH=/Applications/Vagrant/bin:$PATH
EOF
. ~/.bash_profile
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ruby 1.9.3p327が同梱されています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ /Applications/Vagrant/embedded/bin/ruby --version
ruby 1.9.3p327 (2012-11-10 revision 37606) [universal.x86_64-darwin12.2.1]
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;vagrant-1-1-x用のsaharaをインストール:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;Vagrant 1.1.x用のSaharaをインストール&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ryuzee.com/contents/blog/6555&#34;&gt;Vagrantの必須プラグインSaharaをVagrant 1.1に対応させました | Ryuzee.com&lt;/a&gt;の手順でインストール。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/src/chef
cd ~/src/chef
git clone https://github.com/ryuzee/sahara.git
cd sahara
export PATH=/Applications/Vagrant/embedded/bin:$PATH
sudo gem install bundler
bundle install
bundle exec rake build
vagrant plugin install pkg/sahara-0.0.14.gem
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;~/.vagrant.d/gems/gems/sahara-0.0.14/にインストールされた。&lt;/p&gt;

&lt;h3 id=&#34;複数vm環境でのテスト:d6a5810c0b2989f2e72cf75b1e2111a0&#34;&gt;複数VM環境でのテスト&lt;/h3&gt;

&lt;p&gt;Vagrantfile&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;-*- mode: ruby -*-
## vi: set ft=ruby :

Vagrant::Config.run do |config|
  config.ssh.private_key_path = &amp;quot;../vagrant.id_rsa&amp;quot;

  config.vm.define :web1 do |c|
    c.vm.box = &amp;quot;centos6.4&amp;quot;
    c.vm.host_name = &amp;quot;web1&amp;quot;
    c.vm.network :hostonly, &amp;quot;192.168.33.24&amp;quot;
    c.vm.customize [&amp;quot;modifyvm&amp;quot;, :id,
      &amp;quot;--name&amp;quot;, &amp;quot;web1&amp;quot;,
      &amp;quot;--natdnshostresolver1&amp;quot;, &amp;quot;on&amp;quot;,
      &amp;quot;--cpus&amp;quot;, 1,
      &amp;quot;--memory&amp;quot;, 512
    ]
  end

  config.vm.define :db1 do |c|
    c.vm.box = &amp;quot;centos6.4&amp;quot;
    c.vm.host_name = &amp;quot;db1&amp;quot;
    c.vm.network :hostonly, &amp;quot;192.168.33.25&amp;quot;
    c.vm.customize [&amp;quot;modifyvm&amp;quot;, :id,
      &amp;quot;--name&amp;quot;, &amp;quot;db1&amp;quot;,
      &amp;quot;--natdnshostresolver1&amp;quot;, &amp;quot;on&amp;quot;,
      &amp;quot;--cpus&amp;quot;, 1,
      &amp;quot;--memory&amp;quot;, 512
    ]
  end
end
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、centos6.4のVMはrubyやchef-soloはインストールしていない状態になっています。&lt;/p&gt;

&lt;p&gt;sandboxモードをオンにしてVM起動。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant sandbox on
vagrant up
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ホスト側からchefセットアップ実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bin/knife solo prepare web1
./bin/knife solo prepare db1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;web1, db1にログインして/usr/bin/chef-soloが作成されたことを確認。&lt;/p&gt;

&lt;p&gt;ロールバックを実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant sandbox rollback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;web1, db1にログインして/usr/bin/chef-soloが無いことを確認。&lt;/p&gt;

&lt;p&gt;ホスト側から再度chefセットアップ実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bin/knife solo prepare web1
./bin/knife solo prepare db1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コミット実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant sandbox commit
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ホスト側からchefクックブック実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;./bin/knife solo cook web1
./bin/knife solo cook db1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;web1, db1にログインして/usr/bin/chef-soloがあること、/etc/chefが作成されたことをを確認。&lt;/p&gt;

&lt;p&gt;ロールバック実行。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant sandbox rollback
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;web1, db1にログインして/usr/bin/chef-soloがあること、/etc/chefが無いことをを確認。&lt;/p&gt;

&lt;p&gt;テスト環境&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;OS: OS X 10.8.3&lt;/li&gt;
&lt;li&gt;VirtualBox: 4.2.10&lt;/li&gt;
&lt;li&gt;Vagrant: 1.1.5&lt;/li&gt;
&lt;li&gt;sahara: &lt;a href=&#34;https://github.com/ryuzee/sahara.git&#34;&gt;https://github.com/ryuzee/sahara.git&lt;/a&gt; commit d22795aa417ec1cb67eb92810afb52300edd3c44&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>lua, V8, ruby, mrubyでfib(39)の実行時間比較</title>
      <link>http://localhost:1313/blog/2013/03/12/fib-39-benchmark-in-luajit/</link>
      <pubDate>Tue, 12 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/03/12/fib-39-benchmark-in-luajit/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.com/blog/2012/05/04/fib-39-benchmark-in-lua/&#34;&gt;lua, V8, ruby, mrubyでfib(39)の実行時間比較 - hnakamur&amp;rsquo;s blog at github&lt;/a&gt;が&lt;a href=&#34;https://twitter.com/yukihiro_matz&#34;&gt;@matz&lt;/a&gt;さんにツイートされたのを受けて、各処理系の最新版で再度試してみました。&lt;/p&gt;

&lt;h2 id=&#34;テスト環境その1-前回とは違う環境です:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;テスト環境その1（前回とは違う環境です）&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Model: MacBook Pro Retina, Mid 2012&lt;/li&gt;
&lt;li&gt;CPU: 2.6GHz Intel Core i7&lt;/li&gt;
&lt;li&gt;RAM: 16GB 1600MHz DDR3&lt;/li&gt;
&lt;li&gt;OS: Mac OS X 10.8.2&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;2013-03-24-追記:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;2013-03-24 追記&lt;/h3&gt;

&lt;p&gt;goでも試してみました&lt;/p&gt;

&lt;h3 id=&#34;go-1-0-3:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;go 1.0.3&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;package main

import &amp;quot;fmt&amp;quot;

func fib(n int) int {
  if n &amp;lt; 2 {
    return n
  }
  return fib(n - 1) + fib(n - 2)
}

func main() {
  fmt.Println(fib(39))
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ time fib39
63245986

real    0m0.484s
user    0m0.481s
sys     0m0.002s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lua:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;lua&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function fib(n)
  if n &amp;lt; 2 then
    return n
  end
  return fib(n-2) + fib(n-1)
end

print(fib(39))
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ luajit -v
LuaJIT 2.0.1 -- Copyright (C) 2005-2013 Mike Pall. http://luajit.org/
$ time luajit fib.lua
63245986

real  0m0.906s
user  0m0.901s
sys 0m0.003s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ lua -v
Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time lua fib.lua
63245986

real  0m12.278s
user  0m12.271s
sys 0m0.006s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ src/lua -v
Lua 5.2.1  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time src/lua ~/bench/fib.lua
63245986

real  0m13.971s
user  0m13.965s
sys 0m0.005s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;v8:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;v8&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;function fib(n) {
  if (n &amp;lt; 2) return n;
  return fib(n-2) + fib(n-1);
}

print(fib(39));
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ v8
V8 version 3.16.14 [sample shell]
&amp;gt; ^D
$ time v8 fib.js
63245986

real  0m0.804s
user  0m0.798s
sys 0m0.008s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ruby:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;ruby&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;def fib n
  return n if n &amp;lt; 2
  fib(n-2) + fib(n-1)
end

puts fib(39)
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ git log -1 | grep commit
commit 46d8c51763bd13b69a4234f0d4be05cbfd8ae401

$ time bin/mruby fib.rb
63245986

real  0m16.357s
user  0m16.345s
sys 0m0.008s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p374 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real  0m16.225s
user  0m16.169s
sys 0m0.043s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p392 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real  0m36.813s
user  0m36.746s
sys 0m0.043s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
2.0.0-p0 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb 
63245986

real  0m31.828s
user  0m31.743s
sys 0m0.045s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;2013-03-12-23-15-追記:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;2013-03-12 23:15 追記&lt;/h3&gt;

&lt;p&gt;1.9.3-p374と1.9.3-p392でこんなに違うのは変だなと思って、1.9.3-p374を入れなおして再度測ってみました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p374 (set by /Users/hnakamur/.rbenv/version)
$ time ruby ~/bench/fib.rb 
63245986

real  0m38.909s
user  0m38.834s
sys 0m0.045s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;以前1.9.3-p374を入れた時から、XCodeのバージョンが変わっているので、コンパイラが違うせいで大幅に時間が変わったようです。&lt;/p&gt;

&lt;h2 id=&#34;テスト環境その2:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;テスト環境その2&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://hnakamur.github.com/blog/2012/05/04/fib-39-benchmark-in-lua/&#34;&gt;lua, V8, ruby, mrubyでfib(39)の実行時間比較 - hnakamur&amp;rsquo;s blog at github&lt;/a&gt;と同じマシンです。
OSはLionのままですがアップデートはしています。XCodeもバージョンアップしました。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;Model: MacBook Air 13-inch, Mid 2011&lt;/li&gt;
&lt;li&gt;CPU: 1.7GHz Intel Core i5&lt;/li&gt;
&lt;li&gt;RAM: 4GB 1333MHz DDR3&lt;/li&gt;
&lt;li&gt;OS: Mac OS X Lion 10.7.5&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lua-1:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;lua&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ src/luajit -v
LuaJIT 2.0.1 -- Copyright (C) 2005-2013 Mike Pall. http://luajit.org/
$ time src/luajit ~/fib_bench/fib.lua
63245986

real    0m1.268s
user    0m1.256s
sys     0m0.003s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ cd ../lua-5.2.1
$ src/lua -v
Lua 5.2.1  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time src/lua ~/fib_bench/fib.lua
63245986

real    0m20.299s
user    0m20.299s
sys     0m0.006s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ src/lua -v
Lua 5.1.5  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time src/lua ~/fib_bench/fib.lua
63245986

real    0m20.100s
user    0m20.089s
sys     0m0.012s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;v8-1:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;V8&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ v8
V8 version 3.16.14 [sample shell]
&amp;gt; ^D

$ time v8 fib.js
63245986

real    0m1.105s
user    0m1.099s
sys     0m0.011s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ruby-1:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;ruby&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p194 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real    0m23.462s
user    0m23.431s
sys     0m0.039s
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;この1.9.3-p194は以前のXCodeでビルドしたものです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p392 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real    0m51.765s
user    0m51.679s
sys     0m0.048s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
2.0.0-p0 (set by /Users/hnakamur/.rbenv/version)
$ time ruby fib.rb
63245986

real    0m47.074s
user    0m47.048s
sys     0m0.045s
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;テスト環境その3:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;テスト環境その3&lt;/h2&gt;

&lt;ul&gt;
&lt;li&gt;Model: NEC Express5800/S70 type RB&lt;/li&gt;
&lt;li&gt;CPU: Intel Pentium G6950 (2.8GHz)&lt;/li&gt;
&lt;li&gt;RAM: 16GB DDR3-1333&lt;/li&gt;
&lt;li&gt;OS: CentOS 6.4 x86_64&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;lua-2:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;lua&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ luajit -v
LuaJIT 2.0.1 -- Copyright (C) 2005-2013 Mike Pall. http://luajit.org/
$ time luajit fib.lua
63245986

real  0m1.244s
user  0m1.241s
sys 0m0.000s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ src/lua -v
Lua 5.2.1  Copyright (C) 1994-2012 Lua.org, PUC-Rio
$ time src/lua ~hnakamur/fib_bench/fib.lua 
63245986

real  0m15.804s
user  0m15.774s
sys 0m0.002s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ time src/lua ~hnakamur/fib_bench/fib.lua 
63245986

real  0m15.658s
user  0m15.627s
sys 0m0.002s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;v8-2:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;V8&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ./out/x64.release/d8   
V8 version 3.16.14 [console: dumb]
d8&amp;gt; 
Segmentation fault
$ time ./out/x64.release/d8 ~hnakamur/fib_bench/fib.js
63245986

real  0m1.311s
user  0m1.314s
sys 0m0.004s
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ruby-2:e4f14fdc3e1e369081f4fe4d19364d75&#34;&gt;ruby&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p374 (set by /usr/local/rbenv/version)
$ time ruby fib.rb
63245986

real  0m40.485s
user  0m40.365s
sys 0m0.038s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
1.9.3-p392 (set by /usr/local/rbenv/version)
$ time ruby fib.rb
63245986

real  0m38.841s
user  0m38.749s
sys 0m0.013s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ rbenv version
2.0.0-p0 (set by /usr/local/rbenv/version)
$ time ruby fib.rb 
63245986

real  0m32.491s
user  0m32.410s
sys 0m0.014s
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;$ git log -1|grep commit
commit f63cd331da6257f9b44778dabff60be55b0721fa
$ time bin/mruby ~hnakamur/fib_bench/fib.rb 
63245986

real  0m20.752s
user  0m20.713s
sys 0m0.002s
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>d3.jsを使ったツールチップあり複数折れ線グラフのサンプルを作った</title>
      <link>http://localhost:1313/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js/</link>
      <pubDate>Sat, 02 Mar 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/03/02/multi-series-line-chart-example-with-tooltip-using-d3-dot-js/</guid>
      <description>

&lt;p&gt;&lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js - Data-Driven Documents&lt;/a&gt;を使ってツールチップあり複数折れ線グラフのサンプルを作ったのでメモ。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://localhost:1313/blog/downloads/code/2013-03-02-multi-series-line-chart-example-with-tooltip-using-d3-dot-js/3884955.html&#34;&gt;サンプル&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://bl.ocks.org/mbostock/3884955&#34;&gt;Multi-Series Line Chart&lt;/a&gt;のサンプルをベースに改良しました。&lt;/p&gt;

&lt;h2 id=&#34;x軸のラベルを回転:d0541cc9ba4f8d6587118da310bcbf60&#34;&gt;X軸のラベルを回転&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://www.d3noob.org/2013/01/how-to-rotate-text-labels-for-x-axis-of.html&#34;&gt;D3.js Tips and Tricks: How to rotate the text labels for the x Axis of a d3.js graph&lt;/a&gt;を参考にして回転させました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;  svg.append(&amp;quot;g&amp;quot;)
      .attr(&amp;quot;class&amp;quot;, &amp;quot;x axis&amp;quot;)
      .attr(&amp;quot;transform&amp;quot;, &amp;quot;translate(0,&amp;quot; + height + &amp;quot;)&amp;quot;)
      .call(xAxis)
      .selectAll(&amp;quot;text&amp;quot;)
        .style(&amp;quot;text-anchor&amp;quot;, &amp;quot;end&amp;quot;)
        .attr(&amp;quot;dx&amp;quot;, &amp;quot;-.8em&amp;quot;)
        .attr(&amp;quot;dy&amp;quot;, &amp;quot;-.6em&amp;quot;)
        .attr(&amp;quot;transform&amp;quot;, &amp;quot;rotate(-90)&amp;quot;);
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;ツールチップを出す:d0541cc9ba4f8d6587118da310bcbf60&#34;&gt;ツールチップを出す&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://gist.github.com/biovisualize/1016860#gistcomment-61316&#34;&gt;Simple D3 tooltip&lt;/a&gt;の手法で、線でもツールチップは出せなくはないのですが、カーソル位置のデータが取れないので、データの点に円を作成することにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://groups.google.com/forum/?fromgroups=#!topic/d3-js/8XLzUYLoFnY&#34;&gt;multi-line chart with circle points - Google グループ&lt;/a&gt;を参考に以下の様なコードで円を作成しました。&lt;/p&gt;

&lt;p&gt;ツールチップを出す部分は&lt;a href=&#34;https://gist.github.com/biovisualize/1016860#gistcomment-61316&#34;&gt;Simple D3 tooltip&lt;/a&gt;を参考にしました。元のコードではイベントを&lt;code&gt;event&lt;/code&gt;で参照していましたが、ChromeとSafariでは動くもののFirefoxではundefinedになっていました。&lt;a href=&#34;https://github.com/mbostock/d3/wiki/Selections#wiki-on&#34;&gt;Selections · mbostock/d3 Wiki&lt;/a&gt;を見ると、&lt;code&gt;d3.event&lt;/code&gt;で参照するのが正しいので修正しました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt; city. selectAll(&amp;quot;circle&amp;quot;)
      .data(function(d) { return d.values.map(function(v) {
              return {date: v.date, temperature: v.temperature, name: d.name};
            }); })
    .enter().append(&amp;quot;circle&amp;quot;)
      .attr(&amp;quot;cx&amp;quot;, function(d, i) { return x(d.date); })
      .attr(&amp;quot;cy&amp;quot;, function(d, i) { return y(d.temperature); })
      .style(&amp;quot;fill&amp;quot;, function(d) { return color(d.name); })
      .attr(&amp;quot;r&amp;quot;, 1)
      .on(&amp;quot;mouseover&amp;quot;, function(){
        return tooltip.style(&amp;quot;visibility&amp;quot;, &amp;quot;visible&amp;quot;);
      })
      .on(&amp;quot;mousemove&amp;quot;, function(d){
        return tooltip
          .style(&amp;quot;top&amp;quot;, (d3.event.pageY-10)+&amp;quot;px&amp;quot;)
          .style(&amp;quot;left&amp;quot;,(d3.event.pageX+10)+&amp;quot;px&amp;quot;)
          .html(&amp;quot;&amp;lt;dl&amp;gt;&amp;lt;dt&amp;gt;date&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;quot; + d3.time.format(&amp;quot;%Y-%m-%d&amp;quot;)(d.date) + &amp;quot;&amp;lt;/dd&amp;gt;&amp;lt;dt&amp;gt;temperature&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;quot; + d.temperature + &amp;quot;&amp;lt;/dd&amp;gt;&amp;lt;dt&amp;gt;name&amp;lt;/dt&amp;gt;&amp;lt;dd&amp;gt;&amp;quot; + d.name + &amp;quot;&amp;lt;/dd&amp;gt;&amp;lt;/dl&amp;gt;&amp;quot;);
      })
      .on(&amp;quot;mouseout&amp;quot;, function(){
        return tooltip.style(&amp;quot;visibility&amp;quot;, &amp;quot;hidden&amp;quot;);
      });
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;見た目がうるさくないように円の半径は1とし、線だけ見えるような感じにしています。すると点にカーソルでポイントするのが大変なので、太めのストロークを透明色で指定して、ポイントしやすくしています。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;.tooltip {
  border: 1px solid black;
  background-color: white;
  padding: 5px 8px 4px 8px;
  border-radius: 4px;
  -moz-border-radius: 4px;
  -webkit-border-radius: 4px;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;線のデータ補完を止める:d0541cc9ba4f8d6587118da310bcbf60&#34;&gt;線のデータ補完を止める&lt;/h2&gt;

&lt;p&gt;データ補完してしまうと、線とデータ点がずれてしまうので、補完は止めます。
interpolate()を呼ばなければOK。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var line = d3.svg.line()
    //.interpolate(&amp;quot;basis&amp;quot;)
    .x(function(d) { return x(d.date); })
    .y(function(d) { return y(d.temperature); });
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>EC2で同じリージョンの全ホストのプライベートIPを起動時にhostsに自動登録</title>
      <link>http://localhost:1313/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region/</link>
      <pubDate>Sat, 16 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/02/16/aws-update-hosts-for-servers-in-same-region/</guid>
      <description>

&lt;p&gt;Elastic IPの上限数にひっかかって使えない自体に遭遇したので作りました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://aws.amazon.com/jp/contact-us/eip_limit_request/&#34;&gt;Elastic IP アドレス上限緩和申請 | アマゾン ウェブ サービス（AWS 日本語）&lt;/a&gt; から緩和申請できるようです。&lt;/p&gt;

&lt;p&gt;が、申請完了画面で、3〜5営業日かかる、緊急の場合は、完了画面に表示されるCase Numberを添えて ec2-request@amazon.com に送るようにと書かれていました。&lt;/p&gt;

&lt;p&gt;（Case Numberを添えてというのは今気付いた。再度メールしました。ブログに書くために読み返してよかった）&lt;/p&gt;

&lt;p&gt;そこで、hostsにプライベートアドレスを登録するスクリプトを書くことにしました。&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;http://frmmpgit.blog.fc2.com/blog-entry-123.html&#34;&gt;EC2 - 動的プライベートIPアドレスをどうにかする | code up&lt;/a&gt; を参考にしました。ありがとうございます。&lt;/p&gt;

&lt;p&gt;最初は対象のホストの一覧を指定するようなスクリプトを書いていたのですが、ホストを増やすことを考えると編集と反映が面倒だと予想して、リージョン内の全ホストを一括登録することにしました。&lt;/p&gt;

&lt;h2 id=&#34;情報取得用のaimユーザ作成:52b01480e63c8960ca28f50dbc8283f1&#34;&gt;情報取得用のAIMユーザ作成&lt;/h2&gt;

&lt;p&gt;AIMでUserを作ってUser PolicyにReadOnlyAccessを与えます。&lt;/p&gt;

&lt;h2 id=&#34;スクリプト設置:52b01480e63c8960ca28f50dbc8283f1&#34;&gt;スクリプト設置&lt;/h2&gt;

&lt;p&gt;以下の設定ファイルとスクリプトを設置します。&lt;/p&gt;

&lt;p&gt;アクセスキーとシークレットキーは上で作ったユーザのものを設定します。&lt;/p&gt;

&lt;p&gt;/root/.amazon_address_finder_key&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;export AWS_ACCESS_KEY=${your_access_key_here}
export AWS_SECRET_KEY=${your_secret_key_here}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/usr/local/sbin/update_hosts.sh&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;#!/bin/sh
. /root/.amazon_address_finder_key
region=`ec2-metadata | sed -n &#39;s/^local-hostname: ip-[0-9-]*\.\(.*\)\.compute\.i
nternal/\1/p&#39;`

ec2-describe-instances --region $region -H --show-empty-fields | gawk &#39;
BEGIN {OFS=&amp;quot;\t&amp;quot;; print &amp;quot;127.0.0.1&amp;quot;, &amp;quot;localhost localhost.localdomain&amp;quot;}
/^INSTANCE/ {ip = $18}  
/^TAG/ {print ip, gensub(/.*\tName\t([^\t]*).*/, &amp;quot;\\1&amp;quot;, $0)}  
&#39; &amp;gt; /etc/hosts
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/etc/cron.d/update_hosts&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;@reboot root /usr/local/sbin/update_hosts.sh
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;実行:52b01480e63c8960ca28f50dbc8283f1&#34;&gt;実行&lt;/h2&gt;

&lt;p&gt;これで、OS起動時にhostsが上書き更新されます。&lt;/p&gt;

&lt;p&gt;インタンスのNameタグに設定した値がホスト名になります。&lt;/p&gt;

&lt;p&gt;出力例&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;127.0.0.1       localhost localhost.localdomain
10.132.102.199  web01
10.128.21.174   web02
10.120.32.111   app01
10.132.103.238  app02
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;githubに移動しました:52b01480e63c8960ca28f50dbc8283f1&#34;&gt;githubに移動しました&lt;/h2&gt;

&lt;p&gt;さらにhostnameも更新するようにして、スクリプトが発展してきたので、
&lt;a href=&#34;https://github.com/hnakamur/aws_scripts&#34;&gt;hnakamur/aws_scripts · GitHub&lt;/a&gt;
に移動しました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>IAM管理コンソールでAWSの管理画面用のユーザを作成</title>
      <link>http://localhost:1313/blog/2013/02/09/create-aim-user/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/02/09/create-aim-user/</guid>
      <description>

&lt;p&gt;AWS (Amazon Web Services)の管理コンソールを複数人で使う場合に大元のIDとパスワードを共有するのは避けたい場合、IAMでユーザを作成するのがよいと&lt;a href=&#34;https://twitter.com/fujiwara&#34;&gt;@fujiwara&lt;/a&gt;さんに教わりました。これは実際に試した時のメモです。&lt;/p&gt;

&lt;p&gt;なお、IAMはIdentity and Access Managementの略です。&lt;/p&gt;

&lt;h2 id=&#34;管理者-aimユーザのログインurlの設定:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: AIMユーザのログインURLの設定&lt;/h2&gt;

&lt;p&gt;初期状態では https://{ランダムな数字}.signin.aws.amazon.com/console のようなURLになっていますが、好きなサブドメインに変更が可能です。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;AWSの管理コンソールにログイン&lt;/li&gt;
&lt;li&gt;[IAM]をクリック&lt;/li&gt;
&lt;li&gt;左のメニューで[Dashboard]をクリック&lt;/li&gt;
&lt;li&gt;[Create Account Alias]ボタンを押し、[Account Alias]にサブドメインを入力します。すると https://{入力したサブドメイン}.signin.aws.amazon.com/console がログインURLになります。&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;元に戻したい場合は[Remove Account Alias]ボタンを押します。&lt;/p&gt;

&lt;h2 id=&#34;管理者-aimユーザの作成:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: AIMユーザの作成&lt;/h2&gt;

&lt;h3 id=&#34;ユーザの作成とapiアクセスキーのダウンロード:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;ユーザの作成とAPIアクセスキーのダウンロード&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;AWSの管理コンソールにログイン&lt;/li&gt;
&lt;li&gt;[IAM]をクリック&lt;/li&gt;
&lt;li&gt;左のメニューで[Users]をクリック&lt;/li&gt;
&lt;li&gt;上のツールバーで[Create New Users]ボタンを押す&lt;/li&gt;
&lt;li&gt;[Create User]ダイアログで[Enter User Names:]に作成したいユーザのIDを入力。

&lt;ul&gt;
&lt;li&gt;同時に5人までつくれるようです(実際に試したのは1人だけです)。&lt;/li&gt;
&lt;li&gt;AWSサービスのAPIを使う場合は[Generate an access key for each User]チェックボックスをオンのままにしておきます。ここでオフにしていても後からキーを発行できるので、不明の場合はオフでいいです。&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;[Create User]ダイアログで[Create]ボタンを押す&lt;/li&gt;
&lt;li&gt;[Download Credentials]ボタンを押して、&amp;rdquo;User Name&amp;rdquo;,&amp;ldquo;Access Key Id&amp;rdquo;,&amp;ldquo;Secret Access Key&amp;rdquo;が書かれたCSVファイルをダウンロード&lt;/li&gt;
&lt;li&gt;[Close Windows]ボタンを押す&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ユーザの初期パスワード作成とダウンロード:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;ユーザの初期パスワード作成とダウンロード&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;ユーザ一覧でユーザを選択して、上のツールバーの[User Actions]ボタンを押すか、右クリックのポップアップメニューから[Manage Password]メニューを選択&lt;/li&gt;
&lt;li&gt;[Manage Password]ダイアログで[Assign an auto-generated password]ラジオボタンを選択した状態で[Apply]ボタンを押す&lt;/li&gt;
&lt;li&gt;[Download Credentials]ボタンを押し、&amp;rdquo;User Name&amp;rdquo;,&amp;ldquo;Password&amp;rdquo;,&amp;ldquo;Direct Signin Link&amp;rdquo;が書かれたCSVファイルをダウンロード&lt;/li&gt;
&lt;li&gt;[Close Windows]ボタンを押す&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;利用者-初回ログインとパスワード変更:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;利用者: 初回ログインとパスワード変更&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;&amp;ldquo;User Name&amp;rdquo;,&amp;ldquo;Password&amp;rdquo;,&amp;ldquo;Direct Signin Link&amp;rdquo;が書かれたCSVファイルのURLをブラウザで開き、ID、パスワードを入力してログインします。&lt;/li&gt;
&lt;li&gt;ツールバー右上のユーザIDのドロップダウンメニューを開き、[Security Credentials]を選択&lt;/li&gt;
&lt;li&gt;現在のパスワードと新しいパスワードを入力して[Change Password]ボタンを押して変更&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;管理者-利用者のパスワード変更:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: 利用者のパスワード変更&lt;/h2&gt;

&lt;p&gt;ユーザ一覧でポップアップメニューの[Manage Password]メニューから変更できます。&lt;/p&gt;

&lt;h2 id=&#34;管理者-利用者のapiアクセスキー追加-削除:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: 利用者のAPIアクセスキー追加、削除&lt;/h2&gt;

&lt;p&gt;ユーザ一覧でポップアップメニューの[Manage Access Keys]メニューから変更できます。&lt;/p&gt;

&lt;h2 id=&#34;管理者-利用者のユーザ削除:0820a6ea1e6b7dc778c8e412bda9b947&#34;&gt;管理者: 利用者のユーザ削除&lt;/h2&gt;

&lt;p&gt;ユーザ一覧でポップアップメニューの[Delete User]メニューから削除できます。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>S3 error: Either the Signature query string parameter or the Authorization header should be specified</title>
      <link>http://localhost:1313/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified/</link>
      <pubDate>Sat, 09 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/02/09/s3-error-either-the-signature-query-string-parameter-or-the-authorization-header-should-be-specified/</guid>
      <description>

&lt;h2 id=&#34;現象:ea42678f6806f6a8711cc359661fe424&#34;&gt;現象&lt;/h2&gt;

&lt;p&gt;ApacheからAmazon S3にmod_proxyでリクエストを送ったら、ステータスが400になり、
&amp;ldquo;Either the Signature query string parameter or the Authorization header should be specified, not both&amp;rdquo;というエラーメッセージが出てハマったときのメモです。&lt;/p&gt;

&lt;p&gt;開発中で、Apacheの設定でBASIC認証をかけていました。&lt;/p&gt;

&lt;p&gt;一方、S3では
&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/RESTAuthentication.html#ConstructingTheAuthenticationHeader&#34;&gt;Signing and Authenticating REST Requests - Amazon Simple Storage Service&lt;/a&gt;
にあるように&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Authorization: AWS AWSAccessKeyId:Signature
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というリクエストヘッダで認証情報を渡すか、
&lt;a href=&#34;http://docs.aws.amazon.com/AmazonS3/latest/dev/S3_QSAuth.html&#34;&gt;Using Query String Authentication - Amazon Simple Storage Service&lt;/a&gt;
にあるように&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;http://quotes.s3.amazonaws.com/nelson?AWSAccessKeyId=AKIAIOSFODNN7EXAMPLE&amp;amp;Expires=1177363698&amp;amp;Signature=vjSAMPLENmGa%2ByT272YEAiv4%3D
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;のようなクエリストリングで認証情報を渡すことができます。&lt;/p&gt;

&lt;p&gt;ですが、BASIC認証を使っていると、
&lt;a href=&#34;http://ja.wikipedia.org/wiki/Basic%E8%AA%8D%E8%A8%BC&#34;&gt;Basic認証 - Wikipedia&lt;/a&gt;
にあるように&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;Authorization: Basic QWxhZGRpbjpvcGVuIHNlc2FtZQ==
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;というようなヘッダがついてしまうため、S3用の認証情報をクエリストリングで指定していると上記のようなエラーになるというわけでした。&lt;/p&gt;

&lt;h2 id=&#34;解決法:ea42678f6806f6a8711cc359661fe424&#34;&gt;解決法&lt;/h2&gt;

&lt;p&gt;RequetHeader unset ヘッダ名で削除すればOKでした。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;    &amp;lt;Location /some/path&amp;gt;
        RequestHeader unset Authorization
    &amp;lt;/Location&amp;gt;
    ProxyRequests Off
    ProxyPassMatch ^/some/path/(.*)$ http://yourdomain.s3-ap-northeast-1.amazonaws.com/$1
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;注意するべきはLocationでS3にプロキシする範囲に限定する必要があるということです。Location無しだとS3にプロキシしないURLについてもAuthorizationヘッダが削除され、BASIC認証のログインダイアログが延々と出続けてしまいました。&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>Unboundで在宅時に自宅サーバの名前解決</title>
      <link>http://localhost:1313/blog/2013/02/02/use-unbound-dns-server/</link>
      <pubDate>Sat, 02 Feb 2013 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2013/02/02/use-unbound-dns-server/</guid>
      <description>

&lt;h2 id=&#34;背景:0dc3f92637d9016ee7408c13bb7c7960&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;私の自宅ではブロードバンドルータがグローバルIPを持っていて、DNSで自分のドメイン(以下ではexample.comとして説明します)のIPアドレスをそこにしています。ルータからLAN内のLinuxサーバ(CentOS 6.x)へはNATで繋いでいます。&lt;/p&gt;

&lt;p&gt;外出時はこれでよいのですが、在宅時にLAN内からexample.comという名前でアクセスしようとするとサーバにアクセスできません。&lt;/p&gt;

&lt;p&gt;今までは &lt;a href=&#34;https://github.com/hnakamur/switch_net_configs&#34;&gt;hnakamur/switch_net_configs · GitHub&lt;/a&gt; を使って外出時と在宅時に/etc/hostsと~/.ssh/configを切り替えてしのいでいました。が、VirtualBoxのゲストとかを考えると面倒です。&lt;/p&gt;

&lt;p&gt;そこで、自宅サーバにDNSサーバを入れてみることにしました。
bindはセキュリティフィクスが頻発しているから避けて他のにしようと思い、&lt;a href=&#34;http://en.wikipedia.org/wiki/Comparison_of_DNS_server_software&#34;&gt;Comparison of DNS server software - Wikipedia, the free encyclopedia&lt;/a&gt; を見てみました。
moreに対してlessが生まれたように、bindに対してunboundというネーミングセンスが気に入ったのと、 &lt;a href=&#34;http://www.atmarkit.co.jp/flinux/special/unbound/unbounda.html&#34;&gt;＠IT：DNSリゾルバのニューフェイス「Unbound」（1/2）&lt;/a&gt; の記事を読んで、簡単に導入できそうと思ったのでUnboundにしました。&lt;/p&gt;

&lt;h2 id=&#34;導入手順:0dc3f92637d9016ee7408c13bb7c7960&#34;&gt;導入手順&lt;/h2&gt;

&lt;p&gt;unboundはepelにあるので、yumでインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;yum install unbound
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;/etc/unbound/unbound.confを編集します。編集結果はこんな感じ。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;# diff -u /etc/unbound/unbound.conf.orig /etc/unbound/unbound.conf
--- /etc/unbound/unbound.conf.orig  2013-02-02 01:56:13.541249978 +0900
+++ /etc/unbound/unbound.conf 2013-02-02 02:15:52.559227483 +0900
@@ -28,7 +28,7 @@
  extended-statistics: yes
 
  # number of threads to create. 1 disables threading.
- num-threads: 2
+ num-threads: 1
 
  # specify the interfaces to answer queries from by ip-address.
  # The default is to listen to localhost (127.0.0.1 and ::1).
@@ -40,6 +40,8 @@
  # interface: 192.0.2.153
  # interface: 192.0.2.154
  # interface: 2001:DB8::5
+ interface: 127.0.0.1
+ interface: 192.168.11.103
  #
  # for dns over tls and raw dns over port 80
  # interface: 0.0.0.0@443
@@ -69,6 +71,10 @@
  # number of ports to allocate per thread, determines the size of the
  # port range that can be open simultaneously.
  # outgoing-range: 4096
+ outgoing-range: 900
+ # Note: The value outgoing-range was set to avoid the warning below:
+ # unbound[28716:0] warning: increased limit(open files) from 1024 to 1080
+ # This server is used only by me, so a small value should be OK.
 
  # permit unbound to use this port number or port range for
  # making outgoing queries, using an outgoing interface.
@@ -178,6 +184,8 @@
  # access-control: ::0/0 refuse
  # access-control: ::1 allow
  # access-control: ::ffff:127.0.0.1 allow
+ access-control: 127.0.0.0/8 allow
+ access-control: 192.168.11.0/24 allow
 
  # if given, a chroot(2) is done to the given directory.
  # i.e. you can chroot to the working directory, for example,
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;自宅サーバのCPUはシングルコアなのでnum-threadsは1にしました。&lt;/li&gt;
&lt;li&gt;interfaceを0.0.0.0にしていないのは、KVMが別のネットワークインタフェースでdnsmaskでDNSのポート53を既に使っているためです。192.168.11.103はDNSサーバのアドレスです。&lt;/li&gt;
&lt;li&gt;outgoing-rangeはopen filesの警告が出ないように下げてみました。どうせ使うのは私一人なので小さくてもいいだろうし。&lt;/li&gt;
&lt;li&gt;access-controlはLAN内からのみ許可するようにしました。&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;/etc/unbound/local.d/example.com.confにlocal-dataの設定を書きます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;local-data: &amp;quot;example.com A 192.168.11.103&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;あとは、iptablesでUDPのポート53を開けて、unboundのサービスを起動してchkconfigで自動起動をオンにすればOKです。&lt;/p&gt;

&lt;h2 id=&#34;クライアントの設定:0dc3f92637d9016ee7408c13bb7c7960&#34;&gt;クライアントの設定&lt;/h2&gt;

&lt;p&gt;Linuxの場合は、
/etc/sysconfig/networkに&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DNS1=&amp;quot;192.168.11.103&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と書いて、以下のコマンドで反映します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;service network restart
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Macでは[システム環境設定]/[ネットワーク]→[詳細]ボタン→[DNS]タブで「192.168.11.103」を指定すれば設定出来ます。&lt;/p&gt;

&lt;p&gt;が、iPhoneでDNSの設定が出来ないようなので(ちょっと試しただけで未調査)、どうせならルータ側で設定したいなーと思ったら、
&lt;a href=&#34;http://matsh.jp/d/0365&#34;&gt;ONU一体型ひかり電話ルータ PR-400KI のDNS設定 - matshのふらふら日記&lt;/a&gt;
というブログ記事を見つけました。&lt;/p&gt;

&lt;p&gt;[詳細設定]-[DNS設定]の[ローカルドメイン問合せテーブル]で、ドメイン名(ワイルドカード指定可能)に対してエントリを追加してドメイン毎にプライマリDNSサーバとセカンダリDNSサーバを登録できるようになっています。&lt;/p&gt;

&lt;p&gt;ただし、サーバの指定がIPv6形式のみ受け付けるようになっています。IPv4射影アドレスをIPv6形式で指定すると解決するとのことでした。
&lt;a href=&#34;http://kaworu.jpn.org/kaworu/2010-08-16-1.php&#34;&gt;IPv6 IPv4射影アドレス とは&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;DNSサーバのIPv4アドレス192.168.11.103の各オクテットを16進数に変換すると
192→C0、168→A8、11→B、103→67となり、IPv4射影アドレスは
::FFFF:C0A8:B67
となりました。&lt;/p&gt;

&lt;p&gt;これでMacでもiPhoneでもexample.comで参照できるようになりました。快適！&lt;/p&gt;
</description>
    </item>
    
    <item>
      <title>VirtualBox4でCentOS6.2をインストール</title>
      <link>http://localhost:1313/blog/2012/07/03/virtualbox4decentos6-dot-2woinsutoru/</link>
      <pubDate>Tue, 03 Jul 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2012/07/03/virtualbox4decentos6-dot-2woinsutoru/</guid>
      <description>

&lt;h2 id=&#34;virtualboxのインストール:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;VirtualBoxのインストール&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;https://www.virtualbox.org/wiki/Downloads&#34;&gt;Downloads – Oracle VM VirtualBox&lt;/a&gt;
からダウンロードしてインストールしてください。&lt;/p&gt;

&lt;h2 id=&#34;ネットワークインストールのisoイメージをダウンロード:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;ネットワークインストールのISOイメージをダウンロード&lt;/h2&gt;

&lt;p&gt;&lt;a href=&#34;http://ftp.riken.jp/Linux/centos/6.2/isos/x86_64/CentOS-6.2-x86_64-netinstall.iso&#34;&gt;CentOS-6.2-x86_64-netinstall.iso&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;ホストオンリーネットワークを作成:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;ホストオンリーネットワークを作成&lt;/h2&gt;

&lt;ol&gt;
&lt;li&gt;[VirualBox]/[環境設定&amp;hellip;]&lt;/li&gt;
&lt;li&gt;[ネットワーク]タブ&lt;/li&gt;
&lt;li&gt;[+]アイコンボタンを押してvboxnet0を作成&lt;/li&gt;
&lt;li&gt;ドライバーアイコンのボタン&lt;/li&gt;
&lt;li&gt;[アダプタ]タブでIPv4アドレスが「192.168.56.1」となっていることを確認&lt;/li&gt;
&lt;li&gt;[DHCPサーバー]タブ&lt;/li&gt;
&lt;li&gt;[サーバーを有効化]のチェックを外す&lt;/li&gt;
&lt;li&gt;[OK]&lt;/li&gt;
&lt;li&gt;[OK]&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;仮想マシンの作成:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;仮想マシンの作成&lt;/h2&gt;

&lt;h3 id=&#34;仮想マシン名とosタイプ:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;仮想マシン名とOSタイプ&lt;/h3&gt;

&lt;p&gt;名前は「CentOS6」
オペレーティングシステムは「Linux」
バージョンは「Linux 2.6 (64bit)」&lt;/p&gt;

&lt;h3 id=&#34;メモリ:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;メモリ&lt;/h3&gt;

&lt;p&gt;メインメモリのサイズは1024MB&lt;/p&gt;

&lt;h3 id=&#34;仮想ハードディスク:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;仮想ハードディスク&lt;/h3&gt;

&lt;p&gt;変更なし&lt;/p&gt;

&lt;h3 id=&#34;the-virtual-disk-creation-wizard:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;the virtual disk creation wizard&lt;/h3&gt;

&lt;p&gt;File typeはVDI (VirtualBox Disk Image)&lt;/p&gt;

&lt;h3 id=&#34;virtual-disk-storage-details:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Virtual disk storage details&lt;/h3&gt;

&lt;p&gt;Storage detailsはDyamically allocated&lt;/p&gt;

&lt;h3 id=&#34;virtual-disk-file-location-and-size:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Virtual disk file location and size&lt;/h3&gt;

&lt;p&gt;サイズは30GB&lt;/p&gt;

&lt;h2 id=&#34;インストール前の仮想マシンの設定変更:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;インストール前の仮想マシンの設定変更&lt;/h2&gt;

&lt;h3 id=&#34;dvdドライブにメディアを設定:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;DVDドライブにメディアを設定&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;[仮想マシン]/[設定]&lt;/li&gt;
&lt;li&gt;[ストレージ]タブ&lt;/li&gt;
&lt;li&gt;ストレージツリーでIDEコントローラ/空を選択&lt;/li&gt;
&lt;li&gt;属性のCD/DVDドライブの右のDVDメディアアイコンをクリックして&lt;/li&gt;
&lt;li&gt;上記でダウンロードしたCentOS-6.2-x86_64-netinstall.isoを選択&lt;/li&gt;
&lt;li&gt;[OK]&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ネットワークアダプタ:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;ネットワークアダプタ&lt;/h3&gt;

&lt;p&gt;以下の手順では[VirtualBox マネージャー]画面からでも操作可能な部分もありますが、説明しやすいのでメニューバーからの操作で説明します。&lt;/p&gt;

&lt;ol&gt;
&lt;li&gt;[仮想マシン]/[設定]&lt;/li&gt;
&lt;li&gt;[ネットワーク]タブ&lt;/li&gt;
&lt;li&gt;[アダプタ2]タブ&lt;/li&gt;
&lt;li&gt;[ネットワークアダプタを有効化]にチェック&lt;/li&gt;
&lt;li&gt;[割り当て]で「ホストオンリーアダプタ」を選択&lt;/li&gt;
&lt;li&gt;[名前]で「vboxnet0」を選択&lt;/li&gt;
&lt;li&gt;[OK]&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;centos6-2のインストール:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;CentOS6.2のインストール&lt;/h2&gt;

&lt;h3 id=&#34;テキストモードでインストール開始:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;テキストモードでインストール開始&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;[仮想マシン]/[起動]&lt;/li&gt;
&lt;li&gt;Welcome to CentOS 6.2!」の画面でTABを押す
&lt;pre&gt;
&amp;gt; vmlinuz initrd=initrd.img
&lt;/pre&gt;
と表示されているところに、スペース、text、リターンを入力し
&lt;pre&gt;
&amp;gt; vmlinuz initrd=initrd.img text
&lt;/pre&gt;
としてインストール開始&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;disc-found:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Disc Found&lt;/h3&gt;

&lt;p&gt;[Skip]を選択&lt;/p&gt;

&lt;h3 id=&#34;choose-a-language:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Choose a Language&lt;/h3&gt;

&lt;p&gt;[English]を選択&lt;/p&gt;

&lt;h3 id=&#34;keyboard-type:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Keyboard Type&lt;/h3&gt;

&lt;p&gt;[us]を選択&lt;/p&gt;

&lt;h3 id=&#34;installation-method:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Installation Method&lt;/h3&gt;

&lt;p&gt;[URL]を選択して[OK]&lt;/p&gt;

&lt;h3 id=&#34;network-device:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Network Device&lt;/h3&gt;

&lt;p&gt;[eth0]を選択して[OK]&lt;/p&gt;

&lt;h3 id=&#34;configure-tcp-ip:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Configure TCP/IP&lt;/h3&gt;

&lt;p&gt;[Enable IPv6 support]をオフにして[OK]&lt;/p&gt;

&lt;h3 id=&#34;url-setup:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;URL Setup&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://ftp.riken.jp/Linux/centos/6.2/os/x86_64&#34;&gt;http://ftp.riken.jp/Linux/centos/6.2/os/x86_64&lt;/a&gt;
と入力して[OK]&lt;/p&gt;

&lt;h3 id=&#34;would-you-like-to-use-vnc:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Would you like to use VNC?&lt;/h3&gt;

&lt;p&gt;[Use text mode]を選択&lt;/p&gt;

&lt;h3 id=&#34;error-processing-driveのwarning:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Error processing driveのWarning&lt;/h3&gt;

&lt;p&gt;[Re-initialize all]を選択&lt;/p&gt;

&lt;h3 id=&#34;time-zone-selection:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Time Zone Selection&lt;/h3&gt;

&lt;p&gt;[System clock uses UTC]のチェックはオンで
[Asia/Tokyo]を選択して[OK]&lt;/p&gt;

&lt;h3 id=&#34;root-password:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Root Password&lt;/h3&gt;

&lt;p&gt;[Password]と[Password (confirm)]を入力して[OK]&lt;/p&gt;

&lt;h3 id=&#34;partition-type:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Partition Type&lt;/h3&gt;

&lt;p&gt;[OK]&lt;/p&gt;

&lt;h3 id=&#34;writing-storage-configuration-to-disk:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Writing storage configuration to disk&lt;/h3&gt;

&lt;p&gt;[Write changes to disk]&lt;/p&gt;

&lt;h3 id=&#34;complete:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;Complete&lt;/h3&gt;

&lt;p&gt;[Reboot]を押し、再起動が開始して[Welcome to CentOS 6.2!]の画面になったらTABを2回押して起動を中断
仮想マシンのウィンドウの閉じるボタンを押し、｢操作を選択]で[仮想マシンの電源オフ]を選択して[OK]&lt;/p&gt;

&lt;h2 id=&#34;インストール後の仮想マシンの設定変更:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;インストール後の仮想マシンの設定変更&lt;/h2&gt;

&lt;h3 id=&#34;dvdドライブのメディアを除去:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;DVDドライブのメディアを除去&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;[仮想マシン]/[設定]&lt;/li&gt;
&lt;li&gt;[ストレージ]タブ&lt;/li&gt;
&lt;li&gt;ストレージツリーでIDEコントローラ/CentOS-6.2-x86_64-netinstall.isoを選択&lt;/li&gt;
&lt;li&gt;属性のCD/DVDドライブの右のDVDメディアアイコンをクリックして&lt;/li&gt;
&lt;li&gt;[仮想ドライブからディスクを除去]&lt;/li&gt;
&lt;/ol&gt;

&lt;h3 id=&#34;ネットワークアダプタでvirtio-netを選択:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;ネットワークアダプタでvirtio-netを選択&lt;/h3&gt;

&lt;ol&gt;
&lt;li&gt;[仮想マシン]/[設定]&lt;/li&gt;
&lt;li&gt;[ネットワーク]タブ&lt;/li&gt;
&lt;li&gt;[アダプタ1]タブ&lt;/li&gt;
&lt;li&gt;[高度]をクリック&lt;/li&gt;
&lt;li&gt;アダプタタイプで「準仮想化ネットワーク(virtio-net)」を選択&lt;/li&gt;
&lt;li&gt;[アダプタ2]タブ&lt;/li&gt;
&lt;li&gt;[高度]をクリック&lt;/li&gt;
&lt;li&gt;アダプタタイプで「準仮想化ネットワーク(virtio-net)」を選択&lt;/li&gt;
&lt;li&gt;[OK]&lt;/li&gt;
&lt;/ol&gt;

&lt;h2 id=&#34;仮想ディスクから仮想マシンを起動してネットワークの設定:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;仮想ディスクから仮想マシンを起動してネットワークの設定&lt;/h2&gt;

&lt;p&gt;[仮想マシン]/[起動]&lt;/p&gt;

&lt;p&gt;[localhost login:]というログインプロンプトが表示されたらroot、リターンと入力し、[Password:]プロンプトでパスワード、リターンを入力し、ログイン。&lt;/p&gt;

&lt;h3 id=&#34;eth1の設定:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;eth1の設定&lt;/h3&gt;

&lt;p&gt;vi /etc/sysconfig/network-scripts/ifcfg-eth1&lt;/p&gt;

&lt;h4 id=&#34;変更前:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;変更前&lt;/h4&gt;

&lt;p&gt;HWADDRの値はインストール毎に異なります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEVICE=&amp;quot;eth1&amp;quot;
HWADDR=&amp;quot;08:00:27:28:EB:27&amp;quot;
NM_CONTROLLED=&amp;quot;yes&amp;quot;
ONBOOT=&amp;quot;no&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;変更後:b1364ef41b10fc2f5f8d479674c6fba8&#34;&gt;変更後&lt;/h4&gt;

&lt;p&gt;ONBOOTをyesに変更し、下記のようにTYPE, IPADDR, NETMASKの行を追加します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;DEVICE=&amp;quot;eth1&amp;quot;
HWADDR=&amp;quot;08:00:27:28:EB:27&amp;quot;
NM_CONTROLLED=&amp;quot;yes&amp;quot;
ONBOOT=&amp;quot;yes&amp;quot;
TYPE=&amp;quot;Ethernet&amp;quot;
IPADDR=&amp;quot;192.168.56.101&amp;quot;
NETMASK=&amp;quot;255.255.255.0&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;
/etc/init.d/network restart
&lt;/pre&gt;
を実行しネットワークを再起動します。

### ネットワークの動作確認

以下のコマンドを実行し、DNS名前解決とインターネットへのアクセスができることを確認。
&lt;pre&gt;
ping ftp.riken.jp
&lt;/pre&gt;

&lt;p&gt;ホストマシンから仮想マシンにアクセスできることを確認。
&lt;pre&gt;
ping 192.168.56.101
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;確認できたら仮想マシンからログアウト
&lt;pre&gt;
exit
&lt;/pre&gt;&lt;/p&gt;

&lt;p&gt;以降はホストマシンからsshでログインして操作可能です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;ssh root@192.168.56.101
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>node.jsのfs.watch()で設定ファイルが更新されたらリロード</title>
      <link>http://localhost:1313/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo/</link>
      <pubDate>Wed, 27 Jun 2012 00:00:00 +0000</pubDate>
      
      <guid>http://localhost:1313/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo/</guid>
      <description>&lt;p&gt;&lt;a href=&#34;http://stackoverflow.com/questions/1972242/auto-reload-of-files-in-node-js&#34;&gt;javascript - Auto-reload of files in Node.js - Stack Overflow&lt;/a&gt;によると、モジュールをリロードするには&lt;a href=&#34;https://github.com/isaacs/node-supervisor&#34;&gt;isaacs/node-supervisor&lt;/a&gt;がよさそうです。&lt;/p&gt;

&lt;p&gt;が、今回は設定ファイルのリロードなのでfs.watch(filename, [options], [listener]) で十分ということで試してみました。
&lt;a href=&#34;http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener&#34;&gt;File System Node.js v0.8.0 Manual &amp;amp; Documentation&lt;/a&gt;
によると環境によっては使えないそうなので注意が必要です。&lt;/p&gt;

&lt;p&gt;CentOS 6.2では使えました。&lt;/p&gt;

&lt;p&gt;watch.js&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;var fs = require(&#39;fs&#39;);
fs.watch(&#39;router.json&#39;, function(ev, filename) {
  if (filename) {
    fs.readFile(filename, function(err, data) {
      if (err) throw err;
      var router = JSON.parse(data);
      console.log(router);
    });
  }
});
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;router.json&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{
  &amp;quot;vhost1.example.com&amp;quot;: &amp;quot;127.0.0.1:3000&amp;quot;,
  &amp;quot;vhost2.example.com&amp;quot;: &amp;quot;127.0.0.1:3001&amp;quot;,
  &amp;quot;vhost3.example.com&amp;quot;: &amp;quot;127.0.0.1:3002&amp;quot;,
  &amp;quot;vhost4.example.com&amp;quot;: &amp;quot;127.0.0.1:3003&amp;quot;
}
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;node watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;で起動して&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;touch router.json
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;を実行すると&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &#39;vhost1.example.com&#39;: &#39;127.0.0.1:3000&#39;,
  &#39;vhost2.example.com&#39;: &#39;127.0.0.1:3001&#39;,
  &#39;vhost3.example.com&#39;: &#39;127.0.0.1:3002&#39;,
  &#39;vhost4.example.com&#39;: &#39;127.0.0.1:3003&#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;と出力されます。&lt;/p&gt;

&lt;p&gt;ただし、vimでrouter.jsonを開いて:wで保存すると下記のエラーでnodeが異常終了してしまいました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;/var/www/app/watch-sample/watch.js:6
      if (err) throw err;
                     ^
Error: ENOENT, open &#39;router.json&#39;
&lt;/code&gt;&lt;/pre&gt;

&lt;pre&gt;&lt;code&gt;node watch
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;再起動後、vimでrouter.jsonを開いて:wqで保存して終了すると異常終了はしませんでしたが、下記のようにコールバックが4回も呼び出されてしまいました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;{ &#39;vhost1.example.com&#39;: &#39;127.0.0.1:3000&#39;,
  &#39;vhost2.example.com&#39;: &#39;127.0.0.1:3001&#39;,
  &#39;vhost3.example.com&#39;: &#39;127.0.0.1:3002&#39;,
  &#39;vhost4.example.com&#39;: &#39;127.0.0.1:3003&#39; }
{ &#39;vhost1.example.com&#39;: &#39;127.0.0.1:3000&#39;,
  &#39;vhost2.example.com&#39;: &#39;127.0.0.1:3001&#39;,
  &#39;vhost3.example.com&#39;: &#39;127.0.0.1:3002&#39;,
  &#39;vhost4.example.com&#39;: &#39;127.0.0.1:3003&#39; }
{ &#39;vhost1.example.com&#39;: &#39;127.0.0.1:3000&#39;,
  &#39;vhost2.example.com&#39;: &#39;127.0.0.1:3001&#39;,
  &#39;vhost3.example.com&#39;: &#39;127.0.0.1:3002&#39;,
  &#39;vhost4.example.com&#39;: &#39;127.0.0.1:3003&#39; }
{ &#39;vhost1.example.com&#39;: &#39;127.0.0.1:3000&#39;,
  &#39;vhost2.example.com&#39;: &#39;127.0.0.1:3001&#39;,
  &#39;vhost3.example.com&#39;: &#39;127.0.0.1:3002&#39;,
  &#39;vhost4.example.com&#39;: &#39;127.0.0.1:3003&#39; }
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;実用するには前回の設定内容と比較して変わっている場合だけ処理するとか、設定ファイルを直接見るのではなく更新完了通知用の専用ファイルを用意してそちらをtouchするとか、何らかの対処が必要そうです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>