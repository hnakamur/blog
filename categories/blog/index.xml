<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>blog on hnakamur&#39;s blog at github</title>
    <link>https://hnakamur.github.io/blog/categories/blog/</link>
    <description>Recent content in blog on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Tue, 24 Dec 2019 08:25:00 +0900</lastBuildDate>
    
	<atom:link href="https://hnakamur.github.io/blog/categories/blog/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>VictoriaMetricsのクエリのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/12/24/victoria-metrics-query-code-reading/</link>
      <pubDate>Tue, 24 Dec 2019 08:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/12/24/victoria-metrics-query-code-reading/</guid>
      <description>VictoriaMetrics/VictoriaMetrics: VictoriaMetrics - fast, cost-effective and scalable time series database, long-term remote storage for Prometheus の v1.31.2 のコードリーディングのメモ。 今回は Prometheus QL 互換のクエリ回りを見る。 メイン メインのリクエストハンドラ。 app/victoria-metrics/main.go#L52-L63 func requestHandler(w http.ResponseWriter, r</description>
    </item>
    
    <item>
      <title>VictoriaMetricsにgraphite形式でデータ投入のコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/12/23/victoria-metrics-code-reading/</link>
      <pubDate>Mon, 23 Dec 2019 22:55:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/12/23/victoria-metrics-code-reading/</guid>
      <description>VictoriaMetrics/VictoriaMetrics: VictoriaMetrics - fast, cost-effective and scalable time series database, long-term remote storage for Prometheus の v1.31.2 のコードリーディングのメモ。 graphite 形式で投入したデータがどう格納されるかを調べたい。 app/vminsert/graphite パッケージの serveTCP 関数から insertHandler</description>
    </item>
    
    <item>
      <title>tcpdumpとss -antpを同時に実行するシェルスクリプトの例</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/12/23/tcpdump-and-ss-script/</link>
      <pubDate>Mon, 23 Dec 2019 22:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/12/23/tcpdump-and-ss-script/</guid>
      <description>仕事で調査の時に書いた tcpdump と ss -antp を同時に実行するスクリプトの例をメモ。 tcpdump で複数のポートを調べたいときはtcpdumpを複数起動せずにportを</description>
    </item>
    
    <item>
      <title>VictoriaMetricsのインストール</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/12/23/install-victoria-metrics/</link>
      <pubDate>Mon, 23 Dec 2019 00:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/12/23/install-victoria-metrics/</guid>
      <description>参考: github.com/VictoriaMetrics/VictoriaMetrics の production build 予め Downloads - The Go Programming Language の手順で Go の最新版をインストールしておきます。 VictoriaMetrics の git レポジトリを clone して最新版のリリースに切り替えます。 git clone https://github.com/VictoriaMetrics/VictoriaMetrics cd</description>
    </item>
    
    <item>
      <title>aptでgrafanaをインストール</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/12/22/install-grafana-via-apt/</link>
      <pubDate>Sun, 22 Dec 2019 23:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/12/22/install-grafana-via-apt/</guid>
      <description>参考: Install on Debian/Ubuntu | Grafana Labs grafana の apt レポジトリの GPG 鍵を追加します。 curl -sSL https://packages.grafana.com/gpg.key | sudo apt-key add - apt-transport-https をまだ入れていない場合はインストールします。 sudo apt -y install apt-transport-https apt line を追加しま</description>
    </item>
    
    <item>
      <title>DockerでZFSストレージドライバを使う</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/12/21/configure-docker-with-zfs/</link>
      <pubDate>Sat, 21 Dec 2019 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/12/21/configure-docker-with-zfs/</guid>
      <description>参考: Use the ZFS storage driver | Docker Documentation /var/lib/docker を /var/lib/docker.bak にリネームして /var/lib/docker を作り直しパーミションを合わせます。 sudo mv /var/lib/docker{,.bak} sudo mkdir /var/lib/docker sudo 711 /var/lib/docker 以下では tank1 というボリュームが既にある想定で</description>
    </item>
    
    <item>
      <title>CoreDNSをWindowsのサービスとして登録するためのラッパをGoで書いてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</link>
      <pubDate>Wed, 30 Oct 2019 15:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/10/30/coredns-wrapper-for-runnning-as-windows-service/</guid>
      <description>はじめに Windows の Hyper-V の Linux 上でサーバサイドの開発をしていると Windows 上のウェブブラウザや Windows Subsystem for Linux の curl からアクセスする際に好みの FQDN でアクセスできるようにした</description>
    </item>
    
    <item>
      <title>Hyper-VのWindows NAT機能を使ってVMのIPアドレスを固定</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/10/29/static-ip-address-with-hyper-v-nat/</link>
      <pubDate>Tue, 29 Oct 2019 12:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/10/29/static-ip-address-with-hyper-v-nat/</guid>
      <description>はじめに multipassでVMを作成すると vEthernet (Default Switch) という仮想イーサネットアダプタが使用されますが、Windowsの再起動のたびにIPアドレス</description>
    </item>
    
    <item>
      <title>multipassのVM作成時にcloud-initでLXDをセットアップ</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/10/21/setup-lxd-on-multipass-using-cloud-init/</link>
      <pubDate>Mon, 21 Oct 2019 06:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/10/21/setup-lxd-on-multipass-using-cloud-init/</guid>
      <description>はじめに multipass ではVMの作成時に multipass launch の --cloud-init オプションで cloud-init を使って初期化を行えます。 LXD をセットアップする手順を試行錯誤したのでメモです。 参考資料 cloud-init の</description>
    </item>
    
    <item>
      <title>multipassのVMにsshで接続</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/10/21/access-multipass-vm-via-ssh/</link>
      <pubDate>Mon, 21 Oct 2019 06:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/10/21/access-multipass-vm-via-ssh/</guid>
      <description>はじめに multipass shell サブコマンドでmultipassで作成したVMにアクセスできますが、ホストから ssh したいケースもあります。 というわけでセットアップ</description>
    </item>
    
    <item>
      <title>仮想マシンマネージャmultipassをWindowsとmacOSで試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/10/17/multipass-on-windows-and-macos/</link>
      <pubDate>Thu, 17 Oct 2019 06:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/10/17/multipass-on-windows-and-macos/</guid>
      <description>はじめに multipass は私は Linux で Snapcraft - Snaps are universal Linux packages のチュートリアルで snap パッケージを作ってみた時にインストールされたのが初めての出会いでしたが、その時はなんか</description>
    </item>
    
    <item>
      <title>LXDでUbuntuコンテナにロケールとタイムゾーンを設定するプロファイル</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/08/15/lxd-profile-to-set-locale-and-timezone-to-ubuntu-container/</link>
      <pubDate>Thu, 15 Aug 2019 12:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/08/15/lxd-profile-to-set-locale-and-timezone-to-ubuntu-container/</guid>
      <description>はじめに How to preconfigure LXD containers with cloud-init – Mi blog lah! に cloud-init を使って Ubuntu コンテナの初期化時にロケールとタイムゾーンを設定する方法が紹介されていたのでメモしておきます。 Ubuntu</description>
    </item>
    
    <item>
      <title>LXDでコンテナの初期化に使われるテンプレート</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/08/15/lxd-container-temlates/</link>
      <pubDate>Thu, 15 Aug 2019 11:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/08/15/lxd-container-temlates/</guid>
      <description>はじめに Custom network configuration with cloud-init - LXD - system container manager に説明がありますが、LXDのコンテナイメージにはいくつかのテンプレートファイルがメタデータとして含まれていて、</description>
    </item>
    
    <item>
      <title>Goで書き込み中のファイルをHTTPレスポンスとして返す</title>
      <link>https://hnakamur.github.io/blog/content/post/2019/01/31/serve-file-as-http-response-while-writing-in-go/</link>
      <pubDate>Thu, 31 Jan 2019 11:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2019/01/31/serve-file-as-http-response-while-writing-in-go/</guid>
      <description>はじめに Goで別のgoroutineで書き込み中のファイルをHTTPレスポンスとして返せないかなと思って試行錯誤してみたところ、出来たのでメ</description>
    </item>
    
    <item>
      <title>PXEブートでVyOSをインストール</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/10/08/install-vyos-with-pxe-boot/</link>
      <pubDate>Mon, 08 Oct 2018 18:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/10/08/install-vyos-with-pxe-boot/</guid>
      <description>はじめに 半年前くらいに yamamasa23 さんの真似して中古で買った Quad Beagle ZG に PXE ブートで VyOS をインストールしてみたメモです。 手順は PXE - VyOS Wiki を参考にしました。 私は EdgeRouter-Lite</description>
    </item>
    
    <item>
      <title>nginx luaでSAMLのService Providerを作ってみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/07/31/saml-service-provider-with-nginx-lua/</link>
      <pubDate>Tue, 31 Jul 2018 10:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/07/31/saml-service-provider-with-nginx-lua/</guid>
      <description>はじめに nginxとshibbolethでSAML2のシングルサインオンを試してみた では Service Provider – Shibboleth Consortium を使いましたが、汎用的な分、設定方法のドキ</description>
    </item>
    
    <item>
      <title>macOS→VagrantのUbuntu→LXDコンテナへのポートフォワーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/07/05/port-forwarding-macos-vagrant-lxd/</link>
      <pubDate>Thu, 05 Jul 2018 16:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/07/05/port-forwarding-macos-vagrant-lxd/</guid>
      <description>はじめに VagrantでUbuntu 18.04 LTSとLXDをインストールする手順 で構築したLXDの環境で、macOS→VagrantのUbuntu</description>
    </item>
    
    <item>
      <title>VagrantでUbuntu 18.04 LTSとLXDをインストールする手順</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/</link>
      <pubDate>Thu, 05 Jul 2018 15:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/07/05/install-lxd-on-ubuntu-18.04-lts-on-vagrant/</guid>
      <description>はじめに 私自身は職場でも自宅でも Ubuntu MATE 18.04 LTS を使っていてVagrantはもう使っていません。 ですが職場の同僚が macOS を使っていてLXDの環境をセット</description>
    </item>
    
    <item>
      <title>LXDのコンテナイメージのエクスポート・インポート</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/07/05/export-and-import-lxd-container-image/</link>
      <pubDate>Thu, 05 Jul 2018 14:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/07/05/export-and-import-lxd-container-image/</guid>
      <description>はじめに nginxとshibbolethでSAML2のシングルサインオンを試してみた で使ったCentOS7のLXDコンテナのイメージをエクス</description>
    </item>
    
    <item>
      <title>LXDのproxyを使ってポートフォワーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/07/05/port-forwarding-using-lxd-proxy/</link>
      <pubDate>Thu, 05 Jul 2018 08:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/07/05/port-forwarding-using-lxd-proxy/</guid>
      <description>はじめに LXDのコンテナでnginxを動かして、ホストからChromeなどのブラウザでアクセスしたいことがよくあります。 LXDのイシューを見</description>
    </item>
    
    <item>
      <title>nginxとshibbolethでSAML2のシングルサインオンを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</link>
      <pubDate>Wed, 04 Jul 2018 16:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/07/04/saml2-single-sign-on-with-nginx-and-shibboleth/</guid>
      <description>はじめに 勤務先でSAML2のシングルサインオンについて調査していたところ Is this module compatible with SAML 2 in HTTP POST mode? · Issue #16 · nginx-shib/nginx-http-shibboleth というイシューを見つけました。 この nginx-http-shibboleth</description>
    </item>
    
    <item>
      <title>go-carbonのdebパッケージをsbuildとPPAでビルドした</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</link>
      <pubDate>Fri, 15 Jun 2018 10:55:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/06/15/built-go-carbon-deb-using-sbuild-and-ppa/</guid>
      <description>はじめに lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister のdebパッケージをsbuildとPPAでビルドしたときのメモです。 成果物は以下に有ります。 PPA: go-carbon : Hiroaki Nakamura d</description>
    </item>
    
    <item>
      <title>sbuildで外部レポジトリを使う</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/06/15/use-extra-repository-in-sbuild/</link>
      <pubDate>Fri, 15 Jun 2018 10:12:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/06/15/use-extra-repository-in-sbuild/</guid>
      <description>はじめに 外部レポジトリのdebパッケージに依存したdebパッケージをsbuildでビルドするための手順メモです。 以下の2つの方法がありますが</description>
    </item>
    
    <item>
      <title>PPAでのビルドの予行演習にsbuildを使う</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</link>
      <pubDate>Wed, 13 Jun 2018 18:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/06/13/use-sbuild-for-ppa-build-rehearsal/</guid>
      <description>はじめに PPAでビルドする前に手元でビルドが通ることを確認したくてpbuilderを使っていましたが、pbuilderではビルドが通るのにP</description>
    </item>
    
    <item>
      <title>universal-ctagsのUbuntu 18.04 LTS用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Fri, 08 Jun 2018 00:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/06/08/build-universal-ctags-deb-for-ubuntu-18.04-lts/</guid>
      <description>はじめに ctagsというと Ubuntu 18.04 LTS には exuberant-ctags (1:5.9~svn20110310-11) というパッケージがあります。ですが、バージョン番号のsvnの後の日付が2011年とあるようにかなり古</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTSでsbuildをセットアップ</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</link>
      <pubDate>Thu, 07 Jun 2018 21:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/06/07/setup-sbuild-on-ubuntu-18.04-lts/</guid>
      <description>はじめに 手元でpbuilderでdebパッケージのビルドが通ってからPPAでビルドしたらテストの1つがエラーになるという問題が起きてしまい、</description>
    </item>
    
    <item>
      <title>nginxのコードリーディングにrtagsを使う</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/23/use-rtags-for-nginx-code-reading/</link>
      <pubDate>Wed, 23 May 2018 22:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/23/use-rtags-for-nginx-code-reading/</guid>
      <description>はじめに Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した で作成したrtagsを使ってnginxのコードリーディングをするための手順メモで</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTS用にrtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</link>
      <pubDate>Wed, 23 May 2018 14:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/23/build-rtags-deb-for-ubuntu-18.04-lts/</guid>
      <description>はじめに rtagsのdebパッケージを作成した のときのメモを端折りすぎて、Ubuntu 18.04 LTS用に rtags 2.18のパッケージを作ろうと思ったら苦</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04 LTSにSlack 3.2.0-beta.2をインストール</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/22/install-slack-3.2.0-beta.2-on-ubuntu-18.04-lts/</link>
      <pubDate>Tue, 22 May 2018 15:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/22/install-slack-3.2.0-beta.2-on-ubuntu-18.04-lts/</guid>
      <description>はじめに Ubuntu MATE 18.04 LTSにSlack 3.2.0-beta.2をインストールしたときのメモです。 snapパッケージでのインストール Linux版 Slack (</description>
    </item>
    
    <item>
      <title>Ubuntuのデスクトップ環境でsshのパスフレーズ入力を1回だけにする</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/21/input-ssh-passphrase-only-once-on-ubuntu-desktop/</link>
      <pubDate>Mon, 21 May 2018 16:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/21/input-ssh-passphrase-only-once-on-ubuntu-desktop/</guid>
      <description>Ubuntuのデスクトップ環境でssh-agentを使ってsshのパスフレーズ入力を1回だけで良いようにするための設定メモです。 といっても、</description>
    </item>
    
    <item>
      <title>ClamAVをUbuntu MATE 18.04 LTSにセットアップ</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/21/setup-clamav-on-ubuntu-mate-18.04-lts/</link>
      <pubDate>Mon, 21 May 2018 15:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/21/setup-clamav-on-ubuntu-mate-18.04-lts/</guid>
      <description>はじめに Ubuntu MATE 18.04 LTSの環境にオープンソースのアンチウィルスソフト ClamAV をセットアップしてみたメモです。例によっていろいろ試行錯誤した後に思い出し</description>
    </item>
    
    <item>
      <title>Ubuntu MATE 18.04 LTSの私用設定メモ</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/21/my-settings-on-ubunt-mate/</link>
      <pubDate>Mon, 21 May 2018 12:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/21/my-settings-on-ubunt-mate/</guid>
      <description>はじめに USキーボードのThinkPad T480sとThinkPad X260にUbuntu MATE 18.04 LTSをセットアップしました。ということで自分</description>
    </item>
    
    <item>
      <title>debパッケージを使ってnginxモジュールをビルド・デバッグする</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/10/build-and-debug-nginx-module-using-deb-package/</link>
      <pubDate>Thu, 10 May 2018 09:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/10/build-and-debug-nginx-module-using-deb-package/</guid>
      <description>はじめに 私は 私のnginxのカスタムrpmとdebをビルドする手順 でサードパーティモジュールを含んだnginxのパッケージをビルドしています</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04でVPN切断後にホスト名解決が動くようにするための回避策</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/06/workaround-to-get-dns-working-after-vpn-disconnection-on-ubuntu-18.04/</link>
      <pubDate>Sun, 06 May 2018 20:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/06/workaround-to-get-dns-working-after-vpn-disconnection-on-ubuntu-18.04/</guid>
      <description>はじめに Ubuntu 17.10でL2TPのVPN接続を試してみた でVPN切断後にホスト名解決が動かなくなるのでWifiを一旦オフにしてオンにしていたの</description>
    </item>
    
    <item>
      <title>Ubuntuでsnapを使って最新バージョンのgoをインストール</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</link>
      <pubDate>Sun, 06 May 2018 15:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/06/install-latest-version-of-golang-using-snap-on-ubuntu/</guid>
      <description>結論 私が今後あちこちの環境でインストールすることになるので結論を先にメモしておきます。 Ubuntuでsnapを使ってgo 1.10.xの最新版</description>
    </item>
    
    <item>
      <title>GNOME上でEmacsライクなキーバインディングを使う</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/06/use-emacs-like-keybindings-on-gnome/</link>
      <pubDate>Sun, 06 May 2018 14:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/06/use-emacs-like-keybindings-on-gnome/</guid>
      <description>はじめに 元々macOSのChromeでURL欄を編集するときにEmacsライクなキーバインディングを使うのに慣れていたので、GNOMEのCh</description>
    </item>
    
    <item>
      <title>MacBook Pro上のUbuntu 18.04でサスペンドが動くようにする</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/06/make-suspend-working-in-ubuntu-18.04-on-macbook-pro/</link>
      <pubDate>Sun, 06 May 2018 09:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/06/make-suspend-working-in-ubuntu-18.04-on-macbook-pro/</guid>
      <description>はじめに MacBook Pro 15-inch, Mid 2012 (機種ID: MacBookPro10,1)にUbuntu 18.04をインストールしてみたのですが、動かしたまま画面を閉じる</description>
    </item>
    
    <item>
      <title>GNOMEの端末でssh-addを自動実行</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/05/run-ssh-add-on-gnome-terminal/</link>
      <pubDate>Sat, 05 May 2018 00:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/05/run-ssh-add-on-gnome-terminal/</guid>
      <description>はじめに UbuntuのGNOME環境では「自動起動するアプリケーションの設定」でSSH鍵エージェントが設定されています。 端末を起動したときに</description>
    </item>
    
    <item>
      <title>GNOME Shellの時刻表示に日付や秒を表示</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/04/display-date-and-seconds-on-gnome-shell/</link>
      <pubDate>Fri, 04 May 2018 21:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/04/display-date-and-seconds-on-gnome-shell/</guid>
      <description>はじめに How do I change the date format in Gnome 3 shell? - Ask Ubuntu を参考にしました。 日本語環境の場合デフォルトでは「金曜日 21 : 32」のようになっていました。 日付を表示 以下</description>
    </item>
    
    <item>
      <title>pbuilderで特定のディストリビューションのchroot環境を作成</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/04/create-pbuilder-chroot-of-specified-distribution/</link>
      <pubDate>Fri, 04 May 2018 21:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/04/create-pbuilder-chroot-of-specified-distribution/</guid>
      <description>はじめに Ubuntu 18.04上のpbuilderでUbuntu 16.04用のchroot環境を作成するというようにホストと違うディストリビューション</description>
    </item>
    
    <item>
      <title>apt-markを使ってdebパッケージのバージョン固定</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/04/hold-deb-package-version-using-apt-mark/</link>
      <pubDate>Fri, 04 May 2018 21:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/04/hold-deb-package-version-using-apt-mark/</guid>
      <description>はじめに nginx にはmainline版とstable版がありますが、 どのバージョンのnginxを使うべきか？ - 考える人、コードを書く人 を参考に私は</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04でaptを使ってchromeをインストール</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/04/install-chrome-using-apt-on-ubuntu-18.04/</link>
      <pubDate>Fri, 04 May 2018 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/04/install-chrome-using-apt-on-ubuntu-18.04/</guid>
      <description>はじめに How to install google chrome on ubuntu 18.04 / 18.10 を参考にUbuntu 18.04でaptを使ってchromeをインストールしたメモです。 インストール手順 curl https://dl.google.com/linux/linux_signing_key.pub | sudo apt-key</description>
    </item>
    
    <item>
      <title>macOS High SierraとUbuntu 18.04でVeraCryptを使う</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/02/use-veracrypt-on-mac-os-high-sierra-and-ubuntu-18.04/</link>
      <pubDate>Wed, 02 May 2018 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/02/use-veracrypt-on-mac-os-high-sierra-and-ubuntu-18.04/</guid>
      <description>はじめに VeraCryptでデータパーティションを暗号化してみた ではWindows 10とUbuntu 17.10のデュアルブート環境でデータ用</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04でcopr-cliのdebパッケージを作ったときのメモ</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/01/build-copr-cli-deb-package-for-ubuntu18.04/</link>
      <pubDate>Tue, 01 May 2018 12:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/01/build-copr-cli-deb-package-for-ubuntu18.04/</guid>
      <description>はじめに Ubuntu16.04でrpmビルド用にmockとcopr-cliをセットアップ に書いた copr-cli パッケージのビルド手順をサボってメモしてな</description>
    </item>
    
    <item>
      <title>Ubuntu 18.04でgit-buildpackageとfreightを使うときのメモ</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/05/01/ubuntu-18.04-git-buildpackage-freight/</link>
      <pubDate>Tue, 01 May 2018 12:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/05/01/ubuntu-18.04-git-buildpackage-freight/</guid>
      <description>はじめに git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順 freightでプライベートdebレポジト</description>
    </item>
    
    <item>
      <title>Ubuntu 16.04上にUbuntu 18.04のPXEブートサーバをセットアップ</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/04/24/ubuntu18.04-pxe-boot-server-on-ubuntu16.04/</link>
      <pubDate>Tue, 24 Apr 2018 01:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/04/24/ubuntu18.04-pxe-boot-server-on-ubuntu16.04/</guid>
      <description>はじめに Ubuntu 16.04をルーター化 したところに Ubuntu 18.04のPXEブートサーバをセットアップしたメモです。 Ubuntu 18.04はリリース前の 2018-</description>
    </item>
    
    <item>
      <title>Ubuntu 16.04をルーター化</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/04/23/setup-router-on-ubuntu16.04/</link>
      <pubDate>Mon, 23 Apr 2018 00:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/04/23/setup-router-on-ubuntu16.04/</guid>
      <description>はじめに LANポートが2つついているFUJITSU PRIMERGY TX1310 M1でUbuntu 16.04をルーター化したメモです。 Ubuntu 14.04のルーター化 - Qiita を参</description>
    </item>
    
    <item>
      <title>VeraCryptでデータパーティションを暗号化してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/04/22/use-veracrypt-for-data-partition/</link>
      <pubDate>Sun, 22 Apr 2018 20:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/04/22/use-veracrypt-for-data-partition/</guid>
      <description>はじめに Windows 10とUbuntu 16.04のデュアルブート環境でデータ用のパーティションを VeraCrypt - Free Open source disk encryption with strong security for the Paranoid で暗号化して 両方からマウント</description>
    </item>
    
    <item>
      <title>Ubuntu16.04でrpmビルド用にmockとcopr-cliをセットアップ</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/</link>
      <pubDate>Sat, 21 Apr 2018 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/04/21/setup-mock-and-copr-cli-for-building-rpm-on-ubuntu-16.04/</guid>
      <description>はじめに Ubuntu 16.04で mock でローカルでrpmをビルドするための環境構築の手順メモです。 Copr Build Service でrpmをビルドする際に、ビルドが通ることを事前に</description>
    </item>
    
    <item>
      <title>Ubuntu16.04でセカンダリIPアドレス追加</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/04/21/add-secondary-ip-address-on-ubuntu-16.04/</link>
      <pubDate>Sat, 21 Apr 2018 12:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/04/21/add-secondary-ip-address-on-ubuntu-16.04/</guid>
      <description>networking - How do I add an additional IP address to /etc/network/interfaces? - Ask Ubuntu とそこでコメントされていた NetworkConfiguration - Debian Wiki の iproute2 method を見て試してみたメモです。 NetworkConfiguration - Debian Wiki の iproute2 method で書かれていたのは /etc/network/interfaces で同じネッ</description>
    </item>
    
    <item>
      <title>私のgoのrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/04/05/building-my-golang-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 11:21:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/04/05/building-my-golang-rpm-and-deb/</guid>
      <description>はじめに golangの非公式rpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている 手順をピックアップしながら</description>
    </item>
    
    <item>
      <title>私のnginxのカスタムrpmとdebをビルドする手順</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/04/05/building-my-custom-nginx-rpm-and-deb/</link>
      <pubDate>Thu, 05 Apr 2018 08:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/04/05/building-my-custom-nginx-rpm-and-deb/</guid>
      <description>はじめに nginxのカスタムrpmとdebをビルドし始めてから結構経っていますが、自分のブログ記事に散らばっている 手順をピックアップしながら</description>
    </item>
    
    <item>
      <title>Windows10のパーティションを縮小するために移動できないファイルを消す</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/04/02/delete-unmovable-files-to-shrink-windows10-partition/</link>
      <pubDate>Mon, 02 Apr 2018 00:16:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/04/02/delete-unmovable-files-to-shrink-windows10-partition/</guid>
      <description>はじめに WindowsとUbuntuでデュアルブートするためにWindowsのパーティションを縮小 するのですが、前回試したときは移動できない</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10でスクリーンショットを作成してgimpで編集</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/03/31/create-and-edit-screenshots-with-gimp-on-ubuntu-17.10/</link>
      <pubDate>Sat, 31 Mar 2018 10:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/03/31/create-and-edit-screenshots-with-gimp-on-ubuntu-17.10/</guid>
      <description>はじめに Ubuntu 17.10でスクリーンショットを作成してgimpで編集する際の手順メモです。 スクリーンショット作成 GNOMEのスクリーンショットの</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10でL2TPのVPN接続を試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/03/31/l2tp-vpn-on-ubuntu-17.10/</link>
      <pubDate>Sat, 31 Mar 2018 08:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/03/31/l2tp-vpn-on-ubuntu-17.10/</guid>
      <description>はじめに Ubuntu 17.10でL2TPのVPN接続を試してみたのでメモです。 以下の手順の一部は接続先の設定に依存して変動がありえます。 セットアップ 必</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10とgnomeとIBus mozcのキーボードショートカットを自分好みに設定</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/03/30/ubuntu-17.10-gnome-ibus-mozc-keyboard-shortcut/</link>
      <pubDate>Fri, 30 Mar 2018 16:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/03/30/ubuntu-17.10-gnome-ibus-mozc-keyboard-shortcut/</guid>
      <description>はじめに 私はThinkPadとMacBook ProでともにUSキーボードを使っています。 Windows、macOS、Ubuntuでウィンドウ</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10とWindows10でデュアルブート構成にしてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/03/23/ubuntu-17.10-windows10-dual-boot/</link>
      <pubDate>Fri, 23 Mar 2018 20:15:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/03/23/ubuntu-17.10-windows10-dual-boot/</guid>
      <description>はじめに Ubuntu 17.10とmacOS High Sierraでデュアルブート構成にしてみた の後、ThinkPad X260でUbuntu 17.10とWind</description>
    </item>
    
    <item>
      <title>Ubuntu 17.10とmacOS High Sierraでデュアルブート構成にしてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/</link>
      <pubDate>Fri, 23 Mar 2018 14:50:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/03/23/ubuntu-17.10-mac-os-high-sierra-dual-boot/</guid>
      <description>はじめに 個人的にLinuxデスクトップの機運が高まってきたので、Ubuntu 17.10のデスクトップ環境を試してみました。 例によって自分用メ</description>
    </item>
    
    <item>
      <title>EdgeRouter LiteでDuckDNSとCloudFlareでダイナミックDNSを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/03/19/use-duckdns-and-cloudflare-dyndns-on-edgerouter/</link>
      <pubDate>Mon, 19 Mar 2018 17:26:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/03/19/use-duckdns-and-cloudflare-dyndns-on-edgerouter/</guid>
      <description>EdgeRouter X - 5. ダイナミック DNS の設定 ( DDNS ) | yabe.jp という素晴らしい記事を見つけて、試してみたメモです。 私の環境では設定対象のネットワークインターフェース</description>
    </item>
    
    <item>
      <title>特定のドメインの証明書の有効期限をコマンドで確認する</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/03/13/show-certificate-validity/</link>
      <pubDate>Tue, 13 Mar 2018 11:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/03/13/show-certificate-validity/</guid>
      <description>職場で見かけたので、ちょっとアレンジしてメモ。 openssl s_client -connect example.com:443 -showcerts &amp;lt; /dev/null 2&amp;gt; /dev/null \ | openssl x509 -text | grep -A 2 Validity 実行例。 $ openssl s_client -connect example.com:443 -showcerts &amp;lt; /dev/null 2&amp;gt; /dev/null | openssl x509 -text | grep -A 2 Validity Validity Not Before: Nov 3</description>
    </item>
    
    <item>
      <title>goで書いたコードがヒープ割り当てになるかを確認する方法</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/01/30/go-heap-allocations/</link>
      <pubDate>Tue, 30 Jan 2018 06:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/01/30/go-heap-allocations/</guid>
      <description>はじめに Allocation Efficiency in High-Performance Go Services · Segment Blog という記事を読みました。素晴らしいのでぜひ一読をお勧めします。 この記事は自分の理解と実際に試してみた結果のメモです</description>
    </item>
    
    <item>
      <title>rustのHTTPライブラリについて情報収集した</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/01/29/rust-http-libraries/</link>
      <pubDate>Mon, 29 Jan 2018 05:08:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/01/29/rust-http-libraries/</guid>
      <description>はじめに rustのHTTPライブラリの現状について検索して軽く情報収集したので、 HTTPに関連したIOライブラリも含めてメモしておきます。 非</description>
    </item>
    
    <item>
      <title>rustupでrustをセットアップ</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/01/29/setup-rust-with-rustup/</link>
      <pubDate>Mon, 29 Jan 2018 01:06:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/01/29/setup-rust-with-rustup/</guid>
      <description>はじめに Ubuntu 16.04の環境にrustをセットアップしたときのメモです。 インストール手順のドキュメント rustup の Installation には www.rustup.rs の手順に従うように書いてあり</description>
    </item>
    
    <item>
      <title>go1.10rc1のdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2018/01/28/build-go-1.10rc1-deb/</link>
      <pubDate>Sun, 28 Jan 2018 21:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2018/01/28/build-go-1.10rc1-deb/</guid>
      <description>はじめに golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした 以降go1.9.xのdebパッケージを git-buildpackage で作っていましたが、今回</description>
    </item>
    
    <item>
      <title>lua-nginx-moduleのshared dictの空き容量について</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/10/11/lua-nginx-shared-dict-free-space/</link>
      <pubDate>Wed, 11 Oct 2017 11:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/10/11/lua-nginx-shared-dict-free-space/</guid>
      <description>はじめに openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers の ngx.shared.DICT は複数ワーカープロセス間でデータを共有することができ、非常に便利です。 使用する際は lua_shared_dict ディレクティブ で以下のよ</description>
    </item>
    
    <item>
      <title>Goでcontext非対応の関数をcontext対応にするラッパ関数を書いた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</link>
      <pubDate>Thu, 05 Oct 2017 20:32:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/10/05/make-context-unaware-function-to-be-context-aware-in-go/</guid>
      <description>はじめに Goの net/http.Server でグレースフルシャットダウンを行う際の注意点として Go1.8のGraceful Shutdownとgo-gracedownの対</description>
    </item>
    
    <item>
      <title>lua-nginx-moduleのshared dictのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/09/27/code-reading-lua-nginx-shared-dict/</link>
      <pubDate>Wed, 27 Sep 2017 08:57:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/09/27/code-reading-lua-nginx-shared-dict/</guid>
      <description>はじめに openresty/lua-nginx-module: Embed the Power of Lua into NGINX HTTP servers の ngx.shared.DICT を使う際 lua_shared_dict ディレクティブで http { lua_shared_dict dogs 10m; ... } のように dict のサイズを指定しますが、容量が足りているかを確認するため実</description>
    </item>
    
    <item>
      <title>ChromeとFirefoxの拡張機能を書くのにasync/awaitを使ってみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/09/18/use-async-await-in-writing-chrome-and-firefox-extensions/</link>
      <pubDate>Mon, 18 Sep 2017 12:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/09/18/use-async-await-in-writing-chrome-and-firefox-extensions/</guid>
      <description>はじめに 私はChromeとFirefox用に以下の拡張機能を書いて使っています。 FormatLink-Chrome FormatLink-Firefox 今回UIを改変する際についでに async と await を使って書くように変</description>
    </item>
    
    <item>
      <title>Goのプロファイラを使ってメモリ割り当て回数を減らす</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/09/14/reduce-memory-allocations-using-go-profiler/</link>
      <pubDate>Thu, 14 Sep 2017 22:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/09/14/reduce-memory-allocations-using-go-profiler/</guid>
      <description>はじめに Goのプロファイラを使ってメモリ割り当て回数を減らすように自分のプログラムを改善するのを試してみたのでメモです。 参考資料 プロファイラ</description>
    </item>
    
    <item>
      <title>rtagsのdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/09/05/built-rtags-deb/</link>
      <pubDate>Tue, 05 Sep 2017 23:07:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/09/05/built-rtags-deb/</guid>
      <description>はじめに 最強のC/C++インデクサー &amp;ldquo;Rtags&amp;rdquo; を本気で使う - Qiita で Andersbakken/rtags: A c/c++ client/server indexer for c/c++/objc[++] with integration for Emacs based on clang. の存在を知り、deb パッケージを作ってみたのでメモです。</description>
    </item>
    
    <item>
      <title>terminal機能を有効にしたvim8のdebパッケージを作成した</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/09/05/built-terminal-enabled-vim8-deb/</link>
      <pubDate>Tue, 05 Sep 2017 22:38:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/09/05/built-terminal-enabled-vim8-deb/</guid>
      <description>はじめに terminal機能を有効にしたvim8のdebパッケージを作成したのでメモです。 インストール方法 ビルドしたパッケージは vim : Hiroaki Nakamura で公</description>
    </item>
    
    <item>
      <title>pbuilderのchroot環境にレポジトリを追加する</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/09/02/add-repositories-to-pbuilder-chroot-images/</link>
      <pubDate>Sat, 02 Sep 2017 16:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/09/02/add-repositories-to-pbuilder-chroot-images/</guid>
      <description>はじめに pbuilder を使っていくつかdebパッケージを作ってみて、chroot環境をカスタマイズするベストプラクティスが自分の中で出来たのでメモです。</description>
    </item>
    
    <item>
      <title>add-apt-repositoryを使わずにPPAをapt-lineに追加する方法</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</link>
      <pubDate>Sat, 02 Sep 2017 11:47:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/09/02/add-ppa-to-apt-line-without-add-apt-repository/</guid>
      <description>はじめに PPAのページにはPPAを追加するには add-apt-respository コマンドを使うように書かれています。 例えば gcc-7 などを配布しているPPA Toolchain test builds : “PPA for Ubuntu Toolchain Uploads</description>
    </item>
    
    <item>
      <title>git-buildpackageとfreightでパスフレーズをファイルから入力させる</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</link>
      <pubDate>Mon, 28 Aug 2017 22:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/08/28/use-passphrase-file-in-git-buildpackage-and-freight/</guid>
      <description>はじめに git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順 の gbp buildpackage でソースパッケージをビルドする時と f</description>
    </item>
    
    <item>
      <title>ngx_http_limit_req_moduleのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/08/17/nginx-limit-req-code-reading/</link>
      <pubDate>Thu, 17 Aug 2017 09:38:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/08/17/nginx-limit-req-code-reading/</guid>
      <description>はじめに Module ngx_http_limit_req_module を使おうと思ってコードを読んでみたのでメモです。 leaky bucket 上記のドキュメントに &amp;ldquo;leaky bucket&amp;rdquo; を使ってリクエスト数の制御を行っていると書かれていま</description>
    </item>
    
    <item>
      <title>freightでプライベートdebレポジトリ作成</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/08/05/create-private-deb-repository-with-freight/</link>
      <pubDate>Sat, 05 Aug 2017 17:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/08/05/create-private-deb-repository-with-freight/</guid>
      <description>はじめに CentOS だとカスタムrpmを作って yum install rpmファイル名 で依存パッケージとともにインストールできますが、Ubuntuだと dpkg -i debファイル名</description>
    </item>
    
    <item>
      <title>golang 1.9rc1のUbuntu 16.04用debパッケージをビルドした</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/08/05/built-golang-1.9rc1-deb-package/</link>
      <pubDate>Sat, 05 Aug 2017 10:15:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/08/05/built-golang-1.9rc1-deb-package/</guid>
      <description>はじめに Ubuntu · golang/go Wiki で紹介されている Golang Backports : Simon Eisenmann を改変してgo 1.9rc1のUbuntu 16.04用debパッケージをビルドしたのでメモです。 golang 1.9</description>
    </item>
    
    <item>
      <title>badgerのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/07/22/code-reading-of-badger/</link>
      <pubDate>Sat, 22 Jul 2017 21:57:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/07/22/code-reading-of-badger/</guid>
      <description>はじめに 約一年前に LSM-TreeとRocksDB、TiDB、CockroachDBが気になる を書いた後、結局RocksDB触ってなかったの</description>
    </item>
    
    <item>
      <title>nginx&#43;luaのカスタムdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/07/18/created-nginx-lua-custom-deb-package/</link>
      <pubDate>Tue, 18 Jul 2017 15:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/07/18/created-nginx-lua-custom-deb-package/</guid>
      <description>はじめに ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた 、 git-buildpackag</description>
    </item>
    
    <item>
      <title>git-buildpackageのpatch-queue機能を試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/07/14/tried-git-buildpackage-patch-queue/</link>
      <pubDate>Fri, 14 Jul 2017 11:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/07/14/tried-git-buildpackage-patch-queue/</guid>
      <description>はじめに ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた で quilt を使ったパッチ適用を経験して</description>
    </item>
    
    <item>
      <title>ngx_http_v2_upstreamモジュールを追加したnginxのdebパッケージを作ってみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</link>
      <pubDate>Fri, 14 Jul 2017 06:07:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/07/14/build-nginx-deb-with-ngx_http_v2_upstream/</guid>
      <description>はじめに Nginxのリバースプロキシでバックエンドとhttp2通信する - ASnoKaze blog で紹介されていたngx_http_v2_upstreamモジュー</description>
    </item>
    
    <item>
      <title>グレースフルリスタートを支援するサーバ起動のGoライブラリを自作した</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</link>
      <pubDate>Sat, 08 Jul 2017 21:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/07/08/create-my-own-go-serverstarter-to-support-graceful-restart/</guid>
      <description>はじめに サーバプロセスを無停止で実行ファイルを更新し再起動できるグレースフルリスタートは 非常に便利な仕組みです。 今までは Go言語でGrace</description>
    </item>
    
    <item>
      <title>git-buildpackageでdebパッケージをビルドしてPPAにアップロードする手順</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/07/05/how-to-build-deb-with-git-buildpackage/</link>
      <pubDate>Wed, 05 Jul 2017 21:04:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/07/05/how-to-build-deb-with-git-buildpackage/</guid>
      <description>はじめに .. _git-buildpackage: https://honk.sigxcpu.org/piki/projects/git-buildpackage/ git-buildpackage_ を使ってカスタムdebパッケージをビルドして Personal Package Archives : Ubuntu (PPA) にアップロードする手順のメモです。 自分で試行錯誤してまとめた手順なの</description>
    </item>
    
    <item>
      <title>gpgで秘密鍵を作成する</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/07/01/generate-secret-key-with-gpg/</link>
      <pubDate>Sat, 01 Jul 2017 17:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/07/01/generate-secret-key-with-gpg/</guid>
      <description>はじめに gpgの秘密鍵はdebパッケージを署名するために以前作成していたのですが、ググって適当に済ませていたので手順をメモしておきます。 GPG Cheat</description>
    </item>
    
    <item>
      <title>zerologを参考にしてltsvlogを改良してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</link>
      <pubDate>Sun, 28 May 2017 21:52:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/05/28/improve-ltsvlog-with-referring-to-zerolog/</guid>
      <description>はじめに こちらも少し前の話なのですがブログに書いておきます。 ( ꒪⌓꒪)さんのツイート: &amp;ldquo;zero allocation をうたう logger #golang / “GitHub - rs/zerolog: Zero Allocation JSON Logger</description>
    </item>
    
    <item>
      <title>EdgeRouter LiteでIPv6の静的ルーティング設定</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/05/28/edgerouter-lite-static-ipv6-routing/</link>
      <pubDate>Sun, 28 May 2017 12:04:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/05/28/edgerouter-lite-static-ipv6-routing/</guid>
      <description>はじめに IIJmioひかりとEdgeRouter-LiteでDS-Liteを試してみた の後、多少調整して一旦自分の希望通りの動きで落ち着いた</description>
    </item>
    
    <item>
      <title>IIJmioひかりとEdgeRouter-LiteでDS-Liteを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/05/13/tried-ds-lite-with-iij-mio-hikari-and-edgerouter-lite/</link>
      <pubDate>Sat, 13 May 2017 16:23:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/05/13/tried-ds-lite-with-iij-mio-hikari-and-edgerouter-lite/</guid>
      <description>はじめに 会社の同僚と話していて、私もそろそろIPv6に触れる機会を作っておかないとまずいなと思い、IIJmioひかりとIPoEとひかり電話を</description>
    </item>
    
    <item>
      <title>EdgeOSのドキュメントのリンクまとめ</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/05/13/edge-os-document-links/</link>
      <pubDate>Sat, 13 May 2017 15:35:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/05/13/edge-os-document-links/</guid>
      <description>はじめに EdgeOSの設定項目の階層構造を理解する にも一部書きましたが、EdgeOSのドキュメントのリンクをまとめておきます。 公式ドキュメン</description>
    </item>
    
    <item>
      <title>EdgeOSの設定項目の階層構造を理解する</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/05/13/understanding-edge-os-config-hierarchy-structure/</link>
      <pubDate>Sat, 13 May 2017 10:48:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/05/13/understanding-edge-os-config-hierarchy-structure/</guid>
      <description>はじめに EdgeRouter Lite (ERLite-3)をCLI (Command Line Interface)で設定しているうちにようやく基本が理解できたのでメモです。 EdgeOSとは EdgeOS</description>
    </item>
    
    <item>
      <title>自宅サーバExpress5800/S70タイプRBのCPUをCore i5 650に換装してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/05/03/replace-cpu-to-core-i5-in-express5800/</link>
      <pubDate>Wed, 03 May 2017 21:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/05/03/replace-cpu-to-core-i5-in-express5800/</guid>
      <description>はじめに 私は NEC Express5800／S70 タイプRB - usyWiki を2011年に買って自宅サーバとして活用しています。一時期使って無い時期もありまし</description>
    </item>
    
    <item>
      <title>EdgeRouter Lite (ERLite-3)のファームウェアアップデート</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/05/03/update-edgerouter-lite-firmware/</link>
      <pubDate>Wed, 03 May 2017 07:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/05/03/update-edgerouter-lite-firmware/</guid>
      <description>はじめに 17,000円で買えるVyOSっぽいOSが動くルーター EdgeRouter Lite(ERLite-3)を使ってみる — どこか遠くでのんびり怠惰に暮らした</description>
    </item>
    
    <item>
      <title>go-whisperをコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/29/go-whisper-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 17:05:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/29/go-whisper-code-reading/</guid>
      <description>はじめに go-carbonのTCPレシーバについてコードリーディングしてみた の続きです。 go-whisperのレポジトリは lomik/go-whisper: A Go port of Graphite&#39;s Whisper timeseries database</description>
    </item>
    
    <item>
      <title>go-carbonのTCPレシーバについてコードリーディングしてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/29/go-carbon-tcp-receiver-code-reading/</link>
      <pubDate>Sat, 29 Apr 2017 11:15:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/29/go-carbon-tcp-receiver-code-reading/</guid>
      <description>はじめに lomik/go-carbon: Golang implementation of Graphite/Carbon server with classic architecture: Agent -&amp;gt; Cache -&amp;gt; Persister のTCPレシーバについてコードを読んでみたのでメモです。 対象のコミットは https://github.com/lomik/go-carbon/tree/42b9832d13240ff044c86768e8d0dc1f356d9458 です。 TCPレシーバの生成 (app *App)</description>
    </item>
    
    <item>
      <title>MastodonのER図を生成してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/24/mastodon-er-diagram/</link>
      <pubDate>Mon, 24 Apr 2017 00:28:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/24/mastodon-er-diagram/</guid>
      <description>はじめに voormedia/rails-erd: Generate Entity-Relationship Diagrams for Rails applications を使って tootsuite/mastodon: A GNU Social-compatible microblogging server のER図を生成してみました、というだけの記事です。 Relax Ruby version requirement (#1901) · tootsuite/mastodon@0611209 のコミットに対して 生成したPDFが</description>
    </item>
    
    <item>
      <title>github.com/deoxxa/donを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/21/tried-don/</link>
      <pubDate>Fri, 21 Apr 2017 02:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/21/tried-don/</guid>
      <description>はじめに deoxxa/don: Less than half of mastodon. はGoによる tootsuite/mastodon の実装です。 まだ開発中で、タイトルによるとmastodonの機能の半分以下らしいです。 この記事はdonをと</description>
    </item>
    
    <item>
      <title>github.com/facebookgo/graceパッケージでグレースフルリスタートを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</link>
      <pubDate>Thu, 13 Apr 2017 07:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/13/tried-graceful-restart-with-facebookgo-grace/</guid>
      <description>はじめに go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた でcarbonapiが facebookgo/grace: Graceful restart &amp;amp; zero downtime deploy for Go servers. を使っていることに気づ</description>
    </item>
    
    <item>
      <title>go, go-carbon, carbonapiのrpmをfedora coprでビルドしてみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/04/13/built-go-carbon-and-carbonapi-rpm/</link>
      <pubDate>Thu, 13 Apr 2017 05:13:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/04/13/built-go-carbon-and-carbonapi-rpm/</guid>
      <description>はじめに go, go-carbon, carbonapiのrpmをfedora coprでビルドしたのでメモです。 goのrpmはCentOS 6と7、go-carbonと</description>
    </item>
    
    <item>
      <title>LXDのdnsmasqで名前解決するための設定</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/03/26/modify-resolv-conf-for-lxd-dnsmasq/</link>
      <pubDate>Sun, 26 Mar 2017 09:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/03/26/modify-resolv-conf-for-lxd-dnsmasq/</guid>
      <description>はじめに Ubuntu 16.04のLXDでホストマシンでコンテナ名で名前解決するための設定メモです。 ブリッジを使ったネットワーク構成での話です。 $ ip a show</description>
    </item>
    
    <item>
      <title>LXDでネストした非特権コンテナを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/03/21/tried-nested-unprivileged-lxd-containers/</link>
      <pubDate>Tue, 21 Mar 2017 21:00:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/03/21/tried-nested-unprivileged-lxd-containers/</guid>
      <description>はじめに https://twitter.com/ten_forward/status/844107303099932676 https://twitter.com/ten_forward/status/844142416282054658 というツイートを受けて自分でもLXDでネストした非特権コンテナを試してみました。 環境はUbuntu 16.04です。 lxdのバージ</description>
    </item>
    
    <item>
      <title>video.jsのHLSライブラリを試してみた</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/03/21/tried-videojs-hls-library/</link>
      <pubDate>Tue, 21 Mar 2017 14:52:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/03/21/tried-videojs-hls-library/</guid>
      <description>はじめに MPEG DASHを知る - Qiita を見て、HTML5のvideoタグでHLSと Dash-Industry-Forum/dash.js: A reference client implementation for the playback of MPEG DASH via Javascript and compliant browsers. でMPEG DASHを試してみたところ</description>
    </item>
    
    <item>
      <title>WindowsでCtrlとCapsを入れ替えた状態でControl&#43;タップするためのSynapticsタッチパッドドライバの設定</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/03/04/use-control-tap-with-control-caps-swapped-keyboard-and-synaptics-touchpad-driver/</link>
      <pubDate>Sat, 04 Mar 2017 10:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/03/04/use-control-tap-with-control-caps-swapped-keyboard-and-synaptics-touchpad-driver/</guid>
      <description>はじめに 英字キーボードのThinkpad X260でWindows 10を使っていてレジストリで左ControlキーとCapsLockを入れ替え</description>
    </item>
    
    <item>
      <title>iptables-saveのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/03/03/iptables-save-code-reading/</link>
      <pubDate>Fri, 03 Mar 2017 23:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/03/03/iptables-save-code-reading/</guid>
      <description>はじめに iptables-restoreのコードリーディング の続きです。 iptables-save でルールを出力する部分のコードリーディングのメモです。 iptables_save_main 関数からの</description>
    </item>
    
    <item>
      <title>iptablesのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/02/26/iptables-code-reading/</link>
      <pubDate>Sun, 26 Feb 2017 11:40:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/02/26/iptables-code-reading/</guid>
      <description>はじめに iptables-restoreのコードリーディング の続きです。 サーバ上の iptables の現状の設定が、自分が意図した設定と一致しているか確認し</description>
    </item>
    
    <item>
      <title>CentOS 7のepelでインストールしたpython3.4でvenvを使うとエラーになる件の回避策</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/02/25/workaround-for-epel-python3.4-venv-on-centos7/</link>
      <pubDate>Sat, 25 Feb 2017 00:45:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/02/25/workaround-for-epel-python3.4-venv-on-centos7/</guid>
      <description>はじめに CentOS 7のpythonパッケージは2.7.xなので、3系を使うには別途インストールする必要があります。 EPELの python34`` パッケージを使うと ``python3 -m</description>
    </item>
    
    <item>
      <title>iptables-restoreのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/02/24/iptables-restore-code-reading/</link>
      <pubDate>Fri, 24 Feb 2017 00:25:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/02/24/iptables-restore-code-reading/</guid>
      <description>はじめに iptables-restore のコードリーディングをしてみました。 対象バージョンは CentOS 7 のパッケージに合わせて 1.4.21 です。 $ rpm -qf `which iptables-restore` iptables-1.4.21-17.el7.x86_64 プロジェクトページは netfilter/iptables project homepage - The netfilter.org</description>
    </item>
    
    <item>
      <title>procpsのpgrepのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/02/23/pgrep-in-procps-code-reading/</link>
      <pubDate>Thu, 23 Feb 2017 18:30:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/02/23/pgrep-in-procps-code-reading/</guid>
      <description>はじめに procps-ngのpgrepのコードリーディング に続いて CentOS 6 の pgrep についてもコードリーディングしてみました。 pgrep を含むパッケージは procps で</description>
    </item>
    
    <item>
      <title>procps-ngのpgrepのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/02/23/pgrep-in-procps-ng-code-reading/</link>
      <pubDate>Thu, 23 Feb 2017 00:20:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/02/23/pgrep-in-procps-ng-code-reading/</guid>
      <description>はじめに CentOS 7の環境でApache Traffic Server 7.0.0のサービスを起動すると traffic_cop, traffic_manager, traffic_server という3つのプロセスが立ち上がります。 [root@ats7 ~]# ps auxww | grep traffic root 20837 0.0 0.0 143076 6276 ?</description>
    </item>
    
    <item>
      <title>monitのhttpのタイムアウトのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/02/21/monit-http-timeout-code-reading/</link>
      <pubDate>Tue, 21 Feb 2017 11:10:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/02/21/monit-http-timeout-code-reading/</guid>
      <description>はじめに monitのイベントループのコードリーディング からの続きです。 socket_create関数からの流れ monitのif failed urlのコー</description>
    </item>
    
    <item>
      <title>monitのイベントループのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/02/20/monit-event-loop-code-reading/</link>
      <pubDate>Mon, 20 Feb 2017 16:46:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/02/20/monit-event-loop-code-reading/</guid>
      <description>はじめに monitのif failed urlのコードリーディング からの続きです。 Event_post関数の実装 src/event.c#L123-L222 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142</description>
    </item>
    
    <item>
      <title>monitのif failed urlのコードリーディング</title>
      <link>https://hnakamur.github.io/blog/content/post/2017/02/20/monit-if-failed-url-code-reading/</link>
      <pubDate>Mon, 20 Feb 2017 11:14:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2017/02/20/monit-if-failed-url-code-reading/</guid>
      <description>はじめに 以下のページで紹介されているような if failed url ... の挙動をコードリーディングしてみたメモです。 HOWTO use monit to monitor sites and alert users · fak3r Monit でお手軽に外部のサーバ</description>
    </item>
    
    <item>
      <title>Goで複数のリモートのワーカーにジョブを実行させるremoteworkersというパッケージを書いた</title>
      <link>https://hnakamur.github.io/blog/content/post/2016/06/12/wrote_remoteworkers_go_package/</link>
      <pubDate>Sun, 12 Jun 2016 21:53:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2016/06/12/wrote_remoteworkers_go_package/</guid>
      <description>なぜ書いたか 仕事で複数のサーバで同じ処理を実行して結果を集めたいというニーズがあって、各サーバをgRPCのサーバにするという実装でとりあえず</description>
    </item>
    
    <item>
      <title>HomebrewのPython2とPython3でvirtualenv環境を作成する手順メモ</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/07/26/how_to_use_venv_with_homebrew_python2_and_3/</link>
      <pubDate>Sun, 26 Jul 2015 02:28:00 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/07/26/how_to_use_venv_with_homebrew_python2_and_3/</guid>
      <description>はじめに ここしばらくriywo/anyenvとyyuu/pyenvでPython 2.7.10をPython 3.4.3を使い分けてきたのですが</description>
    </item>
    
    <item>
      <title>Hugoに移行した私のブログの記事追加手順</title>
      <link>https://hnakamur.github.io/blog/content/post/2015/04/19/my_hugo_blog_workflow/</link>
      <pubDate>Sun, 19 Apr 2015 00:17:59 +0900</pubDate>
      
      <guid>https://hnakamur.github.io/blog/content/post/2015/04/19/my_hugo_blog_workflow/</guid>
      <description>はじめに OctopressからHugoへ移行した | SOTAを参考に私のブログもしばらく前にHugoに移行しました。deeeetさん、ありがと</description>
    </item>
    
  </channel>
</rss>