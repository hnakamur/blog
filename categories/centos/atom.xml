<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: CentOS | hnakamur's blog at github]]></title>
  <link href="http://hnakamur.github.com/blog/categories/centos/atom.xml" rel="self"/>
  <link href="http://hnakamur.github.com/blog/"/>
  <updated>2012-06-27T11:51:38+09:00</updated>
  <id>http://hnakamur.github.com/blog/</id>
  <author>
    <name><![CDATA[Hiroaki Nakamura]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[daemontoolsの使い方]]></title>
    <link href="http://hnakamur.github.com/blog/2012/06/21/how-to-use-daemontools/"/>
    <updated>2012-06-21T17:48:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/06/21/how-to-use-daemontools</id>
    <content type="html"><![CDATA[<p><a href="http://www.nslabs.jp/daemontools.rhtml">daemontoolsを使う | Netsphere Laboratories</a>を参考にしました。ありがとうございます。</p>

<h2>私的ルール</h2>

<h3>無効化したサービスは/service/.disabled/に移動</h3>

<p>/service/以下に.で始まるフォルダ名にすると無視されるということですが、my_service_nameを.my_service_nameと変えるのはタイプが面倒なので、/service/.disabledというフォルダを作って無効化するときはその下に移動することにしました。</p>

<h3>作業するときは/serviceに移動</h3>

<p>svcやsvstatにフルパスを指定しても動くのですが、/service/と/service/.disabled間で移動するときにタイプ量が増えるので、最初にcd /serviceしてから作業することにしました。</p>

<h2>手順</h2>

<h3>サービス追加</h3>

<p>node-virtualhost1.example.comという名前でサービスを追加する例。
exec -cの後はサービスに応じて変更します。</p>

<p>```
cd /service
mkdir -p .disabled/node-virtualhost1.example.com
cat &lt;<EOF > .disabled/node-virtualhost1.example.com/run</p>

<h1>!/bin/sh</h1>

<p>exec -c /usr/local/node-v0.6.19/bin/node /var/www/app/virtualhost1.example.com/hello.js
EOF
chmod 755 .disabled/node-virtualhost1.example.com/run
```</p>

<h3>サービス有効化</h3>

<p><code>
cd /service
mv .disabled/node-virtualhost1.example.com .
</code></p>

<h4>状態確認</h4>

<p>```</p>

<h1>svstat node-virtualhost1.example.com/</h1>

<p>node-virtualhost1.example.com/: up (pid 1493) 3 seconds
```</p>

<h3>サービス無効化</h3>

<p><code>
cd /service
mv node-virtualhost1.example.com .disabled/
svc -tx .disabled/node-virtualhost1.example.com
</code></p>

<h4>状態確認</h4>

<p>```</p>

<h1>svstat .disabled/node-virtualhost1.example.com/</h1>

<p>.disabled/node-virtualhost1.example.com/: supervise not running
```</p>

<h3>サービス一時停止(Down)</h3>

<p><code>
cd /service
svc -d node-virtualhost1.example.com
</code></p>

<h4>状態確認</h4>

<p>```</p>

<h1>svstat node-virtualhost1.example.com/</h1>

<p>node-virtualhost1.example.com/: down 1 seconds, normally up
```</p>

<h3>サービス一時停止からの再開(Up)</h3>

<p><code>
cd /service
svc -u node-virtualhost1.example.com
</code></p>

<h4>状態確認</h4>

<p>```</p>

<h1>svstat node-virtualhost1.example.com/</h1>

<p>node-virtualhost1.example.com/: up (pid 1512) 1 seconds
```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[daemontoolsのインストール手順]]></title>
    <link href="http://hnakamur.github.com/blog/2012/06/21/how-to-install-daemontools/"/>
    <updated>2012-06-21T17:36:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/06/21/how-to-install-daemontools</id>
    <content type="html"><![CDATA[<p>CentOS6.2で確認。</p>

<p>OS起動時にdaemontoolsを起動する設定は<a href="http://cr.yp.to/daemontools/start.html">How to start daemontools</a>を参照。</p>

<p><code>
yum install -y make gcc rpm-build &amp;&amp;
rpm -ivh http://mirrors.qmailtoaster.com/daemontools-toaster-0.76-1.3.6.src.rpm &amp;&amp;
rpmbuild -ba /root/rpmbuild/SPECS/daemontools-toaster.spec &amp;&amp;
rpm -ivh /root/rpmbuild/RPMS/x86_64/daemontools-toaster-0.76-1.3.6.x86_64.rpm &amp;&amp;
cat &gt; /etc/init/svscan.conf &lt;&lt;EOF &amp;&amp;
start on runlevel [12345]
stop on runlevel [^12345]
respawn
exec /command/svscanboot
EOF
/command/svscanboot &amp;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[CentOS6でchef-soloとknife-soloをセットアップ]]></title>
    <link href="http://hnakamur.github.com/blog/2012/05/04/setup-chef-solo-and-knife-solo-on-centos6/"/>
    <updated>2012-05-04T15:03:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/05/04/setup-chef-solo-and-knife-solo-on-centos6</id>
    <content type="html"><![CDATA[<h2>なぜ？</h2>

<p><a href="http://higelog.brassworks.jp/?p=654">chef-soloで作業環境構築の自動化 | ひげろぐ</a> を参考に、Chefサーバは使いたくないけど、chef-soloとknifeを使いたい！
ということで、そういう環境を作るためのスクリプトを作りました。
だいぶ前から試行錯誤してたけど、ようやくできたので公開。</p>

<h2>セットアップスクリプト</h2>

<p>chef-soloやknifeはrootユーザで実行する想定です。</p>

<p>このスクリプトではruby、rubygems、ruby-devel、make、gccをyumで、
chefとknife-soloをgemでインストールします。</p>

<p>chef-soloやknife実行時にオプションをなるべく指定不要にするため、設定ファイルはデフォルトの場所に配置しています。</p>

<ul>
<li>/etc/chef/solo.rb</li>
<li>/root/.chef/knife.rb</li>
</ul>


<p>その他の詳細は
<a href="https://github.com/hnakamur/setup_linux/blob/master/centos6/install_chef-solo.sh">install_chef-solo.sh</a>
を参照してください。</p>

<p>ちょっと注意が必要なのは、shのヒアドキュメントで<code>`hostname`</code>が展開されるのを避けるために、<code>\`hostname\`</code>とエスケープしていることです。
＃余談ですが、markdownだとバックスラッシュやバックティックはエスケープしないといけないんですね。</p>

<p>knife.rbの設定は
<a href="https://gist.github.com/1039666">Base "knife" configuration for a standard chef-solo setup — Gist</a> を書き換えて作りました。が、まだよく理解していません。</p>

<h2>セットアップ手順</h2>

<p>特に設定変更が不要であれば
<code>
curl https://raw.github.com/hnakamur/setup_linux/master/centos6/install_chef-solo.sh | sudo sh
</code>
でセットアップできます。変更したい場合はとってきて書き換えてから実行してください。</p>

<h2>クックブック作成例</h2>

<p>例えば</p>

<p><code>
knife cookbook create ntp
</code></p>

<p>と実行すると、/etc/chef/site-cookbooks/ntp/ 以下にフォルダ構成とファイルが作られます。あとは編集して作ります。</p>

<h2>実行例</h2>

<p>/root/.chef/chef.json
<code>
{
  "run_list":["recipe[ntp]"]
}
</code>
というファイルを用意して
<code>
sudo chef-solo -j /root/.chef/chef.json
</code>
で実行します。</p>

<h2>私のスタンス</h2>

<p>minimalistな私は正直 <a href="http://wiki.opscode.com/display/chef/Home">Chef</a> はそんなに好きじゃないです。</p>

<p><a href="http://wiki.opscode.com/display/chef/Architecture">Architecture</a> を見ると、CouchDB, Solr, RabbitMQ が必要って、高々サーバをセットアップするのになんでこんなにいろいろ稼働させる必要があるの？って感じてしまいます。セットアップ手順が自動化されたとしても、自分のマシンでそれだけのサーバが動いているのがもったいない、無駄にマシンリソースを消費してエコじゃない、と思います。</p>

<p>そもそも私がやるような3台構成ぐらいの環境構築にそこまで大掛かりな仕組みはいらないというのもありますし。</p>

<p><a href="http://rexify.org/">(R)?ex - A simple framework to simplify systemadministration</a> はsshの鍵認証またはパスワード認証で接続してリモートで処理を実行できるのでこちらのほうが好きです。リモートマシンのセットアップにsshサーバ以外に何か必要というのは、なんか違う気がするんですよね。</p>

<p>それからクックブック1つに対して、フォルダやファイルがたくさんできるのもあまり好きじゃないです。設定管理ツールじゃなくてパッケージ管理ツールですけどHomebrewはFormulaが1つのrubyスクリプトでこれは非常に編集が楽なんです。RexはRexfileにテンプレートファイルを含めることも可能なので</p>

<p>あと処理を手続き的に記述するではなく、最終的な状態を宣言的に記述するというスタイルですが、これも限定的だと思っています。結局のところ、複雑な処理だと処理順序も関係するので、やらせたいことを手続き的にかける方がストレートなのかなと。実行する必要があるかチェックする処理を最初に入れて、それを含めた一連の処理を一つのコマンドとして提供すれば、利用側のコードはシンプルになるのでそれで十分だと思います。</p>

<p>あと、実行対象の処理をJSONファイルに書いて、ファイル名を引数で指定して実行ってのもイケてない。rakeやRexのようにタスクを引数に指定させて欲しいです。</p>

<p>と文句ばかり言っているようですが、DevOpsを提唱したopscode.comが出しているツールだし、一度は使ってみるべきということで。あと、まわりでも使っているので、ツールは揃えておいたほうが良いかなという思いもあります。私自身はいいのですが、まわりで使わされる人が何種類も覚えることを強要されるのは無駄だろうし。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[/etc/sudoers.d/を使う→やっぱり止め]]></title>
    <link href="http://hnakamur.github.com/blog/2012/05/04/use-slash-etc-slash-sudoers-dot-d-slash/"/>
    <updated>2012-05-04T11:16:00+09:00</updated>
    <id>http://hnakamur.github.com/blog/2012/05/04/use-slash-etc-slash-sudoers-dot-d-slash</id>
    <content type="html"><![CDATA[<p>これまでいつも/etc/sudoersを編集していたのですが、よくみるとファイル末尾に</p>

<p>```</p>

<h2>Read drop-in files from /etc/sudoers.d (the # here does not mean a comment)</h2>

<h1>includedir /etc/sudoers.d</h1>

<p>```</p>

<p>と書いてあって、/etc/sudoers.d/にファイルを置けば/etc/sudoersを編集しなくても済むんですね。（しかしなんでincludedirには#をつける仕様なんだろ。今までずっとコメントアウトされていると思ってました。その上のコメント行に#ついててもコメントじゃないと書いてあるのに気づいたのが今日です）</p>

<p>/etc/sudoers.d/hnakamur を
<code>
Defaults:hnakamur !requiretty
hnakamur ALL=(ALL)      NOPASSWD: ALL
</code>
として試してみました。</p>

<p>sudoすると
<code>
sudo: /etc/sudoers.d/hnakamur is mode 0644, should be 0440
</code>
というエラー。</p>

<p><code>
chmod 0440 /etc/sudoers.d/hnakamur
</code>
して再度試すとOKでした。</p>

<p>visudoではこのファイルは編集対象ではないので、複数人で同時に編集しないよう連絡しあうなどの運用が別途必要です。このせいでみんな使ってないんだろうか？</p>

<h2>/etc/sudoers.d/* の罠にはまった</h2>

<p>(2012-05-05 追記)</p>

<p>使うべきでない理由がわかりました！</p>

<p>/etc/sudoers.d/*のファイルで文法エラーのまま保存してしまうと、次にsudoを実行した時に以下の様なエラーが出ました。</p>

<p>```
$ sudo -s</p>

<blockquote><blockquote><blockquote><p>/etc/sudoers.d/hnakamur: syntax error near line 2 &lt;&lt;&lt;
sudo: parse error in /etc/sudoers.d/hnakamur near line 2
sudo: no valid sudoers sources found, quitting
```</p></blockquote></blockquote></blockquote>

<p>こうなるとsu -でrootになるしかないです。/etc/sudoers.d/*を使わずvisudoで編集する場合は、保存時に文法エラーがある場合は抜けずに再編集が可能なので安全です。</p>

<h2>visudoを使えば/etc/sudoers.d/* でも大丈夫</h2>

<p>(2012-05-05 追記)</p>

<p>さらに追記。visudoは/etc/sudoers.d/*に文法がエラーがある場合も抜ける前にプロンプトが出ました。人手で編集するときは必ずvisudoを使うよう肝に銘じます。</p>

<h2>/etc/sudoers.d/* だとvisudoでもダメなパターンがありました</h2>

<p>(2012-05-05 追記)</p>

<p>さらに追記。
visudoで起動して:e /etc/sudoers.d/hnakamurと切り替えて編集して:wqで保存して抜けると、文法エラーがあってもスルーしてしまいました。rootでもう一度起動して何も変更せずに:qで終わると文法エラーに反応してくれるのですが。</p>

<p>ということで、結論としては/etc/sudoers.d/*は私は使わないことにしました。</p>
]]></content>
  </entry>
  
</feed>
