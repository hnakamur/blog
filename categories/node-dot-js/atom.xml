<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: node.js | hnakamur's blog at github]]></title>
  <link href="http://hnakamur.github.io/blog/categories/node-dot-js/atom.xml" rel="self"/>
  <link href="http://hnakamur.github.io/blog/"/>
  <updated>2014-12-02T00:17:32+09:00</updated>
  <id>http://hnakamur.github.io/blog/</id>
  <author>
    <name><![CDATA[Hiroaki Nakamura]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[node.jsのfs.watch()で設定ファイルが更新されたらリロード]]></title>
    <link href="http://hnakamur.github.io/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo/"/>
    <updated>2012-06-27T14:25:00+09:00</updated>
    <id>http://hnakamur.github.io/blog/2012/06/27/node-dot-jsfalsefs-dot-watch-deshe-ding-huairugageng-xin-saretararirodo</id>
    <content type="html"><![CDATA[<p><a href="http://stackoverflow.com/questions/1972242/auto-reload-of-files-in-node-js">javascript - Auto-reload of files in Node.js - Stack Overflow</a>によると、モジュールをリロードするには<a href="https://github.com/isaacs/node-supervisor">isaacs/node-supervisor</a>がよさそうです。</p>

<p>が、今回は設定ファイルのリロードなのでfs.watch(filename, [options], [listener]) で十分ということで試してみました。
<a href="http://nodejs.org/api/fs.html#fs_fs_watch_filename_options_listener">File System Node.js v0.8.0 Manual &amp; Documentation</a>
によると環境によっては使えないそうなので注意が必要です。</p>

<p>CentOS 6.2では使えました。</p>

<p>watch.js
<code>
var fs = require('fs');
fs.watch('router.json', function(ev, filename) {
  if (filename) {
    fs.readFile(filename, function(err, data) {
      if (err) throw err;
      var router = JSON.parse(data);
      console.log(router);
    });
  }
});
</code></p>

<p>router.json
<code>
{
  "vhost1.example.com": "127.0.0.1:3000",
  "vhost2.example.com": "127.0.0.1:3001",
  "vhost3.example.com": "127.0.0.1:3002",
  "vhost4.example.com": "127.0.0.1:3003"
}
</code></p>

<pre><code>node watch
</code></pre>

<p>で起動して
<code>
touch router.json
</code>
を実行すると
<code>
{ 'vhost1.example.com': '127.0.0.1:3000',
  'vhost2.example.com': '127.0.0.1:3001',
  'vhost3.example.com': '127.0.0.1:3002',
  'vhost4.example.com': '127.0.0.1:3003' }
</code>
と出力されます。</p>

<p>ただし、vimでrouter.jsonを開いて:wで保存すると下記のエラーでnodeが異常終了してしまいました。
<code>
/var/www/app/watch-sample/watch.js:6
      if (err) throw err;
                     ^
Error: ENOENT, open 'router.json'
</code></p>

<pre><code>node watch
</code></pre>

<p>再起動後、vimでrouter.jsonを開いて:wqで保存して終了すると異常終了はしませんでしたが、下記のようにコールバックが4回も呼び出されてしまいました。
<code>
{ 'vhost1.example.com': '127.0.0.1:3000',
  'vhost2.example.com': '127.0.0.1:3001',
  'vhost3.example.com': '127.0.0.1:3002',
  'vhost4.example.com': '127.0.0.1:3003' }
{ 'vhost1.example.com': '127.0.0.1:3000',
  'vhost2.example.com': '127.0.0.1:3001',
  'vhost3.example.com': '127.0.0.1:3002',
  'vhost4.example.com': '127.0.0.1:3003' }
{ 'vhost1.example.com': '127.0.0.1:3000',
  'vhost2.example.com': '127.0.0.1:3001',
  'vhost3.example.com': '127.0.0.1:3002',
  'vhost4.example.com': '127.0.0.1:3003' }
{ 'vhost1.example.com': '127.0.0.1:3000',
  'vhost2.example.com': '127.0.0.1:3001',
  'vhost3.example.com': '127.0.0.1:3002',
  'vhost4.example.com': '127.0.0.1:3003' }
</code>
実用するには前回の設定内容と比較して変わっている場合だけ処理するとか、設定ファイルを直接見るのではなく更新完了通知用の専用ファイルを用意してそちらをtouchするとか、何らかの対処が必要そうです。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[node-http-proxyでバーチャルホストで振り分けつつhttp/https->websocketリバースプロキシの実験]]></title>
    <link href="http://hnakamur.github.io/blog/2012/06/27/node-http-proxydebatiyaruhosutodezhen-rifen-ketutuhttp-slash-https-%3Ewebsocketribasupurokisifalseshi-yan/"/>
    <updated>2012-06-27T11:36:00+09:00</updated>
    <id>http://hnakamur.github.io/blog/2012/06/27/node-http-proxydebatiyaruhosutodezhen-rifen-ketutuhttp-slash-https->websocketribasupurokisifalseshi-yan</id>
    <content type="html"><![CDATA[<p>以下の2つのページを参考に、node-http-proxyでバーチャルホストで振り分けつつ
http/httpsからwebsocketにリバースプロキシする実験をしてみました。
環境はCentOS 6.2です。ソースは<a href="https://github.com/hnakamur/node-http-proxy-websocket-sample">hnakamur/node-http-proxy-websocket-sample</a>にあります。</p>

<ul>
<li><a href="http://d.hatena.ne.jp/replication/20111108/1320762287">５分くらいで出来るnode.js(0.6) + socket.io(0.8x)のサンプルプログラム - 大人になったら肺呼吸</a></li>
<li><a href="https://github.com/nodejitsu/node-http-proxy">nodejitsu/node-http-proxy</a></li>
</ul>


<pre>
                              +---------------+
                       +------+ VHost1App/app |
                       |      | port 3000     |
 +--------------+      |      +---------------+
-+ proxy-vhost  +------+
 | port 80, 443 |      |      +---------------+
 +--------------+      +------+ VHost2App/app |
                              | port 3001     |
                              +---------------+
</pre>


<p>上記の構成で、
vhost1.example.comというホスト名でアクセスしたらVHost1/app、
vhost2.example.comというホスト名でアクセスしたらVHost2/app
にリバースプロキシするようにします。
*.example.comというワイルドカードの自己証明書でproxy-vhostにてSSLを処理します。</p>

<h2>実行手順</h2>

<h3>自己証明書とパスフレーズ無しの秘密鍵を生成。</h3>

<p>以下、ドメインexample.comの部分は適宜変更してください。</p>

<pre><code>openssl req -new -newkey rsa:2048 -x509 -nodes -days 365 -set_serial 0 \
  -subj '/C=JP/ST=Kanagawa/L=Yokohama City/CN=*.example.com' \
  -out /etc/pki/tls/certs/wildcard.example.com.crt \
  -keyout /etc/pki/tls/private/wildcard.example.com.key
</code></pre>

<h3>nodeモジュールインストール</h3>

<p>私の環境では/usr/local/node-v0.6.19にnode.jsをインストールしているのでPATHを通してから実行します。
<code>
export PATH=/usr/local/node-v0.6.19/bin:$PATH
</code></p>

<pre><code>npm install socket.io -g
npm install express@2.5.10 -g
npm install ejs -g
npm install http-proxy -g
</code></pre>

<p>なお、モジュールをグルーバルにインストールしているのは<a href="https://github.com/hnakamur/node-http-proxy-websocket-sample">hnakamur/node-http-proxy-websocket-sample</a>にモジュールを含めたくないからで、実際はローカルにインストールしても構いません。</p>

<h3>サーバ起動</h3>

<p>私の環境では/usr/local/node-v0.6.19にnode.jsをインストールしているのでNODE_PATHを通してから実行します。
<code>
export NODE_PATH=/usr/local/node-v0.6.19/lib/node_modules
</code></p>

<pre><code>node VHost1App/app &amp;
node VHost2App/app &amp;
node proxy-vhost &amp;
</code></pre>

<h3>ローカルマシンの/etc/hostsに以下のエントリ追加</h3>

<p>IPアドレスは実際のサーバに合わせて変更してください。</p>

<pre><code>192.0.2.2 vhost1.example.com vhost2.example.com
</code></pre>

<h3>ブラウザでアクセス</h3>

<p><a href="https://vhost1.example.com/">https://vhost1.example.com/</a>
や
<a href="https://vhost2.example.com/">https://vhost2.example.com/</a>
にアクセスします。自己証明書なのでエラーになりますが受け入れて進んでください。
バーチャルホスト毎にそれぞれ内容が異なることを確認します。</p>
]]></content>
  </entry>
  
</feed>
