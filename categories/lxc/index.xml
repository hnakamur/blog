<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Lxc on hnakamur&#39;s blog at github</title>
    <link>/blog/categories/lxc/</link>
    <description>Recent content in Lxc on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Mon, 01 Dec 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="/blog/categories/lxc/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>LXDを試してみた</title>
      <link>/blog/2014/12/01/lxd-the-linux-container-daemon/</link>
      <pubDate>Mon, 01 Dec 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/12/01/lxd-the-linux-container-daemon/</guid>
      <description>

&lt;h2 id=&#34;はじめに&#34;&gt;はじめに&lt;/h2&gt;

&lt;p&gt;LXDに関するページをいくつか紹介します。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;&lt;a href=&#34;https://lists.linuxcontainers.org/pipermail/lxc-users/2014-November/007978.html&#34;&gt;[lxc-users] LXD an &amp;ldquo;hypervisor&amp;rdquo; for containers (based on liblxc)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;LXCメーリングリストに投稿されたLXDのアナウンスメール&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;LXDのホームページ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://github.com/lxc/lxd&#34;&gt;lxc/lxd githubレポジトリ&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;https://insights.ubuntu.com/2014/11/04/lxd-the-linux-container-daemon/&#34;&gt;Dustin KirklandさんによるLXDの紹介 (2分7秒)&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;LXDの発音は&lt;a href=&#34;https://www.youtube.com/watch?v=U-lXf85Mhno&amp;amp;t=1m18s&#34;&gt;1分18秒あたり&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&#34;http://www.zdnet.com/ubuntu-lxd-not-a-docker-replacement-a-docker-enhancement-7000035463/&#34;&gt;Ubuntu LXD: Not a Docker replacement, a Docker enhancement | ZDNet&lt;/a&gt;

&lt;ul&gt;
&lt;li&gt;「LXDはdockerを置き換えるものではなく強化するもの」というタイトルの解説記事&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;目指しているのは以下の様なものらしいです。&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;デフォルトでセキュア

&lt;ul&gt;
&lt;li&gt;コンテナを非rootユーザで稼働できる&lt;/li&gt;
&lt;li&gt;コンテナを隔離して安全に動かせる&lt;/li&gt;
&lt;/ul&gt;&lt;/li&gt;
&lt;li&gt;コンテナでは単一プロセスを動かすだけではなく完全なOS環境を動かす&lt;/li&gt;
&lt;li&gt;リモートのイメージ管理サービスと連携してライブマイグレーションを可能にする&lt;/li&gt;
&lt;li&gt;OpenStackとも連携&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&#34;セットアップ&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;Ubuntu 14.04で試しました。
バイナリパッケージをインストールする手順とソースからビルドする手順を書いておきますが、実際に試したのは後者です。正確には最初前者を試したのですが、その後何してよいかドキュメントが見当たらないので後者を試した感じです。&lt;/p&gt;

&lt;h3 id=&#34;バイナリパッケージをインストールする手順&#34;&gt;バイナリパッケージをインストールする手順&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;http://www.ubuntu.com/cloud/tools/lxd&#34;&gt;The next hypervisor: LXD is fast, secure container management for Linux | Cloud | Ubuntu&lt;/a&gt;の&amp;rdquo;Getting started with LXD&amp;rdquo;に書いてあります。&lt;/p&gt;

&lt;p&gt;add-apt-repositoryを使うため事前にsoftware-properties-commonパッケージをインストールしておく必要があります。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo aptitude install software-properties-common
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;その後以下のコマンドを実行します。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo add-apt-repository cloud-archive:juno
sudo apt-get update
sudo apt-get install nova-compute-flex
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;ソースからビルドする手順&#34;&gt;ソースからビルドする手順&lt;/h3&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/lxd#installing-the-dependencies&#34;&gt;lxc/lxd&lt;/a&gt;の手順に従います。&lt;/p&gt;

&lt;p&gt;以下のコマンドで依存ライブラリをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install lxc lxc-dev mercurial git pkg-config
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Goをインストールします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo apt-get install software-properties-common
sudo add-apt-repository ppa:ubuntu-lxc/lxd-daily
sudo apt-get update
sudo apt-get install golang
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;GOPATHのディレクトリを作成して、GOPATH環境変数を設定します。
以下はbashを使っている想定で ~/.bashrc に追加してシェルを再起動する例です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;mkdir -p ~/go
echo &#39;export GOPATH=$HOME/go&#39; &amp;gt;&amp;gt; ~/.bashrc
exec $SHELL -l
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;go getしてソースディレクトリに移動してビルドします。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;go get github.com/lxc/lxd
cd $GOPATH/src/github.com/lxc/lxd
go get -v -d ./...
make
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;./lxc/lxcと./lxd/lxdという2つの実行ファイルが作られます。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;vagrant@ubuntu-1404:~/go/src/github.com/lxc/lxd$ file ./lxc/lxc ./lxd/lxd
./lxc/lxc: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=a317752267685a543f724c02c2fb827e03564236, not stripped
./lxd/lxd: ELF 64-bit LSB  executable, x86-64, version 1 (SYSV), dynamically linked (uses shared libs), for GNU/Linux 2.6.24, BuildID[sha1]=8f4ff9b64ecda66a2269c18fd5c440620d548da3, not stripped
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;lxdはlxdのデーモンです。lxcはlxdに通信するクライアントプログラムです。&lt;a href=&#34;http://gopkg.in/lxc/go-lxc.v2&#34;&gt;go-lxc.v2 - gopkg.in/lxc/go-lxc.v2&lt;/a&gt;というLXCのGoバインディングライブラリを使用しています。&lt;/p&gt;

&lt;h2 id=&#34;セットアップ-1&#34;&gt;セットアップ&lt;/h2&gt;

&lt;p&gt;ビルド後以下の環境整備が必要です。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;sudo mkdir -p /var/lib/lxd
sudo chown $USER:$USER /var/lib/lxd
echo &amp;quot;$USER:1000000:65536&amp;quot; | sudo tee -a /etc/subuid /etc/subgid
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;使い方&#34;&gt;使い方&lt;/h2&gt;

&lt;h3 id=&#34;lxdの起動&#34;&gt;lxdの起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxd/lxd &amp;amp;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ作成&#34;&gt;lxcのコンテナ作成&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc create iamge:ubuntu foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;READMEでは &lt;code&gt;image:ubuntu&lt;/code&gt; をつけていませんが、これだと以下の様なエラーになりました。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc create baz
error: Only the default ubuntu image is supported. Try `lxc create images:ubuntu foo`.
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ起動&#34;&gt;lxcのコンテナ起動&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc start foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ一覧表示&#34;&gt;lxcのコンテナ一覧表示&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc
foo
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;なお、通常のlxcとはコンテナの管理が別になっているのか(要確認)、 &lt;code&gt;lxc-ls&lt;/code&gt; しても fooは表示されませんでした。&lt;/p&gt;

&lt;h3 id=&#34;lxcのコンテナ停止&#34;&gt;lxcのコンテナ停止&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc stop foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxcのコンテナ停止-1&#34;&gt;lxcのコンテナ停止&lt;/h3&gt;

&lt;pre&gt;&lt;code&gt;./lxc/lxc delete foo
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;lxc-shellが未実装&#34;&gt;lxc shellが未実装！&lt;/h3&gt;

&lt;p&gt;コンテナでコマンドを実行してみたいところなのですが、 &lt;code&gt;lxc shell&lt;/code&gt; というサブコマンドは未実装だそうです。&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;$ ./lxc/lxc help
Usage: lxc [subcommand] [options]
Available commands:
  config     - Manage configuration.
  create     - lxc create images:ubuntu &amp;lt;name&amp;gt;
  delete     - lxc delete &amp;lt;resource&amp;gt;
  finger     - Fingers the lxd instance to check if it is up and working.
  freeze     - Changes a containers state to freeze.
  help       - Presents details on how to use lxd.
  list       - Lists the available resources.
  remote     - Manage remote lxc servers.
  restart    - Changes a containers state to restart.
  shell      - Start a shell or specified command (NOT IMPLEMENTED) in a container.
  start      - Changes a containers state to start.
  stop       - Changes a containers state to stop.
  unfreeze   - Changes a containers state to unfreeze.
  version    - Prints the version number of lxd.
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;ソースを見ても &lt;a href=&#34;https://github.com/lxc/lxd/blob/a315c07c632188f7d37fa8dbbe3f1b7d87ab34de/lxc/shell.go#L38-L42&#34;&gt;lxd/shell.go at a315c07c632188f7d37fa8dbbe3f1b7d87ab34de · lxc/lxd&lt;/a&gt; のあたりにTODOと書かれています。&lt;/p&gt;

&lt;p&gt;ただ、&lt;a href=&#34;https://github.com/lxc/go-lxc&#34;&gt;lxc/go-lxc&lt;/a&gt;のソースを見ると、コンテナ内でコマンドを実行するための関数はあるのですが、&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;https://github.com/lxc/go-lxc/blob/bc0a9447e0be56f8e35d0affe83a92e638308e2f/container.go#L422-L423&#34;&gt;https://github.com/lxc/go-lxc/blob/bc0a9447e0be56f8e35d0affe83a92e638308e2f/container.go#L422-L423&lt;/a&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;// Execute executes the given command in a temporary container.
func (c *Container) Execute(args ...string) ([]byte, error) {
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;コマンド実行後に標準出力の結果を戻り値で受け取るようになっています。&lt;/p&gt;

&lt;p&gt;シェルを起動してインタラクティブに入出力するには、標準入力、標準出力、標準エラー出力をストリームのようにリアルタイムにやりとりするような関数が必要だと思います。&lt;/p&gt;

&lt;h2 id=&#34;おわりに&#34;&gt;おわりに&lt;/h2&gt;

&lt;p&gt;早く &lt;code&gt;lxc shell&lt;/code&gt; が実装されて欲しいですね！&lt;/p&gt;

&lt;p&gt;2015-04-23 追記&lt;/p&gt;

&lt;p&gt;&lt;a href=&#34;/blog/blog/2015/04/23/try-lxd-0.7-with-vagrant/&#34;&gt;LXD 0.7ではlxc execでシェルの対話操作もできるようになっていました&lt;/a&gt;に書きましたが、 &lt;code&gt;lxc exec コンテナ名 /bin/bash&lt;/code&gt; でシェルの対話操作もできるようになっていました。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>