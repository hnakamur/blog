<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Diagram on hnakamur&#39;s blog at github</title>
    <link>/blog/categories/diagram/</link>
    <description>Recent content in Diagram on hnakamur&#39;s blog at github</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>ja-JP</language>
    <lastBuildDate>Sun, 07 Sep 2014 00:00:00 +0000</lastBuildDate>
    <atom:link href="/blog/categories/diagram/index.xml" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Diagram as a Code</title>
      <link>/blog/2014/09/07/diagram-as-a-code/</link>
      <pubDate>Sun, 07 Sep 2014 00:00:00 +0000</pubDate>
      
      <guid>/blog/2014/09/07/diagram-as-a-code/</guid>
      <description>

&lt;p&gt;この記事はpplogに書いた記事 &lt;a href=&#34;https://www.pplog.net/u/hnakamur2&#34;&gt;https://www.pplog.net/u/hnakamur2&lt;/a&gt; の転載です。&lt;/p&gt;

&lt;h2 id=&#34;背景&#34;&gt;背景&lt;/h2&gt;

&lt;p&gt;プログラマである私は、既存の作図ツールやシステムに不満があります。こうなってたらいいのにという点を整理してみます。&lt;/p&gt;

&lt;h3 id=&#34;図の変更履歴をわかりやすい形で見たい&#34;&gt;図の変更履歴をわかりやすい形で見たい&lt;/h3&gt;

&lt;p&gt;ここでの前提として図は概要をつかむためのものと考えています。&lt;/p&gt;

&lt;p&gt;データベースのテーブル定義から完全なE-R図を自動作成したり、ソースコードから全ての属性を含んだクラス図を作るといったケースは今回の想定外です。&lt;/p&gt;

&lt;p&gt;私が図が欲しいと思うのは概要を把握したい場合なので、むしろ枝葉末節は省いて大まかな構造だけを見たいわけです。何が重要で何が枝葉末節かは人の主観が入るので、図の元ネタは人が書くことになります。となるとバージョン管理して変更履歴を追えるようにしたいと思うのは自然でしょう。&lt;/p&gt;

&lt;p&gt;文書はAsciiDocなどのテキスト形式で書けばgitでバージョン管理で差分も見られます。しかし、図はどうするか。バイナリ形式だと差分を表示しても理解できないですし、SVGなら差分は表示可能ですが理解しやすいとは言えないと思います。&lt;/p&gt;

&lt;h3 id=&#34;図の要素を半自動で配置したい&#34;&gt;図の要素を半自動で配置したい&lt;/h3&gt;

&lt;p&gt;たいていのGUIの作図ツールでは図の要素をマウスで配置するようになっています。整列メニューがあったりはしますが、サイズを幅だけ揃える機能はなかったりして1つずつちまちまと設定することになります。&lt;/p&gt;

&lt;p&gt;一方、PlantUMLのようにテキストで図の要素を記述する仕組みの場合、完全自動で配置されるシステムが多いです。というより手動配置のものは見たことが無いです。&lt;/p&gt;

&lt;p&gt;要素数が少ないうちは自動配置でも良いのですが、多くなってくると不満が強くなってきます。関連する要素を近くにひとかたまりで配置して、他のグループとは遠くに配置したいのです。また、グループの中でもどの順序で並べるかは明示的に指定したい。&lt;/p&gt;

&lt;p&gt;同様に、要素間を結ぶ線の引き回しの配置も半自動にしたい。図に要素を追加していく時に、配置を調整するわけですが、接続線の配置が完全手動だと修正が面倒すぎます。かと言って完全自動だと、引き回しの配置が希望通りにならなくて不満が出ます。&lt;/p&gt;

&lt;p&gt;ということで、接続線の配置のルールの一部は自動化して、残りは手動で指定するという半自動方式が欲しいわけです。&lt;/p&gt;

&lt;h2 id=&#34;解決案&#34;&gt;解決案&lt;/h2&gt;

&lt;p&gt;ということで、図の要素のテキストと配置のうち手動で指定したい部分だけをユーザが指定するテキストデータとして記述し、残りはプログラムで自動化すれば良いのではという考えが浮かびました。&lt;/p&gt;

&lt;p&gt;これはまさに&lt;a href=&#34;http://d3js.org/&#34;&gt;D3.js - Data-Driven Documents&lt;/a&gt;の名前の通りの考え方です。データドリブンでドキュメントを作るわけです。&lt;/p&gt;

&lt;p&gt;インフラ界隈で言われているInfrastracture as a Codeという言葉にのっかると、Diagram as a Codeとも言えると思います。2つ合わせるとData-Driven Diagram as a Codeかなw&lt;/p&gt;

&lt;p&gt;まだ荒削りですけど、実際にd3.jsを使ったサンプルプログラムを書いて試しています。
&lt;a href=&#34;http://qiita.com/hnakamur/items/cd7610f63f5275e774a4&#34;&gt;d3.jsでクラス図を書いてみた - Qiita&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;AsciiDocの文書に埋め込むためにasciidoctor-diagramのプラグインも作っています。
&lt;a href=&#34;https://github.com/hnakamur/asciidoctor-diagram-d3js&#34;&gt;https://github.com/hnakamur/asciidoctor-diagram-d3js&lt;/a&gt;&lt;/p&gt;

&lt;h2 id=&#34;diagram-as-a-codeのノウハウを共有し合えるようになりたい&#34;&gt;Diagram as a Codeのノウハウを共有し合えるようになりたい&lt;/h2&gt;

&lt;p&gt;図の要素や接続線を半自動で配置するためには、幾何学の計算アルゴリズムが重要になってきます。例えば、&lt;a href=&#34;http://qiita.com/hnakamur/items/3ce1e90aecd36883add6&#34;&gt;d3.js - 円の中心までベジェ曲線を引くときに円との交点に矢印終端を配置するサンプル - Qiita&lt;/a&gt;でもベジェ曲線と円の交点を求める計算が必要です。ネットの情報を見ながら独学でやっているだけだと、時間もかかるし挫折しがちです。&lt;/p&gt;

&lt;p&gt;ということで、Diagram as a Codeの流れが広まって、幾何学の計算のノウハウを共有し合えるようになると嬉しいなあというのが願いです。&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>