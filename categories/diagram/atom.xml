<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: diagram | hnakamur's blog at github]]></title>
  <link href="http://hnakamur.github.io/blog/categories/diagram/atom.xml" rel="self"/>
  <link href="http://hnakamur.github.io/blog/"/>
  <updated>2014-09-07T17:26:51+09:00</updated>
  <id>http://hnakamur.github.io/blog/</id>
  <author>
    <name><![CDATA[Hiroaki Nakamura]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Diagram as a Code]]></title>
    <link href="http://hnakamur.github.io/blog/2014/09/07/diagram-as-a-code/"/>
    <updated>2014-09-07T12:29:56+09:00</updated>
    <id>http://hnakamur.github.io/blog/2014/09/07/diagram-as-a-code</id>
    <content type="html"><![CDATA[<p>この記事はpplogに書いた記事 <a href="https://www.pplog.net/u/hnakamur2">https://www.pplog.net/u/hnakamur2</a> の転載です。</p>

<h2>背景</h2>

<p>プログラマである私は、既存の作図ツールやシステムに不満があります。こうなってたらいいのにという点を整理してみます。</p>

<h3>図の変更履歴をわかりやすい形で見たい</h3>

<p>ここでの前提として図は概要をつかむためのものと考えています。</p>

<p>データベースのテーブル定義から完全なE-R図を自動作成したり、ソースコードから全ての属性を含んだクラス図を作るといったケースは今回の想定外です。</p>

<p>私が図が欲しいと思うのは概要を把握したい場合なので、むしろ枝葉末節は省いて大まかな構造だけを見たいわけです。何が重要で何が枝葉末節かは人の主観が入るので、図の元ネタは人が書くことになります。となるとバージョン管理して変更履歴を追えるようにしたいと思うのは自然でしょう。</p>

<p>文書はAsciiDocなどのテキスト形式で書けばgitでバージョン管理で差分も見られます。しかし、図はどうするか。バイナリ形式だと差分を表示しても理解できないですし、SVGなら差分は表示可能ですが理解しやすいとは言えないと思います。</p>

<h3>図の要素を半自動で配置したい</h3>

<p>たいていのGUIの作図ツールでは図の要素をマウスで配置するようになっています。整列メニューがあったりはしますが、サイズを幅だけ揃える機能はなかったりして1つずつちまちまと設定することになります。</p>

<p>一方、PlantUMLのようにテキストで図の要素を記述する仕組みの場合、完全自動で配置されるシステムが多いです。というより手動配置のものは見たことが無いです。</p>

<p>要素数が少ないうちは自動配置でも良いのですが、多くなってくると不満が強くなってきます。関連する要素を近くにひとかたまりで配置して、他のグループとは遠くに配置したいのです。また、グループの中でもどの順序で並べるかは明示的に指定したい。</p>

<p>同様に、要素間を結ぶ線の引き回しの配置も半自動にしたい。図に要素を追加していく時に、配置を調整するわけですが、接続線の配置が完全手動だと修正が面倒すぎます。かと言って完全自動だと、引き回しの配置が希望通りにならなくて不満が出ます。</p>

<p>ということで、接続線の配置のルールの一部は自動化して、残りは手動で指定するという半自動方式が欲しいわけです。</p>

<h2>解決案</h2>

<p>ということで、図の要素のテキストと配置のうち手動で指定したい部分だけをユーザが指定するテキストデータとして記述し、残りはプログラムで自動化すれば良いのではという考えが浮かびました。</p>

<p>これはまさに<a href="http://d3js.org/">D3.js - Data-Driven Documents</a>の名前の通りの考え方です。データドリブンでドキュメントを作るわけです。</p>

<p>インフラ界隈で言われているInfrastracture as a Codeという言葉にのっかると、Diagram as a Codeとも言えると思います。2つ合わせるとData-Driven Diagram as a Codeかなw</p>

<p>まだ荒削りですけど、実際にd3.jsを使ったサンプルプログラムを書いて試しています。
<a href="http://qiita.com/hnakamur/items/cd7610f63f5275e774a4">d3.jsでクラス図を書いてみた - Qiita</a></p>

<p>AsciiDocの文書に埋め込むためにasciidoctor-diagramのプラグインも作っています。
<a href="https://github.com/hnakamur/asciidoctor-diagram-d3js">https://github.com/hnakamur/asciidoctor-diagram-d3js</a></p>

<h2>Diagram as a Codeのノウハウを共有し合えるようになりたい</h2>

<p>図の要素や接続線を半自動で配置するためには、幾何学の計算アルゴリズムが重要になってきます。例えば、<a href="http://qiita.com/hnakamur/items/3ce1e90aecd36883add6">d3.js - 円の中心までベジェ曲線を引くときに円との交点に矢印終端を配置するサンプル - Qiita</a>でもベジェ曲線と円の交点を求める計算が必要です。ネットの情報を見ながら独学でやっているだけだと、時間もかかるし挫折しがちです。</p>

<p>ということで、Diagram as a Codeの流れが広まって、幾何学の計算のノウハウを共有し合えるようになると嬉しいなあというのが願いです。</p>
]]></content>
  </entry>
  
</feed>
